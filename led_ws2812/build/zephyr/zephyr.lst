
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	c8 9c 00 20 01 aa 00 00 79 f2 00 00 d5 a9 00 00     ... ....y.......
    8010:	d5 a9 00 00 d5 a9 00 00 d5 a9 00 00 d5 a9 00 00     ................
	...
    802c:	39 a3 00 00 d5 a9 00 00 00 00 00 00 d9 a2 00 00     9...............
    803c:	d5 a9 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	bd a3 00 00 bd a3 00 00 bd a3 00 00 bd a3 00 00     ................
    8050:	bd a3 00 00 bd a3 00 00 bd a3 00 00 bd a3 00 00     ................
    8060:	bd a3 00 00 bd a3 00 00 bd a3 00 00 bd a3 00 00     ................
    8070:	bd a3 00 00 bd a3 00 00 bd a3 00 00 bd a3 00 00     ................
    8080:	bd a3 00 00 bd a3 00 00 bd a3 00 00 bd a3 00 00     ................
    8090:	bd a3 00 00 bd a3 00 00 bd a3 00 00 bd a3 00 00     ................
    80a0:	bd a3 00 00 bd a3 00 00 bd a3 00 00 bd a3 00 00     ................
    80b0:	bd a3 00 00 bd a3 00 00 bd a3 00 00 bd a3 00 00     ................
    80c0:	bd a3 00 00 bd a3 00 00 bd a3 00 00 bd a3 00 00     ................
    80d0:	bd a3 00 00 bd a3 00 00 bd a3 00 00 bd a3 00 00     ................
    80e0:	bd a3 00 00 bd a3 00 00 bd a3 00 00 bd a3 00 00     ................
    80f0:	bd a3 00 00 bd a3 00 00 bd a3 00 00 bd a3 00 00     ................
    8100:	bd a3 00 00 bd a3 00 00 bd a3 00 00 bd a3 00 00     ................
    8110:	bd a3 00 00 bd a3 00 00 bd a3 00 00 bd a3 00 00     ................
    8120:	bd a3 00 00 bd a3 00 00 bd a3 00 00 bd a3 00 00     ................
    8130:	bd a3 00 00 bd a3 00 00 bd a3 00 00 bd a3 00 00     ................
    8140:	bd a3 00 00 bd a3 00 00 bd a3 00 00 bd a3 00 00     ................
    8150:	bd a3 00 00                                         ....

Disassembly of section text:

00008154 <__aeabi_uldivmod>:
    8154:	b953      	cbnz	r3, 816c <__aeabi_uldivmod+0x18>
    8156:	b94a      	cbnz	r2, 816c <__aeabi_uldivmod+0x18>
    8158:	2900      	cmp	r1, #0
    815a:	bf08      	it	eq
    815c:	2800      	cmpeq	r0, #0
    815e:	bf1c      	itt	ne
    8160:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    8164:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    8168:	f000 b80c 	b.w	8184 <__aeabi_idiv0>
    816c:	f1ad 0c08 	sub.w	ip, sp, #8
    8170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8174:	f000 f808 	bl	8188 <__udivmoddi4>
    8178:	f8dd e004 	ldr.w	lr, [sp, #4]
    817c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8180:	b004      	add	sp, #16
    8182:	4770      	bx	lr

00008184 <__aeabi_idiv0>:
    8184:	4770      	bx	lr
    8186:	bf00      	nop

00008188 <__udivmoddi4>:
    8188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    818c:	4686      	mov	lr, r0
    818e:	468c      	mov	ip, r1
    8190:	4608      	mov	r0, r1
    8192:	9e08      	ldr	r6, [sp, #32]
    8194:	4615      	mov	r5, r2
    8196:	4674      	mov	r4, lr
    8198:	4619      	mov	r1, r3
    819a:	2b00      	cmp	r3, #0
    819c:	f040 80c1 	bne.w	8322 <__udivmoddi4+0x19a>
    81a0:	4285      	cmp	r5, r0
    81a2:	fab2 f282 	clz	r2, r2
    81a6:	d945      	bls.n	8234 <__udivmoddi4+0xac>
    81a8:	b14a      	cbz	r2, 81be <__udivmoddi4+0x36>
    81aa:	f1c2 0320 	rsb	r3, r2, #32
    81ae:	fa00 fc02 	lsl.w	ip, r0, r2
    81b2:	4095      	lsls	r5, r2
    81b4:	4094      	lsls	r4, r2
    81b6:	fa2e f303 	lsr.w	r3, lr, r3
    81ba:	ea43 0c0c 	orr.w	ip, r3, ip
    81be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    81c2:	b2a8      	uxth	r0, r5
    81c4:	0c23      	lsrs	r3, r4, #16
    81c6:	fbbc f8fe 	udiv	r8, ip, lr
    81ca:	fb0e cc18 	mls	ip, lr, r8, ip
    81ce:	fb08 f900 	mul.w	r9, r8, r0
    81d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    81d6:	4599      	cmp	r9, r3
    81d8:	d928      	bls.n	822c <__udivmoddi4+0xa4>
    81da:	18eb      	adds	r3, r5, r3
    81dc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    81e0:	d204      	bcs.n	81ec <__udivmoddi4+0x64>
    81e2:	4599      	cmp	r9, r3
    81e4:	d902      	bls.n	81ec <__udivmoddi4+0x64>
    81e6:	f1a8 0702 	sub.w	r7, r8, #2
    81ea:	442b      	add	r3, r5
    81ec:	eba3 0309 	sub.w	r3, r3, r9
    81f0:	b2a4      	uxth	r4, r4
    81f2:	fbb3 fcfe 	udiv	ip, r3, lr
    81f6:	fb0e 331c 	mls	r3, lr, ip, r3
    81fa:	fb0c f000 	mul.w	r0, ip, r0
    81fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8202:	42a0      	cmp	r0, r4
    8204:	d914      	bls.n	8230 <__udivmoddi4+0xa8>
    8206:	192c      	adds	r4, r5, r4
    8208:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    820c:	d204      	bcs.n	8218 <__udivmoddi4+0x90>
    820e:	42a0      	cmp	r0, r4
    8210:	d902      	bls.n	8218 <__udivmoddi4+0x90>
    8212:	f1ac 0302 	sub.w	r3, ip, #2
    8216:	442c      	add	r4, r5
    8218:	1a24      	subs	r4, r4, r0
    821a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    821e:	b11e      	cbz	r6, 8228 <__udivmoddi4+0xa0>
    8220:	40d4      	lsrs	r4, r2
    8222:	2300      	movs	r3, #0
    8224:	6034      	str	r4, [r6, #0]
    8226:	6073      	str	r3, [r6, #4]
    8228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    822c:	4647      	mov	r7, r8
    822e:	e7dd      	b.n	81ec <__udivmoddi4+0x64>
    8230:	4663      	mov	r3, ip
    8232:	e7f1      	b.n	8218 <__udivmoddi4+0x90>
    8234:	bb92      	cbnz	r2, 829c <__udivmoddi4+0x114>
    8236:	1b43      	subs	r3, r0, r5
    8238:	2101      	movs	r1, #1
    823a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    823e:	b2af      	uxth	r7, r5
    8240:	0c20      	lsrs	r0, r4, #16
    8242:	fbb3 fcfe 	udiv	ip, r3, lr
    8246:	fb0e 331c 	mls	r3, lr, ip, r3
    824a:	fb0c f807 	mul.w	r8, ip, r7
    824e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8252:	4598      	cmp	r8, r3
    8254:	d961      	bls.n	831a <__udivmoddi4+0x192>
    8256:	18eb      	adds	r3, r5, r3
    8258:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    825c:	d204      	bcs.n	8268 <__udivmoddi4+0xe0>
    825e:	4598      	cmp	r8, r3
    8260:	d902      	bls.n	8268 <__udivmoddi4+0xe0>
    8262:	f1ac 0002 	sub.w	r0, ip, #2
    8266:	442b      	add	r3, r5
    8268:	eba3 0308 	sub.w	r3, r3, r8
    826c:	b2a4      	uxth	r4, r4
    826e:	fbb3 fcfe 	udiv	ip, r3, lr
    8272:	fb0e 331c 	mls	r3, lr, ip, r3
    8276:	fb0c f707 	mul.w	r7, ip, r7
    827a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    827e:	42a7      	cmp	r7, r4
    8280:	d94d      	bls.n	831e <__udivmoddi4+0x196>
    8282:	192c      	adds	r4, r5, r4
    8284:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    8288:	d204      	bcs.n	8294 <__udivmoddi4+0x10c>
    828a:	42a7      	cmp	r7, r4
    828c:	d902      	bls.n	8294 <__udivmoddi4+0x10c>
    828e:	f1ac 0302 	sub.w	r3, ip, #2
    8292:	442c      	add	r4, r5
    8294:	1be4      	subs	r4, r4, r7
    8296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    829a:	e7c0      	b.n	821e <__udivmoddi4+0x96>
    829c:	f1c2 0320 	rsb	r3, r2, #32
    82a0:	4095      	lsls	r5, r2
    82a2:	4094      	lsls	r4, r2
    82a4:	fa20 f103 	lsr.w	r1, r0, r3
    82a8:	fa2e f303 	lsr.w	r3, lr, r3
    82ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    82b0:	4090      	lsls	r0, r2
    82b2:	b2af      	uxth	r7, r5
    82b4:	4303      	orrs	r3, r0
    82b6:	fbb1 fcfe 	udiv	ip, r1, lr
    82ba:	fb0e 101c 	mls	r0, lr, ip, r1
    82be:	0c19      	lsrs	r1, r3, #16
    82c0:	fb0c f807 	mul.w	r8, ip, r7
    82c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    82c8:	4588      	cmp	r8, r1
    82ca:	d922      	bls.n	8312 <__udivmoddi4+0x18a>
    82cc:	1869      	adds	r1, r5, r1
    82ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    82d2:	d204      	bcs.n	82de <__udivmoddi4+0x156>
    82d4:	4588      	cmp	r8, r1
    82d6:	d902      	bls.n	82de <__udivmoddi4+0x156>
    82d8:	f1ac 0002 	sub.w	r0, ip, #2
    82dc:	4429      	add	r1, r5
    82de:	eba1 0108 	sub.w	r1, r1, r8
    82e2:	b29b      	uxth	r3, r3
    82e4:	fbb1 fcfe 	udiv	ip, r1, lr
    82e8:	fb0e 111c 	mls	r1, lr, ip, r1
    82ec:	fb0c f707 	mul.w	r7, ip, r7
    82f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    82f4:	429f      	cmp	r7, r3
    82f6:	d90e      	bls.n	8316 <__udivmoddi4+0x18e>
    82f8:	18eb      	adds	r3, r5, r3
    82fa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    82fe:	d204      	bcs.n	830a <__udivmoddi4+0x182>
    8300:	429f      	cmp	r7, r3
    8302:	d902      	bls.n	830a <__udivmoddi4+0x182>
    8304:	f1ac 0102 	sub.w	r1, ip, #2
    8308:	442b      	add	r3, r5
    830a:	1bdb      	subs	r3, r3, r7
    830c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8310:	e793      	b.n	823a <__udivmoddi4+0xb2>
    8312:	4660      	mov	r0, ip
    8314:	e7e3      	b.n	82de <__udivmoddi4+0x156>
    8316:	4661      	mov	r1, ip
    8318:	e7f7      	b.n	830a <__udivmoddi4+0x182>
    831a:	4660      	mov	r0, ip
    831c:	e7a4      	b.n	8268 <__udivmoddi4+0xe0>
    831e:	4663      	mov	r3, ip
    8320:	e7b8      	b.n	8294 <__udivmoddi4+0x10c>
    8322:	4283      	cmp	r3, r0
    8324:	d906      	bls.n	8334 <__udivmoddi4+0x1ac>
    8326:	b916      	cbnz	r6, 832e <__udivmoddi4+0x1a6>
    8328:	2100      	movs	r1, #0
    832a:	4608      	mov	r0, r1
    832c:	e77c      	b.n	8228 <__udivmoddi4+0xa0>
    832e:	e9c6 e000 	strd	lr, r0, [r6]
    8332:	e7f9      	b.n	8328 <__udivmoddi4+0x1a0>
    8334:	fab3 f783 	clz	r7, r3
    8338:	b98f      	cbnz	r7, 835e <__udivmoddi4+0x1d6>
    833a:	4283      	cmp	r3, r0
    833c:	d301      	bcc.n	8342 <__udivmoddi4+0x1ba>
    833e:	4572      	cmp	r2, lr
    8340:	d808      	bhi.n	8354 <__udivmoddi4+0x1cc>
    8342:	ebbe 0402 	subs.w	r4, lr, r2
    8346:	eb60 0303 	sbc.w	r3, r0, r3
    834a:	2001      	movs	r0, #1
    834c:	469c      	mov	ip, r3
    834e:	b91e      	cbnz	r6, 8358 <__udivmoddi4+0x1d0>
    8350:	2100      	movs	r1, #0
    8352:	e769      	b.n	8228 <__udivmoddi4+0xa0>
    8354:	4638      	mov	r0, r7
    8356:	e7fa      	b.n	834e <__udivmoddi4+0x1c6>
    8358:	e9c6 4c00 	strd	r4, ip, [r6]
    835c:	e7f8      	b.n	8350 <__udivmoddi4+0x1c8>
    835e:	f1c7 0c20 	rsb	ip, r7, #32
    8362:	40bb      	lsls	r3, r7
    8364:	fa0e f507 	lsl.w	r5, lr, r7
    8368:	fa22 f40c 	lsr.w	r4, r2, ip
    836c:	fa2e f10c 	lsr.w	r1, lr, ip
    8370:	40ba      	lsls	r2, r7
    8372:	431c      	orrs	r4, r3
    8374:	fa20 f30c 	lsr.w	r3, r0, ip
    8378:	40b8      	lsls	r0, r7
    837a:	ea4f 4914 	mov.w	r9, r4, lsr #16
    837e:	4301      	orrs	r1, r0
    8380:	fa1f fe84 	uxth.w	lr, r4
    8384:	fbb3 f8f9 	udiv	r8, r3, r9
    8388:	fb09 3018 	mls	r0, r9, r8, r3
    838c:	0c0b      	lsrs	r3, r1, #16
    838e:	fb08 fa0e 	mul.w	sl, r8, lr
    8392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8396:	459a      	cmp	sl, r3
    8398:	d940      	bls.n	841c <__udivmoddi4+0x294>
    839a:	18e3      	adds	r3, r4, r3
    839c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    83a0:	d204      	bcs.n	83ac <__udivmoddi4+0x224>
    83a2:	459a      	cmp	sl, r3
    83a4:	d902      	bls.n	83ac <__udivmoddi4+0x224>
    83a6:	f1a8 0002 	sub.w	r0, r8, #2
    83aa:	4423      	add	r3, r4
    83ac:	eba3 030a 	sub.w	r3, r3, sl
    83b0:	b289      	uxth	r1, r1
    83b2:	fbb3 f8f9 	udiv	r8, r3, r9
    83b6:	fb09 3318 	mls	r3, r9, r8, r3
    83ba:	fb08 fe0e 	mul.w	lr, r8, lr
    83be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    83c2:	458e      	cmp	lr, r1
    83c4:	d92c      	bls.n	8420 <__udivmoddi4+0x298>
    83c6:	1861      	adds	r1, r4, r1
    83c8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    83cc:	d204      	bcs.n	83d8 <__udivmoddi4+0x250>
    83ce:	458e      	cmp	lr, r1
    83d0:	d902      	bls.n	83d8 <__udivmoddi4+0x250>
    83d2:	f1a8 0302 	sub.w	r3, r8, #2
    83d6:	4421      	add	r1, r4
    83d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    83dc:	eba1 010e 	sub.w	r1, r1, lr
    83e0:	fba0 9802 	umull	r9, r8, r0, r2
    83e4:	4541      	cmp	r1, r8
    83e6:	46ce      	mov	lr, r9
    83e8:	4643      	mov	r3, r8
    83ea:	d302      	bcc.n	83f2 <__udivmoddi4+0x26a>
    83ec:	d106      	bne.n	83fc <__udivmoddi4+0x274>
    83ee:	454d      	cmp	r5, r9
    83f0:	d204      	bcs.n	83fc <__udivmoddi4+0x274>
    83f2:	3801      	subs	r0, #1
    83f4:	ebb9 0e02 	subs.w	lr, r9, r2
    83f8:	eb68 0304 	sbc.w	r3, r8, r4
    83fc:	2e00      	cmp	r6, #0
    83fe:	d0a7      	beq.n	8350 <__udivmoddi4+0x1c8>
    8400:	ebb5 020e 	subs.w	r2, r5, lr
    8404:	eb61 0103 	sbc.w	r1, r1, r3
    8408:	fa01 fc0c 	lsl.w	ip, r1, ip
    840c:	fa22 f307 	lsr.w	r3, r2, r7
    8410:	40f9      	lsrs	r1, r7
    8412:	ea4c 0303 	orr.w	r3, ip, r3
    8416:	e9c6 3100 	strd	r3, r1, [r6]
    841a:	e799      	b.n	8350 <__udivmoddi4+0x1c8>
    841c:	4640      	mov	r0, r8
    841e:	e7c5      	b.n	83ac <__udivmoddi4+0x224>
    8420:	4643      	mov	r3, r8
    8422:	e7d9      	b.n	83d8 <__udivmoddi4+0x250>

00008424 <main>:
struct led_rgb pixels[STRIP_NUM_PIXELS];

static const struct device *const strip = DEVICE_DT_GET(STRIP_NODE);

void main(void)
{
    8424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8428:	b086      	sub	sp, #24
    842a:	af00      	add	r7, sp, #0
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    842c:	4e39      	ldr	r6, [pc, #228]	; (8514 <main+0xf0>)
    842e:	4630      	mov	r0, r6
    8430:	f007 fa76 	bl	f920 <z_device_is_ready>
	size_t cursor = 0, color = 0;
	int rc;

	if (device_is_ready(strip)) {
    8434:	4603      	mov	r3, r0
    8436:	2800      	cmp	r0, #0
    8438:	d057      	beq.n	84ea <main+0xc6>
		LOG_INF("Found LED strip device %s", strip->name);
    843a:	466c      	mov	r4, sp
    843c:	b088      	sub	sp, #32
    843e:	6833      	ldr	r3, [r6, #0]
    8440:	466a      	mov	r2, sp
    8442:	4935      	ldr	r1, [pc, #212]	; (8518 <main+0xf4>)
    8444:	e9c2 1305 	strd	r1, r3, [r2, #20]
    8448:	f44f 7300 	mov.w	r3, #512	; 0x200
    844c:	8393      	strh	r3, [r2, #28]
    844e:	4b33      	ldr	r3, [pc, #204]	; (851c <main+0xf8>)
    8450:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    8454:	2300      	movs	r3, #0
    8456:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    845a:	4831      	ldr	r0, [pc, #196]	; (8520 <main+0xfc>)
    845c:	f001 fa92 	bl	9984 <z_impl_z_log_msg_static_create>
    8460:	46a5      	mov	sp, r4
	} else {
		LOG_ERR("LED strip device %s is not ready", strip->name);
		return;
	}

	LOG_INF("Displaying pattern on strip");
    8462:	4b30      	ldr	r3, [pc, #192]	; (8524 <main+0x100>)
    8464:	617b      	str	r3, [r7, #20]
    8466:	2302      	movs	r3, #2
    8468:	613b      	str	r3, [r7, #16]
	size_t cursor = 0, color = 0;
    846a:	2400      	movs	r4, #0
    846c:	4625      	mov	r5, r4
	while (1) {
		memset(&pixels, 0x00, sizeof(pixels));
    846e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8528 <main+0x104>
		memcpy(&pixels[cursor], &colors[color], sizeof(struct led_rgb));
    8472:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 852c <main+0x108>
    8476:	2300      	movs	r3, #0
    8478:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    847c:	4828      	ldr	r0, [pc, #160]	; (8520 <main+0xfc>)
    847e:	f107 0210 	add.w	r2, r7, #16
    8482:	f001 fa7f 	bl	9984 <z_impl_z_log_msg_static_create>
		memset(&pixels, 0x00, sizeof(pixels));
    8486:	2260      	movs	r2, #96	; 0x60
    8488:	2100      	movs	r1, #0
    848a:	4827      	ldr	r0, [pc, #156]	; (8528 <main+0x104>)
    848c:	f006 ff48 	bl	f320 <memset>
		memcpy(&pixels[cursor], &colors[color], sizeof(struct led_rgb));
    8490:	2204      	movs	r2, #4
    8492:	eb09 0184 	add.w	r1, r9, r4, lsl #2
    8496:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    849a:	f006 ff36 	bl	f30a <memcpy>
				       struct led_rgb *pixels,
				       size_t num_pixels) {
	const struct led_strip_driver_api *api =
		(const struct led_strip_driver_api *)dev->api;

	return api->update_rgb(dev, pixels, num_pixels);
    849e:	68b3      	ldr	r3, [r6, #8]
    84a0:	2218      	movs	r2, #24
    84a2:	4630      	mov	r0, r6
    84a4:	681b      	ldr	r3, [r3, #0]
    84a6:	4920      	ldr	r1, [pc, #128]	; (8528 <main+0x104>)
    84a8:	4798      	blx	r3
		rc = led_strip_update_rgb(strip, pixels, STRIP_NUM_PIXELS);

		if (rc) {
    84aa:	b178      	cbz	r0, 84cc <main+0xa8>
			LOG_ERR("couldn't update strip: %d", rc);
    84ac:	46ea      	mov	sl, sp
    84ae:	b088      	sub	sp, #32
    84b0:	466a      	mov	r2, sp
    84b2:	4b1f      	ldr	r3, [pc, #124]	; (8530 <main+0x10c>)
    84b4:	e9c2 3005 	strd	r3, r0, [r2, #20]
    84b8:	2303      	movs	r3, #3
    84ba:	f842 3f10 	str.w	r3, [r2, #16]!
    84be:	2300      	movs	r3, #0
    84c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    84c4:	4816      	ldr	r0, [pc, #88]	; (8520 <main+0xfc>)
    84c6:	f001 fa5d 	bl	9984 <z_impl_z_log_msg_static_create>
    84ca:	46d5      	mov	sp, sl
		}

		cursor++;
    84cc:	3501      	adds	r5, #1
		if (cursor >= STRIP_NUM_PIXELS) {
    84ce:	2d18      	cmp	r5, #24
    84d0:	d105      	bne.n	84de <main+0xba>
			cursor = 0;
			color++;
			if (color == ARRAY_SIZE(colors)) {
    84d2:	2c02      	cmp	r4, #2
				color = 0;
    84d4:	bf0b      	itete	eq
    84d6:	2400      	moveq	r4, #0
			cursor = 0;
    84d8:	2500      	movne	r5, #0
    84da:	4625      	moveq	r5, r4
			color++;
    84dc:	3401      	addne	r4, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    84de:	2100      	movs	r1, #0
    84e0:	f240 6067 	movw	r0, #1639	; 0x667
    84e4:	f005 ff88 	bl	e3f8 <z_impl_k_sleep>
	while (1) {
    84e8:	e7cd      	b.n	8486 <main+0x62>
		LOG_ERR("LED strip device %s is not ready", strip->name);
    84ea:	b088      	sub	sp, #32
    84ec:	466a      	mov	r2, sp
    84ee:	6831      	ldr	r1, [r6, #0]
    84f0:	4810      	ldr	r0, [pc, #64]	; (8534 <main+0x110>)
    84f2:	e9c2 0105 	strd	r0, r1, [r2, #20]
    84f6:	f44f 7100 	mov.w	r1, #512	; 0x200
    84fa:	8391      	strh	r1, [r2, #28]
    84fc:	4907      	ldr	r1, [pc, #28]	; (851c <main+0xf8>)
    84fe:	f842 1f10 	str.w	r1, [r2, #16]!
    8502:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    8506:	4806      	ldr	r0, [pc, #24]	; (8520 <main+0xfc>)
    8508:	f001 fa3c 	bl	9984 <z_impl_z_log_msg_static_create>
			}
		}

		k_sleep(DELAY_TIME);
	}
}
    850c:	3718      	adds	r7, #24
    850e:	46bd      	mov	sp, r7
    8510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8514:	0000fd20 	.word	0x0000fd20
    8518:	0001029c 	.word	0x0001029c
    851c:	01000003 	.word	0x01000003
    8520:	0000ffc8 	.word	0x0000ffc8
    8524:	000102b6 	.word	0x000102b6
    8528:	200089d8 	.word	0x200089d8
    852c:	0001030d 	.word	0x0001030d
    8530:	000102f3 	.word	0x000102f3
    8534:	000102d2 	.word	0x000102d2

00008538 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    8538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    853c:	b095      	sub	sp, #84	; 0x54
    853e:	af00      	add	r7, sp, #0
    8540:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    8544:	61bb      	str	r3, [r7, #24]
    8546:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    854a:	4604      	mov	r4, r0
    854c:	627a      	str	r2, [r7, #36]	; 0x24
    854e:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    8550:	6239      	str	r1, [r7, #32]
    8552:	b951      	cbnz	r1, 856a <cbprintf_package_convert+0x32>
	for (int i = 0; i < s_nbr; i++) {
    8554:	460d      	mov	r5, r1
	buf += ros_nbr;
    8556:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    8558:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    855a:	7880      	ldrb	r0, [r0, #2]
    855c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8560:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
    8562:	42ae      	cmp	r6, r5
    8564:	d81a      	bhi.n	859c <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
    8566:	1b03      	subs	r3, r0, r4
    8568:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    856a:	f894 9002 	ldrb.w	r9, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    856e:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
    8570:	464e      	mov	r6, r9
	rws_nbr = in_desc->rw_str_cnt;
    8572:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
    8574:	f1b9 0f00 	cmp.w	r9, #0
    8578:	d002      	beq.n	8580 <cbprintf_package_convert+0x48>
    857a:	f01b 0f01 	tst.w	fp, #1
    857e:	d116      	bne.n	85ae <cbprintf_package_convert+0x76>
	rw_cpy = rws_nbr > 0 &&
    8580:	697b      	ldr	r3, [r7, #20]
    8582:	bb53      	cbnz	r3, 85da <cbprintf_package_convert+0xa2>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
    8584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8586:	b11b      	cbz	r3, 8590 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
    8588:	4620      	mov	r0, r4
    858a:	69ba      	ldr	r2, [r7, #24]
    858c:	6a39      	ldr	r1, [r7, #32]
    858e:	4798      	blx	r3
		}

		return in_len;
    8590:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    8592:	4628      	mov	r0, r5
    8594:	3754      	adds	r7, #84	; 0x54
    8596:	46bd      	mov	sp, r7
    8598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    859c:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
    85a0:	4640      	mov	r0, r8
    85a2:	f006 fea2 	bl	f2ea <strlen>
    85a6:	3001      	adds	r0, #1
    85a8:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
    85aa:	3501      	adds	r5, #1
    85ac:	e7d9      	b.n	8562 <cbprintf_package_convert+0x2a>
	rw_cpy = rws_nbr > 0 &&
    85ae:	6863      	ldr	r3, [r4, #4]
    85b0:	f894 a000 	ldrb.w	sl, [r4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    85b4:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    85b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    85b8:	ea4f 028a 	mov.w	r2, sl, lsl #2
    85bc:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    85be:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
    85c2:	2b00      	cmp	r3, #0
    85c4:	f040 8102 	bne.w	87cc <cbprintf_package_convert+0x294>
		out_len = (int)in_len;
    85c8:	46d0      	mov	r8, sl
	size_t strl_cnt = 0;
    85ca:	2600      	movs	r6, #0
		out_len = (int)in_len;
    85cc:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    85ce:	eb09 030a 	add.w	r3, r9, sl
			for (int i = 0; i < ros_nbr; i++) {
    85d2:	4543      	cmp	r3, r8
    85d4:	d14e      	bne.n	8674 <cbprintf_package_convert+0x13c>
    85d6:	44ca      	add	sl, r9
    85d8:	e013      	b.n	8602 <cbprintf_package_convert+0xca>
	rw_cpy = rws_nbr > 0 &&
    85da:	f01b 0f02 	tst.w	fp, #2
    85de:	d0d1      	beq.n	8584 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
    85e0:	f894 a000 	ldrb.w	sl, [r4]
    85e4:	ea4f 038a 	mov.w	r3, sl, lsl #2
    85e8:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    85ea:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
    85ec:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
    85f0:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    85f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    85f4:	2b00      	cmp	r3, #0
    85f6:	d178      	bne.n	86ea <cbprintf_package_convert+0x1b2>
		out_len = (int)in_len;
    85f8:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    85fa:	f1b9 0f00 	cmp.w	r9, #0
    85fe:	d14e      	bne.n	869e <cbprintf_package_convert+0x166>
	size_t strl_cnt = 0;
    8600:	464e      	mov	r6, r9
		for (int i = 0; i < rws_nbr; i++) {
    8602:	f01b 0f05 	tst.w	fp, #5
    8606:	bf0c      	ite	eq
    8608:	2302      	moveq	r3, #2
    860a:	2301      	movne	r3, #1
    860c:	627b      	str	r3, [r7, #36]	; 0x24
    860e:	697b      	ldr	r3, [r7, #20]
    8610:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    8614:	f00b 0302 	and.w	r3, fp, #2
    8618:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < rws_nbr; i++) {
    861a:	45ca      	cmp	sl, r9
    861c:	d0b9      	beq.n	8592 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
    861e:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
    8622:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    8626:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    862a:	4bad      	ldr	r3, [pc, #692]	; (88e0 <cbprintf_package_convert+0x3a8>)
    862c:	4598      	cmp	r8, r3
    862e:	d302      	bcc.n	8636 <cbprintf_package_convert+0xfe>
    8630:	4bac      	ldr	r3, [pc, #688]	; (88e4 <cbprintf_package_convert+0x3ac>)
    8632:	4598      	cmp	r8, r3
    8634:	d339      	bcc.n	86aa <cbprintf_package_convert+0x172>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    8636:	693b      	ldr	r3, [r7, #16]
    8638:	2b00      	cmp	r3, #0
    863a:	d043      	beq.n	86c4 <cbprintf_package_convert+0x18c>
    863c:	69f8      	ldr	r0, [r7, #28]
    863e:	f006 f9be 	bl	e9be <is_ptr>
    8642:	2800      	cmp	r0, #0
    8644:	d03e      	beq.n	86c4 <cbprintf_package_convert+0x18c>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    8646:	46e8      	mov	r8, sp
    8648:	b08a      	sub	sp, #40	; 0x28
    864a:	466a      	mov	r2, sp
    864c:	4ba6      	ldr	r3, [pc, #664]	; (88e8 <cbprintf_package_convert+0x3b0>)
    864e:	6153      	str	r3, [r2, #20]
    8650:	69fb      	ldr	r3, [r7, #28]
    8652:	e9c2 3106 	strd	r3, r1, [r2, #24]
    8656:	f44f 7300 	mov.w	r3, #512	; 0x200
    865a:	8413      	strh	r3, [r2, #32]
    865c:	4ba3      	ldr	r3, [pc, #652]	; (88ec <cbprintf_package_convert+0x3b4>)
    865e:	f842 3f10 	str.w	r3, [r2, #16]!
    8662:	2300      	movs	r3, #0
    8664:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    8668:	48a1      	ldr	r0, [pc, #644]	; (88f0 <cbprintf_package_convert+0x3b8>)
    866a:	f001 f98b 	bl	9984 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    866e:	3d02      	subs	r5, #2
    8670:	46c5      	mov	sp, r8
				continue;
    8672:	e7d2      	b.n	861a <cbprintf_package_convert+0xe2>
				const char *str = *(const char **)&buf32[*str_pos];
    8674:	f818 2b01 	ldrb.w	r2, [r8], #1
    8678:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    867a:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    867e:	f006 fe34 	bl	f2ea <strlen>
				if (strl && strl_cnt < strl_len) {
    8682:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    8684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    8686:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    8688:	b13a      	cbz	r2, 869a <cbprintf_package_convert+0x162>
    868a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    868e:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    8690:	bf3e      	ittt	cc
    8692:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    8694:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    8698:	3601      	addcc	r6, #1
				out_len += len;
    869a:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
    869c:	e799      	b.n	85d2 <cbprintf_package_convert+0x9a>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    869e:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    86a2:	bf1c      	itt	ne
    86a4:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    86a6:	44ca      	addne	sl, r9
    86a8:	e7ab      	b.n	8602 <cbprintf_package_convert+0xca>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    86aa:	693b      	ldr	r3, [r7, #16]
    86ac:	b123      	cbz	r3, 86b8 <cbprintf_package_convert+0x180>
    86ae:	69f8      	ldr	r0, [r7, #28]
    86b0:	f006 f985 	bl	e9be <is_ptr>
    86b4:	2800      	cmp	r0, #0
    86b6:	d1c6      	bne.n	8646 <cbprintf_package_convert+0x10e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    86b8:	f01b 0f01 	tst.w	fp, #1
    86bc:	d105      	bne.n	86ca <cbprintf_package_convert+0x192>
					out_len -= drop_ro_str_pos ? 2 : 1;
    86be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    86c0:	1aed      	subs	r5, r5, r3
    86c2:	e7aa      	b.n	861a <cbprintf_package_convert+0xe2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    86c4:	6a3b      	ldr	r3, [r7, #32]
    86c6:	2b00      	cmp	r3, #0
    86c8:	d0a7      	beq.n	861a <cbprintf_package_convert+0xe2>
		return 1 + strlen(str);
    86ca:	4640      	mov	r0, r8
    86cc:	f006 fe0d 	bl	f2ea <strlen>
				if (strl && strl_cnt < strl_len) {
    86d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    86d2:	b143      	cbz	r3, 86e6 <cbprintf_package_convert+0x1ae>
    86d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    86d8:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    86da:	bf3f      	itttt	cc
    86dc:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    86de:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    86e0:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    86e4:	3601      	addcc	r6, #1
				out_len += (len - 1);
    86e6:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
    86e8:	e797      	b.n	861a <cbprintf_package_convert+0xe2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    86ea:	f1b9 0f00 	cmp.w	r9, #0
    86ee:	d072      	beq.n	87d6 <cbprintf_package_convert+0x29e>
    86f0:	f01b 0604 	ands.w	r6, fp, #4
    86f4:	d072      	beq.n	87dc <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
    86f6:	46c8      	mov	r8, r9
		scpy_cnt = 0;
    86f8:	2600      	movs	r6, #0
		dst = keep_str_pos;
    86fa:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    86fe:	464a      	mov	r2, r9
    8700:	4651      	mov	r1, sl
    8702:	f006 fe02 	bl	f30a <memcpy>
	str_pos += ros_nbr;
    8706:	697b      	ldr	r3, [r7, #20]
    8708:	44ca      	add	sl, r9
	for (int i = 0; i < rws_nbr; i++) {
    870a:	005b      	lsls	r3, r3, #1
    870c:	60bb      	str	r3, [r7, #8]
    870e:	697b      	ldr	r3, [r7, #20]
    8710:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
    8714:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    8716:	f00b 0302 	and.w	r3, fp, #2
    871a:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
    871c:	697b      	ldr	r3, [r7, #20]
    871e:	459a      	cmp	sl, r3
    8720:	d15e      	bne.n	87e0 <cbprintf_package_convert+0x2a8>
	out_desc.len = in_desc->len;
    8722:	7823      	ldrb	r3, [r4, #0]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    8724:	f01b 0f02 	tst.w	fp, #2
	out_desc.len = in_desc->len;
    8728:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    872a:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    872c:	bf18      	it	ne
    872e:	2100      	movne	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    8730:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    8734:	bf08      	it	eq
    8736:	ea4f 0158 	moveq.w	r1, r8, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    873a:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    873e:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    8740:	f040 809d 	bne.w	887e <cbprintf_package_convert+0x346>
    8744:	f01b 0f04 	tst.w	fp, #4
    8748:	bf14      	ite	ne
    874a:	4640      	movne	r0, r8
    874c:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    874e:	f894 b002 	ldrb.w	fp, [r4, #2]
    8752:	f894 a003 	ldrb.w	sl, [r4, #3]
    8756:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
    8758:	7062      	strb	r2, [r4, #1]
    875a:	70a0      	strb	r0, [r4, #2]
    875c:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    875e:	4620      	mov	r0, r4
    8760:	69ba      	ldr	r2, [r7, #24]
    8762:	68f9      	ldr	r1, [r7, #12]
    8764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8766:	4798      	blx	r3
	if (rv < 0) {
    8768:	1e05      	subs	r5, r0, #0
    876a:	f6ff af12 	blt.w	8592 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
    876e:	69fb      	ldr	r3, [r7, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    8770:	4641      	mov	r1, r8
	*in_desc = in_desc_backup;
    8772:	7023      	strb	r3, [r4, #0]
    8774:	693b      	ldr	r3, [r7, #16]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    8776:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
    8778:	7063      	strb	r3, [r4, #1]
    877a:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
    8780:	f884 a003 	strb.w	sl, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    8784:	f107 0040 	add.w	r0, r7, #64	; 0x40
    8788:	4798      	blx	r3
	if (rv < 0) {
    878a:	f1b0 0800 	subs.w	r8, r0, #0
    878e:	f2c0 80a3 	blt.w	88d8 <cbprintf_package_convert+0x3a0>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    8792:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    8794:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    8796:	eba3 0109 	sub.w	r1, r3, r9
    879a:	68fb      	ldr	r3, [r7, #12]
	rv = cb(str_pos, strs_len, ctx);
    879c:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    879e:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    87a0:	68bb      	ldr	r3, [r7, #8]
    87a2:	1ac9      	subs	r1, r1, r3
    87a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    87a6:	4798      	blx	r3
	if (rv < 0) {
    87a8:	2800      	cmp	r0, #0
    87aa:	f2c0 8097 	blt.w	88dc <cbprintf_package_convert+0x3a4>
	for (int i = 0; i < scpy_cnt; i++) {
    87ae:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    87b2:	44a8      	add	r8, r5
	out_len += rv;
    87b4:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
    87b8:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
    87bc:	45b3      	cmp	fp, r6
    87be:	db60      	blt.n	8882 <cbprintf_package_convert+0x34a>
	(void)cb(NULL, 0, ctx);
    87c0:	2100      	movs	r1, #0
    87c2:	69ba      	ldr	r2, [r7, #24]
    87c4:	4608      	mov	r0, r1
    87c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    87c8:	4798      	blx	r3
	return out_len;
    87ca:	e6e2      	b.n	8592 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
    87cc:	f04f 0800 	mov.w	r8, #0
    87d0:	f107 0030 	add.w	r0, r7, #48	; 0x30
    87d4:	e793      	b.n	86fe <cbprintf_package_convert+0x1c6>
		scpy_cnt = 0;
    87d6:	464e      	mov	r6, r9
		keep_cnt = 0;
    87d8:	46c8      	mov	r8, r9
    87da:	e794      	b.n	8706 <cbprintf_package_convert+0x1ce>
    87dc:	46b0      	mov	r8, r6
    87de:	e792      	b.n	8706 <cbprintf_package_convert+0x1ce>
		uint8_t arg_idx = *str_pos++;
    87e0:	f81a 1b02 	ldrb.w	r1, [sl], #2
    87e4:	4a3e      	ldr	r2, [pc, #248]	; (88e0 <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
    87e6:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    87ea:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    87ee:	4293      	cmp	r3, r2
    87f0:	d302      	bcc.n	87f8 <cbprintf_package_convert+0x2c0>
    87f2:	4a3c      	ldr	r2, [pc, #240]	; (88e4 <cbprintf_package_convert+0x3ac>)
    87f4:	4293      	cmp	r3, r2
    87f6:	d31c      	bcc.n	8832 <cbprintf_package_convert+0x2fa>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    87f8:	693b      	ldr	r3, [r7, #16]
    87fa:	b123      	cbz	r3, 8806 <cbprintf_package_convert+0x2ce>
    87fc:	69f8      	ldr	r0, [r7, #28]
    87fe:	f006 f8de 	bl	e9be <is_ptr>
    8802:	2800      	cmp	r0, #0
    8804:	d18a      	bne.n	871c <cbprintf_package_convert+0x1e4>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    8806:	687b      	ldr	r3, [r7, #4]
    8808:	b9f3      	cbnz	r3, 8848 <cbprintf_package_convert+0x310>
				keep_str_pos[keep_cnt++] = arg_idx;
    880a:	f108 0228 	add.w	r2, r8, #40	; 0x28
    880e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    8812:	4402      	add	r2, r0
    8814:	f108 0301 	add.w	r3, r8, #1
    8818:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    881c:	f107 0250 	add.w	r2, r7, #80	; 0x50
    8820:	f108 0802 	add.w	r8, r8, #2
    8824:	fa52 f383 	uxtab	r3, r2, r3
    8828:	fa5f f888 	uxtb.w	r8, r8
    882c:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (int i = 0; i < rws_nbr; i++) {
    8830:	e774      	b.n	871c <cbprintf_package_convert+0x1e4>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    8832:	693b      	ldr	r3, [r7, #16]
    8834:	b12b      	cbz	r3, 8842 <cbprintf_package_convert+0x30a>
    8836:	69f8      	ldr	r0, [r7, #28]
    8838:	f006 f8c1 	bl	e9be <is_ptr>
    883c:	2800      	cmp	r0, #0
    883e:	f47f af6d 	bne.w	871c <cbprintf_package_convert+0x1e4>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    8842:	f01b 0f01 	tst.w	fp, #1
    8846:	d009      	beq.n	885c <cbprintf_package_convert+0x324>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    8848:	f106 0228 	add.w	r2, r6, #40	; 0x28
    884c:	f107 0128 	add.w	r1, r7, #40	; 0x28
    8850:	1c73      	adds	r3, r6, #1
    8852:	1856      	adds	r6, r2, r1
    8854:	f806 5c20 	strb.w	r5, [r6, #-32]
    8858:	b2de      	uxtb	r6, r3
    885a:	e75f      	b.n	871c <cbprintf_package_convert+0x1e4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    885c:	f01b 0f04 	tst.w	fp, #4
    8860:	f43f af5c 	beq.w	871c <cbprintf_package_convert+0x1e4>
				keep_str_pos[keep_cnt++] = arg_pos;
    8864:	f108 0228 	add.w	r2, r8, #40	; 0x28
    8868:	f107 0128 	add.w	r1, r7, #40	; 0x28
    886c:	f108 0301 	add.w	r3, r8, #1
    8870:	eb02 0801 	add.w	r8, r2, r1
    8874:	f808 5c10 	strb.w	r5, [r8, #-16]
    8878:	fa5f f883 	uxtb.w	r8, r3
    887c:	e74e      	b.n	871c <cbprintf_package_convert+0x1e4>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    887e:	2000      	movs	r0, #0
    8880:	e765      	b.n	874e <cbprintf_package_convert+0x216>
		uint8_t loc = cpy_str_pos[i];
    8882:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    8886:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    888a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
    888e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8890:	b1fb      	cbz	r3, 88d2 <cbprintf_package_convert+0x39a>
    8892:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    8896:	2101      	movs	r1, #1
    8898:	69ba      	ldr	r2, [r7, #24]
    889a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    889c:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    88a0:	4798      	blx	r3
		if (rv < 0) {
    88a2:	2800      	cmp	r0, #0
    88a4:	db1a      	blt.n	88dc <cbprintf_package_convert+0x3a4>
		out_len += rv;
    88a6:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    88a8:	f1b8 0f00 	cmp.w	r8, #0
    88ac:	d106      	bne.n	88bc <cbprintf_package_convert+0x384>
    88ae:	4648      	mov	r0, r9
    88b0:	f006 fd1b 	bl	f2ea <strlen>
    88b4:	f100 0801 	add.w	r8, r0, #1
    88b8:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    88bc:	4641      	mov	r1, r8
    88be:	4648      	mov	r0, r9
    88c0:	69ba      	ldr	r2, [r7, #24]
    88c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    88c4:	4798      	blx	r3
		if (rv < 0) {
    88c6:	2800      	cmp	r0, #0
    88c8:	db08      	blt.n	88dc <cbprintf_package_convert+0x3a4>
		out_len += rv;
    88ca:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
    88cc:	f10b 0b01 	add.w	fp, fp, #1
    88d0:	e774      	b.n	87bc <cbprintf_package_convert+0x284>
		uint16_t str_len = strl ? strl[i] : 0;
    88d2:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    88d6:	e7de      	b.n	8896 <cbprintf_package_convert+0x35e>
    88d8:	4645      	mov	r5, r8
    88da:	e65a      	b.n	8592 <cbprintf_package_convert+0x5a>
    88dc:	4605      	mov	r5, r0
    88de:	e658      	b.n	8592 <cbprintf_package_convert+0x5a>
    88e0:	0000fc08 	.word	0x0000fc08
    88e4:	00010de8 	.word	0x00010de8
    88e8:	0001031e 	.word	0x0001031e
    88ec:	01000004 	.word	0x01000004
    88f0:	0000ff98 	.word	0x0000ff98

000088f4 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    88f4:	4b01      	ldr	r3, [pc, #4]	; (88fc <char_out+0x8>)
    88f6:	681b      	ldr	r3, [r3, #0]
    88f8:	4718      	bx	r3
    88fa:	bf00      	nop
    88fc:	20008000 	.word	0x20008000

00008900 <__printk_hook_install>:
	_char_out = fn;
    8900:	4b01      	ldr	r3, [pc, #4]	; (8908 <__printk_hook_install+0x8>)
    8902:	6018      	str	r0, [r3, #0]
}
    8904:	4770      	bx	lr
    8906:	bf00      	nop
    8908:	20008000 	.word	0x20008000

0000890c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    890c:	b507      	push	{r0, r1, r2, lr}
    890e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    8910:	2100      	movs	r1, #0
    8912:	4602      	mov	r2, r0
    8914:	9100      	str	r1, [sp, #0]
    8916:	4803      	ldr	r0, [pc, #12]	; (8924 <vprintk+0x18>)
    8918:	f000 f92a 	bl	8b70 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    891c:	b003      	add	sp, #12
    891e:	f85d fb04 	ldr.w	pc, [sp], #4
    8922:	bf00      	nop
    8924:	000088f5 	.word	0x000088f5

00008928 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    8928:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    892a:	2500      	movs	r5, #0
{
    892c:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    892e:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    8932:	4604      	mov	r4, r0
    8934:	9500      	str	r5, [sp, #0]
    8936:	a903      	add	r1, sp, #12
    8938:	4805      	ldr	r0, [pc, #20]	; (8950 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    893a:	9505      	str	r5, [sp, #20]
    893c:	f000 f918 	bl	8b70 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    8940:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    8944:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    8946:	bfb8      	it	lt
    8948:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    894a:	b007      	add	sp, #28
    894c:	bd30      	pop	{r4, r5, pc}
    894e:	bf00      	nop
    8950:	0000ea0d 	.word	0x0000ea0d

00008954 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    8954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8958:	8b05      	ldrh	r5, [r0, #24]
{
    895a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    895c:	0728      	lsls	r0, r5, #28
{
    895e:	4690      	mov	r8, r2
	if (processing) {
    8960:	d411      	bmi.n	8986 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    8962:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8964:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    8968:	f040 80cd 	bne.w	8b06 <process_event+0x1b2>
			evt = process_recheck(mgr);
    896c:	4620      	mov	r0, r4
    896e:	f006 f884 	bl	ea7a <process_recheck>
		}

		if (evt == EVT_NOP) {
    8972:	b178      	cbz	r0, 8994 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    8974:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8976:	8b21      	ldrh	r1, [r4, #24]
    8978:	2804      	cmp	r0, #4
    897a:	d811      	bhi.n	89a0 <process_event+0x4c>
    897c:	e8df f000 	tbb	[pc, r0]
    8980:	856d10c3 	.word	0x856d10c3
    8984:	95          	.byte	0x95
    8985:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    8986:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    8988:	bf0c      	ite	eq
    898a:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    898e:	f045 0520 	orrne.w	r5, r5, #32
    8992:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    8994:	f388 8811 	msr	BASEPRI, r8
    8998:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    899c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    89a0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    89a4:	45aa      	cmp	sl, r5
    89a6:	f000 80a6 	beq.w	8af6 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    89aa:	2700      	movs	r7, #0
    89ac:	46b9      	mov	r9, r7
    89ae:	463e      	mov	r6, r7
    89b0:	68a3      	ldr	r3, [r4, #8]
    89b2:	2b00      	cmp	r3, #0
    89b4:	f000 80bd 	beq.w	8b32 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    89b8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    89bc:	8321      	strh	r1, [r4, #24]
    89be:	f388 8811 	msr	BASEPRI, r8
    89c2:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    89c6:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    89c8:	2900      	cmp	r1, #0
    89ca:	f000 80bb 	beq.w	8b44 <process_event+0x1f0>
	return node->next;
    89ce:	680d      	ldr	r5, [r1, #0]
    89d0:	2900      	cmp	r1, #0
    89d2:	f000 80b7 	beq.w	8b44 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    89d6:	4633      	mov	r3, r6
    89d8:	4652      	mov	r2, sl
    89da:	4620      	mov	r0, r4
    89dc:	f8d1 8004 	ldr.w	r8, [r1, #4]
    89e0:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    89e2:	2d00      	cmp	r5, #0
    89e4:	d076      	beq.n	8ad4 <process_event+0x180>
    89e6:	682b      	ldr	r3, [r5, #0]
    89e8:	4629      	mov	r1, r5
    89ea:	461d      	mov	r5, r3
    89ec:	e7f0      	b.n	89d0 <process_event+0x7c>
    89ee:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    89f2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    89f4:	2a01      	cmp	r2, #1
    89f6:	d81b      	bhi.n	8a30 <process_event+0xdc>
	list->head = NULL;
    89f8:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    89fa:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    89fe:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    8a00:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8a02:	b289      	uxth	r1, r1
	list->tail = NULL;
    8a04:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    8a08:	d109      	bne.n	8a1e <process_event+0xca>
    8a0a:	463b      	mov	r3, r7
    8a0c:	e003      	b.n	8a16 <process_event+0xc2>
				mgr->refs += 1U;
    8a0e:	8b62      	ldrh	r2, [r4, #26]
    8a10:	3201      	adds	r2, #1
    8a12:	8362      	strh	r2, [r4, #26]
	return node->next;
    8a14:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    8a16:	2b00      	cmp	r3, #0
    8a18:	d1f9      	bne.n	8a0e <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8a1a:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    8a1e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    8a20:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    8a22:	f006 f82a 	bl	ea7a <process_recheck>
    8a26:	2800      	cmp	r0, #0
    8a28:	d07b      	beq.n	8b22 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8a2a:	f041 0120 	orr.w	r1, r1, #32
    8a2e:	e077      	b.n	8b20 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    8a30:	2b04      	cmp	r3, #4
    8a32:	d10a      	bne.n	8a4a <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8a34:	f021 0107 	bic.w	r1, r1, #7
    8a38:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    8a3a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    8a3c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    8a3e:	f006 f81c 	bl	ea7a <process_recheck>
    8a42:	b110      	cbz	r0, 8a4a <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8a44:	f041 0120 	orr.w	r1, r1, #32
    8a48:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8a4a:	8b21      	ldrh	r1, [r4, #24]
    8a4c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    8a50:	45aa      	cmp	sl, r5
    8a52:	d050      	beq.n	8af6 <process_event+0x1a2>
    8a54:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    8a56:	46b9      	mov	r9, r7
    8a58:	e7aa      	b.n	89b0 <process_event+0x5c>
			transit = mgr->transitions->start;
    8a5a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8a5c:	f021 0107 	bic.w	r1, r1, #7
    8a60:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    8a64:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    8a66:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    8a6a:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    8a6c:	d12d      	bne.n	8aca <process_event+0x176>
		    || (transit != NULL)) {
    8a6e:	f1b9 0f00 	cmp.w	r9, #0
    8a72:	d040      	beq.n	8af6 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    8a74:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    8a78:	8321      	strh	r1, [r4, #24]
    8a7a:	f388 8811 	msr	BASEPRI, r8
    8a7e:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    8a82:	4620      	mov	r0, r4
    8a84:	4939      	ldr	r1, [pc, #228]	; (8b6c <process_event+0x218>)
    8a86:	47c8      	blx	r9
    8a88:	e029      	b.n	8ade <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8a8a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    8a8e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8a90:	f041 0104 	orr.w	r1, r1, #4
    8a94:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    8a96:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    8a98:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    8a9c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    8a9e:	d0e6      	beq.n	8a6e <process_event+0x11a>
    8aa0:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8aa2:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    8aa6:	463e      	mov	r6, r7
    8aa8:	e782      	b.n	89b0 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8aaa:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    8aae:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8ab0:	f041 0105 	orr.w	r1, r1, #5
    8ab4:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    8ab6:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    8ab8:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    8abc:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    8abe:	d0d6      	beq.n	8a6e <process_event+0x11a>
    8ac0:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8ac2:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    8ac6:	463e      	mov	r6, r7
    8ac8:	e772      	b.n	89b0 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    8aca:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8acc:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    8ad0:	463e      	mov	r6, r7
    8ad2:	e76d      	b.n	89b0 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    8ad4:	462b      	mov	r3, r5
    8ad6:	e787      	b.n	89e8 <process_event+0x94>
			if (transit != NULL) {
    8ad8:	f1b9 0f00 	cmp.w	r9, #0
    8adc:	d1d1      	bne.n	8a82 <process_event+0x12e>
	__asm__ volatile(
    8ade:	f04f 0320 	mov.w	r3, #32
    8ae2:	f3ef 8811 	mrs	r8, BASEPRI
    8ae6:	f383 8812 	msr	BASEPRI_MAX, r3
    8aea:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    8aee:	8b23      	ldrh	r3, [r4, #24]
    8af0:	f023 0308 	bic.w	r3, r3, #8
    8af4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    8af6:	8b25      	ldrh	r5, [r4, #24]
    8af8:	06ea      	lsls	r2, r5, #27
    8afa:	d52e      	bpl.n	8b5a <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    8afc:	f025 0310 	bic.w	r3, r5, #16
    8b00:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    8b02:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    8b06:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8b08:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    8b0a:	2e00      	cmp	r6, #0
    8b0c:	f6bf af6f 	bge.w	89ee <process_event+0x9a>
	list->head = NULL;
    8b10:	2300      	movs	r3, #0
		*clients = mgr->clients;
    8b12:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    8b14:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8b18:	f021 0107 	bic.w	r1, r1, #7
    8b1c:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8b20:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8b22:	8b21      	ldrh	r1, [r4, #24]
    8b24:	f04f 0900 	mov.w	r9, #0
    8b28:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    8b2c:	45aa      	cmp	sl, r5
    8b2e:	f47f af3f 	bne.w	89b0 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    8b32:	2f00      	cmp	r7, #0
    8b34:	d09b      	beq.n	8a6e <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    8b36:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    8b3a:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    8b3c:	f388 8811 	msr	BASEPRI, r8
    8b40:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    8b44:	2f00      	cmp	r7, #0
    8b46:	d0c7      	beq.n	8ad8 <process_event+0x184>
	return node->next;
    8b48:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    8b4a:	4639      	mov	r1, r7
    8b4c:	4633      	mov	r3, r6
    8b4e:	4652      	mov	r2, sl
    8b50:	4620      	mov	r0, r4
    8b52:	f005 ffbe 	bl	ead2 <notify_one>
	list->head = node;
    8b56:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    8b58:	e7f4      	b.n	8b44 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    8b5a:	06ab      	lsls	r3, r5, #26
    8b5c:	f57f af1a 	bpl.w	8994 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    8b60:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    8b64:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    8b66:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    8b6a:	e6ff      	b.n	896c <process_event+0x18>
    8b6c:	0000eaff 	.word	0x0000eaff

00008b70 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    8b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b74:	4681      	mov	r9, r0
    8b76:	468b      	mov	fp, r1
    8b78:	4617      	mov	r7, r2
    8b7a:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    8b7c:	2500      	movs	r5, #0
{
    8b7e:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    8b80:	7838      	ldrb	r0, [r7, #0]
    8b82:	b908      	cbnz	r0, 8b88 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    8b84:	4628      	mov	r0, r5
    8b86:	e357      	b.n	9238 <_flash_used+0x2ac>
			OUTC(*fp++);
    8b88:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    8b8a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    8b8c:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    8b8e:	d006      	beq.n	8b9e <z_cbvprintf_impl+0x2e>
			OUTC('%');
    8b90:	4659      	mov	r1, fp
    8b92:	47c8      	blx	r9
    8b94:	2800      	cmp	r0, #0
    8b96:	f2c0 834f 	blt.w	9238 <_flash_used+0x2ac>
    8b9a:	3501      	adds	r5, #1
		if (bps == NULL) {
    8b9c:	e1fb      	b.n	8f96 <_flash_used+0xa>
		} state = {
    8b9e:	2218      	movs	r2, #24
    8ba0:	2100      	movs	r1, #0
    8ba2:	a80e      	add	r0, sp, #56	; 0x38
    8ba4:	f006 fbbc 	bl	f320 <memset>
	if (*sp == '%') {
    8ba8:	787b      	ldrb	r3, [r7, #1]
    8baa:	2b25      	cmp	r3, #37	; 0x25
    8bac:	d07d      	beq.n	8caa <z_cbvprintf_impl+0x13a>
    8bae:	2300      	movs	r3, #0
    8bb0:	4698      	mov	r8, r3
    8bb2:	469e      	mov	lr, r3
    8bb4:	469c      	mov	ip, r3
    8bb6:	461e      	mov	r6, r3
    8bb8:	1c78      	adds	r0, r7, #1
    8bba:	4601      	mov	r1, r0
		switch (*sp) {
    8bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
    8bc0:	2a2b      	cmp	r2, #43	; 0x2b
    8bc2:	f000 80a1 	beq.w	8d08 <z_cbvprintf_impl+0x198>
    8bc6:	f200 8098 	bhi.w	8cfa <z_cbvprintf_impl+0x18a>
    8bca:	2a20      	cmp	r2, #32
    8bcc:	f000 809f 	beq.w	8d0e <z_cbvprintf_impl+0x19e>
    8bd0:	2a23      	cmp	r2, #35	; 0x23
    8bd2:	f000 809f 	beq.w	8d14 <z_cbvprintf_impl+0x1a4>
    8bd6:	b12b      	cbz	r3, 8be4 <z_cbvprintf_impl+0x74>
    8bd8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    8bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8be0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    8be4:	f1b8 0f00 	cmp.w	r8, #0
    8be8:	d005      	beq.n	8bf6 <z_cbvprintf_impl+0x86>
    8bea:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    8bee:	f043 0320 	orr.w	r3, r3, #32
    8bf2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    8bf6:	f1be 0f00 	cmp.w	lr, #0
    8bfa:	d005      	beq.n	8c08 <z_cbvprintf_impl+0x98>
    8bfc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    8c00:	f043 0310 	orr.w	r3, r3, #16
    8c04:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    8c08:	f1bc 0f00 	cmp.w	ip, #0
    8c0c:	d005      	beq.n	8c1a <z_cbvprintf_impl+0xaa>
    8c0e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    8c12:	f043 0308 	orr.w	r3, r3, #8
    8c16:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    8c1a:	b12e      	cbz	r6, 8c28 <z_cbvprintf_impl+0xb8>
    8c1c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    8c20:	f043 0304 	orr.w	r3, r3, #4
    8c24:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    8c28:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    8c2c:	f003 0044 	and.w	r0, r3, #68	; 0x44
    8c30:	2844      	cmp	r0, #68	; 0x44
    8c32:	d103      	bne.n	8c3c <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    8c34:	f36f 1386 	bfc	r3, #6, #1
    8c38:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    8c3c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    8c40:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    8c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8c46:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    8c4a:	d17f      	bne.n	8d4c <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    8c4c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    8c50:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    8c52:	f042 0201 	orr.w	r2, r2, #1
    8c56:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    8c5a:	781a      	ldrb	r2, [r3, #0]
    8c5c:	2a2e      	cmp	r2, #46	; 0x2e
    8c5e:	bf0c      	ite	eq
    8c60:	2101      	moveq	r1, #1
    8c62:	2100      	movne	r1, #0
    8c64:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    8c68:	f361 0241 	bfi	r2, r1, #1, #1
    8c6c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    8c70:	d178      	bne.n	8d64 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    8c72:	785a      	ldrb	r2, [r3, #1]
    8c74:	2a2a      	cmp	r2, #42	; 0x2a
    8c76:	d06e      	beq.n	8d56 <z_cbvprintf_impl+0x1e6>
	size_t val = 0;
    8c78:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    8c7a:	f04f 0c0a 	mov.w	ip, #10
	++sp;
    8c7e:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    8c80:	4619      	mov	r1, r3
    8c82:	f811 0b01 	ldrb.w	r0, [r1], #1
    8c86:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    8c8a:	2e09      	cmp	r6, #9
    8c8c:	f240 8095 	bls.w	8dba <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    8c90:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    8c94:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    8c96:	f3c1 0040 	ubfx	r0, r1, #1, #1
    8c9a:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    8c9e:	460a      	mov	r2, r1
    8ca0:	f360 0241 	bfi	r2, r0, #1, #1
    8ca4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    8ca8:	e05c      	b.n	8d64 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    8caa:	1cba      	adds	r2, r7, #2
    8cac:	9203      	str	r2, [sp, #12]
    8cae:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    8cb2:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    8cb6:	07da      	lsls	r2, r3, #31
    8cb8:	f140 812e 	bpl.w	8f18 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    8cbc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    8cc0:	f1b8 0f00 	cmp.w	r8, #0
    8cc4:	da07      	bge.n	8cd6 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    8cc6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
    8cca:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    8cce:	f042 0204 	orr.w	r2, r2, #4
    8cd2:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
    8cd6:	075e      	lsls	r6, r3, #29
    8cd8:	f140 8127 	bpl.w	8f2a <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    8cdc:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    8ce0:	f1ba 0f00 	cmp.w	sl, #0
    8ce4:	f280 8126 	bge.w	8f34 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    8ce8:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    8cec:	f36f 0341 	bfc	r3, #1, #1
    8cf0:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    8cf4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    8cf8:	e11c      	b.n	8f34 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    8cfa:	2a2d      	cmp	r2, #45	; 0x2d
    8cfc:	d00d      	beq.n	8d1a <z_cbvprintf_impl+0x1aa>
    8cfe:	2a30      	cmp	r2, #48	; 0x30
    8d00:	f47f af69 	bne.w	8bd6 <z_cbvprintf_impl+0x66>
    8d04:	2301      	movs	r3, #1
	} while (loop);
    8d06:	e758      	b.n	8bba <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    8d08:	f04f 0c01 	mov.w	ip, #1
    8d0c:	e755      	b.n	8bba <z_cbvprintf_impl+0x4a>
    8d0e:	f04f 0e01 	mov.w	lr, #1
    8d12:	e752      	b.n	8bba <z_cbvprintf_impl+0x4a>
    8d14:	f04f 0801 	mov.w	r8, #1
    8d18:	e74f      	b.n	8bba <z_cbvprintf_impl+0x4a>
    8d1a:	2601      	movs	r6, #1
    8d1c:	e74d      	b.n	8bba <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    8d1e:	4603      	mov	r3, r0
    8d20:	fb0e 6202 	mla	r2, lr, r2, r6
    8d24:	3a30      	subs	r2, #48	; 0x30
    8d26:	4618      	mov	r0, r3
    8d28:	f810 6b01 	ldrb.w	r6, [r0], #1
    8d2c:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    8d30:	f1bc 0f09 	cmp.w	ip, #9
    8d34:	d9f3      	bls.n	8d1e <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    8d36:	4299      	cmp	r1, r3
    8d38:	d08f      	beq.n	8c5a <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    8d3a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    8d3e:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    8d40:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    8d42:	f362 0141 	bfi	r1, r2, #1, #1
    8d46:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    8d4a:	e786      	b.n	8c5a <z_cbvprintf_impl+0xea>
    8d4c:	460b      	mov	r3, r1
	size_t val = 0;
    8d4e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    8d50:	f04f 0e0a 	mov.w	lr, #10
    8d54:	e7e7      	b.n	8d26 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    8d56:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    8d5a:	3302      	adds	r3, #2
		conv->prec_star = true;
    8d5c:	f042 0204 	orr.w	r2, r2, #4
    8d60:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
    8d64:	781a      	ldrb	r2, [r3, #0]
    8d66:	2a6c      	cmp	r2, #108	; 0x6c
    8d68:	d047      	beq.n	8dfa <z_cbvprintf_impl+0x28a>
    8d6a:	d82b      	bhi.n	8dc4 <z_cbvprintf_impl+0x254>
    8d6c:	2a68      	cmp	r2, #104	; 0x68
    8d6e:	d031      	beq.n	8dd4 <z_cbvprintf_impl+0x264>
    8d70:	2a6a      	cmp	r2, #106	; 0x6a
    8d72:	d04b      	beq.n	8e0c <z_cbvprintf_impl+0x29c>
    8d74:	2a4c      	cmp	r2, #76	; 0x4c
    8d76:	d051      	beq.n	8e1c <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    8d78:	461a      	mov	r2, r3
    8d7a:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    8d7e:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    8d80:	9203      	str	r2, [sp, #12]
    8d82:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
    8d86:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
    8d8a:	f200 80be 	bhi.w	8f0a <z_cbvprintf_impl+0x39a>
    8d8e:	2b6d      	cmp	r3, #109	; 0x6d
    8d90:	d851      	bhi.n	8e36 <z_cbvprintf_impl+0x2c6>
    8d92:	2b69      	cmp	r3, #105	; 0x69
    8d94:	f200 80b9 	bhi.w	8f0a <z_cbvprintf_impl+0x39a>
    8d98:	2b57      	cmp	r3, #87	; 0x57
    8d9a:	d867      	bhi.n	8e6c <z_cbvprintf_impl+0x2fc>
    8d9c:	2b41      	cmp	r3, #65	; 0x41
    8d9e:	d003      	beq.n	8da8 <z_cbvprintf_impl+0x238>
    8da0:	3b45      	subs	r3, #69	; 0x45
    8da2:	2b02      	cmp	r3, #2
    8da4:	f200 80b1 	bhi.w	8f0a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    8da8:	2204      	movs	r2, #4
    8daa:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    8dae:	f362 0302 	bfi	r3, r2, #0, #3
    8db2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    8db6:	2301      	movs	r3, #1
			break;
    8db8:	e073      	b.n	8ea2 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    8dba:	fb0c 0202 	mla	r2, ip, r2, r0
    8dbe:	460b      	mov	r3, r1
    8dc0:	3a30      	subs	r2, #48	; 0x30
    8dc2:	e75d      	b.n	8c80 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    8dc4:	2a74      	cmp	r2, #116	; 0x74
    8dc6:	d025      	beq.n	8e14 <z_cbvprintf_impl+0x2a4>
    8dc8:	2a7a      	cmp	r2, #122	; 0x7a
    8dca:	d1d5      	bne.n	8d78 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    8dcc:	2106      	movs	r1, #6
    8dce:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    8dd2:	e00c      	b.n	8dee <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    8dd4:	785a      	ldrb	r2, [r3, #1]
    8dd6:	2a68      	cmp	r2, #104	; 0x68
    8dd8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    8ddc:	d106      	bne.n	8dec <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    8dde:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    8de0:	f361 02c6 	bfi	r2, r1, #3, #4
    8de4:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    8de8:	3302      	adds	r3, #2
    8dea:	e7c5      	b.n	8d78 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    8dec:	2102      	movs	r1, #2
    8dee:	f361 02c6 	bfi	r2, r1, #3, #4
    8df2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    8df6:	3301      	adds	r3, #1
    8df8:	e7be      	b.n	8d78 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    8dfa:	785a      	ldrb	r2, [r3, #1]
    8dfc:	2a6c      	cmp	r2, #108	; 0x6c
    8dfe:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    8e02:	d101      	bne.n	8e08 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    8e04:	2104      	movs	r1, #4
    8e06:	e7eb      	b.n	8de0 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    8e08:	2103      	movs	r1, #3
    8e0a:	e7f0      	b.n	8dee <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    8e0c:	2105      	movs	r1, #5
    8e0e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    8e12:	e7ec      	b.n	8dee <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    8e14:	2107      	movs	r1, #7
    8e16:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    8e1a:	e7e8      	b.n	8dee <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    8e1c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    8e20:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    8e24:	f022 0202 	bic.w	r2, r2, #2
    8e28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    8e2c:	f042 0202 	orr.w	r2, r2, #2
    8e30:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    8e34:	e7df      	b.n	8df6 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    8e36:	3b6e      	subs	r3, #110	; 0x6e
    8e38:	b2d9      	uxtb	r1, r3
    8e3a:	2301      	movs	r3, #1
    8e3c:	408b      	lsls	r3, r1
    8e3e:	f240 4182 	movw	r1, #1154	; 0x482
    8e42:	420b      	tst	r3, r1
    8e44:	d137      	bne.n	8eb6 <z_cbvprintf_impl+0x346>
    8e46:	f013 0f24 	tst.w	r3, #36	; 0x24
    8e4a:	d151      	bne.n	8ef0 <z_cbvprintf_impl+0x380>
    8e4c:	07d8      	lsls	r0, r3, #31
    8e4e:	d55c      	bpl.n	8f0a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    8e50:	2103      	movs	r1, #3
    8e52:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    8e56:	f361 0302 	bfi	r3, r1, #0, #3
    8e5a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    8e5e:	f002 0378 	and.w	r3, r2, #120	; 0x78
    8e62:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    8e66:	424b      	negs	r3, r1
    8e68:	414b      	adcs	r3, r1
    8e6a:	e01a      	b.n	8ea2 <z_cbvprintf_impl+0x332>
    8e6c:	2001      	movs	r0, #1
	switch (conv->specifier) {
    8e6e:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    8e72:	b2c9      	uxtb	r1, r1
    8e74:	fa00 f101 	lsl.w	r1, r0, r1
    8e78:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    8e7c:	d194      	bne.n	8da8 <z_cbvprintf_impl+0x238>
    8e7e:	f640 0601 	movw	r6, #2049	; 0x801
    8e82:	4231      	tst	r1, r6
    8e84:	d11d      	bne.n	8ec2 <z_cbvprintf_impl+0x352>
    8e86:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    8e8a:	d03e      	beq.n	8f0a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    8e8c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    8e90:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    8e94:	f002 0278 	and.w	r2, r2, #120	; 0x78
    8e98:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    8e9a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    8e9e:	d034      	beq.n	8f0a <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    8ea0:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    8ea2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    8ea6:	f3c2 0140 	ubfx	r1, r2, #1, #1
    8eaa:	430b      	orrs	r3, r1
    8eac:	f363 0241 	bfi	r2, r3, #1, #1
    8eb0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    8eb4:	e6fd      	b.n	8cb2 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    8eb6:	2102      	movs	r1, #2
    8eb8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    8ebc:	f361 0302 	bfi	r3, r1, #0, #3
    8ec0:	e7e8      	b.n	8e94 <z_cbvprintf_impl+0x324>
    8ec2:	2002      	movs	r0, #2
    8ec4:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    8ec8:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    8ecc:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    8ed0:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    8ed2:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    8ed6:	bf02      	ittt	eq
    8ed8:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    8edc:	f041 0101 	orreq.w	r1, r1, #1
    8ee0:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    8ee4:	2b63      	cmp	r3, #99	; 0x63
    8ee6:	d1db      	bne.n	8ea0 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    8ee8:	1e13      	subs	r3, r2, #0
    8eea:	bf18      	it	ne
    8eec:	2301      	movne	r3, #1
    8eee:	e7d8      	b.n	8ea2 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    8ef0:	2103      	movs	r1, #3
    8ef2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    8ef6:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    8efa:	f361 0302 	bfi	r3, r1, #0, #3
    8efe:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    8f02:	bf14      	ite	ne
    8f04:	2301      	movne	r3, #1
    8f06:	2300      	moveq	r3, #0
    8f08:	e7cb      	b.n	8ea2 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    8f0a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    8f0e:	f043 0301 	orr.w	r3, r3, #1
    8f12:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    8f16:	e7c3      	b.n	8ea0 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    8f18:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    8f1c:	2a00      	cmp	r2, #0
		int width = -1;
    8f1e:	bfac      	ite	ge
    8f20:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
			width = conv->width_value;
    8f24:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
    8f28:	e6d5      	b.n	8cd6 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    8f2a:	0798      	lsls	r0, r3, #30
    8f2c:	f57f aee2 	bpl.w	8cf4 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    8f30:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
    8f34:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    8f36:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    8f3a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
    8f3e:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
    8f42:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    8f46:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    8f48:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    8f4c:	d133      	bne.n	8fb6 <_flash_used+0x2a>
			switch (length_mod) {
    8f4e:	1ecb      	subs	r3, r1, #3
    8f50:	2b04      	cmp	r3, #4
    8f52:	d804      	bhi.n	8f5e <z_cbvprintf_impl+0x3ee>
    8f54:	e8df f003 	tbb	[pc, r3]
    8f58:	21464621 	.word	0x21464621
    8f5c:	21          	.byte	0x21
    8f5d:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    8f5e:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    8f60:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    8f62:	ea4f 72e3 	mov.w	r2, r3, asr #31
    8f66:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    8f6a:	d11c      	bne.n	8fa6 <_flash_used+0x1a>
				value->sint = (signed char)value->sint;
    8f6c:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    8f70:	17da      	asrs	r2, r3, #31
    8f72:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    8f76:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    8f78:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    8f7c:	f013 0603 	ands.w	r6, r3, #3
    8f80:	d050      	beq.n	9024 <_flash_used+0x98>
			OUTS(sp, fp);
    8f82:	463a      	mov	r2, r7
    8f84:	4659      	mov	r1, fp
    8f86:	4648      	mov	r0, r9
    8f88:	9b03      	ldr	r3, [sp, #12]
    8f8a:	f005 fe95 	bl	ecb8 <outs>
    8f8e:	2800      	cmp	r0, #0
    8f90:	f2c0 8152 	blt.w	9238 <_flash_used+0x2ac>
    8f94:	4405      	add	r5, r0
			continue;
    8f96:	9f03      	ldr	r7, [sp, #12]
    8f98:	e5f2      	b.n	8b80 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    8f9a:	f854 3b04 	ldr.w	r3, [r4], #4
    8f9e:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    8fa0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    8fa4:	e7e8      	b.n	8f78 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    8fa6:	2902      	cmp	r1, #2
    8fa8:	d1e5      	bne.n	8f76 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    8faa:	b21a      	sxth	r2, r3
    8fac:	f343 33c0 	sbfx	r3, r3, #15, #1
    8fb0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    8fb4:	e7df      	b.n	8f76 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    8fb6:	2b02      	cmp	r3, #2
    8fb8:	d124      	bne.n	9004 <_flash_used+0x78>
			switch (length_mod) {
    8fba:	1ecb      	subs	r3, r1, #3
    8fbc:	2b04      	cmp	r3, #4
    8fbe:	d804      	bhi.n	8fca <_flash_used+0x3e>
    8fc0:	e8df f003 	tbb	[pc, r3]
    8fc4:	18101018 	.word	0x18101018
    8fc8:	18          	.byte	0x18
    8fc9:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    8fca:	2901      	cmp	r1, #1
    8fcc:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    8fd0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    8fd4:	d014      	beq.n	9000 <_flash_used+0x74>
			} else if (length_mod == LENGTH_H) {
    8fd6:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    8fd8:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    8fdc:	d1cc      	bne.n	8f78 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    8fde:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    8fe0:	930e      	str	r3, [sp, #56]	; 0x38
    8fe2:	e7c9      	b.n	8f78 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    8fe4:	3407      	adds	r4, #7
    8fe6:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    8fea:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    8fee:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    8ff2:	e7c1      	b.n	8f78 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    8ff4:	f854 3b04 	ldr.w	r3, [r4], #4
    8ff8:	930e      	str	r3, [sp, #56]	; 0x38
    8ffa:	2300      	movs	r3, #0
    8ffc:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    8ffe:	e7bb      	b.n	8f78 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    9000:	b2db      	uxtb	r3, r3
    9002:	e7cd      	b.n	8fa0 <_flash_used+0x14>
		} else if (specifier_cat == SPECIFIER_FP) {
    9004:	2b04      	cmp	r3, #4
    9006:	d108      	bne.n	901a <_flash_used+0x8e>
					(sint_value_type)va_arg(ap, long long);
    9008:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    900a:	f024 0407 	bic.w	r4, r4, #7
    900e:	e9d4 2300 	ldrd	r2, r3, [r4]
    9012:	3408      	adds	r4, #8
    9014:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    9018:	e7ae      	b.n	8f78 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    901a:	2b03      	cmp	r3, #3
    901c:	d1ac      	bne.n	8f78 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    901e:	f854 3b04 	ldr.w	r3, [r4], #4
    9022:	e7dd      	b.n	8fe0 <_flash_used+0x54>
		switch (conv->specifier) {
    9024:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    9028:	2878      	cmp	r0, #120	; 0x78
    902a:	d8b4      	bhi.n	8f96 <_flash_used+0xa>
    902c:	2862      	cmp	r0, #98	; 0x62
    902e:	d81c      	bhi.n	906a <_flash_used+0xde>
    9030:	2825      	cmp	r0, #37	; 0x25
    9032:	f43f adad 	beq.w	8b90 <z_cbvprintf_impl+0x20>
    9036:	2858      	cmp	r0, #88	; 0x58
    9038:	d1ad      	bne.n	8f96 <_flash_used+0xa>
			bps = encode_uint(value->uint, conv, buf, bpe);
    903a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    903e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9042:	9300      	str	r3, [sp, #0]
    9044:	aa10      	add	r2, sp, #64	; 0x40
    9046:	ab08      	add	r3, sp, #32
    9048:	f005 fdf0 	bl	ec2c <encode_uint>
			if (precision >= 0) {
    904c:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    9050:	4607      	mov	r7, r0
			if (precision >= 0) {
    9052:	f280 8099 	bge.w	9188 <_flash_used+0x1fc>
		if (bps == NULL) {
    9056:	2f00      	cmp	r7, #0
    9058:	d09d      	beq.n	8f96 <_flash_used+0xa>
		size_t nj_len = (bpe - bps);
    905a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    905e:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    9060:	2e00      	cmp	r6, #0
    9062:	f000 80c0 	beq.w	91e6 <_flash_used+0x25a>
			nj_len += 1U;
    9066:	3001      	adds	r0, #1
    9068:	e0bd      	b.n	91e6 <_flash_used+0x25a>
		switch (conv->specifier) {
    906a:	3863      	subs	r0, #99	; 0x63
    906c:	2815      	cmp	r0, #21
    906e:	d892      	bhi.n	8f96 <_flash_used+0xa>
    9070:	a201      	add	r2, pc, #4	; (adr r2, 9078 <_flash_used+0xec>)
    9072:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    9076:	bf00      	nop
    9078:	0000914d 	.word	0x0000914d
    907c:	0000915f 	.word	0x0000915f
    9080:	00008f97 	.word	0x00008f97
    9084:	00008f97 	.word	0x00008f97
    9088:	00008f97 	.word	0x00008f97
    908c:	00008f97 	.word	0x00008f97
    9090:	0000915f 	.word	0x0000915f
    9094:	00008f97 	.word	0x00008f97
    9098:	00008f97 	.word	0x00008f97
    909c:	00008f97 	.word	0x00008f97
    90a0:	00008f97 	.word	0x00008f97
    90a4:	000091eb 	.word	0x000091eb
    90a8:	00009183 	.word	0x00009183
    90ac:	000091a9 	.word	0x000091a9
    90b0:	00008f97 	.word	0x00008f97
    90b4:	00008f97 	.word	0x00008f97
    90b8:	000090d1 	.word	0x000090d1
    90bc:	00008f97 	.word	0x00008f97
    90c0:	00009183 	.word	0x00009183
    90c4:	00008f97 	.word	0x00008f97
    90c8:	00008f97 	.word	0x00008f97
    90cc:	00009183 	.word	0x00009183
			if (precision >= 0) {
    90d0:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    90d4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    90d6:	db35      	blt.n	9144 <_flash_used+0x1b8>
				len = strnlen(bps, precision);
    90d8:	4651      	mov	r1, sl
    90da:	4638      	mov	r0, r7
    90dc:	f006 f90c 	bl	f2f8 <strnlen>
			bpe = bps + len;
    90e0:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    90e4:	2f00      	cmp	r7, #0
    90e6:	f43f af56 	beq.w	8f96 <_flash_used+0xa>
		char sign = 0;
    90ea:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    90ec:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    90f0:	f013 0210 	ands.w	r2, r3, #16
    90f4:	9205      	str	r2, [sp, #20]
    90f6:	f000 8092 	beq.w	921e <_flash_used+0x292>
			nj_len += 2U;
    90fa:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    90fc:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    90fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    9100:	bf48      	it	mi
    9102:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    9104:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    9106:	bf48      	it	mi
    9108:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    910a:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
    910e:	9204      	str	r2, [sp, #16]
		if (width > 0) {
    9110:	f340 809f 	ble.w	9252 <_flash_used+0x2c6>
			if (!conv->flag_dash) {
    9114:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    9118:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    911c:	f3c2 0380 	ubfx	r3, r2, #2, #1
    9120:	0750      	lsls	r0, r2, #29
    9122:	9306      	str	r3, [sp, #24]
    9124:	f100 8095 	bmi.w	9252 <_flash_used+0x2c6>
				if (conv->flag_zero) {
    9128:	0651      	lsls	r1, r2, #25
    912a:	f140 8088 	bpl.w	923e <_flash_used+0x2b2>
					if (sign != 0) {
    912e:	b13e      	cbz	r6, 9140 <_flash_used+0x1b4>
						OUTC(sign);
    9130:	4659      	mov	r1, fp
    9132:	4630      	mov	r0, r6
    9134:	47c8      	blx	r9
    9136:	2800      	cmp	r0, #0
    9138:	db7e      	blt.n	9238 <_flash_used+0x2ac>
    913a:	9b06      	ldr	r3, [sp, #24]
    913c:	3501      	adds	r5, #1
    913e:	461e      	mov	r6, r3
					pad = '0';
    9140:	2230      	movs	r2, #48	; 0x30
    9142:	e07d      	b.n	9240 <_flash_used+0x2b4>
				len = strlen(bps);
    9144:	4638      	mov	r0, r7
    9146:	f006 f8d0 	bl	f2ea <strlen>
    914a:	e7c9      	b.n	90e0 <_flash_used+0x154>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    914c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
    914e:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    9150:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    9152:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
    9156:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    9158:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
    915c:	e7c6      	b.n	90ec <_flash_used+0x160>
			if (conv->flag_plus) {
    915e:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    9160:	bf5a      	itte	pl
    9162:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    9166:	015e      	lslpl	r6, r3, #5
				sign = '+';
    9168:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    916a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
    916e:	2b00      	cmp	r3, #0
    9170:	f6bf af63 	bge.w	903a <_flash_used+0xae>
				value->uint = (uint_value_type)-sint;
    9174:	4252      	negs	r2, r2
    9176:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    917a:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    917c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    9180:	e75b      	b.n	903a <_flash_used+0xae>
		switch (conv->specifier) {
    9182:	2600      	movs	r6, #0
    9184:	e759      	b.n	903a <_flash_used+0xae>
		char sign = 0;
    9186:	2600      	movs	r6, #0
				conv->flag_zero = false;
    9188:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    918c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9190:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    9192:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    9196:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    9198:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    919c:	f67f af5b 	bls.w	9056 <_flash_used+0xca>
					conv->pad0_value = precision - (int)len;
    91a0:	ebaa 0303 	sub.w	r3, sl, r3
    91a4:	9311      	str	r3, [sp, #68]	; 0x44
    91a6:	e756      	b.n	9056 <_flash_used+0xca>
			if (value->ptr != NULL) {
    91a8:	980e      	ldr	r0, [sp, #56]	; 0x38
    91aa:	b390      	cbz	r0, 9212 <_flash_used+0x286>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    91ac:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    91b0:	9300      	str	r3, [sp, #0]
    91b2:	2100      	movs	r1, #0
    91b4:	ab08      	add	r3, sp, #32
    91b6:	aa10      	add	r2, sp, #64	; 0x40
    91b8:	f005 fd38 	bl	ec2c <encode_uint>
				conv->altform_0c = true;
    91bc:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    91c0:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
    91c4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    91c8:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    91cc:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    91d0:	4607      	mov	r7, r0
				conv->altform_0c = true;
    91d2:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    91d6:	dad6      	bge.n	9186 <_flash_used+0x1fa>
		if (bps == NULL) {
    91d8:	2800      	cmp	r0, #0
    91da:	f43f aedc 	beq.w	8f96 <_flash_used+0xa>
		char sign = 0;
    91de:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    91e0:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    91e4:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
    91e6:	469a      	mov	sl, r3
    91e8:	e780      	b.n	90ec <_flash_used+0x160>
				store_count(conv, value->ptr, count);
    91ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    91ec:	2907      	cmp	r1, #7
    91ee:	f63f aed2 	bhi.w	8f96 <_flash_used+0xa>
    91f2:	e8df f001 	tbb	[pc, r1]
    91f6:	040c      	.short	0x040c
    91f8:	08080c06 	.word	0x08080c06
    91fc:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    91fe:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    9200:	e6c9      	b.n	8f96 <_flash_used+0xa>
		*(short *)dp = (short)count;
    9202:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    9204:	e6c7      	b.n	8f96 <_flash_used+0xa>
		*(intmax_t *)dp = (intmax_t)count;
    9206:	17ea      	asrs	r2, r5, #31
    9208:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    920c:	e6c3      	b.n	8f96 <_flash_used+0xa>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    920e:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    9210:	e6c1      	b.n	8f96 <_flash_used+0xa>
    9212:	4f2f      	ldr	r7, [pc, #188]	; (92d0 <_flash_used+0x344>)
		char sign = 0;
    9214:	4606      	mov	r6, r0
			bpe = bps + 5;
    9216:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    921a:	2005      	movs	r0, #5
    921c:	e766      	b.n	90ec <_flash_used+0x160>
		} else if (conv->altform_0) {
    921e:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    9220:	bf48      	it	mi
    9222:	3001      	addmi	r0, #1
    9224:	e76a      	b.n	90fc <_flash_used+0x170>
					OUTC(pad);
    9226:	4610      	mov	r0, r2
    9228:	9307      	str	r3, [sp, #28]
    922a:	9206      	str	r2, [sp, #24]
    922c:	4659      	mov	r1, fp
    922e:	47c8      	blx	r9
    9230:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    9234:	2800      	cmp	r0, #0
    9236:	da04      	bge.n	9242 <_flash_used+0x2b6>
#undef OUTS
#undef OUTC
}
    9238:	b015      	add	sp, #84	; 0x54
    923a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    923e:	2220      	movs	r2, #32
					pad = '0';
    9240:	4643      	mov	r3, r8
				while (width-- > 0) {
    9242:	4619      	mov	r1, r3
    9244:	2900      	cmp	r1, #0
    9246:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    924a:	dcec      	bgt.n	9226 <_flash_used+0x29a>
    924c:	4445      	add	r5, r8
    924e:	4698      	mov	r8, r3
    9250:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    9252:	b12e      	cbz	r6, 9260 <_flash_used+0x2d4>
			OUTC(sign);
    9254:	4659      	mov	r1, fp
    9256:	4630      	mov	r0, r6
    9258:	47c8      	blx	r9
    925a:	2800      	cmp	r0, #0
    925c:	dbec      	blt.n	9238 <_flash_used+0x2ac>
    925e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    9260:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9264:	06da      	lsls	r2, r3, #27
    9266:	d401      	bmi.n	926c <_flash_used+0x2e0>
    9268:	071b      	lsls	r3, r3, #28
    926a:	d505      	bpl.n	9278 <_flash_used+0x2ec>
				OUTC('0');
    926c:	4659      	mov	r1, fp
    926e:	2030      	movs	r0, #48	; 0x30
    9270:	47c8      	blx	r9
    9272:	2800      	cmp	r0, #0
    9274:	dbe0      	blt.n	9238 <_flash_used+0x2ac>
    9276:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    9278:	9b05      	ldr	r3, [sp, #20]
    927a:	b133      	cbz	r3, 928a <_flash_used+0x2fe>
				OUTC(conv->specifier);
    927c:	4659      	mov	r1, fp
    927e:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    9282:	47c8      	blx	r9
    9284:	2800      	cmp	r0, #0
    9286:	dbd7      	blt.n	9238 <_flash_used+0x2ac>
    9288:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    928a:	9e04      	ldr	r6, [sp, #16]
    928c:	442e      	add	r6, r5
    928e:	e005      	b.n	929c <_flash_used+0x310>
				OUTC('0');
    9290:	4659      	mov	r1, fp
    9292:	2030      	movs	r0, #48	; 0x30
    9294:	47c8      	blx	r9
    9296:	2800      	cmp	r0, #0
    9298:	dbce      	blt.n	9238 <_flash_used+0x2ac>
    929a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    929c:	1b73      	subs	r3, r6, r5
    929e:	2b00      	cmp	r3, #0
    92a0:	dcf6      	bgt.n	9290 <_flash_used+0x304>
			OUTS(bps, bpe);
    92a2:	4653      	mov	r3, sl
    92a4:	463a      	mov	r2, r7
    92a6:	4659      	mov	r1, fp
    92a8:	4648      	mov	r0, r9
    92aa:	f005 fd05 	bl	ecb8 <outs>
    92ae:	2800      	cmp	r0, #0
    92b0:	dbc2      	blt.n	9238 <_flash_used+0x2ac>
    92b2:	4405      	add	r5, r0
		while (width > 0) {
    92b4:	44a8      	add	r8, r5
    92b6:	eba8 0305 	sub.w	r3, r8, r5
    92ba:	2b00      	cmp	r3, #0
    92bc:	f77f ae6b 	ble.w	8f96 <_flash_used+0xa>
			OUTC(' ');
    92c0:	4659      	mov	r1, fp
    92c2:	2020      	movs	r0, #32
    92c4:	47c8      	blx	r9
    92c6:	2800      	cmp	r0, #0
    92c8:	dbb6      	blt.n	9238 <_flash_used+0x2ac>
    92ca:	3501      	adds	r5, #1
			--width;
    92cc:	e7f3      	b.n	92b6 <_flash_used+0x32a>
    92ce:	bf00      	nop
    92d0:	000103d2 	.word	0x000103d2

000092d4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    92d4:	b148      	cbz	r0, 92ea <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    92d6:	4b05      	ldr	r3, [pc, #20]	; (92ec <arch_busy_wait+0x18>)
    92d8:	4a05      	ldr	r2, [pc, #20]	; (92f0 <arch_busy_wait+0x1c>)
    92da:	681b      	ldr	r3, [r3, #0]
    92dc:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    92e0:	4358      	muls	r0, r3
    92e2:	4b04      	ldr	r3, [pc, #16]	; (92f4 <arch_busy_wait+0x20>)
    92e4:	f043 0301 	orr.w	r3, r3, #1
    92e8:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    92ea:	4770      	bx	lr
    92ec:	200080a4 	.word	0x200080a4
    92f0:	000f4240 	.word	0x000f4240
    92f4:	00010030 	.word	0x00010030

000092f8 <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    92f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    92fa:	b083      	sub	sp, #12
    92fc:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    92fe:	1d38      	adds	r0, r7, #4
    9300:	f003 fc46 	bl	cb90 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    9304:	4b27      	ldr	r3, [pc, #156]	; (93a4 <sync_rtc_setup+0xac>)
    9306:	4298      	cmp	r0, r3
    9308:	d149      	bne.n	939e <sync_rtc_setup+0xa6>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    930a:	f002 ffa7 	bl	c25c <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    930e:	1e04      	subs	r4, r0, #0
    9310:	da13      	bge.n	933a <sync_rtc_setup+0x42>
		nrfx_dppi_channel_free(channels.ch.ppi);
    9312:	7938      	ldrb	r0, [r7, #4]
    9314:	f003 fc42 	bl	cb9c <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    9318:	466d      	mov	r5, sp
    931a:	b088      	sub	sp, #32
    931c:	466a      	mov	r2, sp
    931e:	4b22      	ldr	r3, [pc, #136]	; (93a8 <sync_rtc_setup+0xb0>)
    9320:	e9c2 3405 	strd	r3, r4, [r2, #20]
    9324:	2303      	movs	r3, #3
    9326:	f842 3f10 	str.w	r3, [r2, #16]!
    932a:	2300      	movs	r3, #0
    932c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9330:	481e      	ldr	r0, [pc, #120]	; (93ac <sync_rtc_setup+0xb4>)
    9332:	f000 fb27 	bl	9984 <z_impl_z_log_msg_static_create>
    9336:	46ad      	mov	sp, r5
	}

	return rv;
    9338:	e02d      	b.n	9396 <sync_rtc_setup+0x9e>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    933a:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    933e:	4d1c      	ldr	r5, [pc, #112]	; (93b0 <sync_rtc_setup+0xb8>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    9340:	717c      	strb	r4, [r7, #5]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    9342:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    9344:	80fb      	strh	r3, [r7, #6]
    9346:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    9348:	687b      	ldr	r3, [r7, #4]
    934a:	b914      	cbnz	r4, 9352 <sync_rtc_setup+0x5a>
		return -ENOSYS;
    934c:	f06f 0457 	mvn.w	r4, #87	; 0x57
    9350:	e7e2      	b.n	9318 <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    9352:	2108      	movs	r1, #8
    9354:	4628      	mov	r0, r5
    9356:	4a17      	ldr	r2, [pc, #92]	; (93b4 <sync_rtc_setup+0xbc>)
    9358:	47a0      	blx	r4
	if (err < 0) {
    935a:	1e04      	subs	r4, r0, #0
    935c:	dbdc      	blt.n	9318 <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    935e:	6933      	ldr	r3, [r6, #16]
    9360:	2b00      	cmp	r3, #0
    9362:	d0f3      	beq.n	934c <sync_rtc_setup+0x54>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    9364:	2201      	movs	r2, #1
    9366:	2108      	movs	r1, #8
    9368:	4628      	mov	r0, r5
    936a:	4798      	blx	r3
	if (rv < 0) {
    936c:	1e04      	subs	r4, r0, #0
    936e:	dbd3      	blt.n	9318 <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    9370:	2301      	movs	r3, #1
    9372:	793d      	ldrb	r5, [r7, #4]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    9374:	4a10      	ldr	r2, [pc, #64]	; (93b8 <sync_rtc_setup+0xc0>)
    9376:	40ab      	lsls	r3, r5
    9378:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    937c:	7978      	ldrb	r0, [r7, #5]
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    937e:	79fe      	ldrb	r6, [r7, #7]
    9380:	f006 fa17 	bl	f7b2 <z_nrf_rtc_timer_capture_task_address_get>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    9384:	4b0d      	ldr	r3, [pc, #52]	; (93bc <sync_rtc_setup+0xc4>)
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    9386:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    938a:	00b6      	lsls	r6, r6, #2
    938c:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    9390:	519d      	str	r5, [r3, r6]
	if (rv != 0) {
    9392:	2c00      	cmp	r4, #0
    9394:	d1c0      	bne.n	9318 <sync_rtc_setup+0x20>
}
    9396:	4620      	mov	r0, r4
    9398:	370c      	adds	r7, #12
    939a:	46bd      	mov	sp, r7
    939c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rv = -ENODEV;
    939e:	f06f 0412 	mvn.w	r4, #18
    93a2:	e7b9      	b.n	9318 <sync_rtc_setup+0x20>
    93a4:	0bad0000 	.word	0x0bad0000
    93a8:	000103dc 	.word	0x000103dc
    93ac:	00010000 	.word	0x00010000
    93b0:	0000fcf0 	.word	0x0000fcf0
    93b4:	00009405 	.word	0x00009405
    93b8:	40017000 	.word	0x40017000
    93bc:	4002a180 	.word	0x4002a180

000093c0 <rtc_cb>:
{
    93c0:	b538      	push	{r3, r4, r5, lr}
    93c2:	9c04      	ldr	r4, [sp, #16]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    93c4:	f3c4 2507 	ubfx	r5, r4, #8, #8
    93c8:	4628      	mov	r0, r5
    93ca:	f002 fdaf 	bl	bf2c <z_nrf_rtc_timer_compare_evt_address_get>

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    93ce:	2100      	movs	r1, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    93d0:	4b0a      	ldr	r3, [pc, #40]	; (93fc <rtc_cb+0x3c>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    93d2:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    93d4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    93d8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    93dc:	5099      	str	r1, [r3, r2]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    93de:	2301      	movs	r3, #1
    93e0:	b2e4      	uxtb	r4, r4
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    93e2:	4a07      	ldr	r2, [pc, #28]	; (9400 <rtc_cb+0x40>)
    93e4:	40a3      	lsls	r3, r4
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    93e6:	4628      	mov	r0, r5
    93e8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    93ec:	f002 ff54 	bl	c298 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    93f0:	4620      	mov	r0, r4
}
    93f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    93f6:	f003 bbd1 	b.w	cb9c <nrfx_dppi_channel_free>
    93fa:	bf00      	nop
    93fc:	4002a080 	.word	0x4002a080
    9400:	40017000 	.word	0x40017000

00009404 <mbox_callback>:
{
    9404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9406:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    9408:	6883      	ldr	r3, [r0, #8]
    940a:	691b      	ldr	r3, [r3, #16]
    940c:	b10b      	cbz	r3, 9412 <mbox_callback+0xe>
	return api->set_enabled(channel->dev, channel->id, enable);
    940e:	2200      	movs	r2, #0
    9410:	4798      	blx	r3
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    9412:	f3c4 2607 	ubfx	r6, r4, #8, #8
    9416:	4630      	mov	r0, r6
    9418:	f002 fd90 	bl	bf3c <z_nrf_rtc_timer_compare_read>
    941c:	4605      	mov	r5, r0
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    941e:	4630      	mov	r0, r6
    9420:	f006 f9c7 	bl	f7b2 <z_nrf_rtc_timer_capture_task_address_get>

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    9424:	2700      	movs	r7, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    9426:	4b10      	ldr	r3, [pc, #64]	; (9468 <mbox_callback+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    9428:	0e22      	lsrs	r2, r4, #24
    942a:	0092      	lsls	r2, r2, #2
    942c:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    9430:	509f      	str	r7, [r3, r2]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    9432:	4630      	mov	r0, r6
    9434:	f002 fd7a 	bl	bf2c <z_nrf_rtc_timer_compare_evt_address_get>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    9438:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    943a:	4b0c      	ldr	r3, [pc, #48]	; (946c <mbox_callback+0x68>)
    943c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    9440:	4413      	add	r3, r2
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    9442:	b2e2      	uxtb	r2, r4
    9444:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    9448:	601a      	str	r2, [r3, #0]
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    944a:	4b09      	ldr	r3, [pc, #36]	; (9470 <mbox_callback+0x6c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    944c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    9450:	f105 0232 	add.w	r2, r5, #50	; 0x32
    9454:	9300      	str	r3, [sp, #0]
    9456:	4630      	mov	r0, r6
    9458:	463b      	mov	r3, r7
    945a:	9401      	str	r4, [sp, #4]
    945c:	0052      	lsls	r2, r2, #1
    945e:	f006 f9b1 	bl	f7c4 <z_nrf_rtc_timer_set>
}
    9462:	b003      	add	sp, #12
    9464:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9466:	bf00      	nop
    9468:	4002a180 	.word	0x4002a180
    946c:	4002a080 	.word	0x4002a080
    9470:	000093c1 	.word	0x000093c1

00009474 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    9474:	f006 b9d8 	b.w	f828 <SystemInit>

00009478 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    9478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    947c:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
    947e:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
    9480:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    9484:	f8df 8050 	ldr.w	r8, [pc, #80]	; 94d8 <activate_foreach_backend+0x60>
	while (mask_cpy) {
    9488:	b914      	cbnz	r4, 9490 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    948a:	4638      	mov	r0, r7
    948c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    9490:	fa94 f5a4 	rbit	r5, r4
    9494:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    9498:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    949c:	012e      	lsls	r6, r5, #4
    949e:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    94a2:	ea6f 0a03 	mvn.w	sl, r3
    94a6:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    94aa:	7b2b      	ldrb	r3, [r5, #12]
    94ac:	2b00      	cmp	r3, #0
    94ae:	d0eb      	beq.n	9488 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    94b0:	f858 3006 	ldr.w	r3, [r8, r6]
    94b4:	691b      	ldr	r3, [r3, #16]
    94b6:	b94b      	cbnz	r3, 94cc <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    94b8:	4446      	add	r6, r8
			log_backend_enable(backend,
    94ba:	6873      	ldr	r3, [r6, #4]
    94bc:	2204      	movs	r2, #4
    94be:	4628      	mov	r0, r5
    94c0:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    94c2:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    94c6:	f000 fa49 	bl	995c <log_backend_enable>
    94ca:	e7dd      	b.n	9488 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    94cc:	4628      	mov	r0, r5
    94ce:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    94d0:	2800      	cmp	r0, #0
    94d2:	d1d9      	bne.n	9488 <activate_foreach_backend+0x10>
    94d4:	e7f0      	b.n	94b8 <activate_foreach_backend+0x40>
    94d6:	bf00      	nop
    94d8:	00010018 	.word	0x00010018

000094dc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    94dc:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    94de:	2200      	movs	r2, #0
{
    94e0:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    94e2:	490f      	ldr	r1, [pc, #60]	; (9520 <enable_logger+0x44>)
    94e4:	480f      	ldr	r0, [pc, #60]	; (9524 <enable_logger+0x48>)
    94e6:	f006 fb61 	bl	fbac <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    94ea:	2200      	movs	r2, #0
    94ec:	2300      	movs	r3, #0
    94ee:	2400      	movs	r4, #0
    94f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    94f4:	230e      	movs	r3, #14
    94f6:	4d0c      	ldr	r5, [pc, #48]	; (9528 <enable_logger+0x4c>)
    94f8:	e9cd 3403 	strd	r3, r4, [sp, #12]
    94fc:	f44f 7240 	mov.w	r2, #768	; 0x300
    9500:	4628      	mov	r0, r5
    9502:	e9cd 4401 	strd	r4, r4, [sp, #4]
    9506:	4b09      	ldr	r3, [pc, #36]	; (952c <enable_logger+0x50>)
    9508:	4909      	ldr	r1, [pc, #36]	; (9530 <enable_logger+0x54>)
    950a:	9400      	str	r4, [sp, #0]
    950c:	f004 fb0a 	bl	db24 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    9510:	4908      	ldr	r1, [pc, #32]	; (9534 <enable_logger+0x58>)
    9512:	4628      	mov	r0, r5
    9514:	f006 fa19 	bl	f94a <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    9518:	4620      	mov	r0, r4
    951a:	b009      	add	sp, #36	; 0x24
    951c:	bd30      	pop	{r4, r5, pc}
    951e:	bf00      	nop
    9520:	00009539 	.word	0x00009539
    9524:	20008628 	.word	0x20008628
    9528:	200081a0 	.word	0x200081a0
    952c:	00009809 	.word	0x00009809
    9530:	20008c88 	.word	0x20008c88
    9534:	0001040d 	.word	0x0001040d

00009538 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    9538:	4801      	ldr	r0, [pc, #4]	; (9540 <log_process_thread_timer_expiry_fn+0x8>)
    953a:	f004 bc4d 	b.w	ddd8 <z_impl_k_sem_give>
    953e:	bf00      	nop
    9540:	20008190 	.word	0x20008190

00009544 <z_log_init>:
{
    9544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9548:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    954a:	481f      	ldr	r0, [pc, #124]	; (95c8 <z_log_init+0x84>)
{
    954c:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    954e:	f005 fe06 	bl	f15e <atomic_inc>
    9552:	4606      	mov	r6, r0
    9554:	2800      	cmp	r0, #0
    9556:	d030      	beq.n	95ba <z_log_init+0x76>
	uint32_t mask = 0;
    9558:	2500      	movs	r5, #0
}
    955a:	4628      	mov	r0, r5
    955c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    9560:	7b23      	ldrb	r3, [r4, #12]
    9562:	b173      	cbz	r3, 9582 <z_log_init+0x3e>
	if (backend->api->init) {
    9564:	6823      	ldr	r3, [r4, #0]
    9566:	68db      	ldr	r3, [r3, #12]
    9568:	b10b      	cbz	r3, 956e <z_log_init+0x2a>
		backend->api->init(backend);
    956a:	4620      	mov	r0, r4
    956c:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    956e:	6823      	ldr	r3, [r4, #0]
    9570:	691b      	ldr	r3, [r3, #16]
    9572:	b9d3      	cbnz	r3, 95aa <z_log_init+0x66>
				log_backend_enable(backend,
    9574:	6863      	ldr	r3, [r4, #4]
    9576:	2204      	movs	r2, #4
    9578:	4620      	mov	r0, r4
    957a:	6819      	ldr	r1, [r3, #0]
    957c:	f000 f9ee 	bl	995c <log_backend_enable>
			i++;
    9580:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    9582:	3410      	adds	r4, #16
    9584:	454c      	cmp	r4, r9
    9586:	d3eb      	bcc.n	9560 <z_log_init+0x1c>
	if (blocking) {
    9588:	f1b8 0f00 	cmp.w	r8, #0
    958c:	d0e5      	beq.n	955a <z_log_init+0x16>
		while (mask) {
    958e:	2d00      	cmp	r5, #0
    9590:	d0e2      	beq.n	9558 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    9592:	4628      	mov	r0, r5
    9594:	f7ff ff70 	bl	9478 <activate_foreach_backend>
    9598:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    959a:	2f00      	cmp	r7, #0
    959c:	d0f7      	beq.n	958e <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    959e:	2100      	movs	r1, #0
    95a0:	f44f 70a4 	mov.w	r0, #328	; 0x148
    95a4:	f004 ff28 	bl	e3f8 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    95a8:	e7f1      	b.n	958e <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    95aa:	4620      	mov	r0, r4
    95ac:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    95ae:	2800      	cmp	r0, #0
    95b0:	d0e0      	beq.n	9574 <z_log_init+0x30>
				mask |= BIT(i);
    95b2:	fa0a f306 	lsl.w	r3, sl, r6
    95b6:	431d      	orrs	r5, r3
    95b8:	e7e2      	b.n	9580 <z_log_init+0x3c>
	uint32_t mask = 0;
    95ba:	4605      	mov	r5, r0
				mask |= BIT(i);
    95bc:	f04f 0a01 	mov.w	sl, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    95c0:	4c02      	ldr	r4, [pc, #8]	; (95cc <z_log_init+0x88>)
    95c2:	f8df 900c 	ldr.w	r9, [pc, #12]	; 95d0 <z_log_init+0x8c>
    95c6:	e7dd      	b.n	9584 <z_log_init+0x40>
    95c8:	200087a8 	.word	0x200087a8
    95cc:	00010018 	.word	0x00010018
    95d0:	00010028 	.word	0x00010028

000095d4 <log_format_func_t_get>:
}
    95d4:	4b01      	ldr	r3, [pc, #4]	; (95dc <log_format_func_t_get+0x8>)
    95d6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    95da:	4770      	bx	lr
    95dc:	0001004c 	.word	0x0001004c

000095e0 <log_set_timestamp_func>:
{
    95e0:	b508      	push	{r3, lr}
    95e2:	4603      	mov	r3, r0
    95e4:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    95e6:	b12b      	cbz	r3, 95f4 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    95e8:	4a04      	ldr	r2, [pc, #16]	; (95fc <log_set_timestamp_func+0x1c>)
    95ea:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    95ec:	f000 fbf2 	bl	9dd4 <log_output_timestamp_freq_set>
	return 0;
    95f0:	2000      	movs	r0, #0
}
    95f2:	bd08      	pop	{r3, pc}
		return -EINVAL;
    95f4:	f06f 0015 	mvn.w	r0, #21
    95f8:	e7fb      	b.n	95f2 <log_set_timestamp_func+0x12>
    95fa:	bf00      	nop
    95fc:	20008004 	.word	0x20008004

00009600 <z_log_notify_backend_enabled>:
{
    9600:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    9602:	4c04      	ldr	r4, [pc, #16]	; (9614 <z_log_notify_backend_enabled+0x14>)
    9604:	7823      	ldrb	r3, [r4, #0]
    9606:	b913      	cbnz	r3, 960e <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    9608:	4803      	ldr	r0, [pc, #12]	; (9618 <z_log_notify_backend_enabled+0x18>)
    960a:	f004 fbe5 	bl	ddd8 <z_impl_k_sem_give>
	backend_attached = true;
    960e:	2301      	movs	r3, #1
    9610:	7023      	strb	r3, [r4, #0]
}
    9612:	bd10      	pop	{r4, pc}
    9614:	20008a38 	.word	0x20008a38
    9618:	20008190 	.word	0x20008190

0000961c <z_log_dropped>:
{
    961c:	b510      	push	{r4, lr}
    961e:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    9620:	4806      	ldr	r0, [pc, #24]	; (963c <z_log_dropped+0x20>)
    9622:	f005 fd9c 	bl	f15e <atomic_inc>
	if (buffered) {
    9626:	b13c      	cbz	r4, 9638 <z_log_dropped+0x1c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    9628:	4b05      	ldr	r3, [pc, #20]	; (9640 <z_log_dropped+0x24>)
    962a:	e8d3 1fef 	ldaex	r1, [r3]
    962e:	3901      	subs	r1, #1
    9630:	e8c3 1fe2 	stlex	r2, r1, [r3]
    9634:	2a00      	cmp	r2, #0
    9636:	d1f8      	bne.n	962a <z_log_dropped+0xe>
}
    9638:	bd10      	pop	{r4, pc}
    963a:	bf00      	nop
    963c:	200087a0 	.word	0x200087a0
    9640:	200087a4 	.word	0x200087a4

00009644 <z_log_dropped_read_and_clear>:
}
    9644:	2000      	movs	r0, #0
    9646:	4601      	mov	r1, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9648:	4b03      	ldr	r3, [pc, #12]	; (9658 <z_log_dropped_read_and_clear+0x14>)
    964a:	e8d3 0fef 	ldaex	r0, [r3]
    964e:	e8c3 1fe2 	stlex	r2, r1, [r3]
    9652:	2a00      	cmp	r2, #0
    9654:	d1f9      	bne.n	964a <z_log_dropped_read_and_clear+0x6>
    9656:	4770      	bx	lr
    9658:	200087a0 	.word	0x200087a0

0000965c <dropped_notify>:
{
    965c:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    965e:	f7ff fff1 	bl	9644 <z_log_dropped_read_and_clear>
    9662:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    9664:	4c07      	ldr	r4, [pc, #28]	; (9684 <dropped_notify+0x28>)
    9666:	4e08      	ldr	r6, [pc, #32]	; (9688 <dropped_notify+0x2c>)
    9668:	42b4      	cmp	r4, r6
    966a:	d300      	bcc.n	966e <dropped_notify+0x12>
}
    966c:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    966e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    9670:	795b      	ldrb	r3, [r3, #5]
    9672:	b12b      	cbz	r3, 9680 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    9674:	6823      	ldr	r3, [r4, #0]
    9676:	685b      	ldr	r3, [r3, #4]
    9678:	b113      	cbz	r3, 9680 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    967a:	4629      	mov	r1, r5
    967c:	4620      	mov	r0, r4
    967e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    9680:	3410      	adds	r4, #16
    9682:	e7f1      	b.n	9668 <dropped_notify+0xc>
    9684:	00010018 	.word	0x00010018
    9688:	00010028 	.word	0x00010028

0000968c <z_log_msg_init>:
{
    968c:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    968e:	4c04      	ldr	r4, [pc, #16]	; (96a0 <z_log_msg_init+0x14>)
    9690:	4904      	ldr	r1, [pc, #16]	; (96a4 <z_log_msg_init+0x18>)
    9692:	4620      	mov	r0, r4
    9694:	f005 fbd4 	bl	ee40 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    9698:	4b03      	ldr	r3, [pc, #12]	; (96a8 <z_log_msg_init+0x1c>)
    969a:	601c      	str	r4, [r3, #0]
}
    969c:	bd10      	pop	{r4, pc}
    969e:	bf00      	nop
    96a0:	20008140 	.word	0x20008140
    96a4:	00010038 	.word	0x00010038
    96a8:	20008798 	.word	0x20008798

000096ac <log_core_init>:
{
    96ac:	b508      	push	{r3, lr}
	panic_mode = false;
    96ae:	2300      	movs	r3, #0
    96b0:	4a06      	ldr	r2, [pc, #24]	; (96cc <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
    96b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    96b6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    96b8:	4a05      	ldr	r2, [pc, #20]	; (96d0 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    96ba:	4806      	ldr	r0, [pc, #24]	; (96d4 <log_core_init+0x28>)
	dropped_cnt = 0;
    96bc:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    96be:	f7ff ff8f 	bl	95e0 <log_set_timestamp_func>
}
    96c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    96c6:	f7ff bfe1 	b.w	968c <z_log_msg_init>
    96ca:	bf00      	nop
    96cc:	20008a39 	.word	0x20008a39
    96d0:	200087a0 	.word	0x200087a0
    96d4:	0000f15b 	.word	0x0000f15b

000096d8 <z_log_msg_alloc>:
{
    96d8:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    96da:	2200      	movs	r2, #0
    96dc:	2300      	movs	r3, #0
    96de:	4801      	ldr	r0, [pc, #4]	; (96e4 <z_log_msg_alloc+0xc>)
    96e0:	f005 bbcf 	b.w	ee82 <mpsc_pbuf_alloc>
    96e4:	20008140 	.word	0x20008140

000096e8 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    96e8:	4801      	ldr	r0, [pc, #4]	; (96f0 <z_log_msg_local_claim+0x8>)
    96ea:	f005 bc68 	b.w	efbe <mpsc_pbuf_claim>
    96ee:	bf00      	nop
    96f0:	20008140 	.word	0x20008140

000096f4 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    96f4:	4b02      	ldr	r3, [pc, #8]	; (9700 <z_log_msg_free+0xc>)
{
    96f6:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    96f8:	6818      	ldr	r0, [r3, #0]
    96fa:	f005 bcb0 	b.w	f05e <mpsc_pbuf_free>
    96fe:	bf00      	nop
    9700:	20008798 	.word	0x20008798

00009704 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    9704:	4801      	ldr	r0, [pc, #4]	; (970c <z_log_msg_pending+0x8>)
    9706:	f005 bcde 	b.w	f0c6 <mpsc_pbuf_is_pending>
    970a:	bf00      	nop
    970c:	20008140 	.word	0x20008140

00009710 <z_impl_log_process>:
{
    9710:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    9712:	4b26      	ldr	r3, [pc, #152]	; (97ac <z_impl_log_process+0x9c>)
    9714:	7818      	ldrb	r0, [r3, #0]
    9716:	2800      	cmp	r0, #0
    9718:	d047      	beq.n	97aa <z_impl_log_process+0x9a>
	return z_log_msg_local_claim();
    971a:	f7ff ffe5 	bl	96e8 <z_log_msg_local_claim>
	if (msg) {
    971e:	4605      	mov	r5, r0
    9720:	b170      	cbz	r0, 9740 <z_impl_log_process+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    9722:	4b23      	ldr	r3, [pc, #140]	; (97b0 <z_impl_log_process+0xa0>)
    9724:	e8d3 1fef 	ldaex	r1, [r3]
    9728:	3901      	subs	r1, #1
    972a:	e8c3 1fe2 	stlex	r2, r1, [r3]
    972e:	2a00      	cmp	r2, #0
    9730:	d1f8      	bne.n	9724 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    9732:	4c20      	ldr	r4, [pc, #128]	; (97b4 <z_impl_log_process+0xa4>)
    9734:	4e20      	ldr	r6, [pc, #128]	; (97b8 <z_impl_log_process+0xa8>)
    9736:	42b4      	cmp	r4, r6
    9738:	d32d      	bcc.n	9796 <z_impl_log_process+0x86>
		z_log_msg_free(msg);
    973a:	4628      	mov	r0, r5
    973c:	f7ff ffda 	bl	96f4 <z_log_msg_free>
	return dropped_cnt > 0;
    9740:	4b1e      	ldr	r3, [pc, #120]	; (97bc <z_impl_log_process+0xac>)
    9742:	4c1f      	ldr	r4, [pc, #124]	; (97c0 <z_impl_log_process+0xb0>)
		if ((dropped_pend || unordered_pend) &&
    9744:	681b      	ldr	r3, [r3, #0]
    9746:	2b00      	cmp	r3, #0
    9748:	dd19      	ble.n	977e <z_impl_log_process+0x6e>
	return z_impl_k_uptime_ticks();
    974a:	f006 fa29 	bl	fba0 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    974e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9752:	fba0 0302 	umull	r0, r3, r0, r2
    9756:	fb02 3101 	mla	r1, r2, r1, r3
    975a:	0bc3      	lsrs	r3, r0, #15
    975c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    9760:	e9d4 2000 	ldrd	r2, r0, [r4]
    9764:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    9766:	f240 32e9 	movw	r2, #1001	; 0x3e9
    976a:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    976e:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    9772:	4293      	cmp	r3, r2
    9774:	f171 0100 	sbcs.w	r1, r1, #0
    9778:	d301      	bcc.n	977e <z_impl_log_process+0x6e>
				dropped_notify();
    977a:	f7ff ff6f 	bl	965c <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    977e:	e9d4 3200 	ldrd	r3, r2, [r4]
    9782:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    9786:	f142 0200 	adc.w	r2, r2, #0
    978a:	e9c4 3200 	strd	r3, r2, [r4]
}
    978e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    9792:	f7ff bfb7 	b.w	9704 <z_log_msg_pending>
	return backend->cb->active;
    9796:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    9798:	795b      	ldrb	r3, [r3, #5]
    979a:	b123      	cbz	r3, 97a6 <z_impl_log_process+0x96>
	backend->api->process(backend, msg);
    979c:	6823      	ldr	r3, [r4, #0]
    979e:	4629      	mov	r1, r5
    97a0:	4620      	mov	r0, r4
    97a2:	681b      	ldr	r3, [r3, #0]
    97a4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    97a6:	3410      	adds	r4, #16
    97a8:	e7c5      	b.n	9736 <z_impl_log_process+0x26>
}
    97aa:	bd70      	pop	{r4, r5, r6, pc}
    97ac:	20008a38 	.word	0x20008a38
    97b0:	200087a4 	.word	0x200087a4
    97b4:	00010018 	.word	0x00010018
    97b8:	00010028 	.word	0x00010028
    97bc:	200087a0 	.word	0x200087a0
    97c0:	20008620 	.word	0x20008620

000097c4 <z_impl_log_panic>:
{
    97c4:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    97c6:	4d0d      	ldr	r5, [pc, #52]	; (97fc <z_impl_log_panic+0x38>)
    97c8:	7829      	ldrb	r1, [r5, #0]
    97ca:	b961      	cbnz	r1, 97e6 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    97cc:	2001      	movs	r0, #1
    97ce:	f7ff feb9 	bl	9544 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    97d2:	4c0b      	ldr	r4, [pc, #44]	; (9800 <z_impl_log_panic+0x3c>)
    97d4:	4e0b      	ldr	r6, [pc, #44]	; (9804 <z_impl_log_panic+0x40>)
    97d6:	42b4      	cmp	r4, r6
    97d8:	d306      	bcc.n	97e8 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    97da:	f7ff ff99 	bl	9710 <z_impl_log_process>
		while (log_process() == true) {
    97de:	2800      	cmp	r0, #0
    97e0:	d1fb      	bne.n	97da <z_impl_log_panic+0x16>
	panic_mode = true;
    97e2:	2301      	movs	r3, #1
    97e4:	702b      	strb	r3, [r5, #0]
}
    97e6:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    97e8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    97ea:	795b      	ldrb	r3, [r3, #5]
    97ec:	b11b      	cbz	r3, 97f6 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    97ee:	6823      	ldr	r3, [r4, #0]
    97f0:	4620      	mov	r0, r4
    97f2:	689b      	ldr	r3, [r3, #8]
    97f4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    97f6:	3410      	adds	r4, #16
    97f8:	e7ed      	b.n	97d6 <z_impl_log_panic+0x12>
    97fa:	bf00      	nop
    97fc:	20008a39 	.word	0x20008a39
    9800:	00010018 	.word	0x00010018
    9804:	00010028 	.word	0x00010028

00009808 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    9808:	2100      	movs	r1, #0
{
    980a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    980e:	4608      	mov	r0, r1
    9810:	f7ff fe98 	bl	9544 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    9814:	4604      	mov	r4, r0
    9816:	b348      	cbz	r0, 986c <log_process_thread_func+0x64>
    9818:	f240 6867 	movw	r8, #1639	; 0x667
    981c:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    9820:	f004 fe1e 	bl	e460 <z_impl_z_current_get>
	proc_tid = process_tid;
    9824:	4b1a      	ldr	r3, [pc, #104]	; (9890 <log_process_thread_func+0x88>)
    9826:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    9828:	b130      	cbz	r0, 9838 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    982a:	4b1a      	ldr	r3, [pc, #104]	; (9894 <log_process_thread_func+0x8c>)
	    process_tid &&
    982c:	681b      	ldr	r3, [r3, #0]
    982e:	2b09      	cmp	r3, #9
    9830:	dd02      	ble.n	9838 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    9832:	4819      	ldr	r0, [pc, #100]	; (9898 <log_process_thread_func+0x90>)
    9834:	f004 fad0 	bl	ddd8 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    9838:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    983a:	4f18      	ldr	r7, [pc, #96]	; (989c <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    983c:	f8df a058 	ldr.w	sl, [pc, #88]	; 9898 <log_process_thread_func+0x90>
		if (activate_mask) {
    9840:	b144      	cbz	r4, 9854 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    9842:	4620      	mov	r0, r4
    9844:	f7ff fe18 	bl	9478 <activate_foreach_backend>
			if (!activate_mask) {
    9848:	4604      	mov	r4, r0
    984a:	b918      	cbnz	r0, 9854 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    984c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    9850:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    9854:	f7ff ff5c 	bl	9710 <z_impl_log_process>
		if (log_process() == false) {
    9858:	4606      	mov	r6, r0
    985a:	b928      	cbnz	r0, 9868 <log_process_thread_func+0x60>
			if (processed_any) {
    985c:	b9b5      	cbnz	r5, 988c <log_process_thread_func+0x84>
    985e:	4642      	mov	r2, r8
    9860:	464b      	mov	r3, r9
    9862:	4650      	mov	r0, sl
    9864:	f004 fad8 	bl	de18 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    9868:	4635      	mov	r5, r6
    986a:	e7e9      	b.n	9840 <log_process_thread_func+0x38>
    986c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    9870:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    9874:	e7d4      	b.n	9820 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    9876:	682b      	ldr	r3, [r5, #0]
    9878:	699b      	ldr	r3, [r3, #24]
    987a:	b11b      	cbz	r3, 9884 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    987c:	2200      	movs	r2, #0
    987e:	4628      	mov	r0, r5
    9880:	4611      	mov	r1, r2
    9882:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    9884:	3510      	adds	r5, #16
    9886:	42bd      	cmp	r5, r7
    9888:	d3f5      	bcc.n	9876 <log_process_thread_func+0x6e>
    988a:	e7e8      	b.n	985e <log_process_thread_func+0x56>
    988c:	4d04      	ldr	r5, [pc, #16]	; (98a0 <log_process_thread_func+0x98>)
    988e:	e7fa      	b.n	9886 <log_process_thread_func+0x7e>
    9890:	2000879c 	.word	0x2000879c
    9894:	200087a4 	.word	0x200087a4
    9898:	20008190 	.word	0x20008190
    989c:	00010028 	.word	0x00010028
    98a0:	00010018 	.word	0x00010018

000098a4 <z_log_msg_post_finalize>:
{
    98a4:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    98a6:	4818      	ldr	r0, [pc, #96]	; (9908 <z_log_msg_post_finalize+0x64>)
    98a8:	f005 fc59 	bl	f15e <atomic_inc>
	if (panic_mode) {
    98ac:	4b17      	ldr	r3, [pc, #92]	; (990c <z_log_msg_post_finalize+0x68>)
    98ae:	781b      	ldrb	r3, [r3, #0]
    98b0:	b17b      	cbz	r3, 98d2 <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
    98b2:	f04f 0320 	mov.w	r3, #32
    98b6:	f3ef 8411 	mrs	r4, BASEPRI
    98ba:	f383 8812 	msr	BASEPRI_MAX, r3
    98be:	f3bf 8f6f 	isb	sy
    98c2:	f7ff ff25 	bl	9710 <z_impl_log_process>
	__asm__ volatile(
    98c6:	f384 8811 	msr	BASEPRI, r4
    98ca:	f3bf 8f6f 	isb	sy
}
    98ce:	b002      	add	sp, #8
    98d0:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    98d2:	4b0f      	ldr	r3, [pc, #60]	; (9910 <z_log_msg_post_finalize+0x6c>)
    98d4:	681b      	ldr	r3, [r3, #0]
    98d6:	2b00      	cmp	r3, #0
    98d8:	d0f9      	beq.n	98ce <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    98da:	b950      	cbnz	r0, 98f2 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    98dc:	2200      	movs	r2, #0
    98de:	2300      	movs	r3, #0
    98e0:	480c      	ldr	r0, [pc, #48]	; (9914 <z_log_msg_post_finalize+0x70>)
    98e2:	e9cd 2300 	strd	r2, r3, [sp]
    98e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    98ea:	2300      	movs	r3, #0
    98ec:	f004 ffe4 	bl	e8b8 <z_impl_k_timer_start>
    98f0:	e7ed      	b.n	98ce <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    98f2:	280a      	cmp	r0, #10
    98f4:	d1eb      	bne.n	98ce <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    98f6:	4807      	ldr	r0, [pc, #28]	; (9914 <z_log_msg_post_finalize+0x70>)
    98f8:	f006 f964 	bl	fbc4 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    98fc:	4806      	ldr	r0, [pc, #24]	; (9918 <z_log_msg_post_finalize+0x74>)
}
    98fe:	b002      	add	sp, #8
    9900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9904:	f004 ba68 	b.w	ddd8 <z_impl_k_sem_give>
    9908:	200087a4 	.word	0x200087a4
    990c:	20008a39 	.word	0x20008a39
    9910:	2000879c 	.word	0x2000879c
    9914:	20008628 	.word	0x20008628
    9918:	20008190 	.word	0x20008190

0000991c <z_log_msg_commit>:
{
    991c:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    991e:	4b06      	ldr	r3, [pc, #24]	; (9938 <z_log_msg_commit+0x1c>)
{
    9920:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    9922:	681b      	ldr	r3, [r3, #0]
    9924:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    9926:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    9928:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    992a:	4804      	ldr	r0, [pc, #16]	; (993c <z_log_msg_commit+0x20>)
    992c:	f005 fb27 	bl	ef7e <mpsc_pbuf_commit>
}
    9930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    9934:	f7ff bfb6 	b.w	98a4 <z_log_msg_post_finalize>
    9938:	20008004 	.word	0x20008004
    993c:	20008140 	.word	0x20008140

00009940 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    9940:	4a04      	ldr	r2, [pc, #16]	; (9954 <log_source_name_get+0x14>)
    9942:	4b05      	ldr	r3, [pc, #20]	; (9958 <log_source_name_get+0x18>)
    9944:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    9946:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    994a:	bf34      	ite	cc
    994c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    9950:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    9952:	4770      	bx	lr
    9954:	0000ff98 	.word	0x0000ff98
    9958:	00010018 	.word	0x00010018

0000995c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    995c:	4b08      	ldr	r3, [pc, #32]	; (9980 <log_backend_enable+0x24>)
{
    995e:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    9960:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
    9962:	6844      	ldr	r4, [r0, #4]
    9964:	111b      	asrs	r3, r3, #4
    9966:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    9968:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    996a:	6843      	ldr	r3, [r0, #4]
    996c:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    996e:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    9970:	6843      	ldr	r3, [r0, #4]
    9972:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    9974:	6843      	ldr	r3, [r0, #4]
    9976:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    9978:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    997a:	f7ff be41 	b.w	9600 <z_log_notify_backend_enabled>
    997e:	bf00      	nop
    9980:	00010018 	.word	0x00010018

00009984 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    9984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    9988:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    998c:	b08f      	sub	sp, #60	; 0x3c
    998e:	f3c1 2649 	ubfx	r6, r1, #9, #10
    9992:	460d      	mov	r5, r1
    9994:	4690      	mov	r8, r2
    9996:	4699      	mov	r9, r3
    9998:	9005      	str	r0, [sp, #20]
    999a:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    999c:	2e00      	cmp	r6, #0
    999e:	d03c      	beq.n	9a1a <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
    99a0:	f04f 0b04 	mov.w	fp, #4
    99a4:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
    99a8:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
    99aa:	af09      	add	r7, sp, #36	; 0x24
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    99ac:	4631      	mov	r1, r6
    99ae:	ab0b      	add	r3, sp, #44	; 0x2c
    99b0:	4640      	mov	r0, r8
    99b2:	f8cd b008 	str.w	fp, [sp, #8]
    99b6:	9701      	str	r7, [sp, #4]
    99b8:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
    99bc:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
    99c0:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    99c2:	9607      	str	r6, [sp, #28]
    99c4:	f7fe fdb8 	bl	8538 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    99c8:	f3c0 0309 	ubfx	r3, r0, #0, #10
    99cc:	1918      	adds	r0, r3, r4
    99ce:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    99d2:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    99d4:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    99d6:	f363 2552 	bfi	r5, r3, #9, #10
    99da:	9306      	str	r3, [sp, #24]
    99dc:	f7ff fe7c 	bl	96d8 <z_log_msg_alloc>
		if (msg) {
    99e0:	4604      	mov	r4, r0
    99e2:	b178      	cbz	r0, 9a04 <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
    99e4:	2200      	movs	r2, #0
    99e6:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    99e8:	3010      	adds	r0, #16
    99ea:	900b      	str	r0, [sp, #44]	; 0x2c
    99ec:	930c      	str	r3, [sp, #48]	; 0x30
    99ee:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    99f0:	4640      	mov	r0, r8
    99f2:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    99f6:	4a0c      	ldr	r2, [pc, #48]	; (9a28 <z_impl_z_log_msg_static_create+0xa4>)
    99f8:	9907      	ldr	r1, [sp, #28]
    99fa:	f8cd a000 	str.w	sl, [sp]
    99fe:	ab0b      	add	r3, sp, #44	; 0x2c
    9a00:	f7fe fd9a 	bl	8538 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    9a04:	f366 2552 	bfi	r5, r6, #9, #10
    9a08:	464b      	mov	r3, r9
    9a0a:	462a      	mov	r2, r5
    9a0c:	4620      	mov	r0, r4
    9a0e:	9905      	ldr	r1, [sp, #20]
}
    9a10:	b00f      	add	sp, #60	; 0x3c
    9a12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    9a16:	f005 bbc6 	b.w	f1a6 <z_log_msg_finalize>
    9a1a:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    9a1e:	0880      	lsrs	r0, r0, #2
    9a20:	f7ff fe5a 	bl	96d8 <z_log_msg_alloc>
    9a24:	4604      	mov	r4, r0
    9a26:	e7ed      	b.n	9a04 <z_impl_z_log_msg_static_create+0x80>
    9a28:	0000f17b 	.word	0x0000f17b

00009a2c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    9a2c:	b40e      	push	{r1, r2, r3}
    9a2e:	b503      	push	{r0, r1, lr}
    9a30:	ab03      	add	r3, sp, #12
    9a32:	f853 2b04 	ldr.w	r2, [r3], #4
    9a36:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    9a38:	4804      	ldr	r0, [pc, #16]	; (9a4c <print_formatted+0x20>)
	va_start(args, fmt);
    9a3a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    9a3c:	f005 fbda 	bl	f1f4 <cbvprintf>
	va_end(args);

	return length;
}
    9a40:	b002      	add	sp, #8
    9a42:	f85d eb04 	ldr.w	lr, [sp], #4
    9a46:	b003      	add	sp, #12
    9a48:	4770      	bx	lr
    9a4a:	bf00      	nop
    9a4c:	0000f21d 	.word	0x0000f21d

00009a50 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    9a50:	06ca      	lsls	r2, r1, #27
    9a52:	d405      	bmi.n	9a60 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    9a54:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    9a56:	bf4c      	ite	mi
    9a58:	4902      	ldrmi	r1, [pc, #8]	; (9a64 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    9a5a:	4903      	ldrpl	r1, [pc, #12]	; (9a68 <newline_print+0x18>)
    9a5c:	f7ff bfe6 	b.w	9a2c <print_formatted>
	}
}
    9a60:	4770      	bx	lr
    9a62:	bf00      	nop
    9a64:	00010423 	.word	0x00010423
    9a68:	00010422 	.word	0x00010422

00009a6c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    9a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a70:	b089      	sub	sp, #36	; 0x24
    9a72:	469b      	mov	fp, r3
    9a74:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    9a78:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    9a7c:	4604      	mov	r4, r0
    9a7e:	9304      	str	r3, [sp, #16]
    9a80:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    9a84:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    9a86:	9b04      	ldr	r3, [sp, #16]
{
    9a88:	460d      	mov	r5, r1
    9a8a:	9206      	str	r2, [sp, #24]
	if (!raw_string) {
    9a8c:	2b00      	cmp	r3, #0
    9a8e:	f000 8087 	beq.w	9ba0 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    9a92:	f006 0308 	and.w	r3, r6, #8
    9a96:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    9a98:	f005 fb6d 	bl	f176 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    9a9c:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    9aa0:	4602      	mov	r2, r0
    9aa2:	2800      	cmp	r0, #0
    9aa4:	d04b      	beq.n	9b3e <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    9aa6:	4620      	mov	r0, r4
    9aa8:	4985      	ldr	r1, [pc, #532]	; (9cc0 <log_output_process+0x254>)
    9aaa:	f7ff ffbf 	bl	9a2c <print_formatted>
    9aae:	4680      	mov	r8, r0
	if (stamp) {
    9ab0:	f1ba 0f00 	cmp.w	sl, #0
    9ab4:	d008      	beq.n	9ac8 <log_output_process+0x5c>
	if (!format) {
    9ab6:	f016 0f44 	tst.w	r6, #68	; 0x44
    9aba:	d142      	bne.n	9b42 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    9abc:	462a      	mov	r2, r5
    9abe:	4620      	mov	r0, r4
    9ac0:	4980      	ldr	r1, [pc, #512]	; (9cc4 <log_output_process+0x258>)
    9ac2:	f7ff ffb3 	bl	9a2c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    9ac6:	4480      	add	r8, r0
	if (color) {
    9ac8:	f006 0301 	and.w	r3, r6, #1
    9acc:	b15b      	cbz	r3, 9ae6 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    9ace:	4b7e      	ldr	r3, [pc, #504]	; (9cc8 <log_output_process+0x25c>)
    9ad0:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    9ad2:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    9ad4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    9ad8:	4b7c      	ldr	r3, [pc, #496]	; (9ccc <log_output_process+0x260>)
    9ada:	497d      	ldr	r1, [pc, #500]	; (9cd0 <log_output_process+0x264>)
    9adc:	2a00      	cmp	r2, #0
    9ade:	bf08      	it	eq
    9ae0:	461a      	moveq	r2, r3
    9ae2:	f7ff ffa3 	bl	9a2c <print_formatted>
	if (level_on) {
    9ae6:	f006 0308 	and.w	r3, r6, #8
    9aea:	2b00      	cmp	r3, #0
    9aec:	d055      	beq.n	9b9a <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    9aee:	4b79      	ldr	r3, [pc, #484]	; (9cd4 <log_output_process+0x268>)
    9af0:	9a04      	ldr	r2, [sp, #16]
    9af2:	4620      	mov	r0, r4
    9af4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    9af8:	4977      	ldr	r1, [pc, #476]	; (9cd8 <log_output_process+0x26c>)
    9afa:	f7ff ff97 	bl	9a2c <print_formatted>
    9afe:	4605      	mov	r5, r0
	if (domain) {
    9b00:	9b06      	ldr	r3, [sp, #24]
    9b02:	b12b      	cbz	r3, 9b10 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    9b04:	461a      	mov	r2, r3
    9b06:	4620      	mov	r0, r4
    9b08:	4974      	ldr	r1, [pc, #464]	; (9cdc <log_output_process+0x270>)
    9b0a:	f7ff ff8f 	bl	9a2c <print_formatted>
    9b0e:	4405      	add	r5, r0
	if (source) {
    9b10:	f1bb 0f00 	cmp.w	fp, #0
    9b14:	d005      	beq.n	9b22 <log_output_process+0xb6>
		total += print_formatted(output,
    9b16:	465a      	mov	r2, fp
    9b18:	4620      	mov	r0, r4
    9b1a:	4971      	ldr	r1, [pc, #452]	; (9ce0 <log_output_process+0x274>)
    9b1c:	f7ff ff86 	bl	9a2c <print_formatted>
    9b20:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    9b22:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    9b24:	f1b9 0f00 	cmp.w	r9, #0
    9b28:	d149      	bne.n	9bbe <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    9b2a:	2f00      	cmp	r7, #0
    9b2c:	d14f      	bne.n	9bce <log_output_process+0x162>
	if (color) {
    9b2e:	07f3      	lsls	r3, r6, #31
    9b30:	f100 80c0 	bmi.w	9cb4 <log_output_process+0x248>
	newline_print(output, flags);
    9b34:	4631      	mov	r1, r6
    9b36:	4620      	mov	r0, r4
    9b38:	f7ff ff8a 	bl	9a50 <newline_print>
}
    9b3c:	e0b4      	b.n	9ca8 <log_output_process+0x23c>
	uint32_t length = 0U;
    9b3e:	4680      	mov	r8, r0
    9b40:	e7b6      	b.n	9ab0 <log_output_process+0x44>
	} else if (freq != 0U) {
    9b42:	4b68      	ldr	r3, [pc, #416]	; (9ce4 <log_output_process+0x278>)
    9b44:	6818      	ldr	r0, [r3, #0]
    9b46:	2800      	cmp	r0, #0
    9b48:	d0bd      	beq.n	9ac6 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    9b4a:	4b67      	ldr	r3, [pc, #412]	; (9ce8 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    9b4c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    9b50:	681b      	ldr	r3, [r3, #0]
    9b52:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    9b56:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    9b5a:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    9b5e:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    9b62:	fb0e f505 	mul.w	r5, lr, r5
    9b66:	fbb3 faf2 	udiv	sl, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    9b6a:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    9b6e:	213c      	movs	r1, #60	; 0x3c
    9b70:	fb02 321a 	mls	r2, r2, sl, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    9b74:	fb00 551c 	mls	r5, r0, ip, r5
		mins = seconds / 60U;
    9b78:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    9b7c:	fb0e f505 	mul.w	r5, lr, r5
    9b80:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    9b84:	fb01 2213 	mls	r2, r1, r3, r2
    9b88:	4620      	mov	r0, r4
    9b8a:	9200      	str	r2, [sp, #0]
    9b8c:	e9cd c501 	strd	ip, r5, [sp, #4]
    9b90:	4652      	mov	r2, sl
    9b92:	4956      	ldr	r1, [pc, #344]	; (9cec <log_output_process+0x280>)
    9b94:	f7ff ff4a 	bl	9a2c <print_formatted>
    9b98:	e795      	b.n	9ac6 <log_output_process+0x5a>
	int total = 0;
    9b9a:	f006 0508 	and.w	r5, r6, #8
    9b9e:	e7af      	b.n	9b00 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    9ba0:	f1bb 0f01 	cmp.w	fp, #1
    9ba4:	d106      	bne.n	9bb4 <log_output_process+0x148>
	if (package) {
    9ba6:	f1b9 0f00 	cmp.w	r9, #0
    9baa:	d164      	bne.n	9c76 <log_output_process+0x20a>
	if (data_len) {
    9bac:	2f00      	cmp	r7, #0
    9bae:	d07b      	beq.n	9ca8 <log_output_process+0x23c>
		prefix_offset = 0;
    9bb0:	2500      	movs	r5, #0
    9bb2:	e00c      	b.n	9bce <log_output_process+0x162>
	if (package) {
    9bb4:	f1b9 0f00 	cmp.w	r9, #0
    9bb8:	d0f8      	beq.n	9bac <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    9bba:	484d      	ldr	r0, [pc, #308]	; (9cf0 <log_output_process+0x284>)
    9bbc:	e05c      	b.n	9c78 <log_output_process+0x20c>
		cb = out_func;
    9bbe:	484d      	ldr	r0, [pc, #308]	; (9cf4 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    9bc0:	464b      	mov	r3, r9
    9bc2:	4622      	mov	r2, r4
    9bc4:	494c      	ldr	r1, [pc, #304]	; (9cf8 <log_output_process+0x28c>)
    9bc6:	f004 fec9 	bl	e95c <cbpprintf_external>
	if (data_len) {
    9bca:	2f00      	cmp	r7, #0
    9bcc:	d068      	beq.n	9ca0 <log_output_process+0x234>
		print_formatted(output, " ");
    9bce:	f8df 912c 	ldr.w	r9, [pc, #300]	; 9cfc <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    9bd2:	f8df a12c 	ldr.w	sl, [pc, #300]	; 9d00 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    9bd6:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    9bd8:	4631      	mov	r1, r6
    9bda:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    9bdc:	46b8      	mov	r8, r7
	for (int i = 0; i < prefix_offset; i++) {
    9bde:	f04f 0b00 	mov.w	fp, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    9be2:	bf28      	it	cs
    9be4:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    9be8:	f7ff ff32 	bl	9a50 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    9bec:	455d      	cmp	r5, fp
    9bee:	dc45      	bgt.n	9c7c <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    9bf0:	9b05      	ldr	r3, [sp, #20]
    9bf2:	4651      	mov	r1, sl
    9bf4:	4620      	mov	r0, r4
    9bf6:	781a      	ldrb	r2, [r3, #0]
    9bf8:	f7ff ff18 	bl	9a2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    9bfc:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    9c00:	f01b 0f07 	tst.w	fp, #7
    9c04:	d103      	bne.n	9c0e <log_output_process+0x1a2>
			print_formatted(output, " ");
    9c06:	4649      	mov	r1, r9
    9c08:	4620      	mov	r0, r4
    9c0a:	f7ff ff0f 	bl	9a2c <print_formatted>
		if (i < length) {
    9c0e:	45d8      	cmp	r8, fp
    9c10:	d93b      	bls.n	9c8a <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    9c12:	9b05      	ldr	r3, [sp, #20]
    9c14:	4651      	mov	r1, sl
    9c16:	4620      	mov	r0, r4
    9c18:	f813 200b 	ldrb.w	r2, [r3, fp]
    9c1c:	f7ff ff06 	bl	9a2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    9c20:	f10b 0b01 	add.w	fp, fp, #1
    9c24:	f1bb 0f10 	cmp.w	fp, #16
    9c28:	d1ea      	bne.n	9c00 <log_output_process+0x194>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    9c2a:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    9c2e:	4620      	mov	r0, r4
    9c30:	4934      	ldr	r1, [pc, #208]	; (9d04 <log_output_process+0x298>)
    9c32:	f7ff fefb 	bl	9a2c <print_formatted>
		if (i < length) {
    9c36:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    9c38:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    9c3a:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    9c3c:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    9c3e:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    9c42:	295f      	cmp	r1, #95	; 0x5f
    9c44:	bf28      	it	cs
    9c46:	222e      	movcs	r2, #46	; 0x2e
    9c48:	492f      	ldr	r1, [pc, #188]	; (9d08 <log_output_process+0x29c>)
    9c4a:	f7ff feef 	bl	9a2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    9c4e:	f10b 0b01 	add.w	fp, fp, #1
    9c52:	f1bb 0f10 	cmp.w	fp, #16
    9c56:	d01d      	beq.n	9c94 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    9c58:	f01b 0f07 	tst.w	fp, #7
    9c5c:	d103      	bne.n	9c66 <log_output_process+0x1fa>
			print_formatted(output, " ");
    9c5e:	4649      	mov	r1, r9
    9c60:	4620      	mov	r0, r4
    9c62:	f7ff fee3 	bl	9a2c <print_formatted>
		if (i < length) {
    9c66:	45d8      	cmp	r8, fp
    9c68:	465a      	mov	r2, fp
    9c6a:	d8e5      	bhi.n	9c38 <log_output_process+0x1cc>
			print_formatted(output, " ");
    9c6c:	4649      	mov	r1, r9
    9c6e:	4620      	mov	r0, r4
    9c70:	f7ff fedc 	bl	9a2c <print_formatted>
    9c74:	e7eb      	b.n	9c4e <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    9c76:	481f      	ldr	r0, [pc, #124]	; (9cf4 <log_output_process+0x288>)
		prefix_offset = 0;
    9c78:	9d04      	ldr	r5, [sp, #16]
    9c7a:	e7a1      	b.n	9bc0 <log_output_process+0x154>
		print_formatted(output, " ");
    9c7c:	4649      	mov	r1, r9
    9c7e:	4620      	mov	r0, r4
    9c80:	f7ff fed4 	bl	9a2c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    9c84:	f10b 0b01 	add.w	fp, fp, #1
    9c88:	e7b0      	b.n	9bec <log_output_process+0x180>
			print_formatted(output, "   ");
    9c8a:	4620      	mov	r0, r4
    9c8c:	491f      	ldr	r1, [pc, #124]	; (9d0c <log_output_process+0x2a0>)
    9c8e:	f7ff fecd 	bl	9a2c <print_formatted>
    9c92:	e7c5      	b.n	9c20 <log_output_process+0x1b4>
		data += length;
    9c94:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    9c96:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    9c9a:	4443      	add	r3, r8
    9c9c:	9305      	str	r3, [sp, #20]
	} while (len);
    9c9e:	d19a      	bne.n	9bd6 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    9ca0:	9b04      	ldr	r3, [sp, #16]
    9ca2:	2b00      	cmp	r3, #0
    9ca4:	f47f af43 	bne.w	9b2e <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    9ca8:	4620      	mov	r0, r4
}
    9caa:	b009      	add	sp, #36	; 0x24
    9cac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    9cb0:	f005 baa7 	b.w	f202 <log_output_flush>
		print_formatted(output, "%s", log_color);
    9cb4:	4620      	mov	r0, r4
    9cb6:	4a05      	ldr	r2, [pc, #20]	; (9ccc <log_output_process+0x260>)
    9cb8:	4905      	ldr	r1, [pc, #20]	; (9cd0 <log_output_process+0x264>)
    9cba:	f7ff feb7 	bl	9a2c <print_formatted>
}
    9cbe:	e739      	b.n	9b34 <log_output_process+0xc8>
    9cc0:	0001042a 	.word	0x0001042a
    9cc4:	0001042e 	.word	0x0001042e
    9cc8:	0001005c 	.word	0x0001005c
    9ccc:	00010425 	.word	0x00010425
    9cd0:	000102b3 	.word	0x000102b3
    9cd4:	00010070 	.word	0x00010070
    9cd8:	00010453 	.word	0x00010453
    9cdc:	00010459 	.word	0x00010459
    9ce0:	0001045d 	.word	0x0001045d
    9ce4:	200087b0 	.word	0x200087b0
    9ce8:	200087ac 	.word	0x200087ac
    9cec:	00010437 	.word	0x00010437
    9cf0:	0000f24b 	.word	0x0000f24b
    9cf4:	0000f21d 	.word	0x0000f21d
    9cf8:	0000f1f5 	.word	0x0000f1f5
    9cfc:	0001046a 	.word	0x0001046a
    9d00:	00010462 	.word	0x00010462
    9d04:	0001046c 	.word	0x0001046c
    9d08:	0001046e 	.word	0x0001046e
    9d0c:	00010468 	.word	0x00010468

00009d10 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    9d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    9d14:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    9d16:	684b      	ldr	r3, [r1, #4]
    9d18:	4605      	mov	r5, r0
    9d1a:	460c      	mov	r4, r1
    9d1c:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    9d1e:	688e      	ldr	r6, [r1, #8]
    9d20:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    9d22:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    9d26:	b15b      	cbz	r3, 9d40 <log_output_msg_process+0x30>
    9d28:	4a13      	ldr	r2, [pc, #76]	; (9d78 <log_output_msg_process+0x68>)
    9d2a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    9d2c:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    9d30:	2900      	cmp	r1, #0
    9d32:	db1f      	blt.n	9d74 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    9d34:	7820      	ldrb	r0, [r4, #0]
    9d36:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    9d3a:	f7ff fe01 	bl	9940 <log_source_name_get>
    9d3e:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    9d40:	4621      	mov	r1, r4
    9d42:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    9d46:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    9d48:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    9d4c:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    9d4e:	eb01 0402 	add.w	r4, r1, r2
    9d52:	bf08      	it	eq
    9d54:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    9d56:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    9d5a:	e9cd 0803 	strd	r0, r8, [sp, #12]
    9d5e:	e9cd 1401 	strd	r1, r4, [sp, #4]
    9d62:	2200      	movs	r2, #0
    9d64:	4631      	mov	r1, r6
    9d66:	4628      	mov	r0, r5
    9d68:	9700      	str	r7, [sp, #0]
    9d6a:	f7ff fe7f 	bl	9a6c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    9d6e:	b006      	add	sp, #24
    9d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    9d74:	2300      	movs	r3, #0
    9d76:	e7e3      	b.n	9d40 <log_output_msg_process+0x30>
    9d78:	0000ff98 	.word	0x0000ff98

00009d7c <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    9d7c:	f242 730f 	movw	r3, #9999	; 0x270f
{
    9d80:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    9d82:	428b      	cmp	r3, r1
    9d84:	bf28      	it	cs
    9d86:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    9d88:	6805      	ldr	r5, [r0, #0]
{
    9d8a:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    9d8c:	2105      	movs	r1, #5
    9d8e:	4668      	mov	r0, sp
    9d90:	4a0d      	ldr	r2, [pc, #52]	; (9dc8 <log_output_dropped_process+0x4c>)
    9d92:	f004 fe5b 	bl	ea4c <snprintk>
    9d96:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    9d98:	6863      	ldr	r3, [r4, #4]
    9d9a:	4628      	mov	r0, r5
    9d9c:	220b      	movs	r2, #11
    9d9e:	685b      	ldr	r3, [r3, #4]
    9da0:	490a      	ldr	r1, [pc, #40]	; (9dcc <log_output_dropped_process+0x50>)
    9da2:	f005 fa1a 	bl	f1da <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    9da6:	6863      	ldr	r3, [r4, #4]
    9da8:	4632      	mov	r2, r6
    9daa:	4669      	mov	r1, sp
    9dac:	4628      	mov	r0, r5
    9dae:	685b      	ldr	r3, [r3, #4]
    9db0:	f005 fa13 	bl	f1da <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    9db4:	6863      	ldr	r3, [r4, #4]
    9db6:	221b      	movs	r2, #27
    9db8:	4628      	mov	r0, r5
    9dba:	685b      	ldr	r3, [r3, #4]
    9dbc:	4904      	ldr	r1, [pc, #16]	; (9dd0 <log_output_dropped_process+0x54>)
    9dbe:	f005 fa0c 	bl	f1da <buffer_write>
		     output->control_block->ctx);
}
    9dc2:	b002      	add	sp, #8
    9dc4:	bd70      	pop	{r4, r5, r6, pc}
    9dc6:	bf00      	nop
    9dc8:	0001030a 	.word	0x0001030a
    9dcc:	0001048d 	.word	0x0001048d
    9dd0:	00010471 	.word	0x00010471

00009dd4 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    9dd4:	2100      	movs	r1, #0
    9dd6:	2301      	movs	r3, #1
    9dd8:	4a06      	ldr	r2, [pc, #24]	; (9df4 <log_output_timestamp_freq_set+0x20>)
    9dda:	4290      	cmp	r0, r2
    9ddc:	d806      	bhi.n	9dec <log_output_timestamp_freq_set+0x18>
    9dde:	4a06      	ldr	r2, [pc, #24]	; (9df8 <log_output_timestamp_freq_set+0x24>)
    9de0:	b901      	cbnz	r1, 9de4 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    9de2:	2301      	movs	r3, #1
    9de4:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    9de6:	4b05      	ldr	r3, [pc, #20]	; (9dfc <log_output_timestamp_freq_set+0x28>)
    9de8:	6018      	str	r0, [r3, #0]
}
    9dea:	4770      	bx	lr
		timestamp_div *= 2U;
    9dec:	2101      	movs	r1, #1
		frequency /= 2U;
    9dee:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    9df0:	005b      	lsls	r3, r3, #1
    9df2:	e7f2      	b.n	9dda <log_output_timestamp_freq_set+0x6>
    9df4:	000f4240 	.word	0x000f4240
    9df8:	200087ac 	.word	0x200087ac
    9dfc:	200087b0 	.word	0x200087b0

00009e00 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    9e00:	4b01      	ldr	r3, [pc, #4]	; (9e08 <format_set+0x8>)
	return 0;
}
    9e02:	2000      	movs	r0, #0
	log_format_current = log_type;
    9e04:	6019      	str	r1, [r3, #0]
}
    9e06:	4770      	bx	lr
    9e08:	200087c8 	.word	0x200087c8

00009e0c <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    9e0c:	2201      	movs	r2, #1
    9e0e:	4b02      	ldr	r3, [pc, #8]	; (9e18 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    9e10:	4802      	ldr	r0, [pc, #8]	; (9e1c <panic+0x10>)
    9e12:	701a      	strb	r2, [r3, #0]
    9e14:	f005 b9f5 	b.w	f202 <log_output_flush>
    9e18:	20008a3b 	.word	0x20008a3b
    9e1c:	000100a0 	.word	0x000100a0

00009e20 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    9e20:	4801      	ldr	r0, [pc, #4]	; (9e28 <dropped+0x8>)
    9e22:	f7ff bfab 	b.w	9d7c <log_output_dropped_process>
    9e26:	bf00      	nop
    9e28:	000100a0 	.word	0x000100a0

00009e2c <process>:
{
    9e2c:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    9e2e:	4b06      	ldr	r3, [pc, #24]	; (9e48 <process+0x1c>)
{
    9e30:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    9e32:	6818      	ldr	r0, [r3, #0]
    9e34:	f7ff fbce 	bl	95d4 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    9e38:	4621      	mov	r1, r4
}
    9e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    9e3e:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    9e40:	220f      	movs	r2, #15
    9e42:	4802      	ldr	r0, [pc, #8]	; (9e4c <process+0x20>)
    9e44:	4718      	bx	r3
    9e46:	bf00      	nop
    9e48:	200087c8 	.word	0x200087c8
    9e4c:	000100a0 	.word	0x000100a0

00009e50 <char_out>:
{
    9e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e52:	460d      	mov	r5, r1
    9e54:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    9e56:	4f06      	ldr	r7, [pc, #24]	; (9e70 <char_out+0x20>)
    9e58:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    9e5a:	42b4      	cmp	r4, r6
    9e5c:	d101      	bne.n	9e62 <char_out+0x12>
}
    9e5e:	4628      	mov	r0, r5
    9e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    9e62:	f814 1b01 	ldrb.w	r1, [r4], #1
    9e66:	68bb      	ldr	r3, [r7, #8]
    9e68:	4801      	ldr	r0, [pc, #4]	; (9e70 <char_out+0x20>)
    9e6a:	685b      	ldr	r3, [r3, #4]
    9e6c:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    9e6e:	e7f4      	b.n	9e5a <char_out+0xa>
    9e70:	0000fcd8 	.word	0x0000fcd8

00009e74 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    9e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9e78:	4605      	mov	r5, r0
	__asm__ volatile(
    9e7a:	f04f 0320 	mov.w	r3, #32
    9e7e:	f3ef 8611 	mrs	r6, BASEPRI
    9e82:	f383 8812 	msr	BASEPRI_MAX, r3
    9e86:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    9e8a:	f04f 090c 	mov.w	r9, #12
	return list->head;
    9e8e:	4b0d      	ldr	r3, [pc, #52]	; (9ec4 <pm_state_notify+0x50>)
    9e90:	4f0d      	ldr	r7, [pc, #52]	; (9ec8 <pm_state_notify+0x54>)
    9e92:	681c      	ldr	r4, [r3, #0]
    9e94:	f8df 8034 	ldr.w	r8, [pc, #52]	; 9ecc <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    9e98:	b92c      	cbnz	r4, 9ea6 <pm_state_notify+0x32>
	__asm__ volatile(
    9e9a:	f386 8811 	msr	BASEPRI, r6
    9e9e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    9ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    9ea6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    9eaa:	2d00      	cmp	r5, #0
    9eac:	bf18      	it	ne
    9eae:	4613      	movne	r3, r2
		if (callback) {
    9eb0:	b12b      	cbz	r3, 9ebe <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    9eb2:	f898 2014 	ldrb.w	r2, [r8, #20]
    9eb6:	fb09 f202 	mul.w	r2, r9, r2
    9eba:	5cb8      	ldrb	r0, [r7, r2]
    9ebc:	4798      	blx	r3
	return node->next;
    9ebe:	6824      	ldr	r4, [r4, #0]
    9ec0:	e7ea      	b.n	9e98 <pm_state_notify+0x24>
    9ec2:	bf00      	nop
    9ec4:	200087e4 	.word	0x200087e4
    9ec8:	200087d8 	.word	0x200087d8
    9ecc:	200089a0 	.word	0x200089a0

00009ed0 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    9ed0:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    9ed2:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    9ed4:	4b16      	ldr	r3, [pc, #88]	; (9f30 <pm_system_resume+0x60>)
    9ed6:	7d1c      	ldrb	r4, [r3, #20]
    9ed8:	f004 031f 	and.w	r3, r4, #31
    9edc:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9ede:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9ee0:	4b14      	ldr	r3, [pc, #80]	; (9f34 <pm_system_resume+0x64>)
    9ee2:	0961      	lsrs	r1, r4, #5
    9ee4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    9ee8:	e8d3 1fef 	ldaex	r1, [r3]
    9eec:	ea01 0500 	and.w	r5, r1, r0
    9ef0:	e8c3 5fe6 	stlex	r6, r5, [r3]
    9ef4:	2e00      	cmp	r6, #0
    9ef6:	d1f7      	bne.n	9ee8 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    9ef8:	420a      	tst	r2, r1
    9efa:	d013      	beq.n	9f24 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    9efc:	4b0e      	ldr	r3, [pc, #56]	; (9f38 <pm_system_resume+0x68>)
    9efe:	4d0f      	ldr	r5, [pc, #60]	; (9f3c <pm_system_resume+0x6c>)
    9f00:	b18b      	cbz	r3, 9f26 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    9f02:	230c      	movs	r3, #12
    9f04:	4363      	muls	r3, r4
    9f06:	18ea      	adds	r2, r5, r3
    9f08:	7851      	ldrb	r1, [r2, #1]
    9f0a:	5ce8      	ldrb	r0, [r5, r3]
    9f0c:	f005 f90c 	bl	f128 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    9f10:	2000      	movs	r0, #0
    9f12:	f7ff ffaf 	bl	9e74 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    9f16:	230c      	movs	r3, #12
    9f18:	435c      	muls	r4, r3
    9f1a:	2300      	movs	r3, #0
    9f1c:	192a      	adds	r2, r5, r4
    9f1e:	512b      	str	r3, [r5, r4]
    9f20:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    9f24:	bd70      	pop	{r4, r5, r6, pc}
    9f26:	f383 8811 	msr	BASEPRI, r3
    9f2a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    9f2e:	e7ef      	b.n	9f10 <pm_system_resume+0x40>
    9f30:	200089a0 	.word	0x200089a0
    9f34:	200087ec 	.word	0x200087ec
    9f38:	0000f129 	.word	0x0000f129
    9f3c:	200087d8 	.word	0x200087d8

00009f40 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    9f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    9f44:	4b32      	ldr	r3, [pc, #200]	; (a010 <pm_system_suspend+0xd0>)
{
    9f46:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    9f48:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    9f4a:	f04f 0320 	mov.w	r3, #32
    9f4e:	f3ef 8811 	mrs	r8, BASEPRI
    9f52:	f383 8812 	msr	BASEPRI_MAX, r3
    9f56:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    9f5a:	240c      	movs	r4, #12
    9f5c:	436c      	muls	r4, r5
    9f5e:	4b2d      	ldr	r3, [pc, #180]	; (a014 <pm_system_suspend+0xd4>)
    9f60:	4e2d      	ldr	r6, [pc, #180]	; (a018 <pm_system_suspend+0xd8>)
    9f62:	5d19      	ldrb	r1, [r3, r4]
    9f64:	191a      	adds	r2, r3, r4
    9f66:	2900      	cmp	r1, #0
    9f68:	d047      	beq.n	9ffa <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    9f6a:	ca07      	ldmia	r2, {r0, r1, r2}
    9f6c:	eb06 0c04 	add.w	ip, r6, r4
    9f70:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    9f74:	2200      	movs	r2, #0
    9f76:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    9f78:	f388 8811 	msr	BASEPRI, r8
    9f7c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    9f80:	230c      	movs	r3, #12
    9f82:	436b      	muls	r3, r5
    9f84:	5cf0      	ldrb	r0, [r6, r3]
    9f86:	18f2      	adds	r2, r6, r3
    9f88:	b3a8      	cbz	r0, 9ff6 <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    9f8a:	1c7b      	adds	r3, r7, #1
    9f8c:	d010      	beq.n	9fb0 <pm_system_suspend+0x70>
			return (uint32_t)((t * to_hz + off) / from_hz);
    9f8e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    9f92:	2100      	movs	r1, #0
    9f94:	f8d2 c008 	ldr.w	ip, [r2, #8]
    9f98:	4c20      	ldr	r4, [pc, #128]	; (a01c <pm_system_suspend+0xdc>)
    9f9a:	2300      	movs	r3, #0
    9f9c:	fbec 4100 	umlal	r4, r1, ip, r0
    9fa0:	4a1f      	ldr	r2, [pc, #124]	; (a020 <pm_system_suspend+0xe0>)
    9fa2:	4620      	mov	r0, r4
    9fa4:	f7fe f8d6 	bl	8154 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    9fa8:	2101      	movs	r1, #1
    9faa:	1a38      	subs	r0, r7, r0
    9fac:	f005 fdd8 	bl	fb60 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    9fb0:	f004 f964 	bl	e27c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    9fb4:	2001      	movs	r0, #1
    9fb6:	f7ff ff5d 	bl	9e74 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9fba:	4b1a      	ldr	r3, [pc, #104]	; (a024 <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9fbc:	096a      	lsrs	r2, r5, #5
    9fbe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    9fc2:	2201      	movs	r2, #1
    9fc4:	f005 011f 	and.w	r1, r5, #31
    9fc8:	408a      	lsls	r2, r1
    9fca:	e8d3 0fef 	ldaex	r0, [r3]
    9fce:	4310      	orrs	r0, r2
    9fd0:	e8c3 0fe1 	stlex	r1, r0, [r3]
    9fd4:	2900      	cmp	r1, #0
    9fd6:	d1f8      	bne.n	9fca <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
    9fd8:	4b13      	ldr	r3, [pc, #76]	; (a028 <pm_system_suspend+0xe8>)
    9fda:	b13b      	cbz	r3, 9fec <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    9fdc:	230c      	movs	r3, #12
    9fde:	fb03 f005 	mul.w	r0, r3, r5
    9fe2:	1833      	adds	r3, r6, r0
    9fe4:	7859      	ldrb	r1, [r3, #1]
    9fe6:	5c30      	ldrb	r0, [r6, r0]
    9fe8:	f005 f892 	bl	f110 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    9fec:	f7ff ff70 	bl	9ed0 <pm_system_resume>
	k_sched_unlock();
    9ff0:	f004 f958 	bl	e2a4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    9ff4:	2001      	movs	r0, #1
}
    9ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    9ffa:	4601      	mov	r1, r0
    9ffc:	4628      	mov	r0, r5
    9ffe:	f000 f815 	bl	a02c <pm_policy_next_state>
		if (info != NULL) {
    a002:	2800      	cmp	r0, #0
    a004:	d0b8      	beq.n	9f78 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    a006:	c807      	ldmia	r0, {r0, r1, r2}
    a008:	4434      	add	r4, r6
    a00a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    a00e:	e7b3      	b.n	9f78 <pm_system_suspend+0x38>
    a010:	200089a0 	.word	0x200089a0
    a014:	200087cc 	.word	0x200087cc
    a018:	200087d8 	.word	0x200087d8
    a01c:	000f423f 	.word	0x000f423f
    a020:	000f4240 	.word	0x000f4240
    a024:	200087ec 	.word	0x200087ec
    a028:	0000f111 	.word	0x0000f111

0000a02c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    a02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a030:	b085      	sub	sp, #20
    a032:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    a034:	a903      	add	r1, sp, #12
    a036:	f000 f843 	bl	a0c0 <pm_state_cpu_get_all>
    a03a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    a03e:	4604      	mov	r4, r0
    a040:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    a044:	4b1b      	ldr	r3, [pc, #108]	; (a0b4 <pm_policy_next_state+0x88>)
    a046:	9d03      	ldr	r5, [sp, #12]
    a048:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    a04c:	1e43      	subs	r3, r0, #1
    a04e:	b21b      	sxth	r3, r3
    a050:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a054:	f8df 8060 	ldr.w	r8, [pc, #96]	; a0b8 <pm_policy_next_state+0x8c>
    a058:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    a05c:	b924      	cbnz	r4, a068 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    a05e:	46a1      	mov	r9, r4
}
    a060:	4648      	mov	r0, r9
    a062:	b005      	add	sp, #20
    a064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a068:	46c4      	mov	ip, r8
    a06a:	4659      	mov	r1, fp
    a06c:	6868      	ldr	r0, [r5, #4]
    a06e:	2300      	movs	r3, #0
    a070:	fbe0 c107 	umlal	ip, r1, r0, r7
    a074:	4a11      	ldr	r2, [pc, #68]	; (a0bc <pm_policy_next_state+0x90>)
    a076:	4660      	mov	r0, ip
    a078:	f7fe f86c 	bl	8154 <__aeabi_uldivmod>
    a07c:	46c4      	mov	ip, r8
    a07e:	4659      	mov	r1, fp
    a080:	9001      	str	r0, [sp, #4]
    a082:	68a8      	ldr	r0, [r5, #8]
    a084:	2300      	movs	r3, #0
    a086:	fbe0 c107 	umlal	ip, r1, r0, r7
    a08a:	4a0c      	ldr	r2, [pc, #48]	; (a0bc <pm_policy_next_state+0x90>)
    a08c:	4660      	mov	r0, ip
    a08e:	f7fe f861 	bl	8154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    a092:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    a096:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    a098:	d001      	beq.n	a09e <pm_policy_next_state+0x72>
    a09a:	4582      	cmp	sl, r0
    a09c:	d905      	bls.n	a0aa <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    a09e:	1c73      	adds	r3, r6, #1
    a0a0:	d0de      	beq.n	a060 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    a0a2:	9b01      	ldr	r3, [sp, #4]
    a0a4:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    a0a6:	42b0      	cmp	r0, r6
    a0a8:	d9da      	bls.n	a060 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    a0aa:	3c01      	subs	r4, #1
    a0ac:	b2a4      	uxth	r4, r4
    a0ae:	3d0c      	subs	r5, #12
    a0b0:	e7d4      	b.n	a05c <pm_policy_next_state+0x30>
    a0b2:	bf00      	nop
    a0b4:	20008008 	.word	0x20008008
    a0b8:	000f423f 	.word	0x000f423f
    a0bc:	000f4240 	.word	0x000f4240

0000a0c0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    a0c0:	b908      	cbnz	r0, a0c6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    a0c2:	4b02      	ldr	r3, [pc, #8]	; (a0cc <pm_state_cpu_get_all+0xc>)
    a0c4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    a0c6:	2000      	movs	r0, #0
    a0c8:	4770      	bx	lr
    a0ca:	bf00      	nop
    a0cc:	000100b0 	.word	0x000100b0

0000a0d0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    a0d0:	4901      	ldr	r1, [pc, #4]	; (a0d8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    a0d2:	2210      	movs	r2, #16
	str	r2, [r1]
    a0d4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    a0d6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    a0d8:	e000ed10 	.word	0xe000ed10

0000a0dc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    a0dc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    a0de:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    a0e0:	f380 8811 	msr	BASEPRI, r0
	isb
    a0e4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    a0e8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    a0ec:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    a0ee:	b662      	cpsie	i
	isb
    a0f0:	f3bf 8f6f 	isb	sy

	bx	lr
    a0f4:	4770      	bx	lr
    a0f6:	bf00      	nop

0000a0f8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    a0f8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    a0fa:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    a0fc:	f381 8811 	msr	BASEPRI, r1

	wfe
    a100:	bf20      	wfe

	msr	BASEPRI, r0
    a102:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    a106:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    a108:	4770      	bx	lr
    a10a:	bf00      	nop

0000a10c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a110:	4681      	mov	r9, r0

	if (esf != NULL) {
    a112:	460c      	mov	r4, r1
{
    a114:	af00      	add	r7, sp, #0
	if (esf != NULL) {
    a116:	2900      	cmp	r1, #0
    a118:	d04c      	beq.n	a1b4 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    a11a:	e9d1 1200 	ldrd	r1, r2, [r1]
    a11e:	466e      	mov	r6, sp
    a120:	b08a      	sub	sp, #40	; 0x28
    a122:	68a3      	ldr	r3, [r4, #8]
    a124:	466d      	mov	r5, sp
    a126:	f04f 0a05 	mov.w	sl, #5
    a12a:	46a8      	mov	r8, r5
    a12c:	4825      	ldr	r0, [pc, #148]	; (a1c4 <z_arm_fatal_error+0xb8>)
    a12e:	e9c5 2307 	strd	r2, r3, [r5, #28]
    a132:	e9c5 0105 	strd	r0, r1, [r5, #20]
    a136:	f848 af10 	str.w	sl, [r8, #16]!
    a13a:	2300      	movs	r3, #0
    a13c:	4642      	mov	r2, r8
    a13e:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    a142:	4821      	ldr	r0, [pc, #132]	; (a1c8 <z_arm_fatal_error+0xbc>)
    a144:	f7ff fc1e 	bl	9984 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    a148:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    a14c:	46b5      	mov	sp, r6
    a14e:	6963      	ldr	r3, [r4, #20]
    a150:	46ad      	mov	sp, r5
    a152:	481e      	ldr	r0, [pc, #120]	; (a1cc <z_arm_fatal_error+0xc0>)
    a154:	e9c5 2307 	strd	r2, r3, [r5, #28]
    a158:	e9c5 0105 	strd	r0, r1, [r5, #20]
    a15c:	f8c5 a010 	str.w	sl, [r5, #16]
    a160:	2300      	movs	r3, #0
    a162:	4642      	mov	r2, r8
    a164:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    a168:	4817      	ldr	r0, [pc, #92]	; (a1c8 <z_arm_fatal_error+0xbc>)
    a16a:	f7ff fc0b 	bl	9984 <z_impl_z_log_msg_static_create>
    a16e:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    a170:	b088      	sub	sp, #32
    a172:	69e3      	ldr	r3, [r4, #28]
    a174:	466d      	mov	r5, sp
    a176:	f04f 0a03 	mov.w	sl, #3
    a17a:	46a8      	mov	r8, r5
    a17c:	4a14      	ldr	r2, [pc, #80]	; (a1d0 <z_arm_fatal_error+0xc4>)
    a17e:	e9c5 2305 	strd	r2, r3, [r5, #20]
    a182:	f848 af10 	str.w	sl, [r8, #16]!
    a186:	2300      	movs	r3, #0
    a188:	4642      	mov	r2, r8
    a18a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a18e:	480e      	ldr	r0, [pc, #56]	; (a1c8 <z_arm_fatal_error+0xbc>)
    a190:	f7ff fbf8 	bl	9984 <z_impl_z_log_msg_static_create>
    a194:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    a196:	69a3      	ldr	r3, [r4, #24]
    a198:	46ad      	mov	sp, r5
    a19a:	4a0e      	ldr	r2, [pc, #56]	; (a1d4 <z_arm_fatal_error+0xc8>)
    a19c:	f8c5 a010 	str.w	sl, [r5, #16]
    a1a0:	e9c5 2305 	strd	r2, r3, [r5, #20]
    a1a4:	2300      	movs	r3, #0
    a1a6:	4642      	mov	r2, r8
    a1a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a1ac:	4806      	ldr	r0, [pc, #24]	; (a1c8 <z_arm_fatal_error+0xbc>)
    a1ae:	f7ff fbe9 	bl	9984 <z_impl_z_log_msg_static_create>
    a1b2:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    a1b4:	4621      	mov	r1, r4
    a1b6:	4648      	mov	r0, r9
    a1b8:	f003 fb1a 	bl	d7f0 <z_fatal_error>
}
    a1bc:	46bd      	mov	sp, r7
    a1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a1c2:	bf00      	nop
    a1c4:	000104d6 	.word	0x000104d6
    a1c8:	0000ffe0 	.word	0x0000ffe0
    a1cc:	00010505 	.word	0x00010505
    a1d0:	00010534 	.word	0x00010534
    a1d4:	00010543 	.word	0x00010543

0000a1d8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    a1d8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    a1da:	2800      	cmp	r0, #0
    a1dc:	db07      	blt.n	a1ee <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a1de:	2301      	movs	r3, #1
    a1e0:	0941      	lsrs	r1, r0, #5
    a1e2:	4a03      	ldr	r2, [pc, #12]	; (a1f0 <arch_irq_enable+0x18>)
    a1e4:	f000 001f 	and.w	r0, r0, #31
    a1e8:	4083      	lsls	r3, r0
    a1ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    a1ee:	4770      	bx	lr
    a1f0:	e000e100 	.word	0xe000e100

0000a1f4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    a1f4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    a1f6:	2800      	cmp	r0, #0
    a1f8:	db0c      	blt.n	a214 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a1fa:	2201      	movs	r2, #1
    a1fc:	4906      	ldr	r1, [pc, #24]	; (a218 <arch_irq_disable+0x24>)
    a1fe:	0943      	lsrs	r3, r0, #5
    a200:	f000 001f 	and.w	r0, r0, #31
    a204:	4082      	lsls	r2, r0
    a206:	3320      	adds	r3, #32
    a208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    a20c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a210:	f3bf 8f6f 	isb	sy
}
    a214:	4770      	bx	lr
    a216:	bf00      	nop
    a218:	e000e100 	.word	0xe000e100

0000a21c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    a21c:	4b05      	ldr	r3, [pc, #20]	; (a234 <arch_irq_is_enabled+0x18>)
    a21e:	0942      	lsrs	r2, r0, #5
    a220:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    a224:	2301      	movs	r3, #1
    a226:	f000 001f 	and.w	r0, r0, #31
    a22a:	fa03 f000 	lsl.w	r0, r3, r0
}
    a22e:	4010      	ands	r0, r2
    a230:	4770      	bx	lr
    a232:	bf00      	nop
    a234:	e000e100 	.word	0xe000e100

0000a238 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    a238:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    a23a:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    a23c:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a240:	bfac      	ite	ge
    a242:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a246:	4b06      	ldrlt	r3, [pc, #24]	; (a260 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a248:	ea4f 1141 	mov.w	r1, r1, lsl #5
    a24c:	b2c9      	uxtb	r1, r1
    a24e:	bfab      	itete	ge
    a250:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a254:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a258:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a25c:	5419      	strblt	r1, [r3, r0]
}
    a25e:	4770      	bx	lr
    a260:	e000ed14 	.word	0xe000ed14

0000a264 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    a264:	bf30      	wfi
    b z_SysNmiOnReset
    a266:	f7ff bffd 	b.w	a264 <z_SysNmiOnReset>
    a26a:	bf00      	nop

0000a26c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    a26c:	4a0b      	ldr	r2, [pc, #44]	; (a29c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    a26e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    a270:	4b0b      	ldr	r3, [pc, #44]	; (a2a0 <z_arm_prep_c+0x34>)
    a272:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    a276:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    a278:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a27c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    a280:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    a284:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    a288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    a28c:	f003 fb6a 	bl	d964 <z_bss_zero>
	z_data_copy();
    a290:	f004 f94c 	bl	e52c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    a294:	f000 fba8 	bl	a9e8 <z_arm_interrupt_init>
	z_cstart();
    a298:	f003 fba4 	bl	d9e4 <z_cstart>
    a29c:	00008000 	.word	0x00008000
    a2a0:	e000ed00 	.word	0xe000ed00

0000a2a4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    a2a4:	4a09      	ldr	r2, [pc, #36]	; (a2cc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    a2a6:	490a      	ldr	r1, [pc, #40]	; (a2d0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    a2a8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    a2aa:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    a2ac:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    a2ae:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    a2b0:	4908      	ldr	r1, [pc, #32]	; (a2d4 <arch_swap+0x30>)
    a2b2:	684b      	ldr	r3, [r1, #4]
    a2b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    a2b8:	604b      	str	r3, [r1, #4]
    a2ba:	2300      	movs	r3, #0
    a2bc:	f383 8811 	msr	BASEPRI, r3
    a2c0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    a2c4:	6893      	ldr	r3, [r2, #8]
}
    a2c6:	6f98      	ldr	r0, [r3, #120]	; 0x78
    a2c8:	4770      	bx	lr
    a2ca:	bf00      	nop
    a2cc:	200089a0 	.word	0x200089a0
    a2d0:	0001026c 	.word	0x0001026c
    a2d4:	e000ed00 	.word	0xe000ed00

0000a2d8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    a2d8:	4915      	ldr	r1, [pc, #84]	; (a330 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    a2da:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    a2dc:	f882 e07d 	strb.w	lr, [r2, #125]	; 0x7d
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    a2e0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    a2e4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    a2e6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    a2ea:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    a2ee:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    a2f0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    a2f4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    a2f8:	4f0e      	ldr	r7, [pc, #56]	; (a334 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    a2fa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    a2fe:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    a300:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    a302:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    a304:	f992 e07d 	ldrsb.w	lr, [r2, #125]	; 0x7d

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    a308:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    a30a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    a30c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    a30e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    a312:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    a316:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    a31a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    a31e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    a322:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    a324:	f004 ffaf 	bl	f286 <configure_builtin_stack_guard>
    pop {r2, lr}
    a328:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    a32c:	4770      	bx	lr
    a32e:	0000      	.short	0x0000
    ldr r1, =_kernel
    a330:	200089a0 	.word	0x200089a0
    ldr v4, =_SCS_ICSR
    a334:	e000ed04 	.word	0xe000ed04

0000a338 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    a338:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    a33c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    a33e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    a342:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    a346:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    a348:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    a34c:	2902      	cmp	r1, #2
    beq _oops
    a34e:	d0ff      	beq.n	a350 <_oops>

0000a350 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    a350:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    a352:	f004 ff89 	bl	f268 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    a356:	bd01      	pop	{r0, pc}

0000a358 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    a358:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    a35c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    a35e:	490c      	ldr	r1, [pc, #48]	; (a390 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
    a360:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    a364:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    a366:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    a36a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    a36e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    a370:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    a374:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    a378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    a37c:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    a380:	2300      	movs	r3, #0
    a382:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    a384:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    a388:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    a38a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    a38c:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    a38e:	4770      	bx	lr
    a390:	0000ea67 	.word	0x0000ea67

0000a394 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    a394:	4b08      	ldr	r3, [pc, #32]	; (a3b8 <arch_switch_to_main_thread+0x24>)
    a396:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    a398:	6e43      	ldr	r3, [r0, #100]	; 0x64
    a39a:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    a39e:	4610      	mov	r0, r2
    a3a0:	f381 8809 	msr	PSP, r1
    a3a4:	2100      	movs	r1, #0
    a3a6:	b663      	cpsie	if
    a3a8:	f381 8811 	msr	BASEPRI, r1
    a3ac:	f3bf 8f6f 	isb	sy
    a3b0:	2200      	movs	r2, #0
    a3b2:	2300      	movs	r3, #0
    a3b4:	f004 fb57 	bl	ea66 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    a3b8:	200089a0 	.word	0x200089a0

0000a3bc <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    a3bc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    a3be:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    a3c0:	4a0b      	ldr	r2, [pc, #44]	; (a3f0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    a3c2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    a3c4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    a3c6:	bf1e      	ittt	ne
	movne	r1, #0
    a3c8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    a3ca:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    a3cc:	f005 fac2 	blne	f954 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    a3d0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    a3d2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    a3d6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    a3da:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    a3de:	4905      	ldr	r1, [pc, #20]	; (a3f4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    a3e0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    a3e2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    a3e4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    a3e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    a3ea:	4903      	ldr	r1, [pc, #12]	; (a3f8 <_isr_wrapper+0x3c>)
	bx r1
    a3ec:	4708      	bx	r1
    a3ee:	0000      	.short	0x0000
	ldr r2, =_kernel
    a3f0:	200089a0 	.word	0x200089a0
	ldr r1, =_sw_isr_table
    a3f4:	0000fd38 	.word	0x0000fd38
	ldr r1, =z_arm_int_exit
    a3f8:	0000a3fd 	.word	0x0000a3fd

0000a3fc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    a3fc:	4b04      	ldr	r3, [pc, #16]	; (a410 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    a3fe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    a400:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    a402:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    a404:	d003      	beq.n	a40e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    a406:	4903      	ldr	r1, [pc, #12]	; (a414 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    a408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    a40c:	600a      	str	r2, [r1, #0]

0000a40e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    a40e:	4770      	bx	lr
	ldr r3, =_kernel
    a410:	200089a0 	.word	0x200089a0
	ldr r1, =_SCS_ICSR
    a414:	e000ed04 	.word	0xe000ed04

0000a418 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    a418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a41c:	b086      	sub	sp, #24
    a41e:	4606      	mov	r6, r0
    a420:	460d      	mov	r5, r1
    a422:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    a424:	2402      	movs	r4, #2
    a426:	4b41      	ldr	r3, [pc, #260]	; (a52c <mem_manage_fault.constprop.0+0x114>)
    a428:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a42c:	617b      	str	r3, [r7, #20]
    a42e:	4840      	ldr	r0, [pc, #256]	; (a530 <mem_manage_fault.constprop.0+0x118>)
    a430:	613c      	str	r4, [r7, #16]
    a432:	f107 0210 	add.w	r2, r7, #16
    a436:	f004 ff2a 	bl	f28e <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    a43a:	4b3e      	ldr	r3, [pc, #248]	; (a534 <mem_manage_fault.constprop.0+0x11c>)
    a43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a43e:	06db      	lsls	r3, r3, #27
    a440:	d509      	bpl.n	a456 <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    a442:	4b3d      	ldr	r3, [pc, #244]	; (a538 <mem_manage_fault.constprop.0+0x120>)
    a444:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a448:	e9c7 4304 	strd	r4, r3, [r7, #16]
    a44c:	4838      	ldr	r0, [pc, #224]	; (a530 <mem_manage_fault.constprop.0+0x118>)
    a44e:	f107 0210 	add.w	r2, r7, #16
    a452:	f004 ff1c 	bl	f28e <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    a456:	4b37      	ldr	r3, [pc, #220]	; (a534 <mem_manage_fault.constprop.0+0x11c>)
    a458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a45a:	0718      	lsls	r0, r3, #28
    a45c:	d50a      	bpl.n	a474 <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    a45e:	4b37      	ldr	r3, [pc, #220]	; (a53c <mem_manage_fault.constprop.0+0x124>)
    a460:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a464:	617b      	str	r3, [r7, #20]
    a466:	2302      	movs	r3, #2
    a468:	4831      	ldr	r0, [pc, #196]	; (a530 <mem_manage_fault.constprop.0+0x118>)
    a46a:	613b      	str	r3, [r7, #16]
    a46c:	f107 0210 	add.w	r2, r7, #16
    a470:	f004 ff0d 	bl	f28e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    a474:	4c2f      	ldr	r4, [pc, #188]	; (a534 <mem_manage_fault.constprop.0+0x11c>)
    a476:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a478:	0799      	lsls	r1, r3, #30
    a47a:	d522      	bpl.n	a4c2 <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
    a47c:	46e8      	mov	r8, sp
    a47e:	4b30      	ldr	r3, [pc, #192]	; (a540 <mem_manage_fault.constprop.0+0x128>)
    a480:	f107 0210 	add.w	r2, r7, #16
    a484:	617b      	str	r3, [r7, #20]
    a486:	2302      	movs	r3, #2
    a488:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a48c:	613b      	str	r3, [r7, #16]
    a48e:	4828      	ldr	r0, [pc, #160]	; (a530 <mem_manage_fault.constprop.0+0x118>)
    a490:	f004 fefd 	bl	f28e <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    a494:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    a496:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a498:	0612      	lsls	r2, r2, #24
    a49a:	d512      	bpl.n	a4c2 <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    a49c:	b088      	sub	sp, #32
    a49e:	466a      	mov	r2, sp
    a4a0:	4928      	ldr	r1, [pc, #160]	; (a544 <mem_manage_fault.constprop.0+0x12c>)
    a4a2:	4823      	ldr	r0, [pc, #140]	; (a530 <mem_manage_fault.constprop.0+0x118>)
    a4a4:	e9c2 1305 	strd	r1, r3, [r2, #20]
    a4a8:	2303      	movs	r3, #3
    a4aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a4ae:	f842 3f10 	str.w	r3, [r2, #16]!
    a4b2:	f004 feec 	bl	f28e <z_log_msg_static_create.constprop.0>
    a4b6:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    a4b8:	b11e      	cbz	r6, a4c2 <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    a4ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a4bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    a4c0:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    a4c2:	4b1c      	ldr	r3, [pc, #112]	; (a534 <mem_manage_fault.constprop.0+0x11c>)
    a4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a4c6:	07dc      	lsls	r4, r3, #31
    a4c8:	d50a      	bpl.n	a4e0 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
    a4ca:	4b1f      	ldr	r3, [pc, #124]	; (a548 <mem_manage_fault.constprop.0+0x130>)
    a4cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a4d0:	617b      	str	r3, [r7, #20]
    a4d2:	2302      	movs	r3, #2
    a4d4:	4816      	ldr	r0, [pc, #88]	; (a530 <mem_manage_fault.constprop.0+0x118>)
    a4d6:	613b      	str	r3, [r7, #16]
    a4d8:	f107 0210 	add.w	r2, r7, #16
    a4dc:	f004 fed7 	bl	f28e <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    a4e0:	4b14      	ldr	r3, [pc, #80]	; (a534 <mem_manage_fault.constprop.0+0x11c>)
    a4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a4e4:	0698      	lsls	r0, r3, #26
    a4e6:	d50a      	bpl.n	a4fe <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
    a4e8:	4b18      	ldr	r3, [pc, #96]	; (a54c <mem_manage_fault.constprop.0+0x134>)
    a4ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a4ee:	617b      	str	r3, [r7, #20]
    a4f0:	2302      	movs	r3, #2
    a4f2:	480f      	ldr	r0, [pc, #60]	; (a530 <mem_manage_fault.constprop.0+0x118>)
    a4f4:	613b      	str	r3, [r7, #16]
    a4f6:	f107 0210 	add.w	r2, r7, #16
    a4fa:	f004 fec8 	bl	f28e <z_log_msg_static_create.constprop.0>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    a4fe:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    a500:	4b0c      	ldr	r3, [pc, #48]	; (a534 <mem_manage_fault.constprop.0+0x11c>)

	return reason;
}
    a502:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    a504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a506:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    a508:	bf58      	it	pl
    a50a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    a50c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a50e:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    a510:	bf42      	ittt	mi
    a512:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    a514:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    a518:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    a51a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a51c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    a520:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    a522:	7028      	strb	r0, [r5, #0]
}
    a524:	46bd      	mov	sp, r7
    a526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a52a:	bf00      	nop
    a52c:	00010571 	.word	0x00010571
    a530:	0000ffe0 	.word	0x0000ffe0
    a534:	e000ed00 	.word	0xe000ed00
    a538:	00010587 	.word	0x00010587
    a53c:	000105ba 	.word	0x000105ba
    a540:	000105cd 	.word	0x000105cd
    a544:	000105e5 	.word	0x000105e5
    a548:	000105fb 	.word	0x000105fb
    a54c:	0001061a 	.word	0x0001061a

0000a550 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    a550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a554:	b086      	sub	sp, #24
    a556:	4606      	mov	r6, r0
    a558:	460d      	mov	r5, r1
    a55a:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    a55c:	2402      	movs	r4, #2
    a55e:	4b3e      	ldr	r3, [pc, #248]	; (a658 <bus_fault.constprop.0+0x108>)
    a560:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a564:	617b      	str	r3, [r7, #20]
    a566:	483d      	ldr	r0, [pc, #244]	; (a65c <bus_fault.constprop.0+0x10c>)
    a568:	613c      	str	r4, [r7, #16]
    a56a:	f107 0210 	add.w	r2, r7, #16
    a56e:	f004 fe8e 	bl	f28e <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    a572:	4b3b      	ldr	r3, [pc, #236]	; (a660 <bus_fault.constprop.0+0x110>)
    a574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a576:	04d9      	lsls	r1, r3, #19
    a578:	d509      	bpl.n	a58e <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    a57a:	4b3a      	ldr	r3, [pc, #232]	; (a664 <bus_fault.constprop.0+0x114>)
    a57c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a580:	e9c7 4304 	strd	r4, r3, [r7, #16]
    a584:	4835      	ldr	r0, [pc, #212]	; (a65c <bus_fault.constprop.0+0x10c>)
    a586:	f107 0210 	add.w	r2, r7, #16
    a58a:	f004 fe80 	bl	f28e <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    a58e:	4b34      	ldr	r3, [pc, #208]	; (a660 <bus_fault.constprop.0+0x110>)
    a590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a592:	051a      	lsls	r2, r3, #20
    a594:	d50a      	bpl.n	a5ac <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    a596:	4b34      	ldr	r3, [pc, #208]	; (a668 <bus_fault.constprop.0+0x118>)
    a598:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a59c:	617b      	str	r3, [r7, #20]
    a59e:	2302      	movs	r3, #2
    a5a0:	482e      	ldr	r0, [pc, #184]	; (a65c <bus_fault.constprop.0+0x10c>)
    a5a2:	613b      	str	r3, [r7, #16]
    a5a4:	f107 0210 	add.w	r2, r7, #16
    a5a8:	f004 fe71 	bl	f28e <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    a5ac:	4c2c      	ldr	r4, [pc, #176]	; (a660 <bus_fault.constprop.0+0x110>)
    a5ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a5b0:	059b      	lsls	r3, r3, #22
    a5b2:	d522      	bpl.n	a5fa <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    a5b4:	46e8      	mov	r8, sp
    a5b6:	4b2d      	ldr	r3, [pc, #180]	; (a66c <bus_fault.constprop.0+0x11c>)
    a5b8:	4828      	ldr	r0, [pc, #160]	; (a65c <bus_fault.constprop.0+0x10c>)
    a5ba:	617b      	str	r3, [r7, #20]
    a5bc:	2302      	movs	r3, #2
    a5be:	f107 0210 	add.w	r2, r7, #16
    a5c2:	613b      	str	r3, [r7, #16]
    a5c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a5c8:	f004 fe61 	bl	f28e <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    a5cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    a5ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a5d0:	0410      	lsls	r0, r2, #16
    a5d2:	d512      	bpl.n	a5fa <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    a5d4:	b088      	sub	sp, #32
    a5d6:	466a      	mov	r2, sp
    a5d8:	4925      	ldr	r1, [pc, #148]	; (a670 <bus_fault.constprop.0+0x120>)
    a5da:	4820      	ldr	r0, [pc, #128]	; (a65c <bus_fault.constprop.0+0x10c>)
    a5dc:	e9c2 1305 	strd	r1, r3, [r2, #20]
    a5e0:	2303      	movs	r3, #3
    a5e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a5e6:	f842 3f10 	str.w	r3, [r2, #16]!
    a5ea:	f004 fe50 	bl	f28e <z_log_msg_static_create.constprop.0>
    a5ee:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    a5f0:	b11e      	cbz	r6, a5fa <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    a5f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a5f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    a5f8:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    a5fa:	4b19      	ldr	r3, [pc, #100]	; (a660 <bus_fault.constprop.0+0x110>)
    a5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a5fe:	0559      	lsls	r1, r3, #21
    a600:	d50a      	bpl.n	a618 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    a602:	4b1c      	ldr	r3, [pc, #112]	; (a674 <bus_fault.constprop.0+0x124>)
    a604:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a608:	617b      	str	r3, [r7, #20]
    a60a:	2302      	movs	r3, #2
    a60c:	4813      	ldr	r0, [pc, #76]	; (a65c <bus_fault.constprop.0+0x10c>)
    a60e:	613b      	str	r3, [r7, #16]
    a610:	f107 0210 	add.w	r2, r7, #16
    a614:	f004 fe3b 	bl	f28e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    a618:	4b11      	ldr	r3, [pc, #68]	; (a660 <bus_fault.constprop.0+0x110>)
    a61a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a61c:	05d2      	lsls	r2, r2, #23
    a61e:	d515      	bpl.n	a64c <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
    a620:	4b15      	ldr	r3, [pc, #84]	; (a678 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    a622:	617b      	str	r3, [r7, #20]
    a624:	2302      	movs	r3, #2
    a626:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a62a:	480c      	ldr	r0, [pc, #48]	; (a65c <bus_fault.constprop.0+0x10c>)
    a62c:	613b      	str	r3, [r7, #16]
    a62e:	f107 0210 	add.w	r2, r7, #16
    a632:	f004 fe2c 	bl	f28e <z_log_msg_static_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    a636:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    a638:	4a09      	ldr	r2, [pc, #36]	; (a660 <bus_fault.constprop.0+0x110>)

	return reason;
}
    a63a:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    a63c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    a63e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    a642:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    a644:	7028      	strb	r0, [r5, #0]
}
    a646:	46bd      	mov	sp, r7
    a648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    a64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a64e:	049b      	lsls	r3, r3, #18
    a650:	d5f1      	bpl.n	a636 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    a652:	4b0a      	ldr	r3, [pc, #40]	; (a67c <bus_fault.constprop.0+0x12c>)
    a654:	e7e5      	b.n	a622 <bus_fault.constprop.0+0xd2>
    a656:	bf00      	nop
    a658:	00010649 	.word	0x00010649
    a65c:	0000ffe0 	.word	0x0000ffe0
    a660:	e000ed00 	.word	0xe000ed00
    a664:	0001065f 	.word	0x0001065f
    a668:	000105ba 	.word	0x000105ba
    a66c:	00010670 	.word	0x00010670
    a670:	00010689 	.word	0x00010689
    a674:	0001069e 	.word	0x0001069e
    a678:	000106b9 	.word	0x000106b9
    a67c:	0001061a 	.word	0x0001061a

0000a680 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    a680:	b510      	push	{r4, lr}
    a682:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    a684:	2402      	movs	r4, #2
    a686:	4b3a      	ldr	r3, [pc, #232]	; (a770 <usage_fault.constprop.0+0xf0>)
    a688:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a68c:	4839      	ldr	r0, [pc, #228]	; (a774 <usage_fault.constprop.0+0xf4>)
    a68e:	aa04      	add	r2, sp, #16
    a690:	9305      	str	r3, [sp, #20]
    a692:	9404      	str	r4, [sp, #16]
    a694:	f004 fdfb 	bl	f28e <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    a698:	4b37      	ldr	r3, [pc, #220]	; (a778 <usage_fault.constprop.0+0xf8>)
    a69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a69c:	019b      	lsls	r3, r3, #6
    a69e:	d508      	bpl.n	a6b2 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    a6a0:	4b36      	ldr	r3, [pc, #216]	; (a77c <usage_fault.constprop.0+0xfc>)
    a6a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a6a6:	4833      	ldr	r0, [pc, #204]	; (a774 <usage_fault.constprop.0+0xf4>)
    a6a8:	aa04      	add	r2, sp, #16
    a6aa:	e9cd 4304 	strd	r4, r3, [sp, #16]
    a6ae:	f004 fdee 	bl	f28e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    a6b2:	4b31      	ldr	r3, [pc, #196]	; (a778 <usage_fault.constprop.0+0xf8>)
    a6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a6b6:	01dc      	lsls	r4, r3, #7
    a6b8:	d509      	bpl.n	a6ce <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    a6ba:	4b31      	ldr	r3, [pc, #196]	; (a780 <usage_fault.constprop.0+0x100>)
    a6bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a6c0:	9305      	str	r3, [sp, #20]
    a6c2:	2302      	movs	r3, #2
    a6c4:	482b      	ldr	r0, [pc, #172]	; (a774 <usage_fault.constprop.0+0xf4>)
    a6c6:	aa04      	add	r2, sp, #16
    a6c8:	9304      	str	r3, [sp, #16]
    a6ca:	f004 fde0 	bl	f28e <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    a6ce:	4b2a      	ldr	r3, [pc, #168]	; (a778 <usage_fault.constprop.0+0xf8>)
    a6d0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    a6d2:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    a6d6:	d009      	beq.n	a6ec <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    a6d8:	2402      	movs	r4, #2
    a6da:	4b2a      	ldr	r3, [pc, #168]	; (a784 <usage_fault.constprop.0+0x104>)
    a6dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a6e0:	4824      	ldr	r0, [pc, #144]	; (a774 <usage_fault.constprop.0+0xf4>)
    a6e2:	aa04      	add	r2, sp, #16
    a6e4:	9305      	str	r3, [sp, #20]
    a6e6:	9404      	str	r4, [sp, #16]
    a6e8:	f004 fdd1 	bl	f28e <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    a6ec:	4b22      	ldr	r3, [pc, #136]	; (a778 <usage_fault.constprop.0+0xf8>)
    a6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a6f0:	0318      	lsls	r0, r3, #12
    a6f2:	d509      	bpl.n	a708 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  No coprocessor instructions");
    a6f4:	4b24      	ldr	r3, [pc, #144]	; (a788 <usage_fault.constprop.0+0x108>)
    a6f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a6fa:	9305      	str	r3, [sp, #20]
    a6fc:	2302      	movs	r3, #2
    a6fe:	481d      	ldr	r0, [pc, #116]	; (a774 <usage_fault.constprop.0+0xf4>)
    a700:	aa04      	add	r2, sp, #16
    a702:	9304      	str	r3, [sp, #16]
    a704:	f004 fdc3 	bl	f28e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    a708:	4b1b      	ldr	r3, [pc, #108]	; (a778 <usage_fault.constprop.0+0xf8>)
    a70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a70c:	0359      	lsls	r1, r3, #13
    a70e:	d509      	bpl.n	a724 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    a710:	4b1e      	ldr	r3, [pc, #120]	; (a78c <usage_fault.constprop.0+0x10c>)
    a712:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a716:	9305      	str	r3, [sp, #20]
    a718:	2302      	movs	r3, #2
    a71a:	4816      	ldr	r0, [pc, #88]	; (a774 <usage_fault.constprop.0+0xf4>)
    a71c:	aa04      	add	r2, sp, #16
    a71e:	9304      	str	r3, [sp, #16]
    a720:	f004 fdb5 	bl	f28e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    a724:	4b14      	ldr	r3, [pc, #80]	; (a778 <usage_fault.constprop.0+0xf8>)
    a726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a728:	039a      	lsls	r2, r3, #14
    a72a:	d509      	bpl.n	a740 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    a72c:	4b18      	ldr	r3, [pc, #96]	; (a790 <usage_fault.constprop.0+0x110>)
    a72e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a732:	9305      	str	r3, [sp, #20]
    a734:	2302      	movs	r3, #2
    a736:	480f      	ldr	r0, [pc, #60]	; (a774 <usage_fault.constprop.0+0xf4>)
    a738:	aa04      	add	r2, sp, #16
    a73a:	9304      	str	r3, [sp, #16]
    a73c:	f004 fda7 	bl	f28e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    a740:	4b0d      	ldr	r3, [pc, #52]	; (a778 <usage_fault.constprop.0+0xf8>)
    a742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a744:	03db      	lsls	r3, r3, #15
    a746:	d509      	bpl.n	a75c <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    a748:	4b12      	ldr	r3, [pc, #72]	; (a794 <usage_fault.constprop.0+0x114>)
    a74a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a74e:	9305      	str	r3, [sp, #20]
    a750:	2302      	movs	r3, #2
    a752:	4808      	ldr	r0, [pc, #32]	; (a774 <usage_fault.constprop.0+0xf4>)
    a754:	aa04      	add	r2, sp, #16
    a756:	9304      	str	r3, [sp, #16]
    a758:	f004 fd99 	bl	f28e <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    a75c:	4a06      	ldr	r2, [pc, #24]	; (a778 <usage_fault.constprop.0+0xf8>)

	return reason;
}
    a75e:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    a760:	6a93      	ldr	r3, [r2, #40]	; 0x28
    a762:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    a766:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    a76a:	6293      	str	r3, [r2, #40]	; 0x28
}
    a76c:	b006      	add	sp, #24
    a76e:	bd10      	pop	{r4, pc}
    a770:	000106d1 	.word	0x000106d1
    a774:	0000ffe0 	.word	0x0000ffe0
    a778:	e000ed00 	.word	0xe000ed00
    a77c:	000106e9 	.word	0x000106e9
    a780:	000106fc 	.word	0x000106fc
    a784:	00010716 	.word	0x00010716
    a788:	00010740 	.word	0x00010740
    a78c:	0001075e 	.word	0x0001075e
    a790:	00010783 	.word	0x00010783
    a794:	0001079d 	.word	0x0001079d

0000a798 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    a798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a79c:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    a79e:	4b7a      	ldr	r3, [pc, #488]	; (a988 <z_arm_fault+0x1f0>)
{
    a7a0:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    a7a2:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
    a7a6:	468a      	mov	sl, r1
    a7a8:	4614      	mov	r4, r2
    a7aa:	2600      	movs	r6, #0
    a7ac:	af00      	add	r7, sp, #0
    a7ae:	f3c9 0808 	ubfx	r8, r9, #0, #9
    a7b2:	f386 8811 	msr	BASEPRI, r6
    a7b6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    a7ba:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    a7be:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    a7c2:	d125      	bne.n	a810 <z_arm_fault+0x78>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    a7c4:	07d3      	lsls	r3, r2, #31
    a7c6:	d423      	bmi.n	a810 <z_arm_fault+0x78>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    a7c8:	0650      	lsls	r0, r2, #25
    a7ca:	d403      	bmi.n	a7d4 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    a7cc:	0711      	lsls	r1, r2, #28
    a7ce:	d40f      	bmi.n	a7f0 <z_arm_fault+0x58>
			*nested_exc = true;
    a7d0:	2601      	movs	r6, #1
    a7d2:	e00f      	b.n	a7f4 <z_arm_fault+0x5c>
		PR_FAULT_INFO("Exception occurred in Secure State");
    a7d4:	4b6d      	ldr	r3, [pc, #436]	; (a98c <z_arm_fault+0x1f4>)
    a7d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a7da:	61fb      	str	r3, [r7, #28]
    a7dc:	2302      	movs	r3, #2
    a7de:	486c      	ldr	r0, [pc, #432]	; (a990 <z_arm_fault+0x1f8>)
    a7e0:	61bb      	str	r3, [r7, #24]
    a7e2:	f107 0218 	add.w	r2, r7, #24
    a7e6:	f004 fd52 	bl	f28e <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    a7ea:	f014 0404 	ands.w	r4, r4, #4
    a7ee:	d000      	beq.n	a7f2 <z_arm_fault+0x5a>
			ptr_esf = (z_arch_esf_t *)psp;
    a7f0:	4655      	mov	r5, sl
	*nested_exc = false;
    a7f2:	2600      	movs	r6, #0
	*recoverable = false;
    a7f4:	2300      	movs	r3, #0
    a7f6:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    a7f8:	f1a8 0303 	sub.w	r3, r8, #3
    a7fc:	2b09      	cmp	r3, #9
    a7fe:	f200 80a2 	bhi.w	a946 <z_arm_fault+0x1ae>
    a802:	e8df f003 	tbb	[pc, r3]
    a806:	9507      	.short	0x9507
    a808:	a0a09198 	.word	0xa0a09198
    a80c:	9ba0a0a0 	.word	0x9ba0a0a0
		return NULL;
    a810:	4635      	mov	r5, r6
    a812:	e7ef      	b.n	a7f4 <z_arm_fault+0x5c>
	PR_FAULT_INFO("***** HARD FAULT *****");
    a814:	46e9      	mov	r9, sp
    a816:	f04f 0802 	mov.w	r8, #2
    a81a:	4b5e      	ldr	r3, [pc, #376]	; (a994 <z_arm_fault+0x1fc>)
    a81c:	f107 0218 	add.w	r2, r7, #24
    a820:	61fb      	str	r3, [r7, #28]
    a822:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a826:	485a      	ldr	r0, [pc, #360]	; (a990 <z_arm_fault+0x1f8>)
    a828:	f8c7 8018 	str.w	r8, [r7, #24]
    a82c:	f004 fd2f 	bl	f28e <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    a830:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    a832:	4c55      	ldr	r4, [pc, #340]	; (a988 <z_arm_fault+0x1f0>)
	*recoverable = false;
    a834:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    a836:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a838:	079a      	lsls	r2, r3, #30
    a83a:	d50b      	bpl.n	a854 <z_arm_fault+0xbc>
		PR_EXC("  Bus fault on vector table read");
    a83c:	4b56      	ldr	r3, [pc, #344]	; (a998 <z_arm_fault+0x200>)
		PR_EXC("  Debug event");
    a83e:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    a842:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a846:	4852      	ldr	r0, [pc, #328]	; (a990 <z_arm_fault+0x1f8>)
    a848:	f107 0218 	add.w	r2, r7, #24
    a84c:	f004 fd1f 	bl	f28e <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    a850:	2400      	movs	r4, #0
    a852:	e038      	b.n	a8c6 <z_arm_fault+0x12e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    a854:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a856:	2b00      	cmp	r3, #0
    a858:	da01      	bge.n	a85e <z_arm_fault+0xc6>
		PR_EXC("  Debug event");
    a85a:	4b50      	ldr	r3, [pc, #320]	; (a99c <z_arm_fault+0x204>)
    a85c:	e7ef      	b.n	a83e <z_arm_fault+0xa6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    a85e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a860:	005b      	lsls	r3, r3, #1
    a862:	d5f5      	bpl.n	a850 <z_arm_fault+0xb8>
		PR_EXC("  Fault escalation (see below)");
    a864:	4b4e      	ldr	r3, [pc, #312]	; (a9a0 <z_arm_fault+0x208>)
    a866:	f107 0218 	add.w	r2, r7, #24
    a86a:	e9c7 8306 	strd	r8, r3, [r7, #24]
    a86e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a872:	4847      	ldr	r0, [pc, #284]	; (a990 <z_arm_fault+0x1f8>)
    a874:	f004 fd0b 	bl	f28e <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    a878:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    a87a:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    a87c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a880:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    a882:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a886:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    a88a:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    a88c:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    a890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a894:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    a896:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a89a:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    a89e:	f64d 7302 	movw	r3, #57090	; 0xdf02
    a8a2:	429a      	cmp	r2, r3
    a8a4:	d12b      	bne.n	a8fe <z_arm_fault+0x166>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    a8a6:	b088      	sub	sp, #32
    a8a8:	682b      	ldr	r3, [r5, #0]
    a8aa:	466a      	mov	r2, sp
    a8ac:	493d      	ldr	r1, [pc, #244]	; (a9a4 <z_arm_fault+0x20c>)
    a8ae:	4838      	ldr	r0, [pc, #224]	; (a990 <z_arm_fault+0x1f8>)
    a8b0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    a8b4:	2303      	movs	r3, #3
    a8b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a8ba:	f842 3f10 	str.w	r3, [r2, #16]!
    a8be:	f004 fce6 	bl	f28e <z_log_msg_static_create.constprop.0>
    a8c2:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    a8c4:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    a8c6:	79fb      	ldrb	r3, [r7, #7]
    a8c8:	b9ab      	cbnz	r3, a8f6 <z_arm_fault+0x15e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    a8ca:	2220      	movs	r2, #32
    a8cc:	4629      	mov	r1, r5
    a8ce:	f107 0008 	add.w	r0, r7, #8
    a8d2:	f004 fd1a 	bl	f30a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    a8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a8d8:	2e00      	cmp	r6, #0
    a8da:	d050      	beq.n	a97e <z_arm_fault+0x1e6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    a8dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
    a8e0:	b922      	cbnz	r2, a8ec <z_arm_fault+0x154>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    a8e2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    a8e6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    a8ea:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    a8ec:	4620      	mov	r0, r4
    a8ee:	f107 0108 	add.w	r1, r7, #8
    a8f2:	f7ff fc0b 	bl	a10c <z_arm_fatal_error>
}
    a8f6:	3728      	adds	r7, #40	; 0x28
    a8f8:	46bd      	mov	sp, r7
    a8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    a8fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a900:	b2db      	uxtb	r3, r3
    a902:	b123      	cbz	r3, a90e <z_arm_fault+0x176>
			reason = mem_manage_fault(esf, 1, recoverable);
    a904:	2001      	movs	r0, #1
    a906:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    a908:	f7ff fd86 	bl	a418 <mem_manage_fault.constprop.0>
    a90c:	e00e      	b.n	a92c <z_arm_fault+0x194>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    a90e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a910:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    a914:	d004      	beq.n	a920 <z_arm_fault+0x188>
			reason = bus_fault(esf, 1, recoverable);
    a916:	2001      	movs	r0, #1
    a918:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
    a91a:	f7ff fe19 	bl	a550 <bus_fault.constprop.0>
    a91e:	e005      	b.n	a92c <z_arm_fault+0x194>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    a920:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    a926:	d393      	bcc.n	a850 <z_arm_fault+0xb8>
			reason = usage_fault(esf);
    a928:	f7ff feaa 	bl	a680 <usage_fault.constprop.0>
    a92c:	4604      	mov	r4, r0
    a92e:	e7ca      	b.n	a8c6 <z_arm_fault+0x12e>
		reason = mem_manage_fault(esf, 0, recoverable);
    a930:	2000      	movs	r0, #0
    a932:	1df9      	adds	r1, r7, #7
    a934:	e7e8      	b.n	a908 <z_arm_fault+0x170>
		reason = bus_fault(esf, 0, recoverable);
    a936:	2000      	movs	r0, #0
    a938:	1df9      	adds	r1, r7, #7
    a93a:	e7ee      	b.n	a91a <z_arm_fault+0x182>
	PR_FAULT_INFO(
    a93c:	4b1a      	ldr	r3, [pc, #104]	; (a9a8 <z_arm_fault+0x210>)
    a93e:	61fb      	str	r3, [r7, #28]
    a940:	2302      	movs	r3, #2
    a942:	61bb      	str	r3, [r7, #24]
    a944:	e77d      	b.n	a842 <z_arm_fault+0xaa>
	PR_FAULT_INFO("***** %s %d) *****",
    a946:	4a19      	ldr	r2, [pc, #100]	; (a9ac <z_arm_fault+0x214>)
    a948:	466c      	mov	r4, sp
    a94a:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    a94e:	b08a      	sub	sp, #40	; 0x28
    a950:	4b17      	ldr	r3, [pc, #92]	; (a9b0 <z_arm_fault+0x218>)
    a952:	bf18      	it	ne
    a954:	4613      	movne	r3, r2
    a956:	466a      	mov	r2, sp
    a958:	4916      	ldr	r1, [pc, #88]	; (a9b4 <z_arm_fault+0x21c>)
    a95a:	480d      	ldr	r0, [pc, #52]	; (a990 <z_arm_fault+0x1f8>)
    a95c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    a960:	f1a8 0310 	sub.w	r3, r8, #16
    a964:	61d3      	str	r3, [r2, #28]
    a966:	f44f 7300 	mov.w	r3, #512	; 0x200
    a96a:	8413      	strh	r3, [r2, #32]
    a96c:	4b12      	ldr	r3, [pc, #72]	; (a9b8 <z_arm_fault+0x220>)
    a96e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    a972:	f842 3f10 	str.w	r3, [r2, #16]!
    a976:	f004 fc8a 	bl	f28e <z_log_msg_static_create.constprop.0>
    a97a:	46a5      	mov	sp, r4
}
    a97c:	e768      	b.n	a850 <z_arm_fault+0xb8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    a97e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    a982:	f023 0301 	bic.w	r3, r3, #1
    a986:	e7b0      	b.n	a8ea <z_arm_fault+0x152>
    a988:	e000ed00 	.word	0xe000ed00
    a98c:	000107f6 	.word	0x000107f6
    a990:	0000ffe0 	.word	0x0000ffe0
    a994:	00010819 	.word	0x00010819
    a998:	00010830 	.word	0x00010830
    a99c:	00010851 	.word	0x00010851
    a9a0:	0001085f 	.word	0x0001085f
    a9a4:	0001087e 	.word	0x0001087e
    a9a8:	0001089a 	.word	0x0001089a
    a9ac:	000107dd 	.word	0x000107dd
    a9b0:	000107c8 	.word	0x000107c8
    a9b4:	000108be 	.word	0x000108be
    a9b8:	01000004 	.word	0x01000004

0000a9bc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    a9bc:	4b04      	ldr	r3, [pc, #16]	; (a9d0 <z_arm_fault_init+0x14>)
    a9be:	695a      	ldr	r2, [r3, #20]
    a9c0:	f042 0210 	orr.w	r2, r2, #16
    a9c4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    a9c6:	695a      	ldr	r2, [r3, #20]
    a9c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    a9cc:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    a9ce:	4770      	bx	lr
    a9d0:	e000ed00 	.word	0xe000ed00

0000a9d4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    a9d4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    a9d8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    a9dc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    a9de:	4672      	mov	r2, lr
	bl z_arm_fault
    a9e0:	f7ff feda 	bl	a798 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    a9e4:	bd01      	pop	{r0, pc}
    a9e6:	bf00      	nop

0000a9e8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    a9e8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a9ea:	2120      	movs	r1, #32
    a9ec:	4803      	ldr	r0, [pc, #12]	; (a9fc <z_arm_interrupt_init+0x14>)
    a9ee:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    a9f0:	3301      	adds	r3, #1
    a9f2:	2b45      	cmp	r3, #69	; 0x45
    a9f4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    a9f8:	d1f9      	bne.n	a9ee <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    a9fa:	4770      	bx	lr
    a9fc:	e000e100 	.word	0xe000e100

0000aa00 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    aa00:	2000      	movs	r0, #0
    msr CONTROL, r0
    aa02:	f380 8814 	msr	CONTROL, r0
    isb
    aa06:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    aa0a:	2000      	movs	r0, #0
    msr MSPLIM, r0
    aa0c:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    aa10:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    aa14:	f7fe fd2e 	bl	9474 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    aa18:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    aa1a:	490e      	ldr	r1, [pc, #56]	; (aa54 <__start+0x54>)
    str r0, [r1]
    aa1c:	6008      	str	r0, [r1, #0]
    dsb
    aa1e:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    aa22:	480d      	ldr	r0, [pc, #52]	; (aa58 <__start+0x58>)
    msr msp, r0
    aa24:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    aa28:	f000 f83e 	bl	aaa8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    aa2c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    aa2e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    aa32:	480a      	ldr	r0, [pc, #40]	; (aa5c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    aa34:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    aa38:	1840      	adds	r0, r0, r1
    msr PSP, r0
    aa3a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    aa3e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    aa42:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    aa44:	4308      	orrs	r0, r1
    msr CONTROL, r0
    aa46:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    aa4a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    aa4e:	f7ff fc0d 	bl	a26c <z_arm_prep_c>
    aa52:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    aa54:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    aa58:	20009cc8 	.word	0x20009cc8
    ldr r0, =z_interrupt_stacks
    aa5c:	20008f88 	.word	0x20008f88

0000aa60 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    aa60:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    aa64:	4905      	ldr	r1, [pc, #20]	; (aa7c <sys_arch_reboot+0x1c>)
    aa66:	4b06      	ldr	r3, [pc, #24]	; (aa80 <sys_arch_reboot+0x20>)
    aa68:	68ca      	ldr	r2, [r1, #12]
    aa6a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    aa6e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    aa70:	60cb      	str	r3, [r1, #12]
    aa72:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    aa76:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    aa78:	e7fd      	b.n	aa76 <sys_arch_reboot+0x16>
    aa7a:	bf00      	nop
    aa7c:	e000ed00 	.word	0xe000ed00
    aa80:	05fa0004 	.word	0x05fa0004

0000aa84 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    aa84:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    aa86:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    aa88:	4906      	ldr	r1, [pc, #24]	; (aaa4 <z_arm_clear_arm_mpu_config+0x20>)
    aa8a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    aa8e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    aa92:	4293      	cmp	r3, r2
    aa94:	db00      	blt.n	aa98 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    aa96:	4770      	bx	lr
  mpu->RNR = rnr;
    aa98:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    aa9c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    aaa0:	3301      	adds	r3, #1
    aaa2:	e7f6      	b.n	aa92 <z_arm_clear_arm_mpu_config+0xe>
    aaa4:	e000ed00 	.word	0xe000ed00

0000aaa8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    aaa8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    aaaa:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    aaac:	2400      	movs	r4, #0
    aaae:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    aab2:	f7ff ffe7 	bl	aa84 <z_arm_clear_arm_mpu_config>
    aab6:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    aab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    aabc:	4a0c      	ldr	r2, [pc, #48]	; (aaf0 <z_arm_init_arch_hw_at_boot+0x48>)
    aabe:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    aac2:	3301      	adds	r3, #1
    aac4:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    aac6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    aaca:	d1f8      	bne.n	aabe <z_arm_init_arch_hw_at_boot+0x16>
    aacc:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    aace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    aad2:	4a07      	ldr	r2, [pc, #28]	; (aaf0 <z_arm_init_arch_hw_at_boot+0x48>)
    aad4:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    aad8:	3301      	adds	r3, #1
    aada:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    aadc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    aae0:	d1f8      	bne.n	aad4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    aae2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    aae4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    aae8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    aaec:	bd10      	pop	{r4, pc}
    aaee:	bf00      	nop
    aaf0:	e000e100 	.word	0xe000e100

0000aaf4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    aaf4:	4b08      	ldr	r3, [pc, #32]	; (ab18 <z_impl_k_thread_abort+0x24>)
    aaf6:	689b      	ldr	r3, [r3, #8]
    aaf8:	4283      	cmp	r3, r0
    aafa:	d10b      	bne.n	ab14 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    aafc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    ab00:	b143      	cbz	r3, ab14 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    ab02:	4b06      	ldr	r3, [pc, #24]	; (ab1c <z_impl_k_thread_abort+0x28>)
    ab04:	685a      	ldr	r2, [r3, #4]
    ab06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    ab0a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    ab0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ab0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    ab12:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    ab14:	f003 bcaa 	b.w	e46c <z_thread_abort>
    ab18:	200089a0 	.word	0x200089a0
    ab1c:	e000ed00 	.word	0xe000ed00

0000ab20 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    ab20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    ab22:	4c09      	ldr	r4, [pc, #36]	; (ab48 <z_arm_configure_static_mpu_regions+0x28>)
    ab24:	4a09      	ldr	r2, [pc, #36]	; (ab4c <z_arm_configure_static_mpu_regions+0x2c>)
    ab26:	4623      	mov	r3, r4
    ab28:	2101      	movs	r1, #1
    ab2a:	4809      	ldr	r0, [pc, #36]	; (ab50 <z_arm_configure_static_mpu_regions+0x30>)
    ab2c:	f000 f92a 	bl	ad84 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    ab30:	2300      	movs	r3, #0
    ab32:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    ab34:	4b07      	ldr	r3, [pc, #28]	; (ab54 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    ab36:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    ab38:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    ab3a:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    ab3c:	9301      	str	r3, [sp, #4]
    ab3e:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    ab40:	f000 f92a 	bl	ad98 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    ab44:	b004      	add	sp, #16
    ab46:	bd10      	pop	{r4, pc}
    ab48:	20080000 	.word	0x20080000
    ab4c:	20008000 	.word	0x20008000
    ab50:	000100b0 	.word	0x000100b0
    ab54:	200081a0 	.word	0x200081a0

0000ab58 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    ab58:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    ab5a:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    ab5c:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    ab5e:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    ab62:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    ab66:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    ab68:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    ab6a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    ab6c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    ab70:	4905      	ldr	r1, [pc, #20]	; (ab88 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    ab72:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    ab76:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    ab7a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    ab7e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    ab82:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    ab86:	bd10      	pop	{r4, pc}
    ab88:	e000ed00 	.word	0xe000ed00

0000ab8c <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
    ab8c:	b580      	push	{r7, lr}
    ab8e:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    ab90:	b088      	sub	sp, #32
    ab92:	466a      	mov	r2, sp
    ab94:	4b07      	ldr	r3, [pc, #28]	; (abb4 <region_allocate_and_init.part.0+0x28>)
    ab96:	e9c2 3005 	strd	r3, r0, [r2, #20]
    ab9a:	2303      	movs	r3, #3
    ab9c:	f842 3f10 	str.w	r3, [r2, #16]!
    aba0:	2300      	movs	r3, #0
    aba2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    aba6:	4804      	ldr	r0, [pc, #16]	; (abb8 <region_allocate_and_init.part.0+0x2c>)
    aba8:	f7fe feec 	bl	9984 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    abac:	f06f 0015 	mvn.w	r0, #21
    abb0:	46bd      	mov	sp, r7
    abb2:	bd80      	pop	{r7, pc}
    abb4:	000108d5 	.word	0x000108d5
    abb8:	0000ffd8 	.word	0x0000ffd8

0000abbc <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    abbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    abc0:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    abc2:	4606      	mov	r6, r0
    abc4:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    abc8:	b087      	sub	sp, #28
	MPU->RNR = rnr;
    abca:	4d5f      	ldr	r5, [pc, #380]	; (ad48 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    abcc:	af00      	add	r7, sp, #0
    abce:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
    abd0:	687b      	ldr	r3, [r7, #4]
    abd2:	4599      	cmp	r9, r3
    abd4:	da35      	bge.n	ac42 <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
    abd6:	f8d6 8004 	ldr.w	r8, [r6, #4]
    abda:	f1b8 0f00 	cmp.w	r8, #0
    abde:	d054      	beq.n	ac8a <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
    abe0:	f1b8 0f1f 	cmp.w	r8, #31
    abe4:	d91b      	bls.n	ac1e <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
    abe6:	f018 0f1f 	tst.w	r8, #31
    abea:	d118      	bne.n	ac1e <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
    abec:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    abf0:	f01b 0f1f 	tst.w	fp, #31
    abf4:	d113      	bne.n	ac1e <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    abf6:	4658      	mov	r0, fp
    abf8:	f004 fb4e 	bl	f298 <arm_cmse_mpu_region_get>
    abfc:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    abfe:	eb08 000b 	add.w	r0, r8, fp
    ac02:	3801      	subs	r0, #1
    ac04:	f004 fb48 	bl	f298 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    ac08:	4582      	cmp	sl, r0
    ac0a:	d01f      	beq.n	ac4c <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    ac0c:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    ac10:	466c      	mov	r4, sp
    ac12:	b088      	sub	sp, #32
    ac14:	466a      	mov	r2, sp
    ac16:	494d      	ldr	r1, [pc, #308]	; (ad4c <mpu_configure_regions_and_partition.constprop.0+0x190>)
    ac18:	e9c2 1a05 	strd	r1, sl, [r2, #20]
    ac1c:	e005      	b.n	ac2a <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    ac1e:	466c      	mov	r4, sp
    ac20:	b088      	sub	sp, #32
    ac22:	466a      	mov	r2, sp
    ac24:	4b4a      	ldr	r3, [pc, #296]	; (ad50 <mpu_configure_regions_and_partition.constprop.0+0x194>)
    ac26:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
    ac2a:	2303      	movs	r3, #3
    ac2c:	f842 3f10 	str.w	r3, [r2, #16]!
    ac30:	2300      	movs	r3, #0
    ac32:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ac36:	4847      	ldr	r0, [pc, #284]	; (ad54 <mpu_configure_regions_and_partition.constprop.0+0x198>)
    ac38:	f7fe fea4 	bl	9984 <z_impl_z_log_msg_static_create>
    ac3c:	46a5      	mov	sp, r4
			return -EINVAL;
    ac3e:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    ac42:	4620      	mov	r0, r4
    ac44:	371c      	adds	r7, #28
    ac46:	46bd      	mov	sp, r7
    ac48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    ac4c:	f11a 0f16 	cmn.w	sl, #22
    ac50:	d0de      	beq.n	ac10 <mpu_configure_regions_and_partition.constprop.0+0x54>
    ac52:	4554      	cmp	r4, sl
    ac54:	dddc      	ble.n	ac10 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
    ac56:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    ac5a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    ac5e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
    ac62:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    ac66:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    ac6a:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    ac6e:	e9d6 2100 	ldrd	r2, r1, [r6]
    ac72:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
    ac74:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    ac76:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    ac7a:	d11e      	bne.n	acba <mpu_configure_regions_and_partition.constprop.0+0xfe>
    ac7c:	45d8      	cmp	r8, fp
    ac7e:	d108      	bne.n	ac92 <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
    ac80:	4631      	mov	r1, r6
    ac82:	fa5f f08a 	uxtb.w	r0, sl
    ac86:	f004 fb10 	bl	f2aa <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    ac8a:	f109 0901 	add.w	r9, r9, #1
    ac8e:	360c      	adds	r6, #12
    ac90:	e79e      	b.n	abd0 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
    ac92:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    ac96:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    ac9a:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    ac9e:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    aca2:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
    aca4:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
    aca6:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    acaa:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    acac:	f004 fafd 	bl	f2aa <mpu_configure_region>
			if (reg_index == -EINVAL) {
    acb0:	f110 0f16 	cmn.w	r0, #22
    acb4:	d0c3      	beq.n	ac3e <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
    acb6:	1c44      	adds	r4, r0, #1
    acb8:	e7e7      	b.n	ac8a <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
    acba:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
    acbc:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
    acbe:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
    acc0:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    acc4:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    acc8:	d108      	bne.n	acdc <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
    acca:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    acce:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    acd0:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    acd4:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    acd6:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    acda:	e7e7      	b.n	acac <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
    acdc:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    ace0:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    ace4:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
    ace6:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    acea:	4631      	mov	r1, r6
    acec:	f004 fadd 	bl	f2aa <mpu_configure_region>
			if (reg_index == -EINVAL) {
    acf0:	f110 0f16 	cmn.w	r0, #22
    acf4:	d0a3      	beq.n	ac3e <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
    acf6:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    acfa:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    acfe:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    ad00:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	attr->rbar = mpu_get_rbar() &
    ad04:	f362 0304 	bfi	r3, r2, #0, #5
    ad08:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
    ad0a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    ad0e:	7c3a      	ldrb	r2, [r7, #16]
    ad10:	085b      	lsrs	r3, r3, #1
    ad12:	f363 1247 	bfi	r2, r3, #5, #3
    ad16:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
    ad18:	e9d6 3200 	ldrd	r3, r2, [r6]
    ad1c:	4413      	add	r3, r2
    ad1e:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    ad20:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    ad24:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    ad26:	4443      	add	r3, r8
    ad28:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
    ad2c:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
    ad2e:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    ad32:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    ad34:	617b      	str	r3, [r7, #20]
    ad36:	d902      	bls.n	ad3e <mpu_configure_regions_and_partition.constprop.0+0x182>
    ad38:	f7ff ff28 	bl	ab8c <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    ad3c:	e7b8      	b.n	acb0 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
    ad3e:	f107 0108 	add.w	r1, r7, #8
    ad42:	f7ff ff09 	bl	ab58 <region_init>
    ad46:	e7b6      	b.n	acb6 <mpu_configure_regions_and_partition.constprop.0+0xfa>
    ad48:	e000ed00 	.word	0xe000ed00
    ad4c:	0001091e 	.word	0x0001091e
    ad50:	000108fb 	.word	0x000108fb
    ad54:	0000ffd8 	.word	0x0000ffd8

0000ad58 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    ad58:	2205      	movs	r2, #5
    ad5a:	4b04      	ldr	r3, [pc, #16]	; (ad6c <arm_core_mpu_enable+0x14>)
    ad5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    ad60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ad64:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    ad68:	4770      	bx	lr
    ad6a:	bf00      	nop
    ad6c:	e000ed00 	.word	0xe000ed00

0000ad70 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    ad70:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    ad74:	2200      	movs	r2, #0
    ad76:	4b02      	ldr	r3, [pc, #8]	; (ad80 <arm_core_mpu_disable+0x10>)
    ad78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    ad7c:	4770      	bx	lr
    ad7e:	bf00      	nop
    ad80:	e000ed00 	.word	0xe000ed00

0000ad84 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    ad84:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    ad86:	4c03      	ldr	r4, [pc, #12]	; (ad94 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    ad88:	7822      	ldrb	r2, [r4, #0]
    ad8a:	f7ff ff17 	bl	abbc <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    ad8e:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    ad90:	bd10      	pop	{r4, pc}
    ad92:	bf00      	nop
    ad94:	20008a3c 	.word	0x20008a3c

0000ad98 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    ad98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad9c:	4d29      	ldr	r5, [pc, #164]	; (ae44 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    ad9e:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    ada0:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    ada2:	f04f 0800 	mov.w	r8, #0
    ada6:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    ada8:	4f27      	ldr	r7, [pc, #156]	; (ae48 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    adaa:	45d0      	cmp	r8, sl
    adac:	da1b      	bge.n	ade6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    adae:	f8d6 9004 	ldr.w	r9, [r6, #4]
    adb2:	f1b9 0f00 	cmp.w	r9, #0
    adb6:	d03f      	beq.n	ae38 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    adb8:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    adba:	4608      	mov	r0, r1
    adbc:	9101      	str	r1, [sp, #4]
    adbe:	f004 fa6b 	bl	f298 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    adc2:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    adc4:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    adc6:	eb09 0001 	add.w	r0, r9, r1
    adca:	3801      	subs	r0, #1
    adcc:	f004 fa64 	bl	f298 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    add0:	4284      	cmp	r4, r0
    add2:	f04f 0214 	mov.w	r2, #20
    add6:	4b1d      	ldr	r3, [pc, #116]	; (ae4c <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    add8:	d008      	beq.n	adec <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    adda:	fb02 f308 	mul.w	r3, r2, r8
    adde:	f06f 0215 	mvn.w	r2, #21
    ade2:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    ade6:	b003      	add	sp, #12
    ade8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    adec:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    adf0:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    adf2:	d0f8      	beq.n	ade6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    adf4:	7819      	ldrb	r1, [r3, #0]
    adf6:	42a1      	cmp	r1, r4
    adf8:	ddf5      	ble.n	ade6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    adfa:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    adfe:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    ae02:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    ae06:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    ae0a:	f100 0108 	add.w	r1, r0, #8
    ae0e:	7b00      	ldrb	r0, [r0, #12]
    ae10:	f364 0004 	bfi	r0, r4, #0, #5
    ae14:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    ae16:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    ae1a:	790c      	ldrb	r4, [r1, #4]
    ae1c:	0840      	lsrs	r0, r0, #1
    ae1e:	f360 1447 	bfi	r4, r0, #5, #3
    ae22:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    ae24:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    ae28:	f021 011f 	bic.w	r1, r1, #31
    ae2c:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    ae2e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    ae32:	f021 011f 	bic.w	r1, r1, #31
    ae36:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    ae38:	f108 0801 	add.w	r8, r8, #1
    ae3c:	3514      	adds	r5, #20
    ae3e:	360c      	adds	r6, #12
    ae40:	e7b3      	b.n	adaa <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    ae42:	bf00      	nop
    ae44:	200087f0 	.word	0x200087f0
    ae48:	e000ed00 	.word	0xe000ed00
    ae4c:	20008a3c 	.word	0x20008a3c

0000ae50 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    ae50:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    ae52:	4d0e      	ldr	r5, [pc, #56]	; (ae8c <z_arm_mpu_init+0x3c>)
    ae54:	682c      	ldr	r4, [r5, #0]
    ae56:	2c08      	cmp	r4, #8
    ae58:	d815      	bhi.n	ae86 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    ae5a:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    ae5c:	f7ff ff88 	bl	ad70 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    ae60:	4b0b      	ldr	r3, [pc, #44]	; (ae90 <z_arm_mpu_init+0x40>)
    ae62:	4a0c      	ldr	r2, [pc, #48]	; (ae94 <z_arm_mpu_init+0x44>)
    ae64:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    ae68:	4284      	cmp	r4, r0
    ae6a:	d105      	bne.n	ae78 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    ae6c:	4b0a      	ldr	r3, [pc, #40]	; (ae98 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    ae6e:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    ae70:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    ae72:	f7ff ff71 	bl	ad58 <arm_core_mpu_enable>
}
    ae76:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    ae78:	6869      	ldr	r1, [r5, #4]
    ae7a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    ae7e:	f7ff fe6b 	bl	ab58 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    ae82:	3001      	adds	r0, #1
    ae84:	e7f0      	b.n	ae68 <z_arm_mpu_init+0x18>
		return -1;
    ae86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ae8a:	e7f4      	b.n	ae76 <z_arm_mpu_init+0x26>
    ae8c:	000100bc 	.word	0x000100bc
    ae90:	e000ed00 	.word	0xe000ed00
    ae94:	0044ffaa 	.word	0x0044ffaa
    ae98:	20008a3c 	.word	0x20008a3c

0000ae9c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    ae9c:	4b01      	ldr	r3, [pc, #4]	; (aea4 <__stdout_hook_install+0x8>)
    ae9e:	6018      	str	r0, [r3, #0]
}
    aea0:	4770      	bx	lr
    aea2:	bf00      	nop
    aea4:	2000800c 	.word	0x2000800c

0000aea8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    aea8:	4b08      	ldr	r3, [pc, #32]	; (aecc <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    aeaa:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    aeac:	1ac3      	subs	r3, r0, r3
{
    aeae:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    aeb0:	4907      	ldr	r1, [pc, #28]	; (aed0 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    aeb2:	109b      	asrs	r3, r3, #2
{
    aeb4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    aeb6:	4359      	muls	r1, r3
    aeb8:	2240      	movs	r2, #64	; 0x40
    aeba:	4806      	ldr	r0, [pc, #24]	; (aed4 <onoff_stop+0x2c>)
    aebc:	f004 fa58 	bl	f370 <stop>
	notify(mgr, res);
    aec0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    aec2:	4601      	mov	r1, r0
	notify(mgr, res);
    aec4:	4620      	mov	r0, r4
}
    aec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    aeca:	4718      	bx	r3
    aecc:	20008818 	.word	0x20008818
    aed0:	b6db6db7 	.word	0xb6db6db7
    aed4:	0000fc78 	.word	0x0000fc78

0000aed8 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    aed8:	2340      	movs	r3, #64	; 0x40
{
    aeda:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    aedc:	4c0b      	ldr	r4, [pc, #44]	; (af0c <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    aede:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    aee0:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    aee2:	460b      	mov	r3, r1
{
    aee4:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    aee6:	490a      	ldr	r1, [pc, #40]	; (af10 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    aee8:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    aeea:	4361      	muls	r1, r4
{
    aeec:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    aeee:	4a09      	ldr	r2, [pc, #36]	; (af14 <onoff_start+0x3c>)
    aef0:	4809      	ldr	r0, [pc, #36]	; (af18 <onoff_start+0x40>)
    aef2:	f004 fa69 	bl	f3c8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    aef6:	1e01      	subs	r1, r0, #0
    aef8:	da05      	bge.n	af06 <onoff_start+0x2e>
		notify(mgr, err);
    aefa:	4630      	mov	r0, r6
    aefc:	462b      	mov	r3, r5
	}
}
    aefe:	b002      	add	sp, #8
    af00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    af04:	4718      	bx	r3
}
    af06:	b002      	add	sp, #8
    af08:	bd70      	pop	{r4, r5, r6, pc}
    af0a:	bf00      	nop
    af0c:	20008818 	.word	0x20008818
    af10:	b6db6db7 	.word	0xb6db6db7
    af14:	0000f433 	.word	0x0000f433
    af18:	0000fc78 	.word	0x0000fc78

0000af1c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    af1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    af20:	2200      	movs	r2, #0
    af22:	2101      	movs	r1, #1
{
    af24:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    af26:	2005      	movs	r0, #5
    af28:	f7ff f986 	bl	a238 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    af2c:	4811      	ldr	r0, [pc, #68]	; (af74 <clk_init+0x58>)
    af2e:	f001 fd59 	bl	c9e4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    af32:	4b11      	ldr	r3, [pc, #68]	; (af78 <clk_init+0x5c>)
    af34:	4298      	cmp	r0, r3
    af36:	d119      	bne.n	af6c <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    af38:	f001 fd64 	bl	ca04 <nrfx_clock_enable>
    af3c:	2400      	movs	r4, #0
	return &data->mgr[type];
    af3e:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    af42:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    af44:	f8df 8034 	ldr.w	r8, [pc, #52]	; af7c <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
    af48:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    af4a:	4641      	mov	r1, r8
    af4c:	fb09 5004 	mla	r0, r9, r4, r5
    af50:	f003 fde3 	bl	eb1a <onoff_manager_init>
		if (err < 0) {
    af54:	2800      	cmp	r0, #0
    af56:	db07      	blt.n	af68 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    af58:	2301      	movs	r3, #1
    af5a:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    af5e:	441c      	add	r4, r3
    af60:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    af62:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    af64:	d1f0      	bne.n	af48 <clk_init+0x2c>
	}

	return 0;
    af66:	2000      	movs	r0, #0
}
    af68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    af6c:	f06f 0004 	mvn.w	r0, #4
    af70:	e7fa      	b.n	af68 <clk_init+0x4c>
    af72:	bf00      	nop
    af74:	0000afb5 	.word	0x0000afb5
    af78:	0bad0000 	.word	0x0bad0000
    af7c:	000100e4 	.word	0x000100e4

0000af80 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    af80:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    af82:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    af84:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
    af86:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    af88:	434b      	muls	r3, r1
    af8a:	4808      	ldr	r0, [pc, #32]	; (afac <clkstarted_handle.constprop.0+0x2c>)
    af8c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    af8e:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
    af90:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    af94:	4418      	add	r0, r3
	sub_data->cb = NULL;
    af96:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    af98:	f004 f9d7 	bl	f34a <set_on_state>
	if (callback) {
    af9c:	b12d      	cbz	r5, afaa <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    af9e:	4632      	mov	r2, r6
    afa0:	462b      	mov	r3, r5
}
    afa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    afa6:	4802      	ldr	r0, [pc, #8]	; (afb0 <clkstarted_handle.constprop.0+0x30>)
    afa8:	4718      	bx	r3
}
    afaa:	bd70      	pop	{r4, r5, r6, pc}
    afac:	20008818 	.word	0x20008818
    afb0:	0000fc78 	.word	0x0000fc78

0000afb4 <clock_event_handler>:
	switch (event) {
    afb4:	2805      	cmp	r0, #5
    afb6:	d811      	bhi.n	afdc <clock_event_handler+0x28>
    afb8:	e8df f000 	tbb	[pc, r0]
    afbc:	10100e03 	.word	0x10100e03
    afc0:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    afc2:	4b07      	ldr	r3, [pc, #28]	; (afe0 <clock_event_handler+0x2c>)
    afc4:	6f98      	ldr	r0, [r3, #120]	; 0x78
    afc6:	f010 0007 	ands.w	r0, r0, #7
    afca:	d107      	bne.n	afdc <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    afcc:	f7ff bfd8 	b.w	af80 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    afd0:	2002      	movs	r0, #2
    afd2:	e7fb      	b.n	afcc <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    afd4:	2003      	movs	r0, #3
    afd6:	e7f9      	b.n	afcc <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    afd8:	2001      	movs	r0, #1
    afda:	e7f7      	b.n	afcc <clock_event_handler+0x18>
}
    afdc:	4770      	bx	lr
    afde:	bf00      	nop
    afe0:	20008818 	.word	0x20008818

0000afe4 <generic_hfclk_start>:
{
    afe4:	b508      	push	{r3, lr}
	__asm__ volatile(
    afe6:	f04f 0320 	mov.w	r3, #32
    afea:	f3ef 8111 	mrs	r1, BASEPRI
    afee:	f383 8812 	msr	BASEPRI_MAX, r3
    aff2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    aff6:	4a11      	ldr	r2, [pc, #68]	; (b03c <generic_hfclk_start+0x58>)
    aff8:	6813      	ldr	r3, [r2, #0]
    affa:	f043 0002 	orr.w	r0, r3, #2
    affe:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    b000:	07da      	lsls	r2, r3, #31
    b002:	d408      	bmi.n	b016 <generic_hfclk_start+0x32>
	__asm__ volatile(
    b004:	f381 8811 	msr	BASEPRI, r1
    b008:	f3bf 8f6f 	isb	sy
}
    b00c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    b010:	2001      	movs	r0, #1
    b012:	f001 bd0b 	b.w	ca2c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    b016:	4b0a      	ldr	r3, [pc, #40]	; (b040 <generic_hfclk_start+0x5c>)
    b018:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    b01c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    b020:	07d3      	lsls	r3, r2, #31
    b022:	d5ef      	bpl.n	b004 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    b024:	4807      	ldr	r0, [pc, #28]	; (b044 <generic_hfclk_start+0x60>)
    b026:	f004 f990 	bl	f34a <set_on_state>
    b02a:	f381 8811 	msr	BASEPRI, r1
    b02e:	f3bf 8f6f 	isb	sy
}
    b032:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    b036:	2000      	movs	r0, #0
    b038:	f7ff bfa2 	b.w	af80 <clkstarted_handle.constprop.0>
    b03c:	200088b8 	.word	0x200088b8
    b040:	40005000 	.word	0x40005000
    b044:	20008890 	.word	0x20008890

0000b048 <api_blocking_start>:
{
    b048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    b04a:	2200      	movs	r2, #0
    b04c:	2301      	movs	r3, #1
    b04e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    b052:	466b      	mov	r3, sp
    b054:	4a08      	ldr	r2, [pc, #32]	; (b078 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    b056:	f8cd d000 	str.w	sp, [sp]
    b05a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    b05e:	f004 f9e1 	bl	f424 <api_start>
	if (err < 0) {
    b062:	2800      	cmp	r0, #0
    b064:	db05      	blt.n	b072 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    b066:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    b06a:	2300      	movs	r3, #0
    b06c:	4668      	mov	r0, sp
    b06e:	f002 fed3 	bl	de18 <z_impl_k_sem_take>
}
    b072:	b005      	add	sp, #20
    b074:	f85d fb04 	ldr.w	pc, [sp], #4
    b078:	0000f469 	.word	0x0000f469

0000b07c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b07c:	4b07      	ldr	r3, [pc, #28]	; (b09c <generic_hfclk_stop+0x20>)
    b07e:	e8d3 2fef 	ldaex	r2, [r3]
    b082:	f022 0102 	bic.w	r1, r2, #2
    b086:	e8c3 1fe0 	stlex	r0, r1, [r3]
    b08a:	2800      	cmp	r0, #0
    b08c:	d1f7      	bne.n	b07e <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    b08e:	07d3      	lsls	r3, r2, #31
    b090:	d402      	bmi.n	b098 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    b092:	2001      	movs	r0, #1
    b094:	f004 bbcd 	b.w	f832 <nrfx_clock_stop>
}
    b098:	4770      	bx	lr
    b09a:	bf00      	nop
    b09c:	200088b8 	.word	0x200088b8

0000b0a0 <z_nrf_clock_control_lf_on>:
{
    b0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b0a4:	2201      	movs	r2, #1
    b0a6:	4607      	mov	r7, r0
    b0a8:	4935      	ldr	r1, [pc, #212]	; (b180 <z_nrf_clock_control_lf_on+0xe0>)
    b0aa:	e8d1 3fef 	ldaex	r3, [r1]
    b0ae:	e8c1 2fe0 	stlex	r0, r2, [r1]
    b0b2:	2800      	cmp	r0, #0
    b0b4:	d1f9      	bne.n	b0aa <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    b0b6:	b933      	cbnz	r3, b0c6 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    b0b8:	4932      	ldr	r1, [pc, #200]	; (b184 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
    b0ba:	4833      	ldr	r0, [pc, #204]	; (b188 <z_nrf_clock_control_lf_on+0xe8>)
    b0bc:	604b      	str	r3, [r1, #4]
    b0be:	60cb      	str	r3, [r1, #12]
    b0c0:	608a      	str	r2, [r1, #8]
    b0c2:	f003 fd3d 	bl	eb40 <onoff_request>
	switch (start_mode) {
    b0c6:	1e7b      	subs	r3, r7, #1
    b0c8:	2b01      	cmp	r3, #1
    b0ca:	d828      	bhi.n	b11e <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    b0cc:	2f01      	cmp	r7, #1
    b0ce:	d106      	bne.n	b0de <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    b0d0:	4b2e      	ldr	r3, [pc, #184]	; (b18c <z_nrf_clock_control_lf_on+0xec>)
    b0d2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    b0d6:	f003 0303 	and.w	r3, r3, #3
    b0da:	2b02      	cmp	r3, #2
    b0dc:	d01f      	beq.n	b11e <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    b0de:	f004 fc2e 	bl	f93e <k_is_in_isr>
    b0e2:	4605      	mov	r5, r0
    b0e4:	b9e8      	cbnz	r0, b122 <z_nrf_clock_control_lf_on+0x82>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    b0e6:	4b2a      	ldr	r3, [pc, #168]	; (b190 <z_nrf_clock_control_lf_on+0xf0>)
    b0e8:	781b      	ldrb	r3, [r3, #0]
    b0ea:	b1d3      	cbz	r3, b122 <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
    b0ec:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    b0ee:	4606      	mov	r6, r0
    b0f0:	4b26      	ldr	r3, [pc, #152]	; (b18c <z_nrf_clock_control_lf_on+0xec>)
    b0f2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b0f6:	4c25      	ldr	r4, [pc, #148]	; (b18c <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b0f8:	f8df 8098 	ldr.w	r8, [pc, #152]	; b194 <z_nrf_clock_control_lf_on+0xf4>
    b0fc:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b100:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    b104:	03d2      	lsls	r2, r2, #15
    b106:	d516      	bpl.n	b136 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    b108:	f003 0303 	and.w	r3, r3, #3
    b10c:	2b02      	cmp	r3, #2
    b10e:	d001      	beq.n	b114 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    b110:	2f01      	cmp	r7, #1
    b112:	d110      	bne.n	b136 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
    b114:	b375      	cbz	r5, b174 <z_nrf_clock_control_lf_on+0xd4>
    b116:	f386 8811 	msr	BASEPRI, r6
    b11a:	f3bf 8f6f 	isb	sy
}
    b11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    b122:	f04f 0320 	mov.w	r3, #32
    b126:	f3ef 8611 	mrs	r6, BASEPRI
    b12a:	f383 8812 	msr	BASEPRI_MAX, r3
    b12e:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    b132:	2501      	movs	r5, #1
    b134:	e7df      	b.n	b0f6 <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    b136:	b1c5      	cbz	r5, b16a <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    b138:	4630      	mov	r0, r6
    b13a:	f7fe ffdd 	bl	a0f8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    b13e:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    b142:	b2db      	uxtb	r3, r3
    b144:	2b01      	cmp	r3, #1
    b146:	d1d9      	bne.n	b0fc <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    b148:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    b14c:	2a00      	cmp	r2, #0
    b14e:	d0d5      	beq.n	b0fc <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b150:	2200      	movs	r2, #0
    b152:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    b156:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    b15a:	2202      	movs	r2, #2
    b15c:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    b160:	2220      	movs	r2, #32
    b162:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b166:	60a3      	str	r3, [r4, #8]
}
    b168:	e7c8      	b.n	b0fc <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
    b16a:	2100      	movs	r1, #0
    b16c:	2021      	movs	r0, #33	; 0x21
    b16e:	f003 f943 	bl	e3f8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    b172:	e7e4      	b.n	b13e <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
    b174:	2202      	movs	r2, #2
    b176:	4b05      	ldr	r3, [pc, #20]	; (b18c <z_nrf_clock_control_lf_on+0xec>)
    b178:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b17c:	e7cf      	b.n	b11e <z_nrf_clock_control_lf_on+0x7e>
    b17e:	bf00      	nop
    b180:	20008814 	.word	0x20008814
    b184:	20008804 	.word	0x20008804
    b188:	20008834 	.word	0x20008834
    b18c:	40005000 	.word	0x40005000
    b190:	20008c87 	.word	0x20008c87
    b194:	e000e100 	.word	0xe000e100

0000b198 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    b198:	b508      	push	{r3, lr}
    b19a:	4807      	ldr	r0, [pc, #28]	; (b1b8 <uart_console_init+0x20>)
    b19c:	f004 fbc0 	bl	f920 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    b1a0:	b138      	cbz	r0, b1b2 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    b1a2:	4806      	ldr	r0, [pc, #24]	; (b1bc <uart_console_init+0x24>)
    b1a4:	f7ff fe7a 	bl	ae9c <__stdout_hook_install>
	__printk_hook_install(console_out);
    b1a8:	4804      	ldr	r0, [pc, #16]	; (b1bc <uart_console_init+0x24>)
    b1aa:	f7fd fba9 	bl	8900 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    b1ae:	2000      	movs	r0, #0
}
    b1b0:	bd08      	pop	{r3, pc}
		return -ENODEV;
    b1b2:	f06f 0012 	mvn.w	r0, #18
    b1b6:	e7fb      	b.n	b1b0 <uart_console_init+0x18>
    b1b8:	0000fcd8 	.word	0x0000fcd8
    b1bc:	0000b1c1 	.word	0x0000b1c1

0000b1c0 <console_out>:
	if ('\n' == c) {
    b1c0:	280a      	cmp	r0, #10
{
    b1c2:	b538      	push	{r3, r4, r5, lr}
    b1c4:	4604      	mov	r4, r0
    b1c6:	4d07      	ldr	r5, [pc, #28]	; (b1e4 <console_out+0x24>)
	if ('\n' == c) {
    b1c8:	d104      	bne.n	b1d4 <console_out+0x14>
    b1ca:	68ab      	ldr	r3, [r5, #8]
    b1cc:	210d      	movs	r1, #13
    b1ce:	4628      	mov	r0, r5
    b1d0:	685b      	ldr	r3, [r3, #4]
    b1d2:	4798      	blx	r3
    b1d4:	68ab      	ldr	r3, [r5, #8]
    b1d6:	4803      	ldr	r0, [pc, #12]	; (b1e4 <console_out+0x24>)
    b1d8:	685b      	ldr	r3, [r3, #4]
    b1da:	b2e1      	uxtb	r1, r4
    b1dc:	4798      	blx	r3
}
    b1de:	4620      	mov	r0, r4
    b1e0:	bd38      	pop	{r3, r4, r5, pc}
    b1e2:	bf00      	nop
    b1e4:	0000fcd8 	.word	0x0000fcd8

0000b1e8 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    b1e8:	b530      	push	{r4, r5, lr}
	return port->config;
    b1ea:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    b1ec:	f001 041f 	and.w	r4, r1, #31
    b1f0:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    b1f2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    b1f6:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    b1f8:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    b1fc:	d105      	bne.n	b20a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    b1fe:	4620      	mov	r0, r4
    b200:	f001 ff1c 	bl	d03c <nrfx_gpiote_trigger_disable>

		return 0;
    b204:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    b206:	b005      	add	sp, #20
    b208:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    b20a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    b20c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    b210:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    b214:	d114      	bne.n	b240 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    b216:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    b21a:	bf0c      	ite	eq
    b21c:	2304      	moveq	r3, #4
    b21e:	2305      	movne	r3, #5
    b220:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    b224:	2300      	movs	r3, #0
    b226:	4620      	mov	r0, r4
    b228:	4619      	mov	r1, r3
    b22a:	aa02      	add	r2, sp, #8
    b22c:	f001 fd44 	bl	ccb8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    b230:	4b1f      	ldr	r3, [pc, #124]	; (b2b0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    b232:	4298      	cmp	r0, r3
    b234:	d138      	bne.n	b2a8 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    b236:	2101      	movs	r1, #1
    b238:	4620      	mov	r0, r4
    b23a:	f001 feb9 	bl	cfb0 <nrfx_gpiote_trigger_enable>
	return 0;
    b23e:	e7e1      	b.n	b204 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    b240:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    b244:	d025      	beq.n	b292 <gpio_nrfx_pin_interrupt_configure+0xaa>
    b246:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    b24a:	bf14      	ite	ne
    b24c:	2301      	movne	r3, #1
    b24e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    b250:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    b254:	6883      	ldr	r3, [r0, #8]
    b256:	40cb      	lsrs	r3, r1
    b258:	07d9      	lsls	r1, r3, #31
    b25a:	d4e3      	bmi.n	b224 <gpio_nrfx_pin_interrupt_configure+0x3c>
    b25c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    b260:	d1e0      	bne.n	b224 <gpio_nrfx_pin_interrupt_configure+0x3c>
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
    b262:	4a14      	ldr	r2, [pc, #80]	; (b2b4 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    b264:	4814      	ldr	r0, [pc, #80]	; (b2b8 <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    b266:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
    b268:	2901      	cmp	r1, #1
    b26a:	bf08      	it	eq
    b26c:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
    b26e:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    b272:	3380      	adds	r3, #128	; 0x80
    b274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    b278:	07db      	lsls	r3, r3, #31
    b27a:	d4d3      	bmi.n	b224 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    b27c:	f10d 0507 	add.w	r5, sp, #7
    b280:	4629      	mov	r1, r5
    b282:	4620      	mov	r0, r4
    b284:	f001 fe40 	bl	cf08 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    b288:	4b0c      	ldr	r3, [pc, #48]	; (b2bc <gpio_nrfx_pin_interrupt_configure+0xd4>)
    b28a:	4298      	cmp	r0, r3
    b28c:	d003      	beq.n	b296 <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
    b28e:	9503      	str	r5, [sp, #12]
    b290:	e7c8      	b.n	b224 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    b292:	2303      	movs	r3, #3
    b294:	e7dc      	b.n	b250 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    b296:	4628      	mov	r0, r5
    b298:	f001 fe84 	bl	cfa4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    b29c:	4b04      	ldr	r3, [pc, #16]	; (b2b0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    b29e:	4298      	cmp	r0, r3
    b2a0:	d0f5      	beq.n	b28e <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
    b2a2:	f06f 000b 	mvn.w	r0, #11
    b2a6:	e7ae      	b.n	b206 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    b2a8:	f06f 0015 	mvn.w	r0, #21
    b2ac:	e7ab      	b.n	b206 <gpio_nrfx_pin_interrupt_configure+0x1e>
    b2ae:	bf00      	nop
    b2b0:	0bad0000 	.word	0x0bad0000
    b2b4:	40842500 	.word	0x40842500
    b2b8:	40842800 	.word	0x40842800
    b2bc:	0bad0004 	.word	0x0bad0004

0000b2c0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    b2c0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    b2c2:	f001 fe5f 	bl	cf84 <nrfx_gpiote_is_init>
    b2c6:	4604      	mov	r4, r0
    b2c8:	b968      	cbnz	r0, b2e6 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    b2ca:	f001 fe33 	bl	cf34 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    b2ce:	4b08      	ldr	r3, [pc, #32]	; (b2f0 <gpio_nrfx_init+0x30>)
    b2d0:	4298      	cmp	r0, r3
    b2d2:	d10a      	bne.n	b2ea <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    b2d4:	4621      	mov	r1, r4
    b2d6:	4807      	ldr	r0, [pc, #28]	; (b2f4 <gpio_nrfx_init+0x34>)
    b2d8:	f001 fe10 	bl	cefc <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    b2dc:	4622      	mov	r2, r4
    b2de:	2105      	movs	r1, #5
    b2e0:	202f      	movs	r0, #47	; 0x2f
    b2e2:	f7fe ffa9 	bl	a238 <z_arm_irq_priority_set>
		return 0;
    b2e6:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    b2e8:	bd10      	pop	{r4, pc}
		return -EIO;
    b2ea:	f06f 0004 	mvn.w	r0, #4
    b2ee:	e7fb      	b.n	b2e8 <gpio_nrfx_init+0x28>
    b2f0:	0bad0000 	.word	0x0bad0000
    b2f4:	0000b2f9 	.word	0x0000b2f9

0000b2f8 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    b2f8:	0942      	lsrs	r2, r0, #5
{
    b2fa:	4603      	mov	r3, r0
    b2fc:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    b2fe:	d002      	beq.n	b306 <nrfx_gpio_handler+0xe>
    b300:	2a01      	cmp	r2, #1
    b302:	d017      	beq.n	b334 <nrfx_gpio_handler+0x3c>
}
    b304:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    b306:	4e0d      	ldr	r6, [pc, #52]	; (b33c <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    b308:	6932      	ldr	r2, [r6, #16]
    b30a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    b30c:	2900      	cmp	r1, #0
    b30e:	d0f9      	beq.n	b304 <nrfx_gpio_handler+0xc>
    b310:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
    b312:	f003 031f 	and.w	r3, r3, #31
    b316:	680c      	ldr	r4, [r1, #0]
    b318:	409d      	lsls	r5, r3
    b31a:	2900      	cmp	r1, #0
    b31c:	d0f2      	beq.n	b304 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    b31e:	688a      	ldr	r2, [r1, #8]
    b320:	402a      	ands	r2, r5
    b322:	d002      	beq.n	b32a <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    b324:	4630      	mov	r0, r6
    b326:	684b      	ldr	r3, [r1, #4]
    b328:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    b32a:	b12c      	cbz	r4, b338 <nrfx_gpio_handler+0x40>
    b32c:	6823      	ldr	r3, [r4, #0]
    b32e:	4621      	mov	r1, r4
    b330:	461c      	mov	r4, r3
    b332:	e7f2      	b.n	b31a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    b334:	4e02      	ldr	r6, [pc, #8]	; (b340 <nrfx_gpio_handler+0x48>)
    b336:	e7e7      	b.n	b308 <nrfx_gpio_handler+0x10>
    b338:	4623      	mov	r3, r4
    b33a:	e7f8      	b.n	b32e <nrfx_gpio_handler+0x36>
    b33c:	0000fca8 	.word	0x0000fca8
    b340:	0000fc90 	.word	0x0000fc90

0000b344 <gpio_nrfx_pin_configure>:
{
    b344:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    b348:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    b34a:	f001 051f 	and.w	r5, r1, #31
    b34e:	7b3b      	ldrb	r3, [r7, #12]
{
    b350:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    b352:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    b356:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    b358:	4628      	mov	r0, r5
    b35a:	f10d 0103 	add.w	r1, sp, #3
    b35e:	f001 fdd3 	bl	cf08 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    b362:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    b366:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    b368:	d10b      	bne.n	b382 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    b36a:	4628      	mov	r0, r5
    b36c:	f001 fe8e 	bl	d08c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    b370:	4b3c      	ldr	r3, [pc, #240]	; (b464 <gpio_nrfx_pin_configure+0x120>)
    b372:	4598      	cmp	r8, r3
    b374:	d103      	bne.n	b37e <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    b376:	f89d 0003 	ldrb.w	r0, [sp, #3]
    b37a:	f001 fe0d 	bl	cf98 <nrfx_gpiote_channel_free>
		return 0;
    b37e:	2000      	movs	r0, #0
    b380:	e00c      	b.n	b39c <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    b382:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    b384:	4628      	mov	r0, r5
    b386:	4619      	mov	r1, r3
    b388:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    b38a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    b38e:	f001 fc93 	bl	ccb8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    b392:	4b34      	ldr	r3, [pc, #208]	; (b464 <gpio_nrfx_pin_configure+0x120>)
    b394:	4298      	cmp	r0, r3
    b396:	d004      	beq.n	b3a2 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    b398:	f06f 0015 	mvn.w	r0, #21
}
    b39c:	b004      	add	sp, #16
    b39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    b3a2:	4580      	cmp	r8, r0
    b3a4:	d103      	bne.n	b3ae <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    b3a6:	f89d 0003 	ldrb.w	r0, [sp, #3]
    b3aa:	f001 fdf5 	bl	cf98 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    b3ae:	03a3      	lsls	r3, r4, #14
    b3b0:	d549      	bpl.n	b446 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    b3b2:	f240 3306 	movw	r3, #774	; 0x306
    b3b6:	4023      	ands	r3, r4
    b3b8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    b3bc:	d019      	beq.n	b3f2 <gpio_nrfx_pin_configure+0xae>
    b3be:	d80c      	bhi.n	b3da <gpio_nrfx_pin_configure+0x96>
    b3c0:	2b06      	cmp	r3, #6
    b3c2:	d017      	beq.n	b3f4 <gpio_nrfx_pin_configure+0xb0>
    b3c4:	d804      	bhi.n	b3d0 <gpio_nrfx_pin_configure+0x8c>
    b3c6:	b1ab      	cbz	r3, b3f4 <gpio_nrfx_pin_configure+0xb0>
    b3c8:	2b02      	cmp	r3, #2
    b3ca:	d1e5      	bne.n	b398 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    b3cc:	2304      	movs	r3, #4
    b3ce:	e011      	b.n	b3f4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    b3d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b3d4:	d1e0      	bne.n	b398 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    b3d6:	2301      	movs	r3, #1
    b3d8:	e00c      	b.n	b3f4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    b3da:	f240 2202 	movw	r2, #514	; 0x202
    b3de:	4293      	cmp	r3, r2
    b3e0:	d026      	beq.n	b430 <gpio_nrfx_pin_configure+0xec>
    b3e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    b3e6:	d025      	beq.n	b434 <gpio_nrfx_pin_configure+0xf0>
    b3e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    b3ec:	d1d4      	bne.n	b398 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    b3ee:	2302      	movs	r3, #2
    b3f0:	e000      	b.n	b3f4 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    b3f2:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    b3f4:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    b3f8:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    b3fc:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    b400:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    b402:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    b406:	bf4c      	ite	mi
    b408:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    b40a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    b40e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    b410:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    b414:	d510      	bpl.n	b438 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    b416:	2301      	movs	r3, #1
    b418:	687a      	ldr	r2, [r7, #4]
    b41a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    b41c:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    b41e:	2200      	movs	r2, #0
    b420:	4628      	mov	r0, r5
    b422:	a901      	add	r1, sp, #4
    b424:	f001 fcf6 	bl	ce14 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    b428:	4b0e      	ldr	r3, [pc, #56]	; (b464 <gpio_nrfx_pin_configure+0x120>)
    b42a:	4298      	cmp	r0, r3
    b42c:	d0a7      	beq.n	b37e <gpio_nrfx_pin_configure+0x3a>
    b42e:	e7b3      	b.n	b398 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    b430:	2305      	movs	r3, #5
    b432:	e7df      	b.n	b3f4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    b434:	2303      	movs	r3, #3
    b436:	e7dd      	b.n	b3f4 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    b438:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    b43a:	bf41      	itttt	mi
    b43c:	2301      	movmi	r3, #1
    b43e:	687a      	ldrmi	r2, [r7, #4]
    b440:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    b442:	60d3      	strmi	r3, [r2, #12]
}
    b444:	e7eb      	b.n	b41e <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    b446:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    b448:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    b44c:	bf4c      	ite	mi
    b44e:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    b450:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    b454:	461a      	mov	r2, r3
    b456:	4628      	mov	r0, r5
    b458:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    b45a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    b45e:	f001 fc2b 	bl	ccb8 <nrfx_gpiote_input_configure>
    b462:	e7e1      	b.n	b428 <gpio_nrfx_pin_configure+0xe4>
    b464:	0bad0000 	.word	0x0bad0000

0000b468 <ws2812_strip_update_channels>:
}

static int ws2812_strip_update_channels(const struct device *dev,
					uint8_t *channels,
					size_t num_channels)
{
    b468:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("update_channels not implemented");
    b46a:	4b08      	ldr	r3, [pc, #32]	; (b48c <ws2812_strip_update_channels+0x24>)
    b46c:	9305      	str	r3, [sp, #20]
    b46e:	2302      	movs	r3, #2
    b470:	9304      	str	r3, [sp, #16]
    b472:	2300      	movs	r3, #0
    b474:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b478:	4805      	ldr	r0, [pc, #20]	; (b490 <ws2812_strip_update_channels+0x28>)
    b47a:	aa04      	add	r2, sp, #16
    b47c:	f7fe fa82 	bl	9984 <z_impl_z_log_msg_static_create>
	return -ENOTSUP;
}
    b480:	f06f 0085 	mvn.w	r0, #133	; 0x85
    b484:	b007      	add	sp, #28
    b486:	f85d fb04 	ldr.w	pc, [sp], #4
    b48a:	bf00      	nop
    b48c:	000109a2 	.word	0x000109a2
    b490:	00010010 	.word	0x00010010

0000b494 <ws2812_spi_init>:

static int ws2812_spi_init(const struct device *dev)
{
    b494:	b5b0      	push	{r4, r5, r7, lr}
	return dev->config;
    b496:	6844      	ldr	r4, [r0, #4]
{
    b498:	4605      	mov	r5, r0
    b49a:	af00      	add	r7, sp, #0
 * @retval false if the SPI bus is not ready for use.
 */
static inline bool spi_is_ready(const struct spi_dt_spec *spec)
{
	/* Validate bus is ready */
	if (!device_is_ready(spec->bus)) {
    b49c:	6820      	ldr	r0, [r4, #0]
    b49e:	f004 fa3f 	bl	f920 <z_device_is_ready>
    b4a2:	b168      	cbz	r0, b4c0 <ws2812_spi_init+0x2c>
		return false;
	}
	/* Validate CS gpio port is ready, if it is used */
	if (spec->config.cs &&
    b4a4:	68e3      	ldr	r3, [r4, #12]
    b4a6:	b933      	cbnz	r3, b4b6 <ws2812_spi_init+0x22>
	if (!spi_is_ready(&cfg->bus)) {
		LOG_ERR("SPI device %s not ready", cfg->bus.bus->name);
		return -ENODEV;
	}

	for (i = 0; i < cfg->num_colors; i++) {
    b4a8:	2300      	movs	r3, #0
    b4aa:	7ea1      	ldrb	r1, [r4, #26]
    b4ac:	b2da      	uxtb	r2, r3
    b4ae:	4291      	cmp	r1, r2
    b4b0:	d81f      	bhi.n	b4f2 <ws2812_spi_init+0x5e>
				dev->name);
			return -EINVAL;
		}
	}

	return 0;
    b4b2:	2000      	movs	r0, #0
    b4b4:	e01b      	b.n	b4ee <ws2812_spi_init+0x5a>
	    !device_is_ready(spec->config.cs->gpio.port)) {
    b4b6:	6818      	ldr	r0, [r3, #0]
    b4b8:	f004 fa32 	bl	f920 <z_device_is_ready>
	if (spec->config.cs &&
    b4bc:	2800      	cmp	r0, #0
    b4be:	d1f3      	bne.n	b4a8 <ws2812_spi_init+0x14>
		LOG_ERR("SPI device %s not ready", cfg->bus.bus->name);
    b4c0:	6823      	ldr	r3, [r4, #0]
    b4c2:	466c      	mov	r4, sp
    b4c4:	b088      	sub	sp, #32
    b4c6:	681b      	ldr	r3, [r3, #0]
    b4c8:	466a      	mov	r2, sp
    b4ca:	4918      	ldr	r1, [pc, #96]	; (b52c <ws2812_spi_init+0x98>)
    b4cc:	e9c2 1305 	strd	r1, r3, [r2, #20]
    b4d0:	f44f 7300 	mov.w	r3, #512	; 0x200
    b4d4:	8393      	strh	r3, [r2, #28]
    b4d6:	4b16      	ldr	r3, [pc, #88]	; (b530 <ws2812_spi_init+0x9c>)
    b4d8:	f842 3f10 	str.w	r3, [r2, #16]!
    b4dc:	4815      	ldr	r0, [pc, #84]	; (b534 <ws2812_spi_init+0xa0>)
    b4de:	2300      	movs	r3, #0
    b4e0:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    b4e4:	f7fe fa4e 	bl	9984 <z_impl_z_log_msg_static_create>
		return -ENODEV;
    b4e8:	f06f 0012 	mvn.w	r0, #18
    b4ec:	46a5      	mov	sp, r4
}
    b4ee:	46bd      	mov	sp, r7
    b4f0:	bdb0      	pop	{r4, r5, r7, pc}
		switch (cfg->color_mapping[i]) {
    b4f2:	69e2      	ldr	r2, [r4, #28]
    b4f4:	5cd2      	ldrb	r2, [r2, r3]
    b4f6:	3301      	adds	r3, #1
    b4f8:	2a03      	cmp	r2, #3
    b4fa:	d9d7      	bls.n	b4ac <ws2812_spi_init+0x18>
			LOG_ERR("%s: invalid channel to color mapping."
    b4fc:	466c      	mov	r4, sp
    b4fe:	b088      	sub	sp, #32
    b500:	466a      	mov	r2, sp
    b502:	682b      	ldr	r3, [r5, #0]
    b504:	490c      	ldr	r1, [pc, #48]	; (b538 <ws2812_spi_init+0xa4>)
    b506:	e9c2 1305 	strd	r1, r3, [r2, #20]
    b50a:	f44f 7300 	mov.w	r3, #512	; 0x200
    b50e:	8393      	strh	r3, [r2, #28]
    b510:	4b07      	ldr	r3, [pc, #28]	; (b530 <ws2812_spi_init+0x9c>)
    b512:	f842 3f10 	str.w	r3, [r2, #16]!
    b516:	4807      	ldr	r0, [pc, #28]	; (b534 <ws2812_spi_init+0xa0>)
    b518:	2300      	movs	r3, #0
    b51a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    b51e:	f7fe fa31 	bl	9984 <z_impl_z_log_msg_static_create>
			return -EINVAL;
    b522:	f06f 0015 	mvn.w	r0, #21
    b526:	46a5      	mov	sp, r4
    b528:	e7e1      	b.n	b4ee <ws2812_spi_init+0x5a>
    b52a:	bf00      	nop
    b52c:	000109c2 	.word	0x000109c2
    b530:	01000003 	.word	0x01000003
    b534:	00010010 	.word	0x00010010
    b538:	000109da 	.word	0x000109da

0000b53c <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
    b53c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b540:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
    b542:	6844      	ldr	r4, [r0, #4]
{
    b544:	af00      	add	r7, sp, #0
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    b546:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	struct spi_nrfx_data *dev_data = dev->data;
    b548:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    b54a:	2100      	movs	r1, #0
    b54c:	4630      	mov	r0, r6
    b54e:	1d3a      	adds	r2, r7, #4
    b550:	f004 f93e 	bl	f7d0 <pinctrl_lookup_state>
	if (ret < 0) {
    b554:	2800      	cmp	r0, #0
    b556:	db32      	blt.n	b5be <spi_nrfx_init+0x82>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    b558:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    b55a:	6832      	ldr	r2, [r6, #0]
    b55c:	7919      	ldrb	r1, [r3, #4]
    b55e:	6818      	ldr	r0, [r3, #0]
    b560:	f000 fee2 	bl	c328 <pinctrl_configure_pins>
	if (err < 0) {
    b564:	2800      	cmp	r0, #0
    b566:	db2a      	blt.n	b5be <spi_nrfx_init+0x82>

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b568:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
    b56a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b56c:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    b56e:	68ac      	ldr	r4, [r5, #8]
    b570:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    b574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b578:	429c      	cmp	r4, r3
    b57a:	d304      	bcc.n	b586 <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
    b57c:	4628      	mov	r0, r5
    b57e:	f004 f86c 	bl	f65a <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
    b582:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
    b584:	e01b      	b.n	b5be <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
    b586:	6820      	ldr	r0, [r4, #0]
    b588:	f004 f9ca 	bl	f920 <z_device_is_ready>
    b58c:	b9d8      	cbnz	r0, b5c6 <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    b58e:	6823      	ldr	r3, [r4, #0]
    b590:	6819      	ldr	r1, [r3, #0]
    b592:	7923      	ldrb	r3, [r4, #4]
    b594:	466c      	mov	r4, sp
    b596:	b08a      	sub	sp, #40	; 0x28
    b598:	466a      	mov	r2, sp
    b59a:	61d3      	str	r3, [r2, #28]
    b59c:	f44f 7300 	mov.w	r3, #512	; 0x200
    b5a0:	481a      	ldr	r0, [pc, #104]	; (b60c <spi_nrfx_init+0xd0>)
    b5a2:	8413      	strh	r3, [r2, #32]
    b5a4:	4b1a      	ldr	r3, [pc, #104]	; (b610 <spi_nrfx_init+0xd4>)
    b5a6:	e9c2 0105 	strd	r0, r1, [r2, #20]
    b5aa:	481a      	ldr	r0, [pc, #104]	; (b614 <spi_nrfx_init+0xd8>)
    b5ac:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    b5b0:	f842 3f10 	str.w	r3, [r2, #16]!
    b5b4:	f004 f818 	bl	f5e8 <z_log_msg_static_create.constprop.0>
			return -ENODEV;
    b5b8:	f06f 0012 	mvn.w	r0, #18
    b5bc:	46a5      	mov	sp, r4
#endif
}
    b5be:	370c      	adds	r7, #12
    b5c0:	46bd      	mov	sp, r7
    b5c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
    b5c6:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
    b5c8:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
    b5ca:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
    b5cc:	f8d0 e010 	ldr.w	lr, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    b5d0:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    b5d2:	bf54      	ite	pl
    b5d4:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    b5d8:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b5dc:	f8de c000 	ldr.w	ip, [lr]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    b5e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b5e4:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    b5e8:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b5ea:	bf4c      	ite	mi
    b5ec:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    b5f0:	ea2c 0308 	bicpl.w	r3, ip, r8
	const struct gpio_driver_api *api =
    b5f4:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    b5f8:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
    b5fc:	f8d9 3000 	ldr.w	r3, [r9]
    b600:	4798      	blx	r3
		if (ret < 0) {
    b602:	2800      	cmp	r0, #0
    b604:	dbdb      	blt.n	b5be <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    b606:	3408      	adds	r4, #8
    b608:	e7b2      	b.n	b570 <spi_nrfx_init+0x34>
    b60a:	bf00      	nop
    b60c:	00010a3a 	.word	0x00010a3a
    b610:	01000004 	.word	0x01000004
    b614:	0000fff8 	.word	0x0000fff8

0000b618 <transfer_next_chunk>:
{
    b618:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    b61a:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    b61c:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    b61e:	6ca5      	ldr	r5, [r4, #72]	; 0x48
		return ctx->rx_len;
    b620:	6d23      	ldr	r3, [r4, #80]	; 0x50
	if (!ctx->tx_len) {
    b622:	b98d      	cbnz	r5, b648 <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
    b624:	2b00      	cmp	r3, #0
    b626:	d137      	bne.n	b698 <transfer_next_chunk+0x80>
	int error = 0;
    b628:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
    b62a:	2200      	movs	r2, #0
    b62c:	4620      	mov	r0, r4
    b62e:	4611      	mov	r1, r2
    b630:	f003 fff1 	bl	f616 <_spi_context_cs_control>
	ctx->sync_status = status;
    b634:	6325      	str	r5, [r4, #48]	; 0x30
	z_impl_k_sem_give(sem);
    b636:	f104 0020 	add.w	r0, r4, #32
    b63a:	f002 fbcd 	bl	ddd8 <z_impl_k_sem_give>
	dev_data->busy = false;
    b63e:	2300      	movs	r3, #0
    b640:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
    b644:	b004      	add	sp, #16
    b646:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
    b648:	6c61      	ldr	r1, [r4, #68]	; 0x44
	} else if (!ctx->rx_len) {
    b64a:	bb0b      	cbnz	r3, b690 <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
    b64c:	bb39      	cbnz	r1, b69e <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
    b64e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b652:	42aa      	cmp	r2, r5
    b654:	bf28      	it	cs
    b656:	462a      	movcs	r2, r5
    b658:	6c63      	ldr	r3, [r4, #68]	; 0x44
		dev_data->chunk_len = chunk_len;
    b65a:	65a2      	str	r2, [r4, #88]	; 0x58
		xfer.p_tx_buffer = tx_buf;
    b65c:	9100      	str	r1, [sp, #0]
    b65e:	b11b      	cbz	r3, b668 <transfer_next_chunk+0x50>
    b660:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    b662:	2b00      	cmp	r3, #0
    b664:	bf18      	it	ne
    b666:	4613      	movne	r3, r2
    b668:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    b66a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    b66c:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    b66e:	b11b      	cbz	r3, b678 <transfer_next_chunk+0x60>
    b670:	6d23      	ldr	r3, [r4, #80]	; 0x50
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    b672:	2b00      	cmp	r3, #0
    b674:	bf18      	it	ne
    b676:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    b678:	2200      	movs	r2, #0
    b67a:	4669      	mov	r1, sp
    b67c:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    b67e:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    b680:	f002 f81c 	bl	d6bc <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    b684:	4b0d      	ldr	r3, [pc, #52]	; (b6bc <transfer_next_chunk+0xa4>)
    b686:	4298      	cmp	r0, r3
    b688:	d0dc      	beq.n	b644 <transfer_next_chunk+0x2c>
			error = -EIO;
    b68a:	f06f 0504 	mvn.w	r5, #4
    b68e:	e7cc      	b.n	b62a <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    b690:	429d      	cmp	r5, r3
    b692:	bf28      	it	cs
    b694:	461d      	movcs	r5, r3
    b696:	e7d9      	b.n	b64c <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
    b698:	461d      	mov	r5, r3
    b69a:	6c61      	ldr	r1, [r4, #68]	; 0x44
	return !!(ctx->tx_buf && ctx->tx_len);
    b69c:	e7d7      	b.n	b64e <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    b69e:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    b6a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b6a6:	d0d2      	beq.n	b64e <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
    b6a8:	2d08      	cmp	r5, #8
    b6aa:	bf28      	it	cs
    b6ac:	2508      	movcs	r5, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    b6ae:	6e20      	ldr	r0, [r4, #96]	; 0x60
    b6b0:	462a      	mov	r2, r5
    b6b2:	f003 fe2a 	bl	f30a <memcpy>
			tx_buf = dev_data->buffer;
    b6b6:	6e21      	ldr	r1, [r4, #96]	; 0x60
    b6b8:	e7c9      	b.n	b64e <transfer_next_chunk+0x36>
    b6ba:	bf00      	nop
    b6bc:	0bad0000 	.word	0x0bad0000

0000b6c0 <event_handler>:
{
    b6c0:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    b6c2:	7803      	ldrb	r3, [r0, #0]
{
    b6c4:	460c      	mov	r4, r1
    b6c6:	b086      	sub	sp, #24
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    b6c8:	2b00      	cmp	r3, #0
    b6ca:	d154      	bne.n	b776 <event_handler+0xb6>
	if (!ctx->tx_len) {
    b6cc:	6c8b      	ldr	r3, [r1, #72]	; 0x48
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    b6ce:	6d8a      	ldr	r2, [r1, #88]	; 0x58
    b6d0:	b15b      	cbz	r3, b6ea <event_handler+0x2a>
	if (len > ctx->tx_len) {
    b6d2:	429a      	cmp	r2, r3
    b6d4:	d91e      	bls.n	b714 <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
    b6d6:	4b29      	ldr	r3, [pc, #164]	; (b77c <event_handler+0xbc>)
    b6d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b6dc:	9305      	str	r3, [sp, #20]
    b6de:	2302      	movs	r3, #2
    b6e0:	4827      	ldr	r0, [pc, #156]	; (b780 <event_handler+0xc0>)
    b6e2:	aa04      	add	r2, sp, #16
    b6e4:	9304      	str	r3, [sp, #16]
    b6e6:	f003 ff7f 	bl	f5e8 <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
    b6ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    b6ec:	6da2      	ldr	r2, [r4, #88]	; 0x58
    b6ee:	b15b      	cbz	r3, b708 <event_handler+0x48>
	if (len > ctx->rx_len) {
    b6f0:	429a      	cmp	r2, r3
    b6f2:	d927      	bls.n	b744 <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
    b6f4:	4b21      	ldr	r3, [pc, #132]	; (b77c <event_handler+0xbc>)
    b6f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b6fa:	9305      	str	r3, [sp, #20]
    b6fc:	2302      	movs	r3, #2
    b6fe:	4820      	ldr	r0, [pc, #128]	; (b780 <event_handler+0xc0>)
    b700:	aa04      	add	r2, sp, #16
    b702:	9304      	str	r3, [sp, #16]
    b704:	f003 ff70 	bl	f5e8 <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
    b708:	6d60      	ldr	r0, [r4, #84]	; 0x54
}
    b70a:	b006      	add	sp, #24
    b70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    b710:	f7ff bf82 	b.w	b618 <transfer_next_chunk>
	ctx->tx_len -= len;
    b714:	1a9b      	subs	r3, r3, r2
    b716:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    b718:	b973      	cbnz	r3, b738 <event_handler+0x78>
		++ctx->current_tx;
    b71a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
			spi_context_get_next_buf(&ctx->current_tx,
    b71c:	f101 0248 	add.w	r2, r1, #72	; 0x48
		++ctx->current_tx;
    b720:	3308      	adds	r3, #8
    b722:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    b724:	6b8b      	ldr	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    b726:	f104 0034 	add.w	r0, r4, #52	; 0x34
		--ctx->tx_count;
    b72a:	3b01      	subs	r3, #1
    b72c:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    b72e:	3138      	adds	r1, #56	; 0x38
    b730:	f003 ff47 	bl	f5c2 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    b734:	6460      	str	r0, [r4, #68]	; 0x44
    b736:	e7d8      	b.n	b6ea <event_handler+0x2a>
	} else if (ctx->tx_buf) {
    b738:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    b73a:	2b00      	cmp	r3, #0
    b73c:	d0d5      	beq.n	b6ea <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
    b73e:	4413      	add	r3, r2
    b740:	644b      	str	r3, [r1, #68]	; 0x44
    b742:	e7d2      	b.n	b6ea <event_handler+0x2a>
	ctx->rx_len -= len;
    b744:	1a9b      	subs	r3, r3, r2
    b746:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    b748:	b97b      	cbnz	r3, b76a <event_handler+0xaa>
		++ctx->current_rx;
    b74a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			spi_context_get_next_buf(&ctx->current_rx,
    b74c:	f104 0250 	add.w	r2, r4, #80	; 0x50
		++ctx->current_rx;
    b750:	3308      	adds	r3, #8
    b752:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    b754:	6c23      	ldr	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    b756:	f104 0140 	add.w	r1, r4, #64	; 0x40
		--ctx->rx_count;
    b75a:	3b01      	subs	r3, #1
    b75c:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    b75e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    b762:	f003 ff2e 	bl	f5c2 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    b766:	64e0      	str	r0, [r4, #76]	; 0x4c
    b768:	e7ce      	b.n	b708 <event_handler+0x48>
	} else if (ctx->rx_buf) {
    b76a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    b76c:	2b00      	cmp	r3, #0
    b76e:	d0cb      	beq.n	b708 <event_handler+0x48>
		ctx->rx_buf += dfs * len;
    b770:	4413      	add	r3, r2
    b772:	64e3      	str	r3, [r4, #76]	; 0x4c
    b774:	e7c8      	b.n	b708 <event_handler+0x48>
}
    b776:	b006      	add	sp, #24
    b778:	bd10      	pop	{r4, pc}
    b77a:	bf00      	nop
    b77c:	00010a5e 	.word	0x00010a5e
    b780:	0000fff8 	.word	0x0000fff8

0000b784 <spi_nrfx_transceive>:
{
    b784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b788:	b08b      	sub	sp, #44	; 0x2c
    b78a:	469a      	mov	sl, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    b78c:	888b      	ldrh	r3, [r1, #4]
    b78e:	af00      	add	r7, sp, #0
    b790:	049b      	lsls	r3, r3, #18
    b792:	4680      	mov	r8, r0
    b794:	460e      	mov	r6, r1
	struct spi_nrfx_data *dev_data = dev->data;
    b796:	6904      	ldr	r4, [r0, #16]
{
    b798:	60ba      	str	r2, [r7, #8]
    b79a:	d438      	bmi.n	b80e <spi_nrfx_transceive+0x8a>
	return z_impl_k_sem_take(sem, timeout);
    b79c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b7a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b7a4:	f104 0010 	add.w	r0, r4, #16
    b7a8:	f002 fb36 	bl	de18 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    b7ac:	6066      	str	r6, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
    b7ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    b7b2:	f8d8 9010 	ldr.w	r9, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
    b7b6:	689d      	ldr	r5, [r3, #8]
	const struct spi_nrfx_config *dev_config = dev->config;
    b7b8:	60fb      	str	r3, [r7, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    b7ba:	f899 305d 	ldrb.w	r3, [r9, #93]	; 0x5d
    b7be:	607b      	str	r3, [r7, #4]
    b7c0:	b123      	cbz	r3, b7cc <spi_nrfx_transceive+0x48>
    b7c2:	f8d9 3000 	ldr.w	r3, [r9]
    b7c6:	429e      	cmp	r6, r3
    b7c8:	f000 80e8 	beq.w	b99c <spi_nrfx_transceive+0x218>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    b7cc:	f8b6 c004 	ldrh.w	ip, [r6, #4]
    b7d0:	f41c 6f00 	tst.w	ip, #2048	; 0x800
    b7d4:	d022      	beq.n	b81c <spi_nrfx_transceive+0x98>
		LOG_ERR("Half-duplex not supported");
    b7d6:	4ba8      	ldr	r3, [pc, #672]	; (ba78 <spi_nrfx_transceive+0x2f4>)
		return -ENOTSUP;
    b7d8:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
    b7dc:	627b      	str	r3, [r7, #36]	; 0x24
    b7de:	2302      	movs	r3, #2
    b7e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b7e4:	48a5      	ldr	r0, [pc, #660]	; (ba7c <spi_nrfx_transceive+0x2f8>)
    b7e6:	623b      	str	r3, [r7, #32]
    b7e8:	f107 0220 	add.w	r2, r7, #32
    b7ec:	f003 fefc 	bl	f5e8 <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    b7f0:	6823      	ldr	r3, [r4, #0]
    b7f2:	889b      	ldrh	r3, [r3, #4]
    b7f4:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    b7f8:	d104      	bne.n	b804 <spi_nrfx_transceive+0x80>
		ctx->owner = NULL;
    b7fa:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    b7fc:	f104 0010 	add.w	r0, r4, #16
    b800:	f002 faea 	bl	ddd8 <z_impl_k_sem_give>
}
    b804:	4628      	mov	r0, r5
    b806:	372c      	adds	r7, #44	; 0x2c
    b808:	46bd      	mov	sp, r7
    b80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    b80e:	69a3      	ldr	r3, [r4, #24]
    b810:	2b00      	cmp	r3, #0
    b812:	d1c3      	bne.n	b79c <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
    b814:	6863      	ldr	r3, [r4, #4]
    b816:	4299      	cmp	r1, r3
    b818:	d1c0      	bne.n	b79c <spi_nrfx_transceive+0x18>
    b81a:	e7c8      	b.n	b7ae <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    b81c:	f01c 0f01 	tst.w	ip, #1
    b820:	d016      	beq.n	b850 <spi_nrfx_transceive+0xcc>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    b822:	466d      	mov	r5, sp
    b824:	b088      	sub	sp, #32
    b826:	f8d8 3000 	ldr.w	r3, [r8]
    b82a:	466a      	mov	r2, sp
    b82c:	4994      	ldr	r1, [pc, #592]	; (ba80 <spi_nrfx_transceive+0x2fc>)
    b82e:	4893      	ldr	r0, [pc, #588]	; (ba7c <spi_nrfx_transceive+0x2f8>)
    b830:	e9c2 1305 	strd	r1, r3, [r2, #20]
    b834:	f44f 7300 	mov.w	r3, #512	; 0x200
    b838:	8393      	strh	r3, [r2, #28]
    b83a:	4b92      	ldr	r3, [pc, #584]	; (ba84 <spi_nrfx_transceive+0x300>)
    b83c:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    b840:	f842 3f10 	str.w	r3, [r2, #16]!
    b844:	f003 fed0 	bl	f5e8 <z_log_msg_static_create.constprop.0>
    b848:	46ad      	mov	sp, r5
		return -EINVAL;
    b84a:	f06f 0515 	mvn.w	r5, #21
    b84e:	e7cf      	b.n	b7f0 <spi_nrfx_transceive+0x6c>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    b850:	f01c 0f08 	tst.w	ip, #8
    b854:	d00b      	beq.n	b86e <spi_nrfx_transceive+0xea>
		LOG_ERR("Loopback mode is not supported");
    b856:	4b8c      	ldr	r3, [pc, #560]	; (ba88 <spi_nrfx_transceive+0x304>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
    b858:	627b      	str	r3, [r7, #36]	; 0x24
    b85a:	2302      	movs	r3, #2
    b85c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b860:	4886      	ldr	r0, [pc, #536]	; (ba7c <spi_nrfx_transceive+0x2f8>)
    b862:	623b      	str	r3, [r7, #32]
    b864:	f107 0220 	add.w	r2, r7, #32
    b868:	f003 febe 	bl	f5e8 <z_log_msg_static_create.constprop.0>
	if (error == 0) {
    b86c:	e7ed      	b.n	b84a <spi_nrfx_transceive+0xc6>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    b86e:	f3cc 1345 	ubfx	r3, ip, #5, #6
    b872:	2b08      	cmp	r3, #8
    b874:	d001      	beq.n	b87a <spi_nrfx_transceive+0xf6>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    b876:	4b85      	ldr	r3, [pc, #532]	; (ba8c <spi_nrfx_transceive+0x308>)
    b878:	e7ee      	b.n	b858 <spi_nrfx_transceive+0xd4>
	if (spi_cfg->frequency < 125000) {
    b87a:	6833      	ldr	r3, [r6, #0]
    b87c:	603b      	str	r3, [r7, #0]
    b87e:	683a      	ldr	r2, [r7, #0]
    b880:	4b83      	ldr	r3, [pc, #524]	; (ba90 <spi_nrfx_transceive+0x30c>)
    b882:	429a      	cmp	r2, r3
    b884:	d801      	bhi.n	b88a <spi_nrfx_transceive+0x106>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    b886:	4b83      	ldr	r3, [pc, #524]	; (ba94 <spi_nrfx_transceive+0x310>)
    b888:	e7e6      	b.n	b858 <spi_nrfx_transceive+0xd4>
	if (max_freq > 16000000 &&
    b88a:	4b83      	ldr	r3, [pc, #524]	; (ba98 <spi_nrfx_transceive+0x314>)
    b88c:	429d      	cmp	r5, r3
    b88e:	d906      	bls.n	b89e <spi_nrfx_transceive+0x11a>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
    b890:	4a82      	ldr	r2, [pc, #520]	; (ba9c <spi_nrfx_transceive+0x318>)
    b892:	f8d2 2558 	ldr.w	r2, [r2, #1368]	; 0x558
		max_freq = 16000000;
    b896:	f012 0f03 	tst.w	r2, #3
    b89a:	bf18      	it	ne
    b89c:	461d      	movne	r5, r3
	config = dev_config->def_config;
    b89e:	68fb      	ldr	r3, [r7, #12]
    b8a0:	f107 0e10 	add.w	lr, r7, #16
    b8a4:	f103 0b0c 	add.w	fp, r3, #12
    b8a8:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
    b8ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    b8b0:	683b      	ldr	r3, [r7, #0]
	config = dev_config->def_config;
    b8b2:	e89b 0003 	ldmia.w	fp, {r0, r1}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    b8b6:	42ab      	cmp	r3, r5
    b8b8:	bf28      	it	cs
    b8ba:	462b      	movcs	r3, r5
    b8bc:	461d      	mov	r5, r3
	if (frequency < 250000) {
    b8be:	4b78      	ldr	r3, [pc, #480]	; (baa0 <spi_nrfx_transceive+0x31c>)
	config = dev_config->def_config;
    b8c0:	e88e 0003 	stmia.w	lr, {r0, r1}
	if (frequency < 250000) {
    b8c4:	429d      	cmp	r5, r3
    b8c6:	d94b      	bls.n	b960 <spi_nrfx_transceive+0x1dc>
	} else if (frequency < 500000) {
    b8c8:	4b76      	ldr	r3, [pc, #472]	; (baa4 <spi_nrfx_transceive+0x320>)
    b8ca:	429d      	cmp	r5, r3
    b8cc:	d94b      	bls.n	b966 <spi_nrfx_transceive+0x1e2>
	} else if (frequency < 1000000) {
    b8ce:	4b76      	ldr	r3, [pc, #472]	; (baa8 <spi_nrfx_transceive+0x324>)
    b8d0:	429d      	cmp	r5, r3
    b8d2:	d94b      	bls.n	b96c <spi_nrfx_transceive+0x1e8>
	} else if (frequency < 2000000) {
    b8d4:	4b75      	ldr	r3, [pc, #468]	; (baac <spi_nrfx_transceive+0x328>)
    b8d6:	429d      	cmp	r5, r3
    b8d8:	d94b      	bls.n	b972 <spi_nrfx_transceive+0x1ee>
	} else if (frequency < 4000000) {
    b8da:	4b75      	ldr	r3, [pc, #468]	; (bab0 <spi_nrfx_transceive+0x32c>)
    b8dc:	429d      	cmp	r5, r3
    b8de:	d94b      	bls.n	b978 <spi_nrfx_transceive+0x1f4>
	} else if (frequency < 8000000) {
    b8e0:	4b74      	ldr	r3, [pc, #464]	; (bab4 <spi_nrfx_transceive+0x330>)
    b8e2:	429d      	cmp	r5, r3
    b8e4:	d34b      	bcc.n	b97e <spi_nrfx_transceive+0x1fa>
	} else if (frequency < 16000000) {
    b8e6:	4b6c      	ldr	r3, [pc, #432]	; (ba98 <spi_nrfx_transceive+0x314>)
    b8e8:	429d      	cmp	r5, r3
    b8ea:	d34b      	bcc.n	b984 <spi_nrfx_transceive+0x200>
		return NRF_SPIM_FREQ_16M;
    b8ec:	4b72      	ldr	r3, [pc, #456]	; (bab8 <spi_nrfx_transceive+0x334>)
    b8ee:	429d      	cmp	r5, r3
    b8f0:	bf2c      	ite	cs
    b8f2:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
    b8f6:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    b8fa:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    b8fe:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    b900:	f00c 0304 	and.w	r3, ip, #4
    b904:	d041      	beq.n	b98a <spi_nrfx_transceive+0x206>
			return NRF_SPIM_MODE_2;
    b906:	2b00      	cmp	r3, #0
    b908:	bf14      	ite	ne
    b90a:	2303      	movne	r3, #3
    b90c:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    b90e:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
    b910:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
    b912:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    b916:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
    b91a:	b12b      	cbz	r3, b928 <spi_nrfx_transceive+0x1a4>
		nrfx_spim_uninit(&dev_config->spim);
    b91c:	68f8      	ldr	r0, [r7, #12]
    b91e:	f001 fe7b 	bl	d618 <nrfx_spim_uninit>
		dev_data->initialized = false;
    b922:	2300      	movs	r3, #0
    b924:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
	result = nrfx_spim_init(&dev_config->spim, &config,
    b928:	464b      	mov	r3, r9
    b92a:	4a64      	ldr	r2, [pc, #400]	; (babc <spi_nrfx_transceive+0x338>)
    b92c:	68f8      	ldr	r0, [r7, #12]
    b92e:	f107 0110 	add.w	r1, r7, #16
    b932:	f001 fd53 	bl	d3dc <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    b936:	4b62      	ldr	r3, [pc, #392]	; (bac0 <spi_nrfx_transceive+0x33c>)
    b938:	4298      	cmp	r0, r3
    b93a:	d02a      	beq.n	b992 <spi_nrfx_transceive+0x20e>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    b93c:	466d      	mov	r5, sp
    b93e:	b088      	sub	sp, #32
    b940:	466a      	mov	r2, sp
    b942:	4b60      	ldr	r3, [pc, #384]	; (bac4 <spi_nrfx_transceive+0x340>)
    b944:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b948:	e9c2 3005 	strd	r3, r0, [r2, #20]
    b94c:	2303      	movs	r3, #3
    b94e:	484b      	ldr	r0, [pc, #300]	; (ba7c <spi_nrfx_transceive+0x2f8>)
    b950:	f842 3f10 	str.w	r3, [r2, #16]!
    b954:	f003 fe48 	bl	f5e8 <z_log_msg_static_create.constprop.0>
    b958:	46ad      	mov	sp, r5
		return -EIO;
    b95a:	f06f 0504 	mvn.w	r5, #4
    b95e:	e747      	b.n	b7f0 <spi_nrfx_transceive+0x6c>
		return NRF_SPIM_FREQ_125K;
    b960:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    b964:	e7c9      	b.n	b8fa <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_250K;
    b966:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    b96a:	e7c6      	b.n	b8fa <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_500K;
    b96c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    b970:	e7c3      	b.n	b8fa <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_1M;
    b972:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    b976:	e7c0      	b.n	b8fa <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_2M;
    b978:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    b97c:	e7bd      	b.n	b8fa <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_4M;
    b97e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    b982:	e7ba      	b.n	b8fa <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_8M;
    b984:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    b988:	e7b7      	b.n	b8fa <spi_nrfx_transceive+0x176>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    b98a:	3b00      	subs	r3, #0
    b98c:	bf18      	it	ne
    b98e:	2301      	movne	r3, #1
    b990:	e7bd      	b.n	b90e <spi_nrfx_transceive+0x18a>
	dev_data->initialized = true;
    b992:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
    b994:	f8c9 6000 	str.w	r6, [r9]
	dev_data->initialized = true;
    b998:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
		dev_data->busy = true;
    b99c:	2301      	movs	r3, #1
    b99e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    b9a2:	68bb      	ldr	r3, [r7, #8]
    b9a4:	2b00      	cmp	r3, #0
    b9a6:	d154      	bne.n	ba52 <spi_nrfx_transceive+0x2ce>
    b9a8:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    b9aa:	2300      	movs	r3, #0
    b9ac:	63a3      	str	r3, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    b9ae:	f104 0248 	add.w	r2, r4, #72	; 0x48
    b9b2:	f104 0138 	add.w	r1, r4, #56	; 0x38
    b9b6:	f104 0034 	add.w	r0, r4, #52	; 0x34
    b9ba:	f003 fe02 	bl	f5c2 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    b9be:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    b9c0:	f1ba 0f00 	cmp.w	sl, #0
    b9c4:	d14d      	bne.n	ba62 <spi_nrfx_transceive+0x2de>
    b9c6:	f8c4 a03c 	str.w	sl, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    b9ca:	2300      	movs	r3, #0
    b9cc:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    b9ce:	f104 0250 	add.w	r2, r4, #80	; 0x50
    b9d2:	f104 0140 	add.w	r1, r4, #64	; 0x40
    b9d6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    b9da:	f003 fdf2 	bl	f5c2 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    b9de:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
    b9e0:	2101      	movs	r1, #1
    b9e2:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
    b9e4:	64e0      	str	r0, [r4, #76]	; 0x4c
	ctx->sync_status = 0;
    b9e6:	6326      	str	r6, [r4, #48]	; 0x30
	_spi_context_cs_control(ctx, on, false);
    b9e8:	4620      	mov	r0, r4
    b9ea:	f003 fe14 	bl	f616 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    b9ee:	4640      	mov	r0, r8
    b9f0:	f7ff fe12 	bl	b618 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    b9f4:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b9f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			     ctx->config->frequency;
    b9f8:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    b9fa:	429d      	cmp	r5, r3
    b9fc:	bf38      	it	cc
    b9fe:	461d      	movcc	r5, r3
    ba00:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    ba04:	435d      	muls	r5, r3
			     ctx->config->frequency;
    ba06:	f858 3b20 	ldr.w	r3, [r8], #32
			return ((t * to_hz + off) / from_hz);
    ba0a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    ba0e:	681b      	ldr	r3, [r3, #0]
    ba10:	4631      	mov	r1, r6
    ba12:	fbb5 f5f3 	udiv	r5, r5, r3
    ba16:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    ba1a:	35c8      	adds	r5, #200	; 0xc8
    ba1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ba20:	2300      	movs	r3, #0
    ba22:	fbe5 010c 	umlal	r0, r1, r5, ip
    ba26:	f7fc fb95 	bl	8154 <__aeabi_uldivmod>
    ba2a:	4602      	mov	r2, r0
    ba2c:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    ba2e:	4640      	mov	r0, r8
    ba30:	f002 f9f2 	bl	de18 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
    ba34:	b1e8      	cbz	r0, ba72 <spi_nrfx_transceive+0x2ee>
		LOG_ERR("Timeout waiting for transfer complete");
    ba36:	4b24      	ldr	r3, [pc, #144]	; (bac8 <spi_nrfx_transceive+0x344>)
    ba38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ba3c:	627b      	str	r3, [r7, #36]	; 0x24
    ba3e:	2302      	movs	r3, #2
    ba40:	480e      	ldr	r0, [pc, #56]	; (ba7c <spi_nrfx_transceive+0x2f8>)
    ba42:	623b      	str	r3, [r7, #32]
    ba44:	f107 0220 	add.w	r2, r7, #32
    ba48:	f003 fdce 	bl	f5e8 <z_log_msg_static_create.constprop.0>
		return -ETIMEDOUT;
    ba4c:	f06f 0573 	mvn.w	r5, #115	; 0x73
    ba50:	e6ce      	b.n	b7f0 <spi_nrfx_transceive+0x6c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    ba52:	68bb      	ldr	r3, [r7, #8]
    ba54:	681b      	ldr	r3, [r3, #0]
    ba56:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    ba58:	2b00      	cmp	r3, #0
    ba5a:	d0a6      	beq.n	b9aa <spi_nrfx_transceive+0x226>
    ba5c:	68bb      	ldr	r3, [r7, #8]
    ba5e:	685b      	ldr	r3, [r3, #4]
    ba60:	e7a4      	b.n	b9ac <spi_nrfx_transceive+0x228>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    ba62:	f8da 3000 	ldr.w	r3, [sl]
    ba66:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    ba68:	2b00      	cmp	r3, #0
    ba6a:	d0ae      	beq.n	b9ca <spi_nrfx_transceive+0x246>
    ba6c:	f8da 3004 	ldr.w	r3, [sl, #4]
    ba70:	e7ac      	b.n	b9cc <spi_nrfx_transceive+0x248>
	status = ctx->sync_status;
    ba72:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return status;
    ba74:	e6bc      	b.n	b7f0 <spi_nrfx_transceive+0x6c>
    ba76:	bf00      	nop
    ba78:	00010a7c 	.word	0x00010a7c
    ba7c:	0000fff8 	.word	0x0000fff8
    ba80:	00010a96 	.word	0x00010a96
    ba84:	01000003 	.word	0x01000003
    ba88:	00010ab8 	.word	0x00010ab8
    ba8c:	00010ad7 	.word	0x00010ad7
    ba90:	0001e847 	.word	0x0001e847
    ba94:	00010b06 	.word	0x00010b06
    ba98:	00f42400 	.word	0x00f42400
    ba9c:	40005000 	.word	0x40005000
    baa0:	0003d08f 	.word	0x0003d08f
    baa4:	0007a11f 	.word	0x0007a11f
    baa8:	000f423f 	.word	0x000f423f
    baac:	001e847f 	.word	0x001e847f
    bab0:	003d08ff 	.word	0x003d08ff
    bab4:	007a1200 	.word	0x007a1200
    bab8:	01e84800 	.word	0x01e84800
    babc:	0000b6c1 	.word	0x0000b6c1
    bac0:	0bad0000 	.word	0x0bad0000
    bac4:	00010b37 	.word	0x00010b37
    bac8:	00010b5e 	.word	0x00010b5e

0000bacc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    bacc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    bace:	794b      	ldrb	r3, [r1, #5]
    bad0:	2b01      	cmp	r3, #1
    bad2:	d029      	beq.n	bb28 <uarte_nrfx_configure+0x5c>
    bad4:	2b03      	cmp	r3, #3
    bad6:	d124      	bne.n	bb22 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    bad8:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    bada:	798b      	ldrb	r3, [r1, #6]
    badc:	2b03      	cmp	r3, #3
    bade:	d120      	bne.n	bb22 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    bae0:	79ce      	ldrb	r6, [r1, #7]
    bae2:	b10e      	cbz	r6, bae8 <uarte_nrfx_configure+0x1c>
    bae4:	2e01      	cmp	r6, #1
    bae6:	d11c      	bne.n	bb22 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    bae8:	790a      	ldrb	r2, [r1, #4]
    baea:	2a01      	cmp	r2, #1
    baec:	d01e      	beq.n	bb2c <uarte_nrfx_configure+0x60>
    baee:	2a02      	cmp	r2, #2
    baf0:	d020      	beq.n	bb34 <uarte_nrfx_configure+0x68>
    baf2:	b9b2      	cbnz	r2, bb22 <uarte_nrfx_configure+0x56>
    baf4:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    baf6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    baf8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    bafa:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    bafe:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
    bb02:	d06e      	beq.n	bbe2 <uarte_nrfx_configure+0x116>
    bb04:	d833      	bhi.n	bb6e <uarte_nrfx_configure+0xa2>
    bb06:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    bb0a:	d06d      	beq.n	bbe8 <uarte_nrfx_configure+0x11c>
    bb0c:	d81c      	bhi.n	bb48 <uarte_nrfx_configure+0x7c>
    bb0e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    bb12:	d06b      	beq.n	bbec <uarte_nrfx_configure+0x120>
    bb14:	d810      	bhi.n	bb38 <uarte_nrfx_configure+0x6c>
    bb16:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    bb1a:	d06a      	beq.n	bbf2 <uarte_nrfx_configure+0x126>
    bb1c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    bb20:	d06a      	beq.n	bbf8 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
    bb22:	f06f 0085 	mvn.w	r0, #133	; 0x85
    bb26:	e05b      	b.n	bbe0 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
    bb28:	2700      	movs	r7, #0
    bb2a:	e7d6      	b.n	bada <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    bb2c:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    bb30:	220e      	movs	r2, #14
    bb32:	e7e0      	b.n	baf6 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    bb34:	2400      	movs	r4, #0
    bb36:	e7fb      	b.n	bb30 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
    bb38:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    bb3c:	d05f      	beq.n	bbfe <uarte_nrfx_configure+0x132>
    bb3e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    bb42:	d1ee      	bne.n	bb22 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    bb44:	4b38      	ldr	r3, [pc, #224]	; (bc28 <uarte_nrfx_configure+0x15c>)
    bb46:	e03c      	b.n	bbc2 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    bb48:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    bb4c:	d05a      	beq.n	bc04 <uarte_nrfx_configure+0x138>
    bb4e:	d807      	bhi.n	bb60 <uarte_nrfx_configure+0x94>
    bb50:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    bb54:	d058      	beq.n	bc08 <uarte_nrfx_configure+0x13c>
    bb56:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    bb5a:	d1e2      	bne.n	bb22 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    bb5c:	4b33      	ldr	r3, [pc, #204]	; (bc2c <uarte_nrfx_configure+0x160>)
    bb5e:	e030      	b.n	bbc2 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    bb60:	f647 2512 	movw	r5, #31250	; 0x7a12
    bb64:	42ab      	cmp	r3, r5
    bb66:	d1dc      	bne.n	bb22 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    bb68:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    bb6c:	e029      	b.n	bbc2 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    bb6e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    bb72:	d04b      	beq.n	bc0c <uarte_nrfx_configure+0x140>
    bb74:	d813      	bhi.n	bb9e <uarte_nrfx_configure+0xd2>
    bb76:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    bb7a:	d04a      	beq.n	bc12 <uarte_nrfx_configure+0x146>
    bb7c:	d809      	bhi.n	bb92 <uarte_nrfx_configure+0xc6>
    bb7e:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    bb82:	42ab      	cmp	r3, r5
    bb84:	d047      	beq.n	bc16 <uarte_nrfx_configure+0x14a>
    bb86:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    bb8a:	d1ca      	bne.n	bb22 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    bb8c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    bb90:	e017      	b.n	bbc2 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    bb92:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    bb96:	d1c4      	bne.n	bb22 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    bb98:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    bb9c:	e011      	b.n	bbc2 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    bb9e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    bba2:	d03b      	beq.n	bc1c <uarte_nrfx_configure+0x150>
    bba4:	d808      	bhi.n	bbb8 <uarte_nrfx_configure+0xec>
    bba6:	4d22      	ldr	r5, [pc, #136]	; (bc30 <uarte_nrfx_configure+0x164>)
    bba8:	42ab      	cmp	r3, r5
    bbaa:	d03a      	beq.n	bc22 <uarte_nrfx_configure+0x156>
    bbac:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    bbb0:	d1b7      	bne.n	bb22 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    bbb2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    bbb6:	e004      	b.n	bbc2 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    bbb8:	4d1e      	ldr	r5, [pc, #120]	; (bc34 <uarte_nrfx_configure+0x168>)
    bbba:	42ab      	cmp	r3, r5
    bbbc:	d1b1      	bne.n	bb22 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    bbbe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    bbc2:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    bbc4:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
    bbc8:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
    bbca:	433a      	orrs	r2, r7
    bbcc:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
    bbce:	4334      	orrs	r4, r6
    bbd0:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    bbd2:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    bbd6:	1d2b      	adds	r3, r5, #4
    bbd8:	c903      	ldmia	r1, {r0, r1}
    bbda:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    bbde:	2000      	movs	r0, #0
}
    bbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    bbe2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    bbe6:	e7ec      	b.n	bbc2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    bbe8:	4b13      	ldr	r3, [pc, #76]	; (bc38 <uarte_nrfx_configure+0x16c>)
    bbea:	e7ea      	b.n	bbc2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    bbec:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    bbf0:	e7e7      	b.n	bbc2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
    bbf2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    bbf6:	e7e4      	b.n	bbc2 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    bbf8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    bbfc:	e7e1      	b.n	bbc2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    bbfe:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    bc02:	e7de      	b.n	bbc2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    bc04:	4b0d      	ldr	r3, [pc, #52]	; (bc3c <uarte_nrfx_configure+0x170>)
    bc06:	e7dc      	b.n	bbc2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    bc08:	4b0d      	ldr	r3, [pc, #52]	; (bc40 <uarte_nrfx_configure+0x174>)
    bc0a:	e7da      	b.n	bbc2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    bc0c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    bc10:	e7d7      	b.n	bbc2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    bc12:	4b0c      	ldr	r3, [pc, #48]	; (bc44 <uarte_nrfx_configure+0x178>)
    bc14:	e7d5      	b.n	bbc2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    bc16:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    bc1a:	e7d2      	b.n	bbc2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    bc1c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    bc20:	e7cf      	b.n	bbc2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    bc22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    bc26:	e7cc      	b.n	bbc2 <uarte_nrfx_configure+0xf6>
    bc28:	0013b000 	.word	0x0013b000
    bc2c:	004ea000 	.word	0x004ea000
    bc30:	0003d090 	.word	0x0003d090
    bc34:	000f4240 	.word	0x000f4240
    bc38:	00275000 	.word	0x00275000
    bc3c:	0075c000 	.word	0x0075c000
    bc40:	003af000 	.word	0x003af000
    bc44:	013a9000 	.word	0x013a9000

0000bc48 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    bc48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bc4c:	4680      	mov	r8, r0
    bc4e:	b087      	sub	sp, #28
    bc50:	2200      	movs	r2, #0
    bc52:	2101      	movs	r1, #1
    bc54:	2008      	movs	r0, #8
    bc56:	f7fe faef 	bl	a238 <z_arm_irq_priority_set>
    bc5a:	2008      	movs	r0, #8
    bc5c:	f7fe fabc 	bl	a1d8 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    bc60:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    bc62:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    bc66:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    bc6a:	683c      	ldr	r4, [r7, #0]
	ret = pinctrl_lookup_state(config, id, &state);
    bc6c:	466a      	mov	r2, sp
    bc6e:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    bc72:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    bc76:	f8d7 900c 	ldr.w	r9, [r7, #12]
    bc7a:	4648      	mov	r0, r9
    bc7c:	f003 fda8 	bl	f7d0 <pinctrl_lookup_state>
	if (ret < 0) {
    bc80:	1e05      	subs	r5, r0, #0
    bc82:	db25      	blt.n	bcd0 <uarte_0_init+0x88>
	return pinctrl_apply_state_direct(config, state);
    bc84:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    bc86:	f8d9 2000 	ldr.w	r2, [r9]
    bc8a:	7919      	ldrb	r1, [r3, #4]
    bc8c:	6818      	ldr	r0, [r3, #0]
    bc8e:	f000 fb4b 	bl	c328 <pinctrl_configure_pins>
	if (err < 0) {
    bc92:	1e05      	subs	r5, r0, #0
    bc94:	db1c      	blt.n	bcd0 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    bc96:	4640      	mov	r0, r8
    bc98:	1d31      	adds	r1, r6, #4
    bc9a:	f7ff ff17 	bl	bacc <uarte_nrfx_configure>
	if (err) {
    bc9e:	4605      	mov	r5, r0
    bca0:	b9b0      	cbnz	r0, bcd0 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    bca2:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    bca4:	0799      	lsls	r1, r3, #30
    bca6:	d524      	bpl.n	bcf2 <uarte_0_init+0xaa>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    bca8:	f106 0018 	add.w	r0, r6, #24
    bcac:	f000 ff70 	bl	cb90 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    bcb0:	4b24      	ldr	r3, [pc, #144]	; (bd44 <uarte_0_init+0xfc>)
    bcb2:	4298      	cmp	r0, r3
    bcb4:	d010      	beq.n	bcd8 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
    bcb6:	4b24      	ldr	r3, [pc, #144]	; (bd48 <uarte_0_init+0x100>)
    bcb8:	9305      	str	r3, [sp, #20]
    bcba:	2302      	movs	r3, #2
    bcbc:	9304      	str	r3, [sp, #16]
    bcbe:	462b      	mov	r3, r5
		return -EIO;
    bcc0:	f06f 0504 	mvn.w	r5, #4
    bcc4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bcc8:	4820      	ldr	r0, [pc, #128]	; (bd4c <uarte_0_init+0x104>)
    bcca:	aa04      	add	r2, sp, #16
    bccc:	f7fd fe5a 	bl	9984 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
    bcd0:	4628      	mov	r0, r5
    bcd2:	b007      	add	sp, #28
    bcd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bcd8:	7e33      	ldrb	r3, [r6, #24]
    bcda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    bcde:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    bce2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    bce6:	2301      	movs	r3, #1
    bce8:	7e32      	ldrb	r2, [r6, #24]
    bcea:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    bcec:	4a18      	ldr	r2, [pc, #96]	; (bd50 <uarte_0_init+0x108>)
    bcee:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    bcf2:	2308      	movs	r3, #8
    bcf4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    bcf8:	7a3b      	ldrb	r3, [r7, #8]
    bcfa:	b953      	cbnz	r3, bd12 <uarte_0_init+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bcfc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    bd00:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    bd04:	6973      	ldr	r3, [r6, #20]
    bd06:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    bd0a:	2301      	movs	r3, #1
    bd0c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bd10:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    bd12:	687b      	ldr	r3, [r7, #4]
    bd14:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    bd16:	bf5c      	itt	pl
    bd18:	f44f 7380 	movpl.w	r3, #256	; 0x100
    bd1c:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    bd20:	687b      	ldr	r3, [r7, #4]
    bd22:	06db      	lsls	r3, r3, #27
    bd24:	bf44      	itt	mi
    bd26:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    bd2a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    bd2e:	6933      	ldr	r3, [r6, #16]
    bd30:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    bd34:	2300      	movs	r3, #0
    bd36:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bd3a:	2301      	movs	r3, #1
    bd3c:	60a3      	str	r3, [r4, #8]
    bd3e:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    bd40:	e7c6      	b.n	bcd0 <uarte_0_init+0x88>
    bd42:	bf00      	nop
    bd44:	0bad0000 	.word	0x0bad0000
    bd48:	00010b9b 	.word	0x00010b9b
    bd4c:	00010008 	.word	0x00010008
    bd50:	40017000 	.word	0x40017000

0000bd54 <uarte_nrfx_poll_out>:
{
    bd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd56:	4604      	mov	r4, r0
    bd58:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    bd5a:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    bd5c:	f003 fdef 	bl	f93e <k_is_in_isr>
    bd60:	b9b0      	cbnz	r0, bd90 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    bd62:	4b2e      	ldr	r3, [pc, #184]	; (be1c <uarte_nrfx_poll_out+0xc8>)
    bd64:	781b      	ldrb	r3, [r3, #0]
    bd66:	b19b      	cbz	r3, bd90 <uarte_nrfx_poll_out+0x3c>
{
    bd68:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    bd6a:	6860      	ldr	r0, [r4, #4]
    bd6c:	f003 fcba 	bl	f6e4 <is_tx_ready.isra.0>
    bd70:	bb00      	cbnz	r0, bdb4 <uarte_nrfx_poll_out+0x60>
    bd72:	2001      	movs	r0, #1
    bd74:	f003 fd5b 	bl	f82e <nrfx_busy_wait>
    bd78:	3e01      	subs	r6, #1
    bd7a:	d1f6      	bne.n	bd6a <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    bd7c:	2100      	movs	r1, #0
    bd7e:	2021      	movs	r0, #33	; 0x21
    bd80:	f002 fb3a 	bl	e3f8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    bd84:	e7f0      	b.n	bd68 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    bd86:	f386 8811 	msr	BASEPRI, r6
    bd8a:	f3bf 8f6f 	isb	sy
}
    bd8e:	e7f5      	b.n	bd7c <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    bd90:	f04f 0320 	mov.w	r3, #32
    bd94:	f3ef 8611 	mrs	r6, BASEPRI
    bd98:	f383 8812 	msr	BASEPRI_MAX, r3
    bd9c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    bda0:	6860      	ldr	r0, [r4, #4]
    bda2:	4631      	mov	r1, r6
    bda4:	f003 fc9e 	bl	f6e4 <is_tx_ready.isra.0>
    bda8:	b990      	cbnz	r0, bdd0 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    bdaa:	f386 8811 	msr	BASEPRI, r6
    bdae:	f3bf 8f6f 	isb	sy
}
    bdb2:	e7ed      	b.n	bd90 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    bdb4:	f04f 0320 	mov.w	r3, #32
    bdb8:	f3ef 8611 	mrs	r6, BASEPRI
    bdbc:	f383 8812 	msr	BASEPRI_MAX, r3
    bdc0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    bdc4:	6860      	ldr	r0, [r4, #4]
    bdc6:	4631      	mov	r1, r6
    bdc8:	f003 fc8c 	bl	f6e4 <is_tx_ready.isra.0>
    bdcc:	2800      	cmp	r0, #0
    bdce:	d0da      	beq.n	bd86 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    bdd0:	693b      	ldr	r3, [r7, #16]
    bdd2:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    bdd4:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    bdd6:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    bdd8:	6813      	ldr	r3, [r2, #0]
    bdda:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    bdde:	2001      	movs	r0, #1
    bde0:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bde4:	2000      	movs	r0, #0
    bde6:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    bdea:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    bdee:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    bdf2:	6852      	ldr	r2, [r2, #4]
    bdf4:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    bdf8:	06d2      	lsls	r2, r2, #27
    bdfa:	d508      	bpl.n	be0e <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    bdfc:	2008      	movs	r0, #8
	return config->uarte_regs;
    bdfe:	6862      	ldr	r2, [r4, #4]
    be00:	6812      	ldr	r2, [r2, #0]
    be02:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    be06:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    be0a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    be0e:	2201      	movs	r2, #1
    be10:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    be12:	f381 8811 	msr	BASEPRI, r1
    be16:	f3bf 8f6f 	isb	sy
}
    be1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    be1c:	20008c87 	.word	0x20008c87

0000be20 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    be20:	2301      	movs	r3, #1
    be22:	4083      	lsls	r3, r0
{
    be24:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    be26:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    be28:	4a0b      	ldr	r2, [pc, #44]	; (be58 <compare_int_lock+0x38>)
    be2a:	e8d2 1fef 	ldaex	r1, [r2]
    be2e:	ea01 0504 	and.w	r5, r1, r4
    be32:	e8c2 5fe6 	stlex	r6, r5, [r2]
    be36:	2e00      	cmp	r6, #0
    be38:	d1f7      	bne.n	be2a <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    be3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    be3e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    be40:	4806      	ldr	r0, [pc, #24]	; (be5c <compare_int_lock+0x3c>)
    be42:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    be46:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    be4a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    be4e:	420b      	tst	r3, r1
}
    be50:	bf14      	ite	ne
    be52:	2001      	movne	r0, #1
    be54:	2000      	moveq	r0, #0
    be56:	bd70      	pop	{r4, r5, r6, pc}
    be58:	200088dc 	.word	0x200088dc
    be5c:	40015000 	.word	0x40015000

0000be60 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    be60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    be62:	491b      	ldr	r1, [pc, #108]	; (bed0 <sys_clock_timeout_handler+0x70>)
{
    be64:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    be66:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    be6a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    be6c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    be70:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    be74:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    be76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    be7a:	d30f      	bcc.n	be9c <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    be7c:	f002 fc3c 	bl	e6f8 <sys_clock_announce>
    return p_reg->CC[ch];
    be80:	00a3      	lsls	r3, r4, #2
    be82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    be86:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
    be8a:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    be8e:	4295      	cmp	r5, r2
    be90:	d11d      	bne.n	bece <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    be92:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    be96:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    be9a:	e012      	b.n	bec2 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    be9c:	4b0d      	ldr	r3, [pc, #52]	; (bed4 <sys_clock_timeout_handler+0x74>)
    be9e:	681b      	ldr	r3, [r3, #0]
    bea0:	0a1a      	lsrs	r2, r3, #8
    bea2:	061b      	lsls	r3, r3, #24
    bea4:	195e      	adds	r6, r3, r5
    bea6:	4b0c      	ldr	r3, [pc, #48]	; (bed8 <sys_clock_timeout_handler+0x78>)
    bea8:	f142 0700 	adc.w	r7, r2, #0
    beac:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    beb0:	f002 fc22 	bl	e6f8 <sys_clock_announce>
    return p_reg->CC[ch];
    beb4:	4a09      	ldr	r2, [pc, #36]	; (bedc <sys_clock_timeout_handler+0x7c>)
    beb6:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    beba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    bebe:	429d      	cmp	r5, r3
    bec0:	d105      	bne.n	bece <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    bec2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    bec6:	4a05      	ldr	r2, [pc, #20]	; (bedc <sys_clock_timeout_handler+0x7c>)
    bec8:	40a3      	lsls	r3, r4
    beca:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    bece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bed0:	20008680 	.word	0x20008680
    bed4:	200088e0 	.word	0x200088e0
    bed8:	20008688 	.word	0x20008688
    bedc:	40015000 	.word	0x40015000

0000bee0 <compare_int_unlock>:
	if (key) {
    bee0:	b1d9      	cbz	r1, bf1a <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    bee2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bee4:	4a0d      	ldr	r2, [pc, #52]	; (bf1c <compare_int_unlock+0x3c>)
    bee6:	4083      	lsls	r3, r0
    bee8:	e8d2 cfef 	ldaex	ip, [r2]
    beec:	ea4c 0c03 	orr.w	ip, ip, r3
    bef0:	e8c2 cfe1 	stlex	r1, ip, [r2]
    bef4:	2900      	cmp	r1, #0
    bef6:	d1f7      	bne.n	bee8 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    bef8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    befc:	4a08      	ldr	r2, [pc, #32]	; (bf20 <compare_int_unlock+0x40>)
    befe:	4083      	lsls	r3, r0
    bf00:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bf04:	4b07      	ldr	r3, [pc, #28]	; (bf24 <compare_int_unlock+0x44>)
    bf06:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    bf0a:	40c3      	lsrs	r3, r0
    bf0c:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bf0e:	bf42      	ittt	mi
    bf10:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    bf14:	4b04      	ldrmi	r3, [pc, #16]	; (bf28 <compare_int_unlock+0x48>)
    bf16:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    bf1a:	4770      	bx	lr
    bf1c:	200088dc 	.word	0x200088dc
    bf20:	40015000 	.word	0x40015000
    bf24:	200088d4 	.word	0x200088d4
    bf28:	e000e100 	.word	0xe000e100

0000bf2c <z_nrf_rtc_timer_compare_evt_address_get>:
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
    bf2c:	b2c3      	uxtb	r3, r0
}
    bf2e:	4802      	ldr	r0, [pc, #8]	; (bf38 <z_nrf_rtc_timer_compare_evt_address_get+0xc>)
    bf30:	009b      	lsls	r3, r3, #2
    bf32:	4418      	add	r0, r3
    bf34:	4770      	bx	lr
    bf36:	bf00      	nop
    bf38:	40015140 	.word	0x40015140

0000bf3c <z_nrf_rtc_timer_compare_read>:
    return p_reg->CC[ch];
    bf3c:	4b02      	ldr	r3, [pc, #8]	; (bf48 <z_nrf_rtc_timer_compare_read+0xc>)
    bf3e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    bf42:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
    bf46:	4770      	bx	lr
    bf48:	40015000 	.word	0x40015000

0000bf4c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    bf4c:	4b0d      	ldr	r3, [pc, #52]	; (bf84 <z_nrf_rtc_timer_read+0x38>)
    bf4e:	6818      	ldr	r0, [r3, #0]
    bf50:	0a01      	lsrs	r1, r0, #8
    bf52:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    bf54:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    bf58:	4b0b      	ldr	r3, [pc, #44]	; (bf88 <z_nrf_rtc_timer_read+0x3c>)
    bf5a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    bf5e:	1818      	adds	r0, r3, r0
    bf60:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    bf64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    bf68:	d20a      	bcs.n	bf80 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    bf6a:	4b08      	ldr	r3, [pc, #32]	; (bf8c <z_nrf_rtc_timer_read+0x40>)
    bf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
    bf70:	4290      	cmp	r0, r2
    bf72:	eb71 0303 	sbcs.w	r3, r1, r3
    bf76:	d203      	bcs.n	bf80 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    bf78:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    bf7c:	f141 0100 	adc.w	r1, r1, #0
}
    bf80:	4770      	bx	lr
    bf82:	bf00      	nop
    bf84:	200088e0 	.word	0x200088e0
    bf88:	40015000 	.word	0x40015000
    bf8c:	20008688 	.word	0x20008688

0000bf90 <compare_set>:
{
    bf90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bf94:	4614      	mov	r4, r2
    bf96:	461d      	mov	r5, r3
    bf98:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    bf9a:	f7ff ff41 	bl	be20 <compare_int_lock>
    bf9e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    bfa0:	f7ff ffd4 	bl	bf4c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    bfa4:	42a0      	cmp	r0, r4
    bfa6:	eb71 0305 	sbcs.w	r3, r1, r5
    bfaa:	d271      	bcs.n	c090 <compare_set+0x100>
		if (target_time - curr_time > COUNTER_SPAN) {
    bfac:	4b3f      	ldr	r3, [pc, #252]	; (c0ac <compare_set+0x11c>)
    bfae:	1a20      	subs	r0, r4, r0
    bfb0:	eb65 0101 	sbc.w	r1, r5, r1
    bfb4:	4298      	cmp	r0, r3
    bfb6:	f171 0100 	sbcs.w	r1, r1, #0
    bfba:	d274      	bcs.n	c0a6 <compare_set+0x116>
		if (target_time != cc_data[chan].target_time) {
    bfbc:	4b3c      	ldr	r3, [pc, #240]	; (c0b0 <compare_set+0x120>)
    bfbe:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    bfc2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    bfc6:	429d      	cmp	r5, r3
    bfc8:	bf08      	it	eq
    bfca:	4294      	cmpeq	r4, r2
    bfcc:	d04b      	beq.n	c066 <compare_set+0xd6>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    bfce:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    bfd2:	f024 4a7f 	bic.w	sl, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    bfd6:	4656      	mov	r6, sl
    bfd8:	00bb      	lsls	r3, r7, #2
    bfda:	f103 4880 	add.w	r8, r3, #1073741824	; 0x40000000
    bfde:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    bfe2:	fa09 f307 	lsl.w	r3, r9, r7
    return p_reg->CC[ch];
    bfe6:	f8d8 0540 	ldr.w	r0, [r8, #1344]	; 0x540
     return p_reg->COUNTER;
    bfea:	f8df 90c8 	ldr.w	r9, [pc, #200]	; c0b4 <compare_set+0x124>
    bfee:	9301      	str	r3, [sp, #4]
    bff0:	f8d9 b504 	ldr.w	fp, [r9, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    bff4:	eba0 000b 	sub.w	r0, r0, fp
    bff8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    bffc:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    c000:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    c002:	f8c8 3540 	str.w	r3, [r8, #1344]	; 0x540
    c006:	d102      	bne.n	c00e <compare_set+0x7e>
	z_impl_k_busy_wait(usec_to_wait);
    c008:	2013      	movs	r0, #19
    c00a:	f003 fdcb 	bl	fba4 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    c00e:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
    c012:	eba6 000c 	sub.w	r0, r6, ip
    c016:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    c01a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    c01e:	bf88      	it	hi
    c020:	4666      	movhi	r6, ip
		event_clear(chan);
    c022:	4638      	mov	r0, r7
    c024:	f003 fbb9 	bl	f79a <event_clear>
    p_reg->EVTENSET = mask;
    c028:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    c02a:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    c02e:	f8c9 3344 	str.w	r3, [r9, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    c032:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
     return p_reg->COUNTER;
    c036:	f8d9 0504 	ldr.w	r0, [r9, #1284]	; 0x504
	} while ((now2 != now) &&
    c03a:	4583      	cmp	fp, r0
    c03c:	d00a      	beq.n	c054 <compare_set+0xc4>
	return (a - b) & COUNTER_MAX;
    c03e:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
    c042:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
    c046:	30fe      	adds	r0, #254	; 0xfe
    c048:	4430      	add	r0, r6
    c04a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    c04e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    c052:	d81b      	bhi.n	c08c <compare_set+0xfc>
	return (a - b) & COUNTER_MAX;
    c054:	eba6 060a 	sub.w	r6, r6, sl
    c058:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    c05c:	1936      	adds	r6, r6, r4
    c05e:	f145 0300 	adc.w	r3, r5, #0
    c062:	4634      	mov	r4, r6
    c064:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    c066:	4912      	ldr	r1, [pc, #72]	; (c0b0 <compare_set+0x120>)
	cc_data[chan].callback = handler;
    c068:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    c06a:	eb01 1207 	add.w	r2, r1, r7, lsl #4
    c06e:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    c072:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
    c074:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
    c076:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    c078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c07a:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    c07c:	4638      	mov	r0, r7
    c07e:	9900      	ldr	r1, [sp, #0]
    c080:	f7ff ff2e 	bl	bee0 <compare_int_unlock>
}
    c084:	4620      	mov	r0, r4
    c086:	b003      	add	sp, #12
    c088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c08c:	4630      	mov	r0, r6
    c08e:	e7af      	b.n	bff0 <compare_set+0x60>
		atomic_or(&force_isr_mask, BIT(chan));
    c090:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c092:	4a09      	ldr	r2, [pc, #36]	; (c0b8 <compare_set+0x128>)
    c094:	40bb      	lsls	r3, r7
    c096:	e8d2 0fef 	ldaex	r0, [r2]
    c09a:	4318      	orrs	r0, r3
    c09c:	e8c2 0fe1 	stlex	r1, r0, [r2]
    c0a0:	2900      	cmp	r1, #0
    c0a2:	d0e0      	beq.n	c066 <compare_set+0xd6>
    c0a4:	e7f7      	b.n	c096 <compare_set+0x106>
			return -EINVAL;
    c0a6:	f06f 0415 	mvn.w	r4, #21
    c0aa:	e7e7      	b.n	c07c <compare_set+0xec>
    c0ac:	01000001 	.word	0x01000001
    c0b0:	20008660 	.word	0x20008660
    c0b4:	40015000 	.word	0x40015000
    c0b8:	200088d4 	.word	0x200088d4

0000c0bc <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    c0bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
    c0be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
    c0c2:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    c0c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c0c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c0cc:	4c19      	ldr	r4, [pc, #100]	; (c134 <sys_clock_driver_init+0x78>)
    c0ce:	4b1a      	ldr	r3, [pc, #104]	; (c138 <sys_clock_driver_init+0x7c>)
    c0d0:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    c0d4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    c0d8:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
    c0dc:	e9c3 0106 	strd	r0, r1, [r3, #24]
    c0e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    c0e4:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c0e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    c0ea:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    c0ee:	4b13      	ldr	r3, [pc, #76]	; (c13c <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    c0f0:	2101      	movs	r1, #1
    c0f2:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    c0f6:	2015      	movs	r0, #21
    c0f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    c0fc:	462a      	mov	r2, r5
    c0fe:	f7fe f89b 	bl	a238 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    c102:	2015      	movs	r0, #21
    c104:	f7fe f868 	bl	a1d8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    c108:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    c10a:	2203      	movs	r2, #3
    c10c:	60a3      	str	r3, [r4, #8]
    c10e:	6023      	str	r3, [r4, #0]
    c110:	4b0b      	ldr	r3, [pc, #44]	; (c140 <sys_clock_driver_init+0x84>)

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    c112:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
    c114:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
    c116:	4b0b      	ldr	r3, [pc, #44]	; (c144 <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    c118:	4a0b      	ldr	r2, [pc, #44]	; (c148 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
    c11a:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    c11c:	4b0b      	ldr	r3, [pc, #44]	; (c14c <sys_clock_driver_init+0x90>)
    c11e:	9501      	str	r5, [sp, #4]
    c120:	9300      	str	r3, [sp, #0]
    c122:	2300      	movs	r3, #0
    c124:	f7ff ff34 	bl	bf90 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    c128:	4630      	mov	r0, r6
    c12a:	f7fe ffb9 	bl	b0a0 <z_nrf_clock_control_lf_on>

	return 0;
}
    c12e:	4628      	mov	r0, r5
    c130:	b002      	add	sp, #8
    c132:	bd70      	pop	{r4, r5, r6, pc}
    c134:	40015000 	.word	0x40015000
    c138:	20008660 	.word	0x20008660
    c13c:	e000e100 	.word	0xe000e100
    c140:	200088dc 	.word	0x200088dc
    c144:	200088d8 	.word	0x200088d8
    c148:	007fffff 	.word	0x007fffff
    c14c:	0000be61 	.word	0x0000be61

0000c150 <rtc_nrf_isr>:
{
    c150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
    c154:	4b3c      	ldr	r3, [pc, #240]	; (c248 <rtc_nrf_isr+0xf8>)
    c156:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    c15a:	0792      	lsls	r2, r2, #30
    c15c:	d50b      	bpl.n	c176 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c15e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    c162:	b142      	cbz	r2, c176 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c164:	2200      	movs	r2, #0
    c166:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    c16a:	4a38      	ldr	r2, [pc, #224]	; (c24c <rtc_nrf_isr+0xfc>)
    c16c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    c170:	6813      	ldr	r3, [r2, #0]
    c172:	3301      	adds	r3, #1
    c174:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c176:	4d36      	ldr	r5, [pc, #216]	; (c250 <rtc_nrf_isr+0x100>)
    c178:	2400      	movs	r4, #0
    c17a:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    c17c:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    return p_reg->INTENSET & mask;
    c180:	4e31      	ldr	r6, [pc, #196]	; (c248 <rtc_nrf_isr+0xf8>)
	__asm__ volatile(
    c182:	f04f 0320 	mov.w	r3, #32
    c186:	f3ef 8111 	mrs	r1, BASEPRI
    c18a:	f383 8812 	msr	BASEPRI_MAX, r3
    c18e:	f3bf 8f6f 	isb	sy
    c192:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
    c196:	fa0a f904 	lsl.w	r9, sl, r4
    c19a:	ea19 0f03 	tst.w	r9, r3
    c19e:	d10a      	bne.n	c1b6 <rtc_nrf_isr+0x66>
	__asm__ volatile(
    c1a0:	f381 8811 	msr	BASEPRI, r1
    c1a4:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c1a8:	3510      	adds	r5, #16
    c1aa:	b114      	cbz	r4, c1b2 <rtc_nrf_isr+0x62>
}
    c1ac:	b003      	add	sp, #12
    c1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c1b2:	2401      	movs	r4, #1
    c1b4:	e7e5      	b.n	c182 <rtc_nrf_isr+0x32>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    c1b6:	2301      	movs	r3, #1
    c1b8:	40a3      	lsls	r3, r4
    c1ba:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c1bc:	4a25      	ldr	r2, [pc, #148]	; (c254 <rtc_nrf_isr+0x104>)
    c1be:	e8d2 0fef 	ldaex	r0, [r2]
    c1c2:	ea00 0c03 	and.w	ip, r0, r3
    c1c6:	e8c2 cfee 	stlex	lr, ip, [r2]
    c1ca:	f1be 0f00 	cmp.w	lr, #0
    c1ce:	d1f6      	bne.n	c1be <rtc_nrf_isr+0x6e>
    c1d0:	b920      	cbnz	r0, c1dc <rtc_nrf_isr+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c1d2:	4b21      	ldr	r3, [pc, #132]	; (c258 <rtc_nrf_isr+0x108>)
    c1d4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    c1d8:	2b00      	cmp	r3, #0
    c1da:	d0e1      	beq.n	c1a0 <rtc_nrf_isr+0x50>
			event_clear(chan);
    c1dc:	4620      	mov	r0, r4
    c1de:	f003 fadc 	bl	f79a <event_clear>
    c1e2:	f381 8811 	msr	BASEPRI, r1
    c1e6:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    c1ea:	f7ff feaf 	bl	bf4c <z_nrf_rtc_timer_read>
	__asm__ volatile(
    c1ee:	f04f 0320 	mov.w	r3, #32
    c1f2:	f3ef 8c11 	mrs	ip, BASEPRI
    c1f6:	f383 8812 	msr	BASEPRI_MAX, r3
    c1fa:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    c1fe:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
    c202:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
    c206:	4290      	cmp	r0, r2
    c208:	4199      	sbcs	r1, r3
    c20a:	d204      	bcs.n	c216 <rtc_nrf_isr+0xc6>
	__asm__ volatile(
    c20c:	f38c 8811 	msr	BASEPRI, ip
    c210:	f3bf 8f6f 	isb	sy
		if (handler) {
    c214:	e7c8      	b.n	c1a8 <rtc_nrf_isr+0x58>
			cc_data[chan].callback = NULL;
    c216:	2100      	movs	r1, #0
			user_context = cc_data[chan].user_context;
    c218:	e9d5 8b00 	ldrd	r8, fp, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    c21c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
    c220:	6029      	str	r1, [r5, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    c222:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c226:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
    c22a:	4907      	ldr	r1, [pc, #28]	; (c248 <rtc_nrf_isr+0xf8>)
    c22c:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
    c230:	f38c 8811 	msr	BASEPRI, ip
    c234:	f3bf 8f6f 	isb	sy
		if (handler) {
    c238:	f1b8 0f00 	cmp.w	r8, #0
    c23c:	d0b4      	beq.n	c1a8 <rtc_nrf_isr+0x58>
			handler(chan, expire_time, user_context);
    c23e:	4620      	mov	r0, r4
    c240:	f8cd b000 	str.w	fp, [sp]
    c244:	47c0      	blx	r8
    c246:	e7af      	b.n	c1a8 <rtc_nrf_isr+0x58>
    c248:	40015000 	.word	0x40015000
    c24c:	200088e0 	.word	0x200088e0
    c250:	20008660 	.word	0x20008660
    c254:	200088d4 	.word	0x200088d4
    c258:	40015140 	.word	0x40015140

0000c25c <z_nrf_rtc_timer_chan_alloc>:
{
    c25c:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
    c25e:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
    c260:	4b0c      	ldr	r3, [pc, #48]	; (c294 <z_nrf_rtc_timer_chan_alloc+0x38>)
    c262:	6818      	ldr	r0, [r3, #0]
    c264:	b190      	cbz	r0, c28c <z_nrf_rtc_timer_chan_alloc+0x30>
    c266:	fab0 f080 	clz	r0, r0
    c26a:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
    c26e:	fa04 f100 	lsl.w	r1, r4, r0
    c272:	43c9      	mvns	r1, r1
    c274:	e8d3 2fef 	ldaex	r2, [r3]
    c278:	ea02 0501 	and.w	r5, r2, r1
    c27c:	e8c3 5fe6 	stlex	r6, r5, [r3]
    c280:	2e00      	cmp	r6, #0
    c282:	d1f7      	bne.n	c274 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
    c284:	40c2      	lsrs	r2, r0
    c286:	07d2      	lsls	r2, r2, #31
    c288:	d5eb      	bpl.n	c262 <z_nrf_rtc_timer_chan_alloc+0x6>
}
    c28a:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
    c28c:	f06f 000b 	mvn.w	r0, #11
    c290:	e7fb      	b.n	c28a <z_nrf_rtc_timer_chan_alloc+0x2e>
    c292:	bf00      	nop
    c294:	200088d8 	.word	0x200088d8

0000c298 <z_nrf_rtc_timer_chan_free>:
	atomic_or(&alloc_mask, BIT(chan));
    c298:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c29a:	4a05      	ldr	r2, [pc, #20]	; (c2b0 <z_nrf_rtc_timer_chan_free+0x18>)
    c29c:	4083      	lsls	r3, r0
    c29e:	e8d2 0fef 	ldaex	r0, [r2]
    c2a2:	4318      	orrs	r0, r3
    c2a4:	e8c2 0fe1 	stlex	r1, r0, [r2]
    c2a8:	2900      	cmp	r1, #0
    c2aa:	d1f8      	bne.n	c29e <z_nrf_rtc_timer_chan_free+0x6>
}
    c2ac:	4770      	bx	lr
    c2ae:	bf00      	nop
    c2b0:	200088d8 	.word	0x200088d8

0000c2b4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    c2b4:	1c43      	adds	r3, r0, #1
{
    c2b6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    c2b8:	d020      	beq.n	c2fc <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c2ba:	2801      	cmp	r0, #1
    c2bc:	dd20      	ble.n	c300 <sys_clock_set_timeout+0x4c>
    c2be:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    c2c2:	da1f      	bge.n	c304 <sys_clock_set_timeout+0x50>
    c2c4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    c2c6:	f7ff fe41 	bl	bf4c <z_nrf_rtc_timer_read>
    c2ca:	4b0f      	ldr	r3, [pc, #60]	; (c308 <sys_clock_set_timeout+0x54>)
    c2cc:	e9d3 1300 	ldrd	r1, r3, [r3]
    c2d0:	1a42      	subs	r2, r0, r1
		ticks = 0;
    c2d2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    c2d6:	bf28      	it	cs
    c2d8:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
    c2da:	480c      	ldr	r0, [pc, #48]	; (c30c <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    c2dc:	3201      	adds	r2, #1
    c2de:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    c2e0:	4282      	cmp	r2, r0
    c2e2:	bf28      	it	cs
    c2e4:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    c2e6:	2000      	movs	r0, #0
    c2e8:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    c2ea:	4909      	ldr	r1, [pc, #36]	; (c310 <sys_clock_set_timeout+0x5c>)
    c2ec:	9001      	str	r0, [sp, #4]
    c2ee:	9100      	str	r1, [sp, #0]
    c2f0:	f143 0300 	adc.w	r3, r3, #0
    c2f4:	f7ff fe4c 	bl	bf90 <compare_set>
}
    c2f8:	b002      	add	sp, #8
    c2fa:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    c2fc:	4803      	ldr	r0, [pc, #12]	; (c30c <sys_clock_set_timeout+0x58>)
    c2fe:	e7e1      	b.n	c2c4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c300:	2400      	movs	r4, #0
    c302:	e7e0      	b.n	c2c6 <sys_clock_set_timeout+0x12>
    c304:	4c01      	ldr	r4, [pc, #4]	; (c30c <sys_clock_set_timeout+0x58>)
    c306:	e7de      	b.n	c2c6 <sys_clock_set_timeout+0x12>
    c308:	20008680 	.word	0x20008680
    c30c:	007fffff 	.word	0x007fffff
    c310:	0000be61 	.word	0x0000be61

0000c314 <sys_clock_elapsed>:
{
    c314:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    c316:	f7ff fe19 	bl	bf4c <z_nrf_rtc_timer_read>
    c31a:	4b02      	ldr	r3, [pc, #8]	; (c324 <sys_clock_elapsed+0x10>)
    c31c:	681b      	ldr	r3, [r3, #0]
}
    c31e:	1ac0      	subs	r0, r0, r3
    c320:	bd08      	pop	{r3, pc}
    c322:	bf00      	nop
    c324:	20008680 	.word	0x20008680

0000c328 <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    c328:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    c32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
    c330:	4e5b      	ldr	r6, [pc, #364]	; (c4a0 <pinctrl_configure_pins+0x178>)
    c332:	4f5c      	ldr	r7, [pc, #368]	; (c4a4 <pinctrl_configure_pins+0x17c>)
    c334:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    c338:	4281      	cmp	r1, r0
    c33a:	d102      	bne.n	c342 <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    c33c:	2000      	movs	r0, #0
}
    c33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    c342:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    c344:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    c348:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    c34c:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    c34e:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    c352:	bf08      	it	eq
    c354:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    c358:	2c22      	cmp	r4, #34	; 0x22
    c35a:	f200 809d 	bhi.w	c498 <pinctrl_configure_pins+0x170>
    c35e:	e8df f004 	tbb	[pc, r4]
    c362:	2312      	.short	0x2312
    c364:	3e2b4228 	.word	0x3e2b4228
    c368:	9b9b9b42 	.word	0x9b9b9b42
    c36c:	9b72459b 	.word	0x9b72459b
    c370:	9b9b9b9b 	.word	0x9b9b9b9b
    c374:	9b9b9b9b 	.word	0x9b9b9b9b
    c378:	83807d75 	.word	0x83807d75
    c37c:	869b9b9b 	.word	0x869b9b9b
    c380:	95928f8c 	.word	0x95928f8c
    c384:	98          	.byte	0x98
    c385:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    c386:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    c38a:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
    c38e:	f1b8 0f01 	cmp.w	r8, #1
    c392:	bf14      	ite	ne
    c394:	46b6      	movne	lr, r6
    c396:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
    c398:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    c39c:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
    c3a0:	f8ce 4008 	str.w	r4, [lr, #8]
    c3a4:	2401      	movs	r4, #1
    c3a6:	e002      	b.n	c3ae <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = pin;
    c3a8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    c3ac:	2400      	movs	r4, #0
    c3ae:	46a6      	mov	lr, r4
    c3b0:	e023      	b.n	c3fa <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    c3b2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    c3b6:	e7e8      	b.n	c38a <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    c3b8:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    c3ba:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
    c3be:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
    c3c2:	f1b9 0f01 	cmp.w	r9, #1
    c3c6:	bf14      	ite	ne
    c3c8:	46b0      	movne	r8, r6
    c3ca:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
    c3cc:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    c3d0:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
    c3d4:	f8c8 e00c 	str.w	lr, [r8, #12]
    c3d8:	f04f 0e01 	mov.w	lr, #1
    c3dc:	e00d      	b.n	c3fa <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    c3de:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    c3e2:	2401      	movs	r4, #1
    c3e4:	e7eb      	b.n	c3be <pinctrl_configure_pins+0x96>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    c3e6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    c3ea:	e7df      	b.n	c3ac <pinctrl_configure_pins+0x84>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    c3ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    c3f0:	2d00      	cmp	r5, #0
    c3f2:	d1db      	bne.n	c3ac <pinctrl_configure_pins+0x84>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    c3f4:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
    c3f6:	2506      	movs	r5, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    c3f8:	46a6      	mov	lr, r4
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    c3fa:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
    c3fe:	f003 091f 	and.w	r9, r3, #31
    c402:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    c406:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
    c40a:	ea4f 1353 	mov.w	r3, r3, lsr #5
    c40e:	bf1c      	itt	ne
    c410:	2401      	movne	r4, #1
    c412:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
    c416:	2b01      	cmp	r3, #1
    c418:	bf0c      	ite	eq
    c41a:	46b8      	moveq	r8, r7
    c41c:	46b0      	movne	r8, r6
    c41e:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    c422:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    c426:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
    c42a:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    c42e:	022b      	lsls	r3, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    c430:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
    c434:	ea43 030e 	orr.w	r3, r3, lr
    c438:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    c43c:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
    c440:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    c444:	e778      	b.n	c338 <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    c446:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    c44a:	e7d1      	b.n	c3f0 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    c44c:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    c450:	6804      	ldr	r4, [r0, #0]
    c452:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    c456:	2c00      	cmp	r4, #0
    c458:	d0c3      	beq.n	c3e2 <pinctrl_configure_pins+0xba>
    c45a:	e796      	b.n	c38a <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    c45c:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    c460:	e7f6      	b.n	c450 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    c462:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    c466:	e7f3      	b.n	c450 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    c468:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    c46c:	e7f0      	b.n	c450 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    c46e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    c472:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    c474:	f04f 0e00 	mov.w	lr, #0
    c478:	e7bf      	b.n	c3fa <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    c47a:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    c47e:	e784      	b.n	c38a <pinctrl_configure_pins+0x62>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    c480:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    c484:	e7f5      	b.n	c472 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    c486:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    c48a:	e7f2      	b.n	c472 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    c48c:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    c490:	e7ef      	b.n	c472 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    c492:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    c496:	e7ec      	b.n	c472 <pinctrl_configure_pins+0x14a>
		switch (NRF_GET_FUN(pins[i])) {
    c498:	f06f 0085 	mvn.w	r0, #133	; 0x85
    c49c:	e74f      	b.n	c33e <pinctrl_configure_pins+0x16>
    c49e:	bf00      	nop
    c4a0:	40842500 	.word	0x40842500
    c4a4:	40842800 	.word	0x40842800

0000c4a8 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
    c4a8:	b510      	push	{r4, lr}
    c4aa:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
    c4ac:	6902      	ldr	r2, [r0, #16]
{
    c4ae:	b0a8      	sub	sp, #160	; 0xa0

	data->dev = dev;
    c4b0:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
    c4b4:	4925      	ldr	r1, [pc, #148]	; (c54c <mbox_nrf_init+0xa4>)
    c4b6:	2000      	movs	r0, #0
    c4b8:	f000 fee8 	bl	d28c <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    c4bc:	2200      	movs	r2, #0
    c4be:	2101      	movs	r1, #1
    c4c0:	202a      	movs	r0, #42	; 0x2a
    c4c2:	f7fd feb9 	bl	a238 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
    c4c6:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
    c4c8:	2284      	movs	r2, #132	; 0x84
    c4ca:	2100      	movs	r1, #0
    c4cc:	a807      	add	r0, sp, #28
    c4ce:	f002 ff27 	bl	f320 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
    c4d2:	6863      	ldr	r3, [r4, #4]
    c4d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c4d8:	d30a      	bcc.n	c4f0 <mbox_nrf_init+0x48>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
    c4da:	4b1d      	ldr	r3, [pc, #116]	; (c550 <mbox_nrf_init+0xa8>)
    c4dc:	9305      	str	r3, [sp, #20]
    c4de:	2302      	movs	r3, #2
    c4e0:	9304      	str	r3, [sp, #16]
    c4e2:	2300      	movs	r3, #0
    c4e4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    c4e8:	481a      	ldr	r0, [pc, #104]	; (c554 <mbox_nrf_init+0xac>)
    c4ea:	aa04      	add	r2, sp, #16
    c4ec:	f7fd fa4a 	bl	9984 <z_impl_z_log_msg_static_create>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
    c4f0:	6823      	ldr	r3, [r4, #0]
    c4f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c4f6:	d30a      	bcc.n	c50e <mbox_nrf_init+0x66>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
    c4f8:	4b17      	ldr	r3, [pc, #92]	; (c558 <mbox_nrf_init+0xb0>)
    c4fa:	9305      	str	r3, [sp, #20]
    c4fc:	2302      	movs	r3, #2
    c4fe:	9304      	str	r3, [sp, #16]
    c500:	2300      	movs	r3, #0
    c502:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    c506:	4813      	ldr	r0, [pc, #76]	; (c554 <mbox_nrf_init+0xac>)
    c508:	aa04      	add	r2, sp, #16
    c50a:	f7fd fa3b 	bl	9984 <z_impl_z_log_msg_static_create>
	ch_config.receive_events_enabled = 0;
    c50e:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
    c510:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
    c512:	9327      	str	r3, [sp, #156]	; 0x9c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    c514:	aa07      	add	r2, sp, #28
		if (conf->tx_mask & BIT(ch)) {
    c516:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    c518:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
    c51a:	40d9      	lsrs	r1, r3
    c51c:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
    c51e:	bf44      	itt	mi
    c520:	fa00 f103 	lslmi.w	r1, r0, r3
    c524:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
    c528:	6821      	ldr	r1, [r4, #0]
    c52a:	40d9      	lsrs	r1, r3
    c52c:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
    c52e:	bf48      	it	mi
    c530:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    c534:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
    c538:	bf48      	it	mi
    c53a:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    c53c:	2b10      	cmp	r3, #16
    c53e:	d1ea      	bne.n	c516 <mbox_nrf_init+0x6e>
	nrfx_ipc_config_load(&ch_config);
    c540:	a807      	add	r0, sp, #28
    c542:	f000 febb 	bl	d2bc <nrfx_ipc_config_load>

	return 0;
}
    c546:	2000      	movs	r0, #0
    c548:	b028      	add	sp, #160	; 0xa0
    c54a:	bd10      	pop	{r4, pc}
    c54c:	0000c651 	.word	0x0000c651
    c550:	00010be2 	.word	0x00010be2
    c554:	0000ffd0 	.word	0x0000ffd0
    c558:	00010c0e 	.word	0x00010c0e

0000c55c <mbox_nrf_set_enabled>:
{
    c55c:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    c55e:	290f      	cmp	r1, #15
{
    c560:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
    c562:	6905      	ldr	r5, [r0, #16]
{
    c564:	b087      	sub	sp, #28
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    c566:	d842      	bhi.n	c5ee <mbox_nrf_set_enabled+0x92>
    c568:	6843      	ldr	r3, [r0, #4]
    c56a:	681b      	ldr	r3, [r3, #0]
    c56c:	40cb      	lsrs	r3, r1
    c56e:	07db      	lsls	r3, r3, #31
    c570:	d53d      	bpl.n	c5ee <mbox_nrf_set_enabled+0x92>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
    c572:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    c576:	40cb      	lsrs	r3, r1
    c578:	f003 0301 	and.w	r3, r3, #1
    c57c:	b91a      	cbnz	r2, c586 <mbox_nrf_set_enabled+0x2a>
    c57e:	bb13      	cbnz	r3, c5c6 <mbox_nrf_set_enabled+0x6a>
		return -EALREADY;
    c580:	f06f 0077 	mvn.w	r0, #119	; 0x77
    c584:	e031      	b.n	c5ea <mbox_nrf_set_enabled+0x8e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
    c586:	2b00      	cmp	r3, #0
    c588:	d1fa      	bne.n	c580 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
    c58a:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
    c58e:	b94b      	cbnz	r3, c5a4 <mbox_nrf_set_enabled+0x48>
		LOG_WRN("Enabling channel without a registered callback\n");
    c590:	4a18      	ldr	r2, [pc, #96]	; (c5f4 <mbox_nrf_set_enabled+0x98>)
    c592:	9205      	str	r2, [sp, #20]
    c594:	2202      	movs	r2, #2
    c596:	9204      	str	r2, [sp, #16]
    c598:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    c59c:	4816      	ldr	r0, [pc, #88]	; (c5f8 <mbox_nrf_set_enabled+0x9c>)
    c59e:	aa04      	add	r2, sp, #16
    c5a0:	f7fd f9f0 	bl	9984 <z_impl_z_log_msg_static_create>
	if (enable && data->enabled_mask == 0) {
    c5a4:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    c5a8:	b913      	cbnz	r3, c5b0 <mbox_nrf_set_enabled+0x54>
		irq_enable(DT_INST_IRQN(0));
    c5aa:	202a      	movs	r0, #42	; 0x2a
    c5ac:	f7fd fe14 	bl	a1d8 <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
    c5b0:	2201      	movs	r2, #1
    c5b2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    c5b6:	40a2      	lsls	r2, r4
    c5b8:	4313      	orrs	r3, r2
    c5ba:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
    c5be:	b2e0      	uxtb	r0, r4
    c5c0:	f000 fe9c 	bl	d2fc <nrfx_ipc_receive_event_enable>
    c5c4:	e00a      	b.n	c5dc <mbox_nrf_set_enabled+0x80>
		nrfx_ipc_receive_event_disable(channel);
    c5c6:	b2c8      	uxtb	r0, r1
    c5c8:	f000 fea0 	bl	d30c <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
    c5cc:	2201      	movs	r2, #1
    c5ce:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    c5d2:	40a2      	lsls	r2, r4
    c5d4:	ea23 0302 	bic.w	r3, r3, r2
    c5d8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
    c5dc:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    c5e0:	b913      	cbnz	r3, c5e8 <mbox_nrf_set_enabled+0x8c>
		irq_disable(DT_INST_IRQN(0));
    c5e2:	202a      	movs	r0, #42	; 0x2a
    c5e4:	f7fd fe06 	bl	a1f4 <arch_irq_disable>
	return 0;
    c5e8:	2000      	movs	r0, #0
}
    c5ea:	b007      	add	sp, #28
    c5ec:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    c5ee:	f06f 0015 	mvn.w	r0, #21
    c5f2:	e7fa      	b.n	c5ea <mbox_nrf_set_enabled+0x8e>
    c5f4:	00010c3a 	.word	0x00010c3a
    c5f8:	0000ffd0 	.word	0x0000ffd0

0000c5fc <mbox_nrf_send>:
{
    c5fc:	b530      	push	{r4, r5, lr}
    c5fe:	4605      	mov	r5, r0
    c600:	460c      	mov	r4, r1
    c602:	b087      	sub	sp, #28
	if (msg) {
    c604:	b152      	cbz	r2, c61c <mbox_nrf_send+0x20>
		LOG_WRN("Sending data not supported");
    c606:	4b10      	ldr	r3, [pc, #64]	; (c648 <mbox_nrf_send+0x4c>)
    c608:	9305      	str	r3, [sp, #20]
    c60a:	2302      	movs	r3, #2
    c60c:	9304      	str	r3, [sp, #16]
    c60e:	2300      	movs	r3, #0
    c610:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    c614:	480d      	ldr	r0, [pc, #52]	; (c64c <mbox_nrf_send+0x50>)
    c616:	aa04      	add	r2, sp, #16
    c618:	f7fd f9b4 	bl	9984 <z_impl_z_log_msg_static_create>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
    c61c:	2c0f      	cmp	r4, #15
    c61e:	d80f      	bhi.n	c640 <mbox_nrf_send+0x44>
    c620:	686b      	ldr	r3, [r5, #4]
    c622:	685b      	ldr	r3, [r3, #4]
    c624:	40e3      	lsrs	r3, r4
    c626:	07db      	lsls	r3, r3, #31
    c628:	d50a      	bpl.n	c640 <mbox_nrf_send+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c62a:	2301      	movs	r3, #1
	return 0;
    c62c:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    c62e:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c630:	b2e4      	uxtb	r4, r4
    c632:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    c636:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
    c63a:	6023      	str	r3, [r4, #0]
}
    c63c:	b007      	add	sp, #28
    c63e:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    c640:	f06f 0015 	mvn.w	r0, #21
    c644:	e7fa      	b.n	c63c <mbox_nrf_send+0x40>
    c646:	bf00      	nop
    c648:	00010c6a 	.word	0x00010c6a
    c64c:	0000ffd0 	.word	0x0000ffd0

0000c650 <mbox_dispatcher>:
{
    c650:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = data->dev;
    c652:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    c656:	280f      	cmp	r0, #15
{
    c658:	4604      	mov	r4, r0
    c65a:	460d      	mov	r5, r1
    c65c:	6873      	ldr	r3, [r6, #4]
    c65e:	b086      	sub	sp, #24
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    c660:	d803      	bhi.n	c66a <mbox_dispatcher+0x1a>
    c662:	681b      	ldr	r3, [r3, #0]
    c664:	40c3      	lsrs	r3, r0
    c666:	07db      	lsls	r3, r3, #31
    c668:	d40a      	bmi.n	c680 <mbox_dispatcher+0x30>
		LOG_WRN("RX event on illegal channel");
    c66a:	4b15      	ldr	r3, [pc, #84]	; (c6c0 <mbox_dispatcher+0x70>)
    c66c:	9305      	str	r3, [sp, #20]
    c66e:	2302      	movs	r3, #2
    c670:	9304      	str	r3, [sp, #16]
    c672:	2300      	movs	r3, #0
    c674:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    c678:	4812      	ldr	r0, [pc, #72]	; (c6c4 <mbox_dispatcher+0x74>)
    c67a:	aa04      	add	r2, sp, #16
    c67c:	f7fd f982 	bl	9984 <z_impl_z_log_msg_static_create>
	if (!(data->enabled_mask & BIT(channel))) {
    c680:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    c684:	40e3      	lsrs	r3, r4
    c686:	f013 0301 	ands.w	r3, r3, #1
    c68a:	d109      	bne.n	c6a0 <mbox_dispatcher+0x50>
		LOG_WRN("RX event on disabled channel");
    c68c:	4a0e      	ldr	r2, [pc, #56]	; (c6c8 <mbox_dispatcher+0x78>)
    c68e:	9205      	str	r2, [sp, #20]
    c690:	2202      	movs	r2, #2
    c692:	9204      	str	r2, [sp, #16]
    c694:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    c698:	480a      	ldr	r0, [pc, #40]	; (c6c4 <mbox_dispatcher+0x74>)
    c69a:	aa04      	add	r2, sp, #16
    c69c:	f7fd f972 	bl	9984 <z_impl_z_log_msg_static_create>
	if (data->cb[channel] != NULL) {
    c6a0:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    c6a4:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
    c6a8:	b145      	cbz	r5, c6bc <mbox_dispatcher+0x6c>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
    c6aa:	2300      	movs	r3, #0
    c6ac:	4621      	mov	r1, r4
    c6ae:	4630      	mov	r0, r6
    c6b0:	46ac      	mov	ip, r5
    c6b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
    c6b4:	b006      	add	sp, #24
    c6b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
    c6ba:	4760      	bx	ip
}
    c6bc:	b006      	add	sp, #24
    c6be:	bd70      	pop	{r4, r5, r6, pc}
    c6c0:	00010c85 	.word	0x00010c85
    c6c4:	0000ffd0 	.word	0x0000ffd0
    c6c8:	00010ca1 	.word	0x00010ca1

0000c6cc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    c6cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    c6ce:	f7fd f879 	bl	97c4 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    c6d2:	4b07      	ldr	r3, [pc, #28]	; (c6f0 <k_sys_fatal_error_handler+0x24>)
    c6d4:	9305      	str	r3, [sp, #20]
    c6d6:	2302      	movs	r3, #2
    c6d8:	9304      	str	r3, [sp, #16]
    c6da:	4806      	ldr	r0, [pc, #24]	; (c6f4 <k_sys_fatal_error_handler+0x28>)
    c6dc:	2300      	movs	r3, #0
    c6de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c6e2:	aa04      	add	r2, sp, #16
    c6e4:	f7fd f94e 	bl	9984 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    c6e8:	2000      	movs	r0, #0
    c6ea:	f7fe f9b9 	bl	aa60 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    c6ee:	bf00      	nop
    c6f0:	00010cd7 	.word	0x00010cd7
    c6f4:	0000ffa8 	.word	0x0000ffa8

0000c6f8 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
    c6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6fc:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
    c6fe:	4b15      	ldr	r3, [pc, #84]	; (c754 <tfm_ns_interface_dispatch+0x5c>)
    c700:	4604      	mov	r4, r0
    c702:	f893 8000 	ldrb.w	r8, [r3]
    c706:	460d      	mov	r5, r1
    c708:	4616      	mov	r6, r2
    c70a:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
    c70c:	f1b8 0f00 	cmp.w	r8, #0
    c710:	d115      	bne.n	c73e <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
    c712:	4668      	mov	r0, sp
    c714:	f002 fdbe 	bl	f294 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
    c718:	463a      	mov	r2, r7
    c71a:	4631      	mov	r1, r6
    c71c:	4628      	mov	r0, r5
    c71e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    c720:	47a0      	blx	r4
    c722:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
    c724:	4668      	mov	r0, sp
    c726:	f002 fdb6 	bl	f296 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
    c72a:	f1b8 0f00 	cmp.w	r8, #0
    c72e:	d002      	beq.n	c736 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
    c730:	4809      	ldr	r0, [pc, #36]	; (c758 <tfm_ns_interface_dispatch+0x60>)
    c732:	f001 fb15 	bl	dd60 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
    c736:	4620      	mov	r0, r4
    c738:	b022      	add	sp, #136	; 0x88
    c73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
    c73e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c746:	4804      	ldr	r0, [pc, #16]	; (c758 <tfm_ns_interface_dispatch+0x60>)
    c748:	f001 fa90 	bl	dc6c <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
    c74c:	2800      	cmp	r0, #0
    c74e:	d0e0      	beq.n	c712 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
    c750:	241f      	movs	r4, #31
    c752:	e7f0      	b.n	c736 <tfm_ns_interface_dispatch+0x3e>
    c754:	20008c87 	.word	0x20008c87
    c758:	2000817c 	.word	0x2000817c

0000c75c <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
    c75c:	b530      	push	{r4, r5, lr}
    c75e:	b095      	sub	sp, #84	; 0x54
    c760:	4605      	mov	r5, r0
    c762:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
    c764:	2230      	movs	r2, #48	; 0x30
    c766:	2100      	movs	r1, #0
    c768:	a808      	add	r0, sp, #32
    c76a:	f002 fdd9 	bl	f320 <memset>
    c76e:	233f      	movs	r3, #63	; 0x3f
    c770:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
    c772:	ab07      	add	r3, sp, #28
    c774:	9303      	str	r3, [sp, #12]
    c776:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
    c778:	9406      	str	r4, [sp, #24]
    c77a:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
    c77e:	b154      	cbz	r4, c796 <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
    c780:	2301      	movs	r3, #1
    c782:	aa05      	add	r2, sp, #20
    c784:	9200      	str	r2, [sp, #0]
    c786:	2100      	movs	r1, #0
    c788:	4804      	ldr	r0, [pc, #16]	; (c79c <psa_generate_random+0x40>)
    c78a:	9301      	str	r3, [sp, #4]
    c78c:	aa03      	add	r2, sp, #12
    c78e:	f000 f807 	bl	c7a0 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
    c792:	b015      	add	sp, #84	; 0x54
    c794:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
    c796:	4620      	mov	r0, r4
    c798:	e7fb      	b.n	c792 <psa_generate_random+0x36>
    c79a:	bf00      	nop
    c79c:	40000100 	.word	0x40000100

0000c7a0 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
    c7a0:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
    c7a2:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
    c7a6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
    c7aa:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
    c7ac:	d20d      	bcs.n	c7ca <psa_call+0x2a>
        (type < INT16_MIN) ||
    c7ae:	ea43 0504 	orr.w	r5, r3, r4
    c7b2:	2dff      	cmp	r5, #255	; 0xff
    c7b4:	d809      	bhi.n	c7ca <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
    c7b6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
    c7ba:	4613      	mov	r3, r2
    c7bc:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
    c7c0:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
    c7c2:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
    c7c4:	4803      	ldr	r0, [pc, #12]	; (c7d4 <psa_call+0x34>)
    c7c6:	f7ff bf97 	b.w	c6f8 <tfm_ns_interface_dispatch>
}
    c7ca:	f06f 0080 	mvn.w	r0, #128	; 0x80
    c7ce:	bc30      	pop	{r4, r5}
    c7d0:	4770      	bx	lr
    c7d2:	bf00      	nop
    c7d4:	00007c21 	.word	0x00007c21

0000c7d8 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    c7d8:	4b04      	ldr	r3, [pc, #16]	; (c7ec <SystemCoreClockUpdate+0x14>)
    c7da:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    c7de:	4b04      	ldr	r3, [pc, #16]	; (c7f0 <SystemCoreClockUpdate+0x18>)
    c7e0:	f002 0203 	and.w	r2, r2, #3
    c7e4:	40d3      	lsrs	r3, r2
    c7e6:	4a03      	ldr	r2, [pc, #12]	; (c7f4 <SystemCoreClockUpdate+0x1c>)
    c7e8:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
    c7ea:	4770      	bx	lr
    c7ec:	40005000 	.word	0x40005000
    c7f0:	07a12000 	.word	0x07a12000
    c7f4:	200080a4 	.word	0x200080a4

0000c7f8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    c7f8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    c7fa:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    c7fc:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    c7fe:	fab2 f382 	clz	r3, r2
    c802:	f1c3 031f 	rsb	r3, r3, #31
    c806:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    c808:	fa05 f403 	lsl.w	r4, r5, r3
    c80c:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c810:	e8d0 6fef 	ldaex	r6, [r0]
    c814:	4296      	cmp	r6, r2
    c816:	d104      	bne.n	c822 <nrfx_flag32_alloc+0x2a>
    c818:	e8c0 4fec 	stlex	ip, r4, [r0]
    c81c:	f1bc 0f00 	cmp.w	ip, #0
    c820:	d1f6      	bne.n	c810 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    c822:	d1eb      	bne.n	c7fc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    c824:	4801      	ldr	r0, [pc, #4]	; (c82c <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    c826:	700b      	strb	r3, [r1, #0]
}
    c828:	bd70      	pop	{r4, r5, r6, pc}
    c82a:	bf00      	nop
    c82c:	0bad0000 	.word	0x0bad0000

0000c830 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    c830:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    c832:	6803      	ldr	r3, [r0, #0]
    c834:	40cb      	lsrs	r3, r1
    c836:	07db      	lsls	r3, r3, #31
    c838:	d410      	bmi.n	c85c <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    c83a:	2301      	movs	r3, #1
    c83c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    c83e:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    c840:	ea43 0102 	orr.w	r1, r3, r2
    c844:	e8d0 4fef 	ldaex	r4, [r0]
    c848:	4294      	cmp	r4, r2
    c84a:	d104      	bne.n	c856 <nrfx_flag32_free+0x26>
    c84c:	e8c0 1fec 	stlex	ip, r1, [r0]
    c850:	f1bc 0f00 	cmp.w	ip, #0
    c854:	d1f6      	bne.n	c844 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    c856:	d1f2      	bne.n	c83e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    c858:	4801      	ldr	r0, [pc, #4]	; (c860 <nrfx_flag32_free+0x30>)
}
    c85a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    c85c:	4801      	ldr	r0, [pc, #4]	; (c864 <nrfx_flag32_free+0x34>)
    c85e:	e7fc      	b.n	c85a <nrfx_flag32_free+0x2a>
    c860:	0bad0000 	.word	0x0bad0000
    c864:	0bad0004 	.word	0x0bad0004

0000c868 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    c868:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
    c86a:	2803      	cmp	r0, #3
    c86c:	f200 80a0 	bhi.w	c9b0 <clock_stop+0x148>
    c870:	e8df f000 	tbb	[pc, r0]
    c874:	32251802 	.word	0x32251802
    p_reg->INTENCLR = mask;
    c878:	2202      	movs	r2, #2
    c87a:	4b59      	ldr	r3, [pc, #356]	; (c9e0 <clock_stop+0x178>)
    c87c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c880:	2200      	movs	r2, #0
    c882:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    c886:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c88a:	2201      	movs	r2, #1
    c88c:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    c88e:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    c890:	2301      	movs	r3, #1
    c892:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    c896:	2803      	cmp	r0, #3
    c898:	f200 808a 	bhi.w	c9b0 <clock_stop+0x148>
    c89c:	e8df f000 	tbb	[pc, r0]
    c8a0:	94736529 	.word	0x94736529
    p_reg->INTENCLR = mask;
    c8a4:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c8a6:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    c8a8:	4b4d      	ldr	r3, [pc, #308]	; (c9e0 <clock_stop+0x178>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    c8aa:	f10d 0407 	add.w	r4, sp, #7
    c8ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c8b2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    c8b6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c8ba:	605a      	str	r2, [r3, #4]
    c8bc:	e7e8      	b.n	c890 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
    c8be:	f44f 7200 	mov.w	r2, #512	; 0x200
    c8c2:	4b47      	ldr	r3, [pc, #284]	; (c9e0 <clock_stop+0x178>)
    c8c4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c8c8:	2200      	movs	r2, #0
    c8ca:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    c8ce:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c8d2:	2201      	movs	r2, #1
    c8d4:	625a      	str	r2, [r3, #36]	; 0x24
    c8d6:	e7da      	b.n	c88e <clock_stop+0x26>
    p_reg->INTENCLR = mask;
    c8d8:	f44f 7280 	mov.w	r2, #256	; 0x100
    c8dc:	4b40      	ldr	r3, [pc, #256]	; (c9e0 <clock_stop+0x178>)
    c8de:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c8e2:	2200      	movs	r2, #0
    c8e4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    c8e8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c8ec:	2201      	movs	r2, #1
    c8ee:	61da      	str	r2, [r3, #28]
    c8f0:	e7cd      	b.n	c88e <clock_stop+0x26>
    switch (domain)
    c8f2:	f242 7510 	movw	r5, #10000	; 0x2710
    c8f6:	4e3a      	ldr	r6, [pc, #232]	; (c9e0 <clock_stop+0x178>)
            if (p_clk_src != NULL)
    c8f8:	b36c      	cbz	r4, c956 <clock_stop+0xee>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    c8fa:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    c8fe:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    c902:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    c904:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    c908:	03d9      	lsls	r1, r3, #15
    c90a:	d551      	bpl.n	c9b0 <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    c90c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c910:	2801      	cmp	r0, #1
    c912:	d14d      	bne.n	c9b0 <clock_stop+0x148>
    c914:	f002 ff8b 	bl	f82e <nrfx_busy_wait>
    c918:	3d01      	subs	r5, #1
    c91a:	d1ed      	bne.n	c8f8 <clock_stop+0x90>
    c91c:	e048      	b.n	c9b0 <clock_stop+0x148>
    c91e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c922:	2801      	cmp	r0, #1
    c924:	d144      	bne.n	c9b0 <clock_stop+0x148>
    c926:	f002 ff82 	bl	f82e <nrfx_busy_wait>
    c92a:	3d01      	subs	r5, #1
    c92c:	d14f      	bne.n	c9ce <clock_stop+0x166>
    c92e:	e03f      	b.n	c9b0 <clock_stop+0x148>
    c930:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c934:	2801      	cmp	r0, #1
    c936:	d13b      	bne.n	c9b0 <clock_stop+0x148>
    c938:	f002 ff79 	bl	f82e <nrfx_busy_wait>
    c93c:	3d01      	subs	r5, #1
    c93e:	d037      	beq.n	c9b0 <clock_stop+0x148>
            if (p_clk_src != NULL)
    c940:	b1bc      	cbz	r4, c972 <clock_stop+0x10a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    c942:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    c946:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    c94a:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    c94c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    c950:	03db      	lsls	r3, r3, #15
    c952:	d52d      	bpl.n	c9b0 <clock_stop+0x148>
    c954:	e7ec      	b.n	c930 <clock_stop+0xc8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    c956:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    c95a:	03da      	lsls	r2, r3, #15
    c95c:	d528      	bpl.n	c9b0 <clock_stop+0x148>
    c95e:	2001      	movs	r0, #1
    c960:	f002 ff65 	bl	f82e <nrfx_busy_wait>
    c964:	3d01      	subs	r5, #1
    c966:	d1f6      	bne.n	c956 <clock_stop+0xee>
    c968:	e022      	b.n	c9b0 <clock_stop+0x148>
    switch (domain)
    c96a:	f242 7510 	movw	r5, #10000	; 0x2710
    c96e:	4e1c      	ldr	r6, [pc, #112]	; (c9e0 <clock_stop+0x178>)
    c970:	e7e6      	b.n	c940 <clock_stop+0xd8>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    c972:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    c976:	03d8      	lsls	r0, r3, #15
    c978:	d51a      	bpl.n	c9b0 <clock_stop+0x148>
    c97a:	2001      	movs	r0, #1
    c97c:	f002 ff57 	bl	f82e <nrfx_busy_wait>
    c980:	3d01      	subs	r5, #1
    c982:	d1f6      	bne.n	c972 <clock_stop+0x10a>
    c984:	e014      	b.n	c9b0 <clock_stop+0x148>
    switch (domain)
    c986:	f242 7510 	movw	r5, #10000	; 0x2710
    c98a:	4e15      	ldr	r6, [pc, #84]	; (c9e0 <clock_stop+0x178>)
            if (p_clk_src != NULL)
    c98c:	b194      	cbz	r4, c9b4 <clock_stop+0x14c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    c98e:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    c992:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    c996:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    c998:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    c99c:	03d9      	lsls	r1, r3, #15
    c99e:	d507      	bpl.n	c9b0 <clock_stop+0x148>
    c9a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c9a4:	2801      	cmp	r0, #1
    c9a6:	d103      	bne.n	c9b0 <clock_stop+0x148>
    c9a8:	f002 ff41 	bl	f82e <nrfx_busy_wait>
    c9ac:	3d01      	subs	r5, #1
    c9ae:	d1ed      	bne.n	c98c <clock_stop+0x124>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    c9b0:	b002      	add	sp, #8
    c9b2:	bd70      	pop	{r4, r5, r6, pc}
    c9b4:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    c9b8:	03da      	lsls	r2, r3, #15
    c9ba:	d5f9      	bpl.n	c9b0 <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    c9bc:	2001      	movs	r0, #1
    c9be:	f002 ff36 	bl	f82e <nrfx_busy_wait>
    c9c2:	3d01      	subs	r5, #1
    c9c4:	d1f6      	bne.n	c9b4 <clock_stop+0x14c>
    c9c6:	e7f3      	b.n	c9b0 <clock_stop+0x148>
    switch (domain)
    c9c8:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    c9cc:	4e04      	ldr	r6, [pc, #16]	; (c9e0 <clock_stop+0x178>)
    c9ce:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    c9d2:	03db      	lsls	r3, r3, #15
    c9d4:	d5ec      	bpl.n	c9b0 <clock_stop+0x148>
    c9d6:	2c00      	cmp	r4, #0
    c9d8:	d1a1      	bne.n	c91e <clock_stop+0xb6>
    c9da:	2001      	movs	r0, #1
    c9dc:	e7a3      	b.n	c926 <clock_stop+0xbe>
    c9de:	bf00      	nop
    c9e0:	40005000 	.word	0x40005000

0000c9e4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    c9e4:	4b04      	ldr	r3, [pc, #16]	; (c9f8 <nrfx_clock_init+0x14>)
    c9e6:	791a      	ldrb	r2, [r3, #4]
    c9e8:	b922      	cbnz	r2, c9f4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    c9ea:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    c9ec:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    c9ee:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    c9f0:	4802      	ldr	r0, [pc, #8]	; (c9fc <nrfx_clock_init+0x18>)
    c9f2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    c9f4:	4802      	ldr	r0, [pc, #8]	; (ca00 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    c9f6:	4770      	bx	lr
    c9f8:	2000896c 	.word	0x2000896c
    c9fc:	0bad0000 	.word	0x0bad0000
    ca00:	0bad000c 	.word	0x0bad000c

0000ca04 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    ca04:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    ca06:	2005      	movs	r0, #5
    ca08:	f7fd fc08 	bl	a21c <arch_irq_is_enabled>
    ca0c:	b910      	cbnz	r0, ca14 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    ca0e:	2005      	movs	r0, #5
    ca10:	f7fd fbe2 	bl	a1d8 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    ca14:	2201      	movs	r2, #1
    ca16:	4b04      	ldr	r3, [pc, #16]	; (ca28 <nrfx_clock_enable+0x24>)
    ca18:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
    ca1c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    ca20:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    ca24:	bd08      	pop	{r3, pc}
    ca26:	bf00      	nop
    ca28:	40005000 	.word	0x40005000

0000ca2c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    ca2c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    ca2e:	2803      	cmp	r0, #3
    ca30:	d818      	bhi.n	ca64 <nrfx_clock_start+0x38>
    ca32:	e8df f000 	tbb	[pc, r0]
    ca36:	3002      	.short	0x3002
    ca38:	483b      	.short	0x483b
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    ca3a:	4a29      	ldr	r2, [pc, #164]	; (cae0 <nrfx_clock_start+0xb4>)
    ca3c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ca40:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    ca44:	03c9      	lsls	r1, r1, #15
    ca46:	d40e      	bmi.n	ca66 <nrfx_clock_start+0x3a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    ca48:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    ca4c:	07db      	lsls	r3, r3, #31
    ca4e:	d513      	bpl.n	ca78 <nrfx_clock_start+0x4c>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    ca50:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    ca54:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    ca58:	3b01      	subs	r3, #1
    ca5a:	2b01      	cmp	r3, #1
    ca5c:	d809      	bhi.n	ca72 <nrfx_clock_start+0x46>
    p_reg->INTENSET = mask;
    ca5e:	2302      	movs	r3, #2
    ca60:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    ca64:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    ca66:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    ca6a:	2b02      	cmp	r3, #2
    ca6c:	d005      	beq.n	ca7a <nrfx_clock_start+0x4e>
    ca6e:	2b01      	cmp	r3, #1
    ca70:	d002      	beq.n	ca78 <nrfx_clock_start+0x4c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    ca72:	2000      	movs	r0, #0
    ca74:	f7ff fef8 	bl	c868 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    ca78:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    ca7a:	4a19      	ldr	r2, [pc, #100]	; (cae0 <nrfx_clock_start+0xb4>)
    ca7c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ca80:	2300      	movs	r3, #0
    ca82:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    ca86:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    ca8a:	2302      	movs	r3, #2
    ca8c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ca90:	2301      	movs	r3, #1
    ca92:	6093      	str	r3, [r2, #8]
}
    ca94:	e7e6      	b.n	ca64 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ca96:	2200      	movs	r2, #0
    ca98:	4b11      	ldr	r3, [pc, #68]	; (cae0 <nrfx_clock_start+0xb4>)
    ca9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    ca9e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    caa2:	2201      	movs	r2, #1
    caa4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    caa8:	601a      	str	r2, [r3, #0]
}
    caaa:	e7db      	b.n	ca64 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    caac:	2200      	movs	r2, #0
    caae:	4b0c      	ldr	r3, [pc, #48]	; (cae0 <nrfx_clock_start+0xb4>)
    cab0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    cab4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    cab8:	f44f 7200 	mov.w	r2, #512	; 0x200
    cabc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cac0:	2201      	movs	r2, #1
    cac2:	621a      	str	r2, [r3, #32]
}
    cac4:	e7ce      	b.n	ca64 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cac6:	2200      	movs	r2, #0
    cac8:	4b05      	ldr	r3, [pc, #20]	; (cae0 <nrfx_clock_start+0xb4>)
    caca:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    cace:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    cad2:	f44f 7280 	mov.w	r2, #256	; 0x100
    cad6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cada:	2201      	movs	r2, #1
    cadc:	619a      	str	r2, [r3, #24]
}
    cade:	e7c1      	b.n	ca64 <nrfx_clock_start+0x38>
    cae0:	40005000 	.word	0x40005000

0000cae4 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    cae4:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    cae6:	4b28      	ldr	r3, [pc, #160]	; (cb88 <nrfx_power_clock_irq_handler+0xa4>)
    cae8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    caec:	b152      	cbz	r2, cb04 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    caee:	2000      	movs	r0, #0
    caf0:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    caf4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    caf8:	2201      	movs	r2, #1
    cafa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    cafe:	4b23      	ldr	r3, [pc, #140]	; (cb8c <nrfx_power_clock_irq_handler+0xa8>)
    cb00:	681b      	ldr	r3, [r3, #0]
    cb02:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    cb04:	4b20      	ldr	r3, [pc, #128]	; (cb88 <nrfx_power_clock_irq_handler+0xa4>)
    cb06:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    cb0a:	b18a      	cbz	r2, cb30 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cb0c:	2200      	movs	r2, #0
    cb0e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    cb12:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    cb16:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    cb1a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    cb1e:	f002 0203 	and.w	r2, r2, #3
    cb22:	2a01      	cmp	r2, #1
    cb24:	f04f 0102 	mov.w	r1, #2
    cb28:	d126      	bne.n	cb78 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
    cb2a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cb2e:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    cb30:	4b15      	ldr	r3, [pc, #84]	; (cb88 <nrfx_power_clock_irq_handler+0xa4>)
    cb32:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    cb36:	b162      	cbz	r2, cb52 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cb38:	2200      	movs	r2, #0
    cb3a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    cb3e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    cb42:	f44f 7280 	mov.w	r2, #256	; 0x100
    cb46:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    cb4a:	4b10      	ldr	r3, [pc, #64]	; (cb8c <nrfx_power_clock_irq_handler+0xa8>)
    cb4c:	2004      	movs	r0, #4
    cb4e:	681b      	ldr	r3, [r3, #0]
    cb50:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    cb52:	4b0d      	ldr	r3, [pc, #52]	; (cb88 <nrfx_power_clock_irq_handler+0xa4>)
    cb54:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    cb58:	b1aa      	cbz	r2, cb86 <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cb5a:	2200      	movs	r2, #0
    cb5c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    cb60:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    cb64:	f44f 7200 	mov.w	r2, #512	; 0x200
    cb68:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    cb6c:	4b07      	ldr	r3, [pc, #28]	; (cb8c <nrfx_power_clock_irq_handler+0xa8>)
    cb6e:	2005      	movs	r0, #5
    }
#endif
}
    cb70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    cb74:	681b      	ldr	r3, [r3, #0]
    cb76:	4718      	bx	r3
    cb78:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    cb7c:	4b03      	ldr	r3, [pc, #12]	; (cb8c <nrfx_power_clock_irq_handler+0xa8>)
    cb7e:	2001      	movs	r0, #1
    cb80:	681b      	ldr	r3, [r3, #0]
    cb82:	4798      	blx	r3
    cb84:	e7d4      	b.n	cb30 <nrfx_power_clock_irq_handler+0x4c>
}
    cb86:	bd10      	pop	{r4, pc}
    cb88:	40005000 	.word	0x40005000
    cb8c:	2000896c 	.word	0x2000896c

0000cb90 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    cb90:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    cb92:	4801      	ldr	r0, [pc, #4]	; (cb98 <nrfx_dppi_channel_alloc+0x8>)
    cb94:	f7ff be30 	b.w	c7f8 <nrfx_flag32_alloc>
    cb98:	200080a8 	.word	0x200080a8

0000cb9c <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
    cb9c:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
    cb9e:	4a04      	ldr	r2, [pc, #16]	; (cbb0 <nrfx_dppi_channel_free+0x14>)
    cba0:	4083      	lsls	r3, r0
{
    cba2:	4601      	mov	r1, r0
    cba4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
    cba8:	4802      	ldr	r0, [pc, #8]	; (cbb4 <nrfx_dppi_channel_free+0x18>)
    cbaa:	f7ff be41 	b.w	c830 <nrfx_flag32_free>
    cbae:	bf00      	nop
    cbb0:	40017000 	.word	0x40017000
    cbb4:	200080a8 	.word	0x200080a8

0000cbb8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    cbb8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    cbba:	f003 021f 	and.w	r2, r3, #31
    cbbe:	6002      	str	r2, [r0, #0]
}
    cbc0:	4a03      	ldr	r2, [pc, #12]	; (cbd0 <nrf_gpio_pin_port_decode+0x18>)
    cbc2:	4804      	ldr	r0, [pc, #16]	; (cbd4 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    cbc4:	095b      	lsrs	r3, r3, #5
}
    cbc6:	2b01      	cmp	r3, #1
    cbc8:	bf18      	it	ne
    cbca:	4610      	movne	r0, r2
    cbcc:	4770      	bx	lr
    cbce:	bf00      	nop
    cbd0:	40842500 	.word	0x40842500
    cbd4:	40842800 	.word	0x40842800

0000cbd8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    cbd8:	4b03      	ldr	r3, [pc, #12]	; (cbe8 <pin_in_use_by_te+0x10>)
    cbda:	3008      	adds	r0, #8
    cbdc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    cbe0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    cbe4:	4770      	bx	lr
    cbe6:	bf00      	nop
    cbe8:	200080ac 	.word	0x200080ac

0000cbec <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    cbec:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    cbee:	4c0d      	ldr	r4, [pc, #52]	; (cc24 <call_handler+0x38>)
    cbf0:	f100 0308 	add.w	r3, r0, #8
    cbf4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    cbf8:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    cbfa:	05da      	lsls	r2, r3, #23
{
    cbfc:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    cbfe:	d507      	bpl.n	cc10 <call_handler+0x24>
    cc00:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    cc04:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    cc08:	6852      	ldr	r2, [r2, #4]
    cc0a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    cc0e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    cc10:	68a3      	ldr	r3, [r4, #8]
    cc12:	b12b      	cbz	r3, cc20 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    cc14:	4631      	mov	r1, r6
    cc16:	4628      	mov	r0, r5
    cc18:	68e2      	ldr	r2, [r4, #12]
    }
}
    cc1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    cc1e:	4718      	bx	r3
}
    cc20:	bd70      	pop	{r4, r5, r6, pc}
    cc22:	bf00      	nop
    cc24:	200080ac 	.word	0x200080ac

0000cc28 <release_handler>:
{
    cc28:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    cc2a:	4a12      	ldr	r2, [pc, #72]	; (cc74 <release_handler+0x4c>)
    cc2c:	3008      	adds	r0, #8
    cc2e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    cc32:	05d9      	lsls	r1, r3, #23
    cc34:	d51b      	bpl.n	cc6e <release_handler+0x46>
    cc36:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    cc3a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    cc3e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    cc42:	2000      	movs	r0, #0
    cc44:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    cc48:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    cc4c:	f413 7f80 	tst.w	r3, #256	; 0x100
    cc50:	d003      	beq.n	cc5a <release_handler+0x32>
    cc52:	f3c3 2343 	ubfx	r3, r3, #9, #4
    cc56:	4299      	cmp	r1, r3
    cc58:	d009      	beq.n	cc6e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    cc5a:	3001      	adds	r0, #1
    cc5c:	2830      	cmp	r0, #48	; 0x30
    cc5e:	d1f3      	bne.n	cc48 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    cc60:	2300      	movs	r3, #0
    cc62:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    cc66:	4804      	ldr	r0, [pc, #16]	; (cc78 <release_handler+0x50>)
}
    cc68:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    cc6a:	f7ff bde1 	b.w	c830 <nrfx_flag32_free>
}
    cc6e:	bc10      	pop	{r4}
    cc70:	4770      	bx	lr
    cc72:	bf00      	nop
    cc74:	200080ac 	.word	0x200080ac
    cc78:	20008120 	.word	0x20008120

0000cc7c <pin_handler_trigger_uninit>:
{
    cc7c:	b538      	push	{r3, r4, r5, lr}
    cc7e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    cc80:	f7ff ffaa 	bl	cbd8 <pin_in_use_by_te>
    cc84:	4c0b      	ldr	r4, [pc, #44]	; (ccb4 <pin_handler_trigger_uninit+0x38>)
    cc86:	f102 0508 	add.w	r5, r2, #8
    cc8a:	b160      	cbz	r0, cca6 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    cc8c:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    cc8e:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    cc92:	0b5b      	lsrs	r3, r3, #13
    cc94:	009b      	lsls	r3, r3, #2
    cc96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    cc9a:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    cc9e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    cca2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    cca6:	4610      	mov	r0, r2
    cca8:	f7ff ffbe 	bl	cc28 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    ccac:	2300      	movs	r3, #0
    ccae:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    ccb2:	bd38      	pop	{r3, r4, r5, pc}
    ccb4:	200080ac 	.word	0x200080ac

0000ccb8 <nrfx_gpiote_input_configure>:
{
    ccb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    ccbc:	4604      	mov	r4, r0
    ccbe:	4690      	mov	r8, r2
    ccc0:	461d      	mov	r5, r3
    if (p_input_config)
    ccc2:	b301      	cbz	r1, cd06 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    ccc4:	4e4f      	ldr	r6, [pc, #316]	; (ce04 <nrfx_gpiote_input_configure+0x14c>)
    ccc6:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    ccca:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    ccce:	079b      	lsls	r3, r3, #30
    ccd0:	d502      	bpl.n	ccd8 <nrfx_gpiote_input_configure+0x20>
    ccd2:	f7ff ff81 	bl	cbd8 <pin_in_use_by_te>
    ccd6:	bb28      	cbnz	r0, cd24 <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    ccd8:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    ccda:	4620      	mov	r0, r4
    ccdc:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    cce0:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    cce4:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    cce8:	f10d 020f 	add.w	r2, sp, #15
    ccec:	460b      	mov	r3, r1
    ccee:	f10d 010e 	add.w	r1, sp, #14
    ccf2:	f002 fda0 	bl	f836 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    ccf6:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    ccfa:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    ccfe:	f043 0301 	orr.w	r3, r3, #1
    cd02:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
    cd06:	f1b8 0f00 	cmp.w	r8, #0
    cd0a:	d02d      	beq.n	cd68 <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    cd0c:	4e3d      	ldr	r6, [pc, #244]	; (ce04 <nrfx_gpiote_input_configure+0x14c>)
    cd0e:	f104 0708 	add.w	r7, r4, #8
    cd12:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    cd16:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
    cd1a:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    cd1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
    cd20:	d502      	bpl.n	cd28 <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
    cd22:	b1cb      	cbz	r3, cd58 <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
    cd24:	4838      	ldr	r0, [pc, #224]	; (ce08 <nrfx_gpiote_input_configure+0x150>)
    cd26:	e021      	b.n	cd6c <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    cd28:	f021 0120 	bic.w	r1, r1, #32
    cd2c:	04c9      	lsls	r1, r1, #19
    cd2e:	0cc9      	lsrs	r1, r1, #19
    cd30:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    cd34:	b183      	cbz	r3, cd58 <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
    cd36:	2803      	cmp	r0, #3
    cd38:	d8f4      	bhi.n	cd24 <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
    cd3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    cd3e:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    cd42:	4662      	mov	r2, ip
    cd44:	0092      	lsls	r2, r2, #2
    cd46:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    cd4a:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
    cd4e:	b980      	cbnz	r0, cd72 <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
    cd50:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    cd54:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    cd58:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    cd5c:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    cd60:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    cd64:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    cd68:	bb1d      	cbnz	r5, cdb2 <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
    cd6a:	4828      	ldr	r0, [pc, #160]	; (ce0c <nrfx_gpiote_input_configure+0x154>)
}
    cd6c:	b004      	add	sp, #16
    cd6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    cd72:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    cd76:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    cd7a:	f023 0303 	bic.w	r3, r3, #3
    cd7e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    cd82:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    cd86:	f041 0120 	orr.w	r1, r1, #32
    cd8a:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
    cd8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    cd92:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    cd96:	0223      	lsls	r3, r4, #8
    cd98:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    cd9c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    cda0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    cda4:	ea43 030e 	orr.w	r3, r3, lr
    cda8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    cdac:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    cdb0:	e7d2      	b.n	cd58 <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
    cdb2:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    cdb4:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    cdb8:	f7ff ff36 	bl	cc28 <release_handler>
    if (!handler)
    cdbc:	2e00      	cmp	r6, #0
    cdbe:	d0d4      	beq.n	cd6a <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    cdc0:	4d10      	ldr	r5, [pc, #64]	; (ce04 <nrfx_gpiote_input_configure+0x14c>)
    cdc2:	e9d5 2300 	ldrd	r2, r3, [r5]
    cdc6:	4296      	cmp	r6, r2
    cdc8:	d101      	bne.n	cdce <nrfx_gpiote_input_configure+0x116>
    cdca:	429f      	cmp	r7, r3
    cdcc:	d018      	beq.n	ce00 <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    cdce:	4810      	ldr	r0, [pc, #64]	; (ce10 <nrfx_gpiote_input_configure+0x158>)
    cdd0:	f10d 010f 	add.w	r1, sp, #15
    cdd4:	f7ff fd10 	bl	c7f8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    cdd8:	4b0c      	ldr	r3, [pc, #48]	; (ce0c <nrfx_gpiote_input_configure+0x154>)
    cdda:	4298      	cmp	r0, r3
    cddc:	d1c6      	bne.n	cd6c <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
    cdde:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    cde2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    cde6:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    cde8:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    cdea:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    cdee:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    cdf2:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    cdf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    cdfa:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    cdfe:	e7b4      	b.n	cd6a <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    ce00:	2200      	movs	r2, #0
    ce02:	e7ee      	b.n	cde2 <nrfx_gpiote_input_configure+0x12a>
    ce04:	200080ac 	.word	0x200080ac
    ce08:	0bad0004 	.word	0x0bad0004
    ce0c:	0bad0000 	.word	0x0bad0000
    ce10:	20008120 	.word	0x20008120

0000ce14 <nrfx_gpiote_output_configure>:
{
    ce14:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce16:	4604      	mov	r4, r0
    ce18:	4615      	mov	r5, r2
    ce1a:	b085      	sub	sp, #20
    if (p_config)
    ce1c:	b319      	cbz	r1, ce66 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    ce1e:	4e34      	ldr	r6, [pc, #208]	; (cef0 <nrfx_gpiote_output_configure+0xdc>)
    ce20:	f100 0708 	add.w	r7, r0, #8
    ce24:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    ce28:	0793      	lsls	r3, r2, #30
    ce2a:	d403      	bmi.n	ce34 <nrfx_gpiote_output_configure+0x20>
    ce2c:	f7ff fed4 	bl	cbd8 <pin_in_use_by_te>
    ce30:	2800      	cmp	r0, #0
    ce32:	d15a      	bne.n	ceea <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    ce34:	f012 0f1c 	tst.w	r2, #28
    ce38:	d002      	beq.n	ce40 <nrfx_gpiote_output_configure+0x2c>
    ce3a:	784b      	ldrb	r3, [r1, #1]
    ce3c:	2b01      	cmp	r3, #1
    ce3e:	d054      	beq.n	ceea <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    ce40:	2301      	movs	r3, #1
    ce42:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    ce46:	2300      	movs	r3, #0
    ce48:	1c4a      	adds	r2, r1, #1
    ce4a:	e9cd 1300 	strd	r1, r3, [sp]
    ce4e:	4620      	mov	r0, r4
    ce50:	1c8b      	adds	r3, r1, #2
    ce52:	f10d 010f 	add.w	r1, sp, #15
    ce56:	f002 fcee 	bl	f836 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    ce5a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    ce5e:	f043 0303 	orr.w	r3, r3, #3
    ce62:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    ce66:	b915      	cbnz	r5, ce6e <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    ce68:	4822      	ldr	r0, [pc, #136]	; (cef4 <nrfx_gpiote_output_configure+0xe0>)
}
    ce6a:	b005      	add	sp, #20
    ce6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    ce6e:	4e20      	ldr	r6, [pc, #128]	; (cef0 <nrfx_gpiote_output_configure+0xdc>)
    ce70:	f104 0708 	add.w	r7, r4, #8
    ce74:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    ce78:	0783      	lsls	r3, r0, #30
    ce7a:	d536      	bpl.n	ceea <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
    ce7c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    ce80:	2300      	movs	r3, #0
    ce82:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    ce84:	f020 0020 	bic.w	r0, r0, #32
    ce88:	0089      	lsls	r1, r1, #2
    ce8a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    ce8e:	04c0      	lsls	r0, r0, #19
    ce90:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
    ce94:	0cc0      	lsrs	r0, r0, #19
    ce96:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    ce9a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    ce9e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    cea2:	786a      	ldrb	r2, [r5, #1]
    cea4:	2a00      	cmp	r2, #0
    cea6:	d0df      	beq.n	ce68 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    cea8:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    ceac:	78ad      	ldrb	r5, [r5, #2]
    ceae:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    ceb2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    ceb6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ceba:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    cebe:	0223      	lsls	r3, r4, #8
    cec0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    cec4:	0412      	lsls	r2, r2, #16
    cec6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ceca:	ea43 030e 	orr.w	r3, r3, lr
    cece:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    ced0:	052a      	lsls	r2, r5, #20
    ced2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    ced6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ceda:	4313      	orrs	r3, r2
    cedc:	f040 0020 	orr.w	r0, r0, #32
    cee0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    cee4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    cee8:	e7be      	b.n	ce68 <nrfx_gpiote_output_configure+0x54>
{
    ceea:	4803      	ldr	r0, [pc, #12]	; (cef8 <nrfx_gpiote_output_configure+0xe4>)
    ceec:	e7bd      	b.n	ce6a <nrfx_gpiote_output_configure+0x56>
    ceee:	bf00      	nop
    cef0:	200080ac 	.word	0x200080ac
    cef4:	0bad0000 	.word	0x0bad0000
    cef8:	0bad0004 	.word	0x0bad0004

0000cefc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    cefc:	4b01      	ldr	r3, [pc, #4]	; (cf04 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    cefe:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    cf02:	4770      	bx	lr
    cf04:	200080ac 	.word	0x200080ac

0000cf08 <nrfx_gpiote_channel_get>:
{
    cf08:	b508      	push	{r3, lr}
    cf0a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    cf0c:	f7ff fe64 	bl	cbd8 <pin_in_use_by_te>
    cf10:	b138      	cbz	r0, cf22 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    cf12:	4b05      	ldr	r3, [pc, #20]	; (cf28 <nrfx_gpiote_channel_get+0x20>)
    cf14:	3208      	adds	r2, #8
    cf16:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    cf1a:	4804      	ldr	r0, [pc, #16]	; (cf2c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    cf1c:	0b5b      	lsrs	r3, r3, #13
    cf1e:	700b      	strb	r3, [r1, #0]
}
    cf20:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    cf22:	4803      	ldr	r0, [pc, #12]	; (cf30 <nrfx_gpiote_channel_get+0x28>)
    cf24:	e7fc      	b.n	cf20 <nrfx_gpiote_channel_get+0x18>
    cf26:	bf00      	nop
    cf28:	200080ac 	.word	0x200080ac
    cf2c:	0bad0000 	.word	0x0bad0000
    cf30:	0bad0004 	.word	0x0bad0004

0000cf34 <nrfx_gpiote_init>:
{
    cf34:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    cf36:	4c0f      	ldr	r4, [pc, #60]	; (cf74 <nrfx_gpiote_init+0x40>)
    cf38:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    cf3c:	b9bd      	cbnz	r5, cf6e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    cf3e:	2260      	movs	r2, #96	; 0x60
    cf40:	4629      	mov	r1, r5
    cf42:	f104 0010 	add.w	r0, r4, #16
    cf46:	f002 f9eb 	bl	f320 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    cf4a:	202f      	movs	r0, #47	; 0x2f
    cf4c:	f7fd f944 	bl	a1d8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    cf50:	4b09      	ldr	r3, [pc, #36]	; (cf78 <nrfx_gpiote_init+0x44>)
    return err_code;
    cf52:	480a      	ldr	r0, [pc, #40]	; (cf7c <nrfx_gpiote_init+0x48>)
    cf54:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    cf58:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    cf5c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    cf60:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    cf64:	2301      	movs	r3, #1
    cf66:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    cf6a:	6763      	str	r3, [r4, #116]	; 0x74
}
    cf6c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    cf6e:	4804      	ldr	r0, [pc, #16]	; (cf80 <nrfx_gpiote_init+0x4c>)
    cf70:	e7fc      	b.n	cf6c <nrfx_gpiote_init+0x38>
    cf72:	bf00      	nop
    cf74:	200080ac 	.word	0x200080ac
    cf78:	4002f000 	.word	0x4002f000
    cf7c:	0bad0000 	.word	0x0bad0000
    cf80:	0bad0005 	.word	0x0bad0005

0000cf84 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    cf84:	4b03      	ldr	r3, [pc, #12]	; (cf94 <nrfx_gpiote_is_init+0x10>)
    cf86:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    cf8a:	3800      	subs	r0, #0
    cf8c:	bf18      	it	ne
    cf8e:	2001      	movne	r0, #1
    cf90:	4770      	bx	lr
    cf92:	bf00      	nop
    cf94:	200080ac 	.word	0x200080ac

0000cf98 <nrfx_gpiote_channel_free>:
{
    cf98:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    cf9a:	4801      	ldr	r0, [pc, #4]	; (cfa0 <nrfx_gpiote_channel_free+0x8>)
    cf9c:	f7ff bc48 	b.w	c830 <nrfx_flag32_free>
    cfa0:	2000811c 	.word	0x2000811c

0000cfa4 <nrfx_gpiote_channel_alloc>:
{
    cfa4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    cfa6:	4801      	ldr	r0, [pc, #4]	; (cfac <nrfx_gpiote_channel_alloc+0x8>)
    cfa8:	f7ff bc26 	b.w	c7f8 <nrfx_flag32_alloc>
    cfac:	2000811c 	.word	0x2000811c

0000cfb0 <nrfx_gpiote_trigger_enable>:
{
    cfb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    cfb2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    cfb4:	f7ff fe10 	bl	cbd8 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    cfb8:	4b1d      	ldr	r3, [pc, #116]	; (d030 <nrfx_gpiote_trigger_enable+0x80>)
    cfba:	f104 0208 	add.w	r2, r4, #8
    cfbe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    cfc2:	b1d0      	cbz	r0, cffa <nrfx_gpiote_trigger_enable+0x4a>
    cfc4:	f013 0502 	ands.w	r5, r3, #2
    cfc8:	d117      	bne.n	cffa <nrfx_gpiote_trigger_enable+0x4a>
    return ((uint32_t)p_reg + event);
    cfca:	481a      	ldr	r0, [pc, #104]	; (d034 <nrfx_gpiote_trigger_enable+0x84>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    cfcc:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    cfce:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    cfd0:	5085      	str	r5, [r0, r2]
    cfd2:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    cfd4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    cfd8:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
    cfdc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    cfe0:	f040 0001 	orr.w	r0, r0, #1
    cfe4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    cfe8:	b129      	cbz	r1, cff6 <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    cfea:	2201      	movs	r2, #1
    cfec:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    cff0:	4a11      	ldr	r2, [pc, #68]	; (d038 <nrfx_gpiote_trigger_enable+0x88>)
    cff2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    cff6:	b003      	add	sp, #12
    cff8:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    cffa:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    cffe:	2b04      	cmp	r3, #4
    d000:	d011      	beq.n	d026 <nrfx_gpiote_trigger_enable+0x76>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    d002:	2b05      	cmp	r3, #5
    d004:	d011      	beq.n	d02a <nrfx_gpiote_trigger_enable+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d006:	a801      	add	r0, sp, #4
    d008:	9401      	str	r4, [sp, #4]
    d00a:	f7ff fdd5 	bl	cbb8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    d00e:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    d010:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    d012:	40d9      	lsrs	r1, r3
    d014:	f001 0101 	and.w	r1, r1, #1
    d018:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    d01a:	4620      	mov	r0, r4
}
    d01c:	b003      	add	sp, #12
    d01e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    d022:	f002 bc51 	b.w	f8c8 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    d026:	2103      	movs	r1, #3
    d028:	e7f7      	b.n	d01a <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    d02a:	2102      	movs	r1, #2
    d02c:	e7f5      	b.n	d01a <nrfx_gpiote_trigger_enable+0x6a>
    d02e:	bf00      	nop
    d030:	200080ac 	.word	0x200080ac
    d034:	4002f100 	.word	0x4002f100
    d038:	4002f000 	.word	0x4002f000

0000d03c <nrfx_gpiote_trigger_disable>:
{
    d03c:	b508      	push	{r3, lr}
    d03e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d040:	f7ff fdca 	bl	cbd8 <pin_in_use_by_te>
    d044:	b1c0      	cbz	r0, d078 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d046:	4b0f      	ldr	r3, [pc, #60]	; (d084 <nrfx_gpiote_trigger_disable+0x48>)
    d048:	f102 0108 	add.w	r1, r2, #8
    d04c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d050:	0799      	lsls	r1, r3, #30
    d052:	d411      	bmi.n	d078 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    d054:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d056:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    d058:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    d05a:	490b      	ldr	r1, [pc, #44]	; (d088 <nrfx_gpiote_trigger_disable+0x4c>)
    d05c:	009b      	lsls	r3, r3, #2
    d05e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d062:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    d066:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    d06a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    d06e:	f022 0203 	bic.w	r2, r2, #3
    d072:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    d076:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    d078:	2100      	movs	r1, #0
}
    d07a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    d07e:	4610      	mov	r0, r2
    d080:	f002 bc22 	b.w	f8c8 <nrf_gpio_cfg_sense_set>
    d084:	200080ac 	.word	0x200080ac
    d088:	4002f000 	.word	0x4002f000

0000d08c <nrfx_gpiote_pin_uninit>:
{
    d08c:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    d08e:	4b10      	ldr	r3, [pc, #64]	; (d0d0 <nrfx_gpiote_pin_uninit+0x44>)
    d090:	f100 0208 	add.w	r2, r0, #8
    d094:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    d098:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    d09a:	07db      	lsls	r3, r3, #31
    d09c:	d516      	bpl.n	d0cc <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
    d09e:	f7ff ffcd 	bl	d03c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    d0a2:	4620      	mov	r0, r4
    d0a4:	f7ff fdea 	bl	cc7c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d0a8:	a801      	add	r0, sp, #4
    d0aa:	9401      	str	r4, [sp, #4]
    d0ac:	f7ff fd84 	bl	cbb8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    d0b0:	9b01      	ldr	r3, [sp, #4]
    d0b2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    d0b6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    d0ba:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    d0be:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    d0c2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
    d0c6:	4803      	ldr	r0, [pc, #12]	; (d0d4 <nrfx_gpiote_pin_uninit+0x48>)
}
    d0c8:	b002      	add	sp, #8
    d0ca:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    d0cc:	4802      	ldr	r0, [pc, #8]	; (d0d8 <nrfx_gpiote_pin_uninit+0x4c>)
    d0ce:	e7fb      	b.n	d0c8 <nrfx_gpiote_pin_uninit+0x3c>
    d0d0:	200080ac 	.word	0x200080ac
    d0d4:	0bad0000 	.word	0x0bad0000
    d0d8:	0bad0004 	.word	0x0bad0004

0000d0dc <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    d0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    d0e0:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    d0e2:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d0e4:	4634      	mov	r4, r6
{
    d0e6:	4b63      	ldr	r3, [pc, #396]	; (d274 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    d0e8:	4863      	ldr	r0, [pc, #396]	; (d278 <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    d0ea:	4964      	ldr	r1, [pc, #400]	; (d27c <nrfx_gpiote_irq_handler+0x1a0>)
{
    d0ec:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d0ee:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    d0f0:	b135      	cbz	r5, d100 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    d0f2:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    d0f6:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d0f8:	bf1e      	ittt	ne
    d0fa:	601c      	strne	r4, [r3, #0]
    d0fc:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    d0fe:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    d100:	3304      	adds	r3, #4
    d102:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    d104:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    d108:	d1f1      	bne.n	d0ee <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d10a:	f8df a16c 	ldr.w	sl, [pc, #364]	; d278 <nrfx_gpiote_irq_handler+0x19c>
    d10e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    d112:	2b00      	cmp	r3, #0
    d114:	f000 8091 	beq.w	d23a <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    d118:	f8df 8164 	ldr.w	r8, [pc, #356]	; d280 <nrfx_gpiote_irq_handler+0x1a4>
    d11c:	f8d8 3020 	ldr.w	r3, [r8, #32]
    d120:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    d122:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    d126:	4b57      	ldr	r3, [pc, #348]	; (d284 <nrfx_gpiote_irq_handler+0x1a8>)
    d128:	6a1a      	ldr	r2, [r3, #32]
    d12a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    d12c:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    d12e:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
    d132:	f10d 0b10 	add.w	fp, sp, #16
    d136:	ea4f 1349 	mov.w	r3, r9, lsl #5
    d13a:	9300      	str	r3, [sp, #0]
    d13c:	e048      	b.n	d1d0 <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
    d13e:	fa94 f4a4 	rbit	r4, r4
    d142:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    d146:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d148:	4a4f      	ldr	r2, [pc, #316]	; (d288 <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
    d14a:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d14c:	f104 0308 	add.w	r3, r4, #8
    d150:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    d154:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    d156:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    d158:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    d15c:	fa03 f202 	lsl.w	r2, r3, r2
    d160:	f81b 3000 	ldrb.w	r3, [fp, r0]
    d164:	9403      	str	r4, [sp, #12]
    d166:	ea23 0302 	bic.w	r3, r3, r2
    d16a:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d16e:	a803      	add	r0, sp, #12
    d170:	f7ff fd22 	bl	cbb8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    d174:	9b03      	ldr	r3, [sp, #12]
    d176:	08b9      	lsrs	r1, r7, #2
    d178:	3380      	adds	r3, #128	; 0x80
    d17a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    d17e:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    d182:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d184:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    d186:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    d18a:	d52b      	bpl.n	d1e4 <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
    d18c:	4620      	mov	r0, r4
    d18e:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    d190:	b2dd      	uxtb	r5, r3
    d192:	f7ff fd2b 	bl	cbec <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d196:	a803      	add	r0, sp, #12
    d198:	9403      	str	r4, [sp, #12]
    d19a:	f7ff fd0d 	bl	cbb8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    d19e:	9b03      	ldr	r3, [sp, #12]
    d1a0:	3380      	adds	r3, #128	; 0x80
    d1a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    d1a6:	f3c3 4301 	ubfx	r3, r3, #16, #2
    d1aa:	429d      	cmp	r5, r3
    d1ac:	d107      	bne.n	d1be <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    d1ae:	2100      	movs	r1, #0
    d1b0:	4620      	mov	r0, r4
    d1b2:	f002 fb89 	bl	f8c8 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    d1b6:	4629      	mov	r1, r5
    d1b8:	4620      	mov	r0, r4
    d1ba:	f002 fb85 	bl	f8c8 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d1be:	a803      	add	r0, sp, #12
    d1c0:	9403      	str	r4, [sp, #12]
    d1c2:	f7ff fcf9 	bl	cbb8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    d1c6:	2201      	movs	r2, #1
    d1c8:	9b03      	ldr	r3, [sp, #12]
    d1ca:	fa02 f303 	lsl.w	r3, r2, r3
    d1ce:	6203      	str	r3, [r0, #32]
            while (latch[i])
    d1d0:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
    d1d4:	2c00      	cmp	r4, #0
    d1d6:	d1b2      	bne.n	d13e <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    d1d8:	f1b9 0f00 	cmp.w	r9, #0
    d1dc:	d11d      	bne.n	d21a <nrfx_gpiote_irq_handler+0x13e>
    d1de:	f04f 0901 	mov.w	r9, #1
    d1e2:	e7a8      	b.n	d136 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    d1e4:	2b02      	cmp	r3, #2
    d1e6:	d10c      	bne.n	d202 <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    d1e8:	2103      	movs	r1, #3
    d1ea:	4620      	mov	r0, r4
    d1ec:	f002 fb6c 	bl	f8c8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    d1f0:	f005 0305 	and.w	r3, r5, #5
    d1f4:	2b01      	cmp	r3, #1
    d1f6:	d1e2      	bne.n	d1be <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
    d1f8:	4639      	mov	r1, r7
    d1fa:	4620      	mov	r0, r4
    d1fc:	f7ff fcf6 	bl	cbec <call_handler>
    d200:	e7dd      	b.n	d1be <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    d202:	2102      	movs	r1, #2
    d204:	4620      	mov	r0, r4
    d206:	9301      	str	r3, [sp, #4]
    d208:	f002 fb5e 	bl	f8c8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    d20c:	2d03      	cmp	r5, #3
    d20e:	d0f3      	beq.n	d1f8 <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    d210:	9b01      	ldr	r3, [sp, #4]
    d212:	2b03      	cmp	r3, #3
    d214:	d1d3      	bne.n	d1be <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    d216:	2d02      	cmp	r5, #2
    d218:	e7ed      	b.n	d1f6 <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d21a:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
    d21e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    d222:	f8d8 3020 	ldr.w	r3, [r8, #32]
    d226:	4917      	ldr	r1, [pc, #92]	; (d284 <nrfx_gpiote_irq_handler+0x1a8>)
    d228:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    d22a:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    d22e:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
    d230:	4313      	orrs	r3, r2
    d232:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    d234:	620a      	str	r2, [r1, #32]
    d236:	f47f af7a 	bne.w	d12e <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
    d23a:	2401      	movs	r4, #1
    while (mask)
    d23c:	b916      	cbnz	r6, d244 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    d23e:	b007      	add	sp, #28
    d240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    d244:	fa96 f3a6 	rbit	r3, r6
    d248:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    d24c:	fa04 f203 	lsl.w	r2, r4, r3
    d250:	009b      	lsls	r3, r3, #2
    d252:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d256:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    d25a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    d25e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    d262:	f3c0 2005 	ubfx	r0, r0, #8, #6
    d266:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    d26a:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    d26e:	f7ff fcbd 	bl	cbec <call_handler>
    d272:	e7e3      	b.n	d23c <nrfx_gpiote_irq_handler+0x160>
    d274:	4002f100 	.word	0x4002f100
    d278:	4002f000 	.word	0x4002f000
    d27c:	4002f120 	.word	0x4002f120
    d280:	40842500 	.word	0x40842500
    d284:	40842800 	.word	0x40842800
    d288:	200080ac 	.word	0x200080ac

0000d28c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    d28c:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    d28e:	4c08      	ldr	r4, [pc, #32]	; (d2b0 <nrfx_ipc_init+0x24>)
{
    d290:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    d292:	7923      	ldrb	r3, [r4, #4]
{
    d294:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    d296:	b943      	cbnz	r3, d2aa <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
    d298:	202a      	movs	r0, #42	; 0x2a
    d29a:	f7fc ff9d 	bl	a1d8 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    d29e:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
    d2a0:	4804      	ldr	r0, [pc, #16]	; (d2b4 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    d2a2:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
    d2a4:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
    d2a6:	60a5      	str	r5, [r4, #8]
}
    d2a8:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    d2aa:	4803      	ldr	r0, [pc, #12]	; (d2b8 <nrfx_ipc_init+0x2c>)
    d2ac:	e7fc      	b.n	d2a8 <nrfx_ipc_init+0x1c>
    d2ae:	bf00      	nop
    d2b0:	20008974 	.word	0x20008974
    d2b4:	0bad0000 	.word	0x0bad0000
    d2b8:	0bad000c 	.word	0x0bad000c

0000d2bc <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    d2bc:	2300      	movs	r3, #0
{
    d2be:	b530      	push	{r4, r5, lr}
    p_reg->SEND_CNF[index] = channels_mask;
    d2c0:	4a0d      	ldr	r2, [pc, #52]	; (d2f8 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    d2c2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    d2c6:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
    d2ca:	3301      	adds	r3, #1
    d2cc:	2b10      	cmp	r3, #16
    d2ce:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
    d2d2:	d1f6      	bne.n	d2c2 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    d2d4:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
    d2d6:	4a08      	ldr	r2, [pc, #32]	; (d2f8 <nrfx_ipc_config_load+0x3c>)
    d2d8:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    d2dc:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    d2e0:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
    d2e4:	3301      	adds	r3, #1
    d2e6:	2b10      	cmp	r3, #16
    d2e8:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    d2ec:	d1f6      	bne.n	d2dc <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    d2ee:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
    d2f2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    d2f6:	bd30      	pop	{r4, r5, pc}
    d2f8:	4002a000 	.word	0x4002a000

0000d2fc <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
    d2fc:	2301      	movs	r3, #1
    d2fe:	4a02      	ldr	r2, [pc, #8]	; (d308 <nrfx_ipc_receive_event_enable+0xc>)
    d300:	4083      	lsls	r3, r0
    d302:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    d306:	4770      	bx	lr
    d308:	4002a000 	.word	0x4002a000

0000d30c <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
    d30c:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
    d30e:	4a02      	ldr	r2, [pc, #8]	; (d318 <nrfx_ipc_receive_event_disable+0xc>)
    d310:	4083      	lsls	r3, r0
    d312:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    d316:	4770      	bx	lr
    d318:	4002a000 	.word	0x4002a000

0000d31c <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    d31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
    d31e:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d320:	2700      	movs	r7, #0
    return p_reg->INTPEND;
    d322:	4b0b      	ldr	r3, [pc, #44]	; (d350 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
    d324:	4d0b      	ldr	r5, [pc, #44]	; (d354 <nrfx_ipc_irq_handler+0x38>)
    d326:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
    d32a:	b904      	cbnz	r4, d32e <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
    d32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
    d32e:	fa94 f0a4 	rbit	r0, r4
    d332:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
    d336:	fa06 f300 	lsl.w	r3, r6, r0
    d33a:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d33e:	4b06      	ldr	r3, [pc, #24]	; (d358 <nrfx_ipc_irq_handler+0x3c>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    d340:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d342:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
    d344:	682b      	ldr	r3, [r5, #0]
    d346:	2b00      	cmp	r3, #0
    d348:	d0ef      	beq.n	d32a <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
    d34a:	68a9      	ldr	r1, [r5, #8]
    d34c:	4798      	blx	r3
    d34e:	e7ec      	b.n	d32a <nrfx_ipc_irq_handler+0xe>
    d350:	4002a000 	.word	0x4002a000
    d354:	20008974 	.word	0x20008974
    d358:	4002a100 	.word	0x4002a100

0000d35c <nrf_gpio_pin_clear>:
        case 0: return NRF_P0;
    d35c:	4a05      	ldr	r2, [pc, #20]	; (d374 <nrf_gpio_pin_clear+0x18>)
    d35e:	4b06      	ldr	r3, [pc, #24]	; (d378 <nrf_gpio_pin_clear+0x1c>)
    *p_pin = pin_number & 0x1F;
    d360:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    d364:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
    d366:	2801      	cmp	r0, #1
    d368:	bf18      	it	ne
    d36a:	4613      	movne	r3, r2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    d36c:	2201      	movs	r2, #1
    d36e:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    d370:	60da      	str	r2, [r3, #12]
}
    d372:	4770      	bx	lr
    d374:	40842500 	.word	0x40842500
    d378:	40842800 	.word	0x40842800

0000d37c <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
    d37c:	b570      	push	{r4, r5, r6, lr}
        case 0: return NRF_P0;
    d37e:	4c0d      	ldr	r4, [pc, #52]	; (d3b4 <nrf_gpio_cfg.constprop.0+0x38>)
    d380:	4e0d      	ldr	r6, [pc, #52]	; (d3b8 <nrf_gpio_cfg.constprop.0+0x3c>)
    *p_pin = pin_number & 0x1F;
    d382:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    d386:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
    d388:	2801      	cmp	r0, #1
    d38a:	bf18      	it	ne
    d38c:	4634      	movne	r4, r6
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    d38e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    d392:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    d396:	0200      	lsls	r0, r0, #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    d398:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    d39c:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
    d3a0:	4308      	orrs	r0, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    d3a2:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    d3a6:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    d3aa:	4328      	orrs	r0, r5
    reg->PIN_CNF[pin_number] = cnf;
    d3ac:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
}
    d3b0:	bd70      	pop	{r4, r5, r6, pc}
    d3b2:	bf00      	nop
    d3b4:	40842800 	.word	0x40842800
    d3b8:	40842500 	.word	0x40842500

0000d3bc <nrf_gpio_pin_set>:
        case 0: return NRF_P0;
    d3bc:	4a05      	ldr	r2, [pc, #20]	; (d3d4 <nrf_gpio_pin_set+0x18>)
    d3be:	4b06      	ldr	r3, [pc, #24]	; (d3d8 <nrf_gpio_pin_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    d3c0:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    d3c4:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
    d3c6:	2801      	cmp	r0, #1
    d3c8:	bf18      	it	ne
    d3ca:	4613      	movne	r3, r2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    d3cc:	2201      	movs	r2, #1
    d3ce:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    d3d0:	609a      	str	r2, [r3, #8]
}
    d3d2:	4770      	bx	lr
    d3d4:	40842500 	.word	0x40842500
    d3d8:	40842800 	.word	0x40842800

0000d3dc <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    d3dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    d3e0:	4d87      	ldr	r5, [pc, #540]	; (d600 <nrfx_spim_init+0x224>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    d3e2:	7907      	ldrb	r7, [r0, #4]
{
    d3e4:	460c      	mov	r4, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    d3e6:	eb05 1147 	add.w	r1, r5, r7, lsl #5
    d3ea:	7f09      	ldrb	r1, [r1, #28]
{
    d3ec:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    d3ee:	2900      	cmp	r1, #0
    d3f0:	f040 8100 	bne.w	d5f4 <nrfx_spim_init+0x218>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
    d3f4:	2f00      	cmp	r7, #0
    d3f6:	f040 80ff 	bne.w	d5f8 <nrfx_spim_init+0x21c>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    d3fa:	f8d0 9000 	ldr.w	r9, [r0]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
    d3fe:	68a0      	ldr	r0, [r4, #8]
        ((p_config->use_hw_ss) &&
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
    d400:	7be6      	ldrb	r6, [r4, #15]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
    d402:	f1b0 6f20 	cmp.w	r0, #167772160	; 0xa000000

#if NRF_SPIM_HAS_32_MHZ_FREQ && defined(NRF5340_XXAA_APPLICATION)
    // Check if dedicated SPIM pins are used, unless both GPIO configuration
    // and pin selection are to be skipped (pin numbers may be not specified
    // in such case).
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
    d406:	7ce1      	ldrb	r1, [r4, #19]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
    d408:	d027      	beq.n	d45a <nrfx_spim_init+0x7e>
    d40a:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
    d40e:	d124      	bne.n	d45a <nrfx_spim_init+0x7e>
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
    d410:	b119      	cbz	r1, d41a <nrfx_spim_init+0x3e>
    d412:	7d20      	ldrb	r0, [r4, #20]
    d414:	2800      	cmp	r0, #0
    d416:	f040 80d5 	bne.w	d5c4 <nrfx_spim_init+0x1e8>
    d41a:	487a      	ldr	r0, [pc, #488]	; (d604 <nrfx_spim_init+0x228>)
    d41c:	4581      	cmp	r9, r0
    d41e:	d11c      	bne.n	d45a <nrfx_spim_init+0x7e>
            SPIM_MISO_DEDICATED = NRF_GPIO_PIN_MAP(0, 10),
            SPIM_CSN_DEDICATED  = NRF_GPIO_PIN_MAP(0, 11),
            SPIM_DCX_DEDICATED  = NRF_GPIO_PIN_MAP(0, 12),
        };

        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
    d420:	7820      	ldrb	r0, [r4, #0]
    d422:	28ff      	cmp	r0, #255	; 0xff
    d424:	d002      	beq.n	d42c <nrfx_spim_init+0x50>
    d426:	2808      	cmp	r0, #8
    d428:	f040 80e8 	bne.w	d5fc <nrfx_spim_init+0x220>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
    d42c:	78e0      	ldrb	r0, [r4, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
    d42e:	28ff      	cmp	r0, #255	; 0xff
    d430:	d002      	beq.n	d438 <nrfx_spim_init+0x5c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
    d432:	280b      	cmp	r0, #11
    d434:	f040 80e2 	bne.w	d5fc <nrfx_spim_init+0x220>
    d438:	2eff      	cmp	r6, #255	; 0xff
    d43a:	d002      	beq.n	d442 <nrfx_spim_init+0x66>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
    d43c:	2e0c      	cmp	r6, #12
    d43e:	f040 80dd 	bne.w	d5fc <nrfx_spim_init+0x220>
#endif
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
    d442:	7860      	ldrb	r0, [r4, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
    d444:	28ff      	cmp	r0, #255	; 0xff
    d446:	d002      	beq.n	d44e <nrfx_spim_init+0x72>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
    d448:	2809      	cmp	r0, #9
    d44a:	f040 80d7 	bne.w	d5fc <nrfx_spim_init+0x220>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
    d44e:	78a0      	ldrb	r0, [r4, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
    d450:	28ff      	cmp	r0, #255	; 0xff
    d452:	d002      	beq.n	d45a <nrfx_spim_init+0x7e>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
    d454:	280a      	cmp	r0, #10
    d456:	f040 80d1 	bne.w	d5fc <nrfx_spim_init+0x220>
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    d45a:	e9c5 2300 	strd	r2, r3, [r5]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    d45e:	7fab      	ldrb	r3, [r5, #30]
    d460:	f361 0300 	bfi	r3, r1, #0, #1
    d464:	77ab      	strb	r3, [r5, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
    d466:	7922      	ldrb	r2, [r4, #4]
    d468:	b2db      	uxtb	r3, r3
    d46a:	f362 0341 	bfi	r3, r2, #1, #1
    d46e:	77ab      	strb	r3, [r5, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
    d470:	7c62      	ldrb	r2, [r4, #17]
    d472:	b2db      	uxtb	r3, r3
    d474:	f362 0382 	bfi	r3, r2, #2, #1
    d478:	77ab      	strb	r3, [r5, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
    d47a:	78e3      	ldrb	r3, [r4, #3]
    d47c:	77eb      	strb	r3, [r5, #31]
    if (!p_config->skip_gpio_cfg)
    d47e:	7ce3      	ldrb	r3, [r4, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    d480:	f8d8 6000 	ldr.w	r6, [r8]
    if (!p_config->skip_gpio_cfg)
    d484:	2b00      	cmp	r3, #0
    d486:	d142      	bne.n	d50e <nrfx_spim_init+0x132>
                    : NRF_GPIO_PIN_S0S1;
    d488:	68a3      	ldr	r3, [r4, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
    d48a:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
    d48c:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
    d490:	7b23      	ldrb	r3, [r4, #12]
    d492:	bf08      	it	eq
    d494:	2703      	moveq	r7, #3
    d496:	2b01      	cmp	r3, #1
    d498:	f200 8096 	bhi.w	d5c8 <nrfx_spim_init+0x1ec>
        nrf_gpio_pin_clear(pin_number);
    d49c:	f7ff ff5e 	bl	d35c <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
    d4a0:	2300      	movs	r3, #0
    d4a2:	9700      	str	r7, [sp, #0]
    d4a4:	7820      	ldrb	r0, [r4, #0]
    d4a6:	461a      	mov	r2, r3
    d4a8:	2101      	movs	r1, #1
    d4aa:	f7ff ff67 	bl	d37c <nrf_gpio_cfg.constprop.0>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    d4ae:	7860      	ldrb	r0, [r4, #1]
    d4b0:	28ff      	cmp	r0, #255	; 0xff
    d4b2:	d008      	beq.n	d4c6 <nrfx_spim_init+0xea>
    d4b4:	f7ff ff52 	bl	d35c <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
    d4b8:	2201      	movs	r2, #1
    d4ba:	9700      	str	r7, [sp, #0]
    d4bc:	2300      	movs	r3, #0
    d4be:	4611      	mov	r1, r2
    d4c0:	7860      	ldrb	r0, [r4, #1]
    d4c2:	f7ff ff5b 	bl	d37c <nrf_gpio_cfg.constprop.0>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    d4c6:	78a0      	ldrb	r0, [r4, #2]
    d4c8:	28ff      	cmp	r0, #255	; 0xff
    d4ca:	d005      	beq.n	d4d8 <nrfx_spim_init+0xfc>
            nrf_gpio_cfg(p_config->miso_pin,
    d4cc:	2200      	movs	r2, #0
    d4ce:	9700      	str	r7, [sp, #0]
    d4d0:	4611      	mov	r1, r2
    d4d2:	7ba3      	ldrb	r3, [r4, #14]
    d4d4:	f7ff ff52 	bl	d37c <nrf_gpio_cfg.constprop.0>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    d4d8:	78e0      	ldrb	r0, [r4, #3]
    d4da:	28ff      	cmp	r0, #255	; 0xff
    d4dc:	d00b      	beq.n	d4f6 <nrfx_spim_init+0x11a>
    if (value == 0)
    d4de:	7923      	ldrb	r3, [r4, #4]
    d4e0:	2b00      	cmp	r3, #0
    d4e2:	d074      	beq.n	d5ce <nrfx_spim_init+0x1f2>
        nrf_gpio_pin_clear(pin_number);
    d4e4:	f7ff ff3a 	bl	d35c <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
    d4e8:	2201      	movs	r2, #1
    d4ea:	9700      	str	r7, [sp, #0]
    d4ec:	2300      	movs	r3, #0
    d4ee:	4611      	mov	r1, r2
    d4f0:	78e0      	ldrb	r0, [r4, #3]
    d4f2:	f7ff ff43 	bl	d37c <nrf_gpio_cfg.constprop.0>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
    d4f6:	7be0      	ldrb	r0, [r4, #15]
    d4f8:	28ff      	cmp	r0, #255	; 0xff
    d4fa:	d008      	beq.n	d50e <nrfx_spim_init+0x132>
        nrf_gpio_pin_set(pin_number);
    d4fc:	f7ff ff5e 	bl	d3bc <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
    d500:	2201      	movs	r2, #1
    d502:	9700      	str	r7, [sp, #0]
    d504:	2300      	movs	r3, #0
    d506:	4611      	mov	r1, r2
    d508:	7be0      	ldrb	r0, [r4, #15]
    d50a:	f7ff ff37 	bl	d37c <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
    d50e:	7d23      	ldrb	r3, [r4, #20]
    d510:	bb6b      	cbnz	r3, d56e <nrfx_spim_init+0x192>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    d512:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    d514:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    d516:	2bff      	cmp	r3, #255	; 0xff
    d518:	bf18      	it	ne
    d51a:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    d51c:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    d51e:	bf08      	it	eq
    d520:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    d524:	2bff      	cmp	r3, #255	; 0xff
    d526:	bf08      	it	eq
    d528:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    d52c:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
    d530:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    d534:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
    d538:	f898 3004 	ldrb.w	r3, [r8, #4]
    d53c:	b9bb      	cbnz	r3, d56e <nrfx_spim_init+0x192>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
    d53e:	78e3      	ldrb	r3, [r4, #3]
    d540:	2bff      	cmp	r3, #255	; 0xff
    d542:	d047      	beq.n	d5d4 <nrfx_spim_init+0x1f8>
    d544:	7c62      	ldrb	r2, [r4, #17]
    d546:	2a00      	cmp	r2, #0
    d548:	d044      	beq.n	d5d4 <nrfx_spim_init+0x1f8>
                                    (p_config->ss_active_high == true
    d54a:	7921      	ldrb	r1, [r4, #4]
                nrf_spim_csn_configure(p_spim,
    d54c:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
    d54e:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
    d552:	f8c6 1568 	str.w	r1, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
    d556:	f8c6 2564 	str.w	r2, [r6, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
    d55a:	f898 3004 	ldrb.w	r3, [r8, #4]
    d55e:	b933      	cbnz	r3, d56e <nrfx_spim_init+0x192>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
    d560:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
    d562:	2bff      	cmp	r3, #255	; 0xff
    d564:	bf08      	it	eq
    d566:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
    d56a:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
    d56e:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
    d570:	f8c9 3560 	str.w	r3, [r9, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    d574:	68a3      	ldr	r3, [r4, #8]
    d576:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    d57a:	7b63      	ldrb	r3, [r4, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    d57c:	7b22      	ldrb	r2, [r4, #12]
    d57e:	3b00      	subs	r3, #0
    d580:	bf18      	it	ne
    d582:	2301      	movne	r3, #1
    switch (spi_mode)
    d584:	2a02      	cmp	r2, #2
    d586:	d02f      	beq.n	d5e8 <nrfx_spim_init+0x20c>
    d588:	2a03      	cmp	r2, #3
    d58a:	d030      	beq.n	d5ee <nrfx_spim_init+0x212>
    d58c:	2a01      	cmp	r2, #1
    d58e:	d101      	bne.n	d594 <nrfx_spim_init+0x1b8>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    d590:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    d594:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    d598:	79a3      	ldrb	r3, [r4, #6]
    d59a:	f8c9 35c0 	str.w	r3, [r9, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    d59e:	2307      	movs	r3, #7
    d5a0:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    d5a4:	682b      	ldr	r3, [r5, #0]
    d5a6:	b12b      	cbz	r3, d5b4 <nrfx_spim_init+0x1d8>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    d5a8:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    d5ac:	f340 3007 	sbfx	r0, r0, #12, #8
    d5b0:	f7fc fe12 	bl	a1d8 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    d5b4:	2300      	movs	r3, #0
    d5b6:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    d5b8:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    d5ba:	4813      	ldr	r0, [pc, #76]	; (d608 <nrfx_spim_init+0x22c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    d5bc:	772b      	strb	r3, [r5, #28]
}
    d5be:	b003      	add	sp, #12
    d5c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
    d5c4:	4601      	mov	r1, r0
    d5c6:	e748      	b.n	d45a <nrfx_spim_init+0x7e>
    d5c8:	f7ff fef8 	bl	d3bc <nrf_gpio_pin_set>
    d5cc:	e768      	b.n	d4a0 <nrfx_spim_init+0xc4>
    d5ce:	f7ff fef5 	bl	d3bc <nrf_gpio_pin_set>
    d5d2:	e789      	b.n	d4e8 <nrfx_spim_init+0x10c>
    p_reg->PSEL.CSN = pin;
    d5d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d5d8:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
    d5dc:	2300      	movs	r3, #0
    d5de:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
    d5e2:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
}
    d5e6:	e7b8      	b.n	d55a <nrfx_spim_init+0x17e>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    d5e8:	f043 0304 	orr.w	r3, r3, #4
        break;
    d5ec:	e7d2      	b.n	d594 <nrfx_spim_init+0x1b8>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    d5ee:	f043 0306 	orr.w	r3, r3, #6
        break;
    d5f2:	e7cf      	b.n	d594 <nrfx_spim_init+0x1b8>
        return err_code;
    d5f4:	4805      	ldr	r0, [pc, #20]	; (d60c <nrfx_spim_init+0x230>)
    d5f6:	e7e2      	b.n	d5be <nrfx_spim_init+0x1e2>
        return err_code;
    d5f8:	4805      	ldr	r0, [pc, #20]	; (d610 <nrfx_spim_init+0x234>)
    d5fa:	e7e0      	b.n	d5be <nrfx_spim_init+0x1e2>
            return err_code;
    d5fc:	4805      	ldr	r0, [pc, #20]	; (d614 <nrfx_spim_init+0x238>)
    d5fe:	e7de      	b.n	d5be <nrfx_spim_init+0x1e2>
    d600:	20008980 	.word	0x20008980
    d604:	4000a000 	.word	0x4000a000
    d608:	0bad0000 	.word	0x0bad0000
    d60c:	0bad0005 	.word	0x0bad0005
    d610:	0bad0003 	.word	0x0bad0003
    d614:	0bad0004 	.word	0x0bad0004

0000d618 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    d618:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    d61c:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    d61e:	4d25      	ldr	r5, [pc, #148]	; (d6b4 <nrfx_spim_uninit+0x9c>)
    d620:	015e      	lsls	r6, r3, #5
    d622:	eb05 1843 	add.w	r8, r5, r3, lsl #5
    d626:	59ab      	ldr	r3, [r5, r6]
{
    d628:	4607      	mov	r7, r0
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    d62a:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
    d62c:	b1cb      	cbz	r3, d662 <nrfx_spim_uninit+0x4a>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    d62e:	f344 3007 	sbfx	r0, r4, #12, #8
    d632:	f7fc fddf 	bl	a1f4 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    d636:	4b20      	ldr	r3, [pc, #128]	; (d6b8 <nrfx_spim_uninit+0xa0>)
    d638:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    d63c:	f898 301d 	ldrb.w	r3, [r8, #29]
    d640:	b17b      	cbz	r3, d662 <nrfx_spim_uninit+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d642:	2301      	movs	r3, #1
    d644:	f04f 0864 	mov.w	r8, #100	; 0x64
    d648:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d64a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    d64e:	b92b      	cbnz	r3, d65c <nrfx_spim_uninit+0x44>
    d650:	2001      	movs	r0, #1
    d652:	f002 f8ec 	bl	f82e <nrfx_busy_wait>
    d656:	f1b8 0801 	subs.w	r8, r8, #1
    d65a:	d1f6      	bne.n	d64a <nrfx_spim_uninit+0x32>
    p_cb->transfer_in_progress = false;
    d65c:	2200      	movs	r2, #0
    d65e:	19ab      	adds	r3, r5, r6
    d660:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    d662:	2300      	movs	r3, #0
    d664:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
    d668:	19ab      	adds	r3, r5, r6
    d66a:	7f9b      	ldrb	r3, [r3, #30]
    d66c:	07db      	lsls	r3, r3, #31
    d66e:	d41b      	bmi.n	d6a8 <nrfx_spim_uninit+0x90>
    return p_reg->PSEL.SCK;
    d670:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
    d674:	f002 f937 	bl	f8e6 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
    d678:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
    d67c:	f002 f933 	bl	f8e6 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
    d680:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
    d684:	f002 f92f 	bl	f8e6 <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
    d688:	793b      	ldrb	r3, [r7, #4]
    d68a:	b91b      	cbnz	r3, d694 <nrfx_spim_uninit+0x7c>
    return p_reg->PSELDCX;
    d68c:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
    d690:	f002 f929 	bl	f8e6 <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    d694:	19ab      	adds	r3, r5, r6
    d696:	7fd8      	ldrb	r0, [r3, #31]
    d698:	28ff      	cmp	r0, #255	; 0xff
    d69a:	d005      	beq.n	d6a8 <nrfx_spim_uninit+0x90>
    nrf_gpio_cfg(
    d69c:	2300      	movs	r3, #0
    d69e:	2201      	movs	r2, #1
    d6a0:	4619      	mov	r1, r3
    d6a2:	9300      	str	r3, [sp, #0]
    d6a4:	f7ff fe6a 	bl	d37c <nrf_gpio_cfg.constprop.0>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    d6a8:	2300      	movs	r3, #0
    d6aa:	4435      	add	r5, r6
    d6ac:	772b      	strb	r3, [r5, #28]
}
    d6ae:	b002      	add	sp, #8
    d6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d6b4:	20008980 	.word	0x20008980
    d6b8:	00080152 	.word	0x00080152

0000d6bc <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    d6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    d6c0:	4f38      	ldr	r7, [pc, #224]	; (d7a4 <nrfx_spim_xfer+0xe8>)
    d6c2:	7903      	ldrb	r3, [r0, #4]
{
    d6c4:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    d6c6:	eb07 1843 	add.w	r8, r7, r3, lsl #5
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    d6ca:	f898 201d 	ldrb.w	r2, [r8, #29]
{
    d6ce:	4681      	mov	r9, r0
    d6d0:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
    d6d2:	015e      	lsls	r6, r3, #5
    d6d4:	2a00      	cmp	r2, #0
    d6d6:	d163      	bne.n	d7a0 <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    d6d8:	59ba      	ldr	r2, [r7, r6]
    d6da:	b12a      	cbz	r2, d6e8 <nrfx_spim_xfer+0x2c>
    d6dc:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    d6e0:	bf04      	itt	eq
    d6e2:	2201      	moveq	r2, #1
    d6e4:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    d6e8:	eb07 0c06 	add.w	ip, r7, r6
    d6ec:	f10c 0c0c 	add.w	ip, ip, #12
    d6f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    d6f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
    d6f8:	2101      	movs	r1, #1
    d6fa:	4640      	mov	r0, r8
    d6fc:	f002 f8ff 	bl	f8fe <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    d700:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    d702:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    d706:	b121      	cbz	r1, d712 <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    d708:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
    d70c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    d710:	d106      	bne.n	d720 <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    d712:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    d714:	b152      	cbz	r2, d72c <nrfx_spim_xfer+0x70>
    d716:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    d71a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    d71e:	d005      	beq.n	d72c <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
    d720:	2300      	movs	r3, #0
    d722:	443e      	add	r6, r7
        return err_code;
    d724:	4820      	ldr	r0, [pc, #128]	; (d7a8 <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
    d726:	7773      	strb	r3, [r6, #29]
}
    d728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    d72c:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    d72e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    d732:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    d736:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    d73a:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    d73e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d742:	2200      	movs	r2, #0
    d744:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    d748:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    d74c:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    d750:	bf18      	it	ne
    d752:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    d754:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    d758:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    d75c:	bf18      	it	ne
    d75e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    d760:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    d764:	072a      	lsls	r2, r5, #28
    d766:	d507      	bpl.n	d778 <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
    d768:	59ba      	ldr	r2, [r7, r6]
    d76a:	b972      	cbnz	r2, d78a <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
    d76c:	2100      	movs	r1, #0
    d76e:	4640      	mov	r0, r8
    d770:	f002 f8c5 	bl	f8fe <set_ss_pin_state>
    return err_code;
    d774:	480d      	ldr	r0, [pc, #52]	; (d7ac <nrfx_spim_xfer+0xf0>)
    d776:	e7d7      	b.n	d728 <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d778:	2201      	movs	r2, #1
    d77a:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
    d77c:	59ba      	ldr	r2, [r7, r6]
    d77e:	b922      	cbnz	r2, d78a <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d780:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    d784:	2a00      	cmp	r2, #0
    d786:	d0fb      	beq.n	d780 <nrfx_spim_xfer+0xc4>
    d788:	e7f0      	b.n	d76c <nrfx_spim_xfer+0xb0>
    if (!enable)
    d78a:	f015 0f04 	tst.w	r5, #4
    d78e:	f04f 0240 	mov.w	r2, #64	; 0x40
    d792:	d002      	beq.n	d79a <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
    d794:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    d798:	e7ec      	b.n	d774 <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
    d79a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    d79e:	e7e9      	b.n	d774 <nrfx_spim_xfer+0xb8>
        return err_code;
    d7a0:	4803      	ldr	r0, [pc, #12]	; (d7b0 <nrfx_spim_xfer+0xf4>)
    d7a2:	e7c1      	b.n	d728 <nrfx_spim_xfer+0x6c>
    d7a4:	20008980 	.word	0x20008980
    d7a8:	0bad000a 	.word	0x0bad000a
    d7ac:	0bad0000 	.word	0x0bad0000
    d7b0:	0bad000b 	.word	0x0bad000b

0000d7b4 <nrfx_spim_4_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
    d7b4:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d7b6:	4b0c      	ldr	r3, [pc, #48]	; (d7e8 <nrfx_spim_4_irq_handler+0x34>)
    d7b8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    d7bc:	b192      	cbz	r2, d7e4 <nrfx_spim_4_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d7be:	2500      	movs	r5, #0
    set_ss_pin_state(p_cb, false);
    d7c0:	4c0a      	ldr	r4, [pc, #40]	; (d7ec <nrfx_spim_4_irq_handler+0x38>)
    d7c2:	4629      	mov	r1, r5
    d7c4:	4620      	mov	r0, r4
    d7c6:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
    d7ca:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d7ce:	f002 f896 	bl	f8fe <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    d7d2:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
    d7d6:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    d7d8:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    d7da:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
}
    d7de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    d7e2:	4718      	bx	r3
}
    d7e4:	bd70      	pop	{r4, r5, r6, pc}
    d7e6:	bf00      	nop
    d7e8:	4000a000 	.word	0x4000a000
    d7ec:	20008980 	.word	0x20008980

0000d7f0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    d7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d7f4:	b086      	sub	sp, #24
    d7f6:	4605      	mov	r5, r0
    d7f8:	460e      	mov	r6, r1
    d7fa:	af00      	add	r7, sp, #0
	__asm__ volatile(
    d7fc:	f04f 0320 	mov.w	r3, #32
    d800:	f3ef 8811 	mrs	r8, BASEPRI
    d804:	f383 8812 	msr	BASEPRI_MAX, r3
    d808:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    d80c:	f000 fe28 	bl	e460 <z_impl_z_current_get>
    d810:	2d04      	cmp	r5, #4
    d812:	bf98      	it	ls
    d814:	4b2c      	ldrls	r3, [pc, #176]	; (d8c8 <z_fatal_error+0xd8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    d816:	46e9      	mov	r9, sp
    d818:	b08a      	sub	sp, #40	; 0x28
    d81a:	4604      	mov	r4, r0
    d81c:	466a      	mov	r2, sp
    d81e:	bf94      	ite	ls
    d820:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
    d824:	4b29      	ldrhi	r3, [pc, #164]	; (d8cc <z_fatal_error+0xdc>)
    d826:	61d3      	str	r3, [r2, #28]
    d828:	f240 3301 	movw	r3, #769	; 0x301
    d82c:	f04f 0a00 	mov.w	sl, #0
    d830:	8493      	strh	r3, [r2, #36]	; 0x24
    d832:	4927      	ldr	r1, [pc, #156]	; (d8d0 <z_fatal_error+0xe0>)
    d834:	4b27      	ldr	r3, [pc, #156]	; (d8d4 <z_fatal_error+0xe4>)
    d836:	e9c2 1505 	strd	r1, r5, [r2, #20]
    d83a:	f8c2 a020 	str.w	sl, [r2, #32]
    d83e:	f842 3f10 	str.w	r3, [r2, #16]!
    d842:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    d846:	4653      	mov	r3, sl
    d848:	4823      	ldr	r0, [pc, #140]	; (d8d8 <z_fatal_error+0xe8>)
    d84a:	f7fc f89b 	bl	9984 <z_impl_z_log_msg_static_create>
    d84e:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    d850:	b17e      	cbz	r6, d872 <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    d852:	69f3      	ldr	r3, [r6, #28]
    d854:	f3c3 0308 	ubfx	r3, r3, #0, #9
    d858:	b15b      	cbz	r3, d872 <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
    d85a:	4b20      	ldr	r3, [pc, #128]	; (d8dc <z_fatal_error+0xec>)
    d85c:	617b      	str	r3, [r7, #20]
    d85e:	2302      	movs	r3, #2
    d860:	613b      	str	r3, [r7, #16]
    d862:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d866:	4653      	mov	r3, sl
    d868:	481b      	ldr	r0, [pc, #108]	; (d8d8 <z_fatal_error+0xe8>)
    d86a:	f107 0210 	add.w	r2, r7, #16
    d86e:	f7fc f889 	bl	9984 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    d872:	b12c      	cbz	r4, d880 <z_fatal_error+0x90>
    d874:	4620      	mov	r0, r4
    d876:	f002 f86b 	bl	f950 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    d87a:	b108      	cbz	r0, d880 <z_fatal_error+0x90>
    d87c:	7803      	ldrb	r3, [r0, #0]
    d87e:	b903      	cbnz	r3, d882 <z_fatal_error+0x92>
		thread_name = "unknown";
    d880:	4817      	ldr	r0, [pc, #92]	; (d8e0 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    d882:	46e9      	mov	r9, sp
    d884:	b08a      	sub	sp, #40	; 0x28
    d886:	466a      	mov	r2, sp
    d888:	4b16      	ldr	r3, [pc, #88]	; (d8e4 <z_fatal_error+0xf4>)
    d88a:	61d0      	str	r0, [r2, #28]
    d88c:	e9c2 3405 	strd	r3, r4, [r2, #20]
    d890:	f240 3301 	movw	r3, #769	; 0x301
    d894:	8413      	strh	r3, [r2, #32]
    d896:	4b14      	ldr	r3, [pc, #80]	; (d8e8 <z_fatal_error+0xf8>)
    d898:	f842 3f10 	str.w	r3, [r2, #16]!
    d89c:	2300      	movs	r3, #0
    d89e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    d8a2:	480d      	ldr	r0, [pc, #52]	; (d8d8 <z_fatal_error+0xe8>)
    d8a4:	f7fc f86e 	bl	9984 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    d8a8:	4631      	mov	r1, r6
    d8aa:	46cd      	mov	sp, r9
    d8ac:	4628      	mov	r0, r5
    d8ae:	f7fe ff0d 	bl	c6cc <k_sys_fatal_error_handler>
	__asm__ volatile(
    d8b2:	f388 8811 	msr	BASEPRI, r8
    d8b6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    d8ba:	4620      	mov	r0, r4
    d8bc:	f7fd f91a 	bl	aaf4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    d8c0:	3718      	adds	r7, #24
    d8c2:	46bd      	mov	sp, r7
    d8c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d8c8:	00010270 	.word	0x00010270
    d8cc:	00010cf4 	.word	0x00010cf4
    d8d0:	00010d0a 	.word	0x00010d0a
    d8d4:	01000005 	.word	0x01000005
    d8d8:	0000ffe0 	.word	0x0000ffe0
    d8dc:	00010d32 	.word	0x00010d32
    d8e0:	00010d02 	.word	0x00010d02
    d8e4:	00010d53 	.word	0x00010d53
    d8e8:	01000004 	.word	0x01000004

0000d8ec <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    d8ec:	4b0f      	ldr	r3, [pc, #60]	; (d92c <z_sys_init_run_level+0x40>)
{
    d8ee:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    d8f0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    d8f4:	3001      	adds	r0, #1
    d8f6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    d8fa:	42a6      	cmp	r6, r4
    d8fc:	d800      	bhi.n	d900 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    d8fe:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    d900:	e9d4 3500 	ldrd	r3, r5, [r4]
    d904:	4628      	mov	r0, r5
    d906:	4798      	blx	r3
		if (dev != NULL) {
    d908:	b16d      	cbz	r5, d926 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    d90a:	b138      	cbz	r0, d91c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    d90c:	2800      	cmp	r0, #0
    d90e:	bfb8      	it	lt
    d910:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    d912:	28ff      	cmp	r0, #255	; 0xff
    d914:	bfa8      	it	ge
    d916:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    d918:	68eb      	ldr	r3, [r5, #12]
    d91a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    d91c:	68ea      	ldr	r2, [r5, #12]
    d91e:	7853      	ldrb	r3, [r2, #1]
    d920:	f043 0301 	orr.w	r3, r3, #1
    d924:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    d926:	3408      	adds	r4, #8
    d928:	e7e7      	b.n	d8fa <z_sys_init_run_level+0xe>
    d92a:	bf00      	nop
    d92c:	00010284 	.word	0x00010284

0000d930 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    d930:	2201      	movs	r2, #1
{
    d932:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    d934:	4b09      	ldr	r3, [pc, #36]	; (d95c <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    d936:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    d938:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    d93a:	f7ff ffd7 	bl	d8ec <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    d93e:	f001 f807 	bl	e950 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    d942:	2004      	movs	r0, #4
    d944:	f7ff ffd2 	bl	d8ec <z_sys_init_run_level>

	z_init_static_threads();
    d948:	f000 f918 	bl	db7c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    d94c:	f7fa fd6a 	bl	8424 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    d950:	4a03      	ldr	r2, [pc, #12]	; (d960 <bg_thread_main+0x30>)
    d952:	7b13      	ldrb	r3, [r2, #12]
    d954:	f023 0301 	bic.w	r3, r3, #1
    d958:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    d95a:	bd08      	pop	{r3, pc}
    d95c:	20008c87 	.word	0x20008c87
    d960:	20008710 	.word	0x20008710

0000d964 <z_bss_zero>:
{
    d964:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    d966:	4803      	ldr	r0, [pc, #12]	; (d974 <z_bss_zero+0x10>)
    d968:	4a03      	ldr	r2, [pc, #12]	; (d978 <z_bss_zero+0x14>)
    d96a:	2100      	movs	r1, #0
    d96c:	1a12      	subs	r2, r2, r0
    d96e:	f001 ffe2 	bl	f936 <z_early_memset>
}
    d972:	bd08      	pop	{r3, pc}
    d974:	200081a0 	.word	0x200081a0
    d978:	20008c88 	.word	0x20008c88

0000d97c <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    d97c:	2300      	movs	r3, #0
    d97e:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    d980:	b570      	push	{r4, r5, r6, lr}
    d982:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    d984:	e9cd 2304 	strd	r2, r3, [sp, #16]
    d988:	220f      	movs	r2, #15
    d98a:	9301      	str	r3, [sp, #4]
    d98c:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    d990:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
    d992:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    d996:	4d0e      	ldr	r5, [pc, #56]	; (d9d0 <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    d998:	4e0e      	ldr	r6, [pc, #56]	; (d9d4 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    d99a:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    d99e:	490e      	ldr	r1, [pc, #56]	; (d9d8 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    d9a0:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    d9a4:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    d9a6:	fb02 1100 	mla	r1, r2, r0, r1
    d9aa:	4b0c      	ldr	r3, [pc, #48]	; (d9dc <z_init_cpu+0x60>)
    d9ac:	4630      	mov	r0, r6
    d9ae:	9500      	str	r5, [sp, #0]
    d9b0:	f000 f888 	bl	dac4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    d9b4:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    d9b6:	752c      	strb	r4, [r5, #20]
    d9b8:	f023 0304 	bic.w	r3, r3, #4
    d9bc:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    d9be:	4b08      	ldr	r3, [pc, #32]	; (d9e0 <z_init_cpu+0x64>)
    d9c0:	3401      	adds	r4, #1
    d9c2:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    d9c6:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    d9c8:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    d9ca:	b006      	add	sp, #24
    d9cc:	bd70      	pop	{r4, r5, r6, pc}
    d9ce:	bf00      	nop
    d9d0:	200089a0 	.word	0x200089a0
    d9d4:	20008690 	.word	0x20008690
    d9d8:	20009788 	.word	0x20009788
    d9dc:	0000dc35 	.word	0x0000dc35
    d9e0:	20008f88 	.word	0x20008f88

0000d9e4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    d9e4:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    d9e6:	2000      	movs	r0, #0
{
    d9e8:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    d9ea:	f7ff ff7f 	bl	d8ec <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    d9ee:	4b2e      	ldr	r3, [pc, #184]	; (daa8 <z_cstart+0xc4>)
	uint32_t msp =
    d9f0:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    d9f4:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    d9f8:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d9fc:	2400      	movs	r4, #0
    d9fe:	23e0      	movs	r3, #224	; 0xe0
    da00:	4d2a      	ldr	r5, [pc, #168]	; (daac <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    da02:	4e2b      	ldr	r6, [pc, #172]	; (dab0 <z_cstart+0xcc>)
    da04:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    da08:	77ec      	strb	r4, [r5, #31]
    da0a:	762c      	strb	r4, [r5, #24]
    da0c:	766c      	strb	r4, [r5, #25]
    da0e:	76ac      	strb	r4, [r5, #26]
    da10:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    da14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    da16:	4f27      	ldr	r7, [pc, #156]	; (dab4 <z_cstart+0xd0>)
    da18:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    da1c:	626b      	str	r3, [r5, #36]	; 0x24
    da1e:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    da22:	f7fc ffcb 	bl	a9bc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    da26:	f7fc fb53 	bl	a0d0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    da2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    da2e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    da30:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    da32:	f7fd fa0d 	bl	ae50 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    da36:	f7fd f873 	bl	ab20 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    da3a:	f7fb fe37 	bl	96ac <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    da3e:	f240 1301 	movw	r3, #257	; 0x101
    da42:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    da46:	ab06      	add	r3, sp, #24
    da48:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    da4a:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    da4e:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    da50:	f001 ff65 	bl	f91e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    da54:	2001      	movs	r0, #1
    da56:	f7ff ff49 	bl	d8ec <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    da5a:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    da5c:	4d16      	ldr	r5, [pc, #88]	; (dab8 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    da5e:	f7ff ff45 	bl	d8ec <z_sys_init_run_level>
	z_sched_init();
    da62:	f000 fc3b 	bl	e2dc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    da66:	4b15      	ldr	r3, [pc, #84]	; (dabc <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    da68:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    da6a:	9305      	str	r3, [sp, #20]
    da6c:	2301      	movs	r3, #1
    da6e:	4914      	ldr	r1, [pc, #80]	; (dac0 <z_cstart+0xdc>)
    da70:	f44f 6280 	mov.w	r2, #1024	; 0x400
    da74:	e9cd 4303 	strd	r4, r3, [sp, #12]
    da78:	4628      	mov	r0, r5
    da7a:	463b      	mov	r3, r7
    da7c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    da80:	9400      	str	r4, [sp, #0]
    da82:	f000 f81f 	bl	dac4 <z_setup_new_thread>
    da86:	4606      	mov	r6, r0
    da88:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    da8a:	4628      	mov	r0, r5
    da8c:	f022 0204 	bic.w	r2, r2, #4
    da90:	736a      	strb	r2, [r5, #13]
    da92:	f001 ffd6 	bl	fa42 <z_ready_thread>
	z_init_cpu(0);
    da96:	4620      	mov	r0, r4
    da98:	f7ff ff70 	bl	d97c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    da9c:	463a      	mov	r2, r7
    da9e:	4631      	mov	r1, r6
    daa0:	4628      	mov	r0, r5
    daa2:	f7fc fc77 	bl	a394 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    daa6:	bf00      	nop
    daa8:	20008f88 	.word	0x20008f88
    daac:	e000ed00 	.word	0xe000ed00
    dab0:	200089a0 	.word	0x200089a0
    dab4:	0000d931 	.word	0x0000d931
    dab8:	20008710 	.word	0x20008710
    dabc:	00010319 	.word	0x00010319
    dac0:	200098c8 	.word	0x200098c8

0000dac4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    dac4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    dac8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    daca:	f100 0558 	add.w	r5, r0, #88	; 0x58
    dace:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    dad0:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    dad2:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    dad6:	2500      	movs	r5, #0
{
    dad8:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    dada:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    dadc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    dade:	e9c0 5506 	strd	r5, r5, [r0, #24]
    dae2:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    dae4:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    dae6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    dae8:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    daec:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    daf0:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    daf2:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    daf4:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    daf6:	9202      	str	r2, [sp, #8]
    daf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    dafa:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    dafe:	9201      	str	r2, [sp, #4]
    db00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    db02:	9200      	str	r2, [sp, #0]
    db04:	4642      	mov	r2, r8
    db06:	f7fc fc27 	bl	a358 <arch_new_thread>
	if (!_current) {
    db0a:	4b05      	ldr	r3, [pc, #20]	; (db20 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    db0c:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    db0e:	689b      	ldr	r3, [r3, #8]
    db10:	b103      	cbz	r3, db14 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    db12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    db14:	4640      	mov	r0, r8
    db16:	6723      	str	r3, [r4, #112]	; 0x70
    db18:	b004      	add	sp, #16
    db1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db1e:	bf00      	nop
    db20:	200089a0 	.word	0x200089a0

0000db24 <z_impl_k_thread_create>:
{
    db24:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    db26:	2500      	movs	r5, #0
{
    db28:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    db2a:	9505      	str	r5, [sp, #20]
    db2c:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
    db2e:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    db32:	9504      	str	r5, [sp, #16]
    db34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
    db36:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    db38:	9503      	str	r5, [sp, #12]
    db3a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    db3c:	9502      	str	r5, [sp, #8]
    db3e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    db40:	9501      	str	r5, [sp, #4]
    db42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    db44:	9500      	str	r5, [sp, #0]
    db46:	f7ff ffbd 	bl	dac4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    db4a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    db4e:	bf08      	it	eq
    db50:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    db54:	d005      	beq.n	db62 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    db56:	ea56 0307 	orrs.w	r3, r6, r7
    db5a:	d105      	bne.n	db68 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    db5c:	4620      	mov	r0, r4
    db5e:	f000 fb3d 	bl	e1dc <z_sched_start>
}
    db62:	4620      	mov	r0, r4
    db64:	b007      	add	sp, #28
    db66:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    db68:	463a      	mov	r2, r7
    db6a:	4633      	mov	r3, r6
    db6c:	4902      	ldr	r1, [pc, #8]	; (db78 <z_impl_k_thread_create+0x54>)
    db6e:	f104 0018 	add.w	r0, r4, #24
    db72:	f000 fd43 	bl	e5fc <z_add_timeout>
    db76:	e7f4      	b.n	db62 <z_impl_k_thread_create+0x3e>
    db78:	0000f9af 	.word	0x0000f9af

0000db7c <z_init_static_threads>:
{
    db7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    db80:	4c29      	ldr	r4, [pc, #164]	; (dc28 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    db82:	4d2a      	ldr	r5, [pc, #168]	; (dc2c <z_init_static_threads+0xb0>)
{
    db84:	b087      	sub	sp, #28
    db86:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    db88:	42ae      	cmp	r6, r5
    db8a:	f104 0430 	add.w	r4, r4, #48	; 0x30
    db8e:	d30f      	bcc.n	dbb0 <z_init_static_threads+0x34>
	k_sched_lock();
    db90:	f000 fb74 	bl	e27c <k_sched_lock>
    db94:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    db98:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    db9c:	4c22      	ldr	r4, [pc, #136]	; (dc28 <z_init_static_threads+0xac>)
    db9e:	f8df 9090 	ldr.w	r9, [pc, #144]	; dc30 <z_init_static_threads+0xb4>
    dba2:	42ac      	cmp	r4, r5
    dba4:	d320      	bcc.n	dbe8 <z_init_static_threads+0x6c>
}
    dba6:	b007      	add	sp, #28
    dba8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    dbac:	f000 bb7a 	b.w	e2a4 <k_sched_unlock>
		z_setup_new_thread(
    dbb0:	f854 3c04 	ldr.w	r3, [r4, #-4]
    dbb4:	9305      	str	r3, [sp, #20]
    dbb6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    dbba:	9304      	str	r3, [sp, #16]
    dbbc:	f854 3c14 	ldr.w	r3, [r4, #-20]
    dbc0:	9303      	str	r3, [sp, #12]
    dbc2:	f854 3c18 	ldr.w	r3, [r4, #-24]
    dbc6:	9302      	str	r3, [sp, #8]
    dbc8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    dbcc:	9301      	str	r3, [sp, #4]
    dbce:	f854 3c20 	ldr.w	r3, [r4, #-32]
    dbd2:	9300      	str	r3, [sp, #0]
    dbd4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    dbd8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    dbdc:	f7ff ff72 	bl	dac4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    dbe0:	f854 3c30 	ldr.w	r3, [r4, #-48]
    dbe4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    dbe6:	e7ce      	b.n	db86 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    dbe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dbea:	1c5a      	adds	r2, r3, #1
    dbec:	d00d      	beq.n	dc0a <z_init_static_threads+0x8e>
    dbee:	2100      	movs	r1, #0
    dbf0:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    dbf2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    dbf6:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    dbfa:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    dbfe:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    dc02:	d104      	bne.n	dc0e <z_init_static_threads+0x92>
	z_sched_start(thread);
    dc04:	4640      	mov	r0, r8
    dc06:	f000 fae9 	bl	e1dc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    dc0a:	3430      	adds	r4, #48	; 0x30
    dc0c:	e7c9      	b.n	dba2 <z_init_static_threads+0x26>
    dc0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    dc12:	2300      	movs	r3, #0
    dc14:	f7fa fa9e 	bl	8154 <__aeabi_uldivmod>
    dc18:	4602      	mov	r2, r0
    dc1a:	460b      	mov	r3, r1
    dc1c:	f108 0018 	add.w	r0, r8, #24
    dc20:	4649      	mov	r1, r9
    dc22:	f000 fceb 	bl	e5fc <z_add_timeout>
    dc26:	e7f0      	b.n	dc0a <z_init_static_threads+0x8e>
    dc28:	0000ff60 	.word	0x0000ff60
    dc2c:	0000ff60 	.word	0x0000ff60
    dc30:	0000f9af 	.word	0x0000f9af

0000dc34 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    dc34:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    dc36:	4c0b      	ldr	r4, [pc, #44]	; (dc64 <idle+0x30>)
    dc38:	4d0b      	ldr	r5, [pc, #44]	; (dc68 <idle+0x34>)
	__asm__ volatile(
    dc3a:	f04f 0220 	mov.w	r2, #32
    dc3e:	f3ef 8311 	mrs	r3, BASEPRI
    dc42:	f382 8812 	msr	BASEPRI_MAX, r2
    dc46:	f3bf 8f6f 	isb	sy
    dc4a:	f001 ff79 	bl	fb40 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    dc4e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    dc50:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    dc52:	b913      	cbnz	r3, dc5a <idle+0x26>
	arch_cpu_idle();
    dc54:	f7fc fa42 	bl	a0dc <arch_cpu_idle>
}
    dc58:	e7ef      	b.n	dc3a <idle+0x6>
    dc5a:	f7fc f971 	bl	9f40 <pm_system_suspend>
    dc5e:	2800      	cmp	r0, #0
    dc60:	d1eb      	bne.n	dc3a <idle+0x6>
    dc62:	e7f7      	b.n	dc54 <idle+0x20>
    dc64:	200089a0 	.word	0x200089a0
    dc68:	20008c87 	.word	0x20008c87

0000dc6c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    dc6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    dc70:	4604      	mov	r4, r0
    dc72:	4617      	mov	r7, r2
    dc74:	461e      	mov	r6, r3
    dc76:	f04f 0320 	mov.w	r3, #32
    dc7a:	f3ef 8811 	mrs	r8, BASEPRI
    dc7e:	f383 8812 	msr	BASEPRI_MAX, r3
    dc82:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    dc86:	68c3      	ldr	r3, [r0, #12]
    dc88:	4a33      	ldr	r2, [pc, #204]	; (dd58 <z_impl_k_mutex_lock+0xec>)
    dc8a:	b17b      	cbz	r3, dcac <z_impl_k_mutex_lock+0x40>
    dc8c:	6880      	ldr	r0, [r0, #8]
    dc8e:	6891      	ldr	r1, [r2, #8]
    dc90:	4288      	cmp	r0, r1
    dc92:	d019      	beq.n	dcc8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    dc94:	ea57 0306 	orrs.w	r3, r7, r6
    dc98:	d118      	bne.n	dccc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    dc9a:	f388 8811 	msr	BASEPRI, r8
    dc9e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    dca2:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    dca6:	b002      	add	sp, #8
    dca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    dcac:	6891      	ldr	r1, [r2, #8]
    dcae:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    dcb2:	3301      	adds	r3, #1
    dcb4:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    dcb6:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    dcb8:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    dcba:	60a3      	str	r3, [r4, #8]
    dcbc:	f388 8811 	msr	BASEPRI, r8
    dcc0:	f3bf 8f6f 	isb	sy
		return 0;
    dcc4:	2000      	movs	r0, #0
    dcc6:	e7ee      	b.n	dca6 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    dcc8:	6921      	ldr	r1, [r4, #16]
    dcca:	e7f2      	b.n	dcb2 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    dccc:	f991 100e 	ldrsb.w	r1, [r1, #14]
    dcd0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    dcd4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    dcd8:	4299      	cmp	r1, r3
    dcda:	bfa8      	it	ge
    dcdc:	4619      	movge	r1, r3
    dcde:	4291      	cmp	r1, r2
    dce0:	bfb8      	it	lt
    dce2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    dce4:	428b      	cmp	r3, r1
    dce6:	dd2e      	ble.n	dd46 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    dce8:	f001 fe3b 	bl	f962 <adjust_owner_prio.isra.0>
    dcec:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    dcee:	4622      	mov	r2, r4
    dcf0:	4641      	mov	r1, r8
    dcf2:	e9cd 7600 	strd	r7, r6, [sp]
    dcf6:	4819      	ldr	r0, [pc, #100]	; (dd5c <z_impl_k_mutex_lock+0xf0>)
    dcf8:	f000 f9fa 	bl	e0f0 <z_pend_curr>
	if (got_mutex == 0) {
    dcfc:	2800      	cmp	r0, #0
    dcfe:	d0e1      	beq.n	dcc4 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    dd00:	f04f 0320 	mov.w	r3, #32
    dd04:	f3ef 8611 	mrs	r6, BASEPRI
    dd08:	f383 8812 	msr	BASEPRI_MAX, r3
    dd0c:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    dd10:	68a0      	ldr	r0, [r4, #8]
    dd12:	b1d0      	cbz	r0, dd4a <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    dd14:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    dd16:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    dd18:	429c      	cmp	r4, r3
    dd1a:	d00a      	beq.n	dd32 <z_impl_k_mutex_lock+0xc6>
    dd1c:	b14b      	cbz	r3, dd32 <z_impl_k_mutex_lock+0xc6>
    dd1e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    dd22:	4299      	cmp	r1, r3
    dd24:	bfa8      	it	ge
    dd26:	4619      	movge	r1, r3
    dd28:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    dd2c:	4299      	cmp	r1, r3
    dd2e:	bfb8      	it	lt
    dd30:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    dd32:	f001 fe16 	bl	f962 <adjust_owner_prio.isra.0>
    dd36:	b140      	cbz	r0, dd4a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    dd38:	4631      	mov	r1, r6
    dd3a:	4808      	ldr	r0, [pc, #32]	; (dd5c <z_impl_k_mutex_lock+0xf0>)
    dd3c:	f000 fa3c 	bl	e1b8 <z_reschedule>
	return -EAGAIN;
    dd40:	f06f 000a 	mvn.w	r0, #10
    dd44:	e7af      	b.n	dca6 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    dd46:	2500      	movs	r5, #0
    dd48:	e7d1      	b.n	dcee <z_impl_k_mutex_lock+0x82>
	if (resched) {
    dd4a:	2d00      	cmp	r5, #0
    dd4c:	d1f4      	bne.n	dd38 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    dd4e:	f386 8811 	msr	BASEPRI, r6
    dd52:	f3bf 8f6f 	isb	sy
    dd56:	e7f3      	b.n	dd40 <z_impl_k_mutex_lock+0xd4>
    dd58:	200089a0 	.word	0x200089a0
    dd5c:	20008c88 	.word	0x20008c88

0000dd60 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    dd60:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    dd62:	6883      	ldr	r3, [r0, #8]
{
    dd64:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    dd66:	b36b      	cbz	r3, ddc4 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    dd68:	4a19      	ldr	r2, [pc, #100]	; (ddd0 <z_impl_k_mutex_unlock+0x70>)
    dd6a:	6892      	ldr	r2, [r2, #8]
    dd6c:	4293      	cmp	r3, r2
    dd6e:	d12c      	bne.n	ddca <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    dd70:	68c3      	ldr	r3, [r0, #12]
    dd72:	2b01      	cmp	r3, #1
    dd74:	d903      	bls.n	dd7e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    dd76:	3b01      	subs	r3, #1
    dd78:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    dd7a:	2000      	movs	r0, #0
}
    dd7c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    dd7e:	f04f 0320 	mov.w	r3, #32
    dd82:	f3ef 8511 	mrs	r5, BASEPRI
    dd86:	f383 8812 	msr	BASEPRI_MAX, r3
    dd8a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    dd8e:	6901      	ldr	r1, [r0, #16]
    dd90:	6880      	ldr	r0, [r0, #8]
    dd92:	f001 fde6 	bl	f962 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    dd96:	4620      	mov	r0, r4
    dd98:	f001 fe8a 	bl	fab0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    dd9c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    dd9e:	b158      	cbz	r0, ddb8 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    dda0:	f990 200e 	ldrsb.w	r2, [r0, #14]
    dda4:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    dda6:	2200      	movs	r2, #0
    dda8:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    ddaa:	f001 fe4a 	bl	fa42 <z_ready_thread>
		z_reschedule(&lock, key);
    ddae:	4629      	mov	r1, r5
    ddb0:	4808      	ldr	r0, [pc, #32]	; (ddd4 <z_impl_k_mutex_unlock+0x74>)
    ddb2:	f000 fa01 	bl	e1b8 <z_reschedule>
    ddb6:	e7e0      	b.n	dd7a <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    ddb8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    ddba:	f385 8811 	msr	BASEPRI, r5
    ddbe:	f3bf 8f6f 	isb	sy
    ddc2:	e7da      	b.n	dd7a <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    ddc4:	f06f 0015 	mvn.w	r0, #21
    ddc8:	e7d8      	b.n	dd7c <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    ddca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ddce:	e7d5      	b.n	dd7c <z_impl_k_mutex_unlock+0x1c>
    ddd0:	200089a0 	.word	0x200089a0
    ddd4:	20008c88 	.word	0x20008c88

0000ddd8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    ddd8:	b538      	push	{r3, r4, r5, lr}
    ddda:	4604      	mov	r4, r0
	__asm__ volatile(
    dddc:	f04f 0320 	mov.w	r3, #32
    dde0:	f3ef 8511 	mrs	r5, BASEPRI
    dde4:	f383 8812 	msr	BASEPRI_MAX, r3
    dde8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    ddec:	f001 fe60 	bl	fab0 <z_unpend_first_thread>

	if (thread != NULL) {
    ddf0:	b148      	cbz	r0, de06 <z_impl_k_sem_give+0x2e>
    ddf2:	2200      	movs	r2, #0
    ddf4:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    ddf6:	f001 fe24 	bl	fa42 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    ddfa:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    ddfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    de00:	4804      	ldr	r0, [pc, #16]	; (de14 <z_impl_k_sem_give+0x3c>)
    de02:	f000 b9d9 	b.w	e1b8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    de06:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    de0a:	429a      	cmp	r2, r3
    de0c:	bf18      	it	ne
    de0e:	3301      	addne	r3, #1
    de10:	60a3      	str	r3, [r4, #8]
}
    de12:	e7f2      	b.n	ddfa <z_impl_k_sem_give+0x22>
    de14:	20008c88 	.word	0x20008c88

0000de18 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    de18:	b513      	push	{r0, r1, r4, lr}
    de1a:	f04f 0420 	mov.w	r4, #32
    de1e:	f3ef 8111 	mrs	r1, BASEPRI
    de22:	f384 8812 	msr	BASEPRI_MAX, r4
    de26:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    de2a:	6884      	ldr	r4, [r0, #8]
    de2c:	b144      	cbz	r4, de40 <z_impl_k_sem_take+0x28>
		sem->count--;
    de2e:	3c01      	subs	r4, #1
    de30:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    de32:	f381 8811 	msr	BASEPRI, r1
    de36:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    de3a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    de3c:	b002      	add	sp, #8
    de3e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    de40:	ea52 0403 	orrs.w	r4, r2, r3
    de44:	d106      	bne.n	de54 <z_impl_k_sem_take+0x3c>
    de46:	f381 8811 	msr	BASEPRI, r1
    de4a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    de4e:	f06f 000f 	mvn.w	r0, #15
    de52:	e7f3      	b.n	de3c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    de54:	e9cd 2300 	strd	r2, r3, [sp]
    de58:	4602      	mov	r2, r0
    de5a:	4802      	ldr	r0, [pc, #8]	; (de64 <z_impl_k_sem_take+0x4c>)
    de5c:	f000 f948 	bl	e0f0 <z_pend_curr>
	return ret;
    de60:	e7ec      	b.n	de3c <z_impl_k_sem_take+0x24>
    de62:	bf00      	nop
    de64:	20008c88 	.word	0x20008c88

0000de68 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    de68:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    de6a:	4d07      	ldr	r5, [pc, #28]	; (de88 <z_reset_time_slice+0x20>)
    de6c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    de6e:	b154      	cbz	r4, de86 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    de70:	f7fe fa50 	bl	c314 <sys_clock_elapsed>
    de74:	4b05      	ldr	r3, [pc, #20]	; (de8c <z_reset_time_slice+0x24>)
    de76:	4404      	add	r4, r0
    de78:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    de7a:	6828      	ldr	r0, [r5, #0]
    de7c:	2100      	movs	r1, #0
	}
}
    de7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    de82:	f001 be6d 	b.w	fb60 <z_set_timeout_expiry>
}
    de86:	bd38      	pop	{r3, r4, r5, pc}
    de88:	200089d0 	.word	0x200089d0
    de8c:	200089a0 	.word	0x200089a0

0000de90 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    de90:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    de92:	4d0d      	ldr	r5, [pc, #52]	; (dec8 <update_cache+0x38>)
    de94:	462b      	mov	r3, r5
    de96:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    de9a:	429c      	cmp	r4, r3
    de9c:	d000      	beq.n	dea0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    de9e:	b904      	cbnz	r4, dea2 <update_cache+0x12>
    dea0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    dea2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    dea4:	b938      	cbnz	r0, deb6 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    dea6:	7b5a      	ldrb	r2, [r3, #13]
    dea8:	06d2      	lsls	r2, r2, #27
    deaa:	d104      	bne.n	deb6 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    deac:	69a2      	ldr	r2, [r4, #24]
    deae:	b912      	cbnz	r2, deb6 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    deb0:	89da      	ldrh	r2, [r3, #14]
    deb2:	2a7f      	cmp	r2, #127	; 0x7f
    deb4:	d805      	bhi.n	dec2 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    deb6:	429c      	cmp	r4, r3
    deb8:	d002      	beq.n	dec0 <update_cache+0x30>
			z_reset_time_slice(thread);
    deba:	4620      	mov	r0, r4
    debc:	f7ff ffd4 	bl	de68 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    dec0:	4623      	mov	r3, r4
    dec2:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    dec4:	bd38      	pop	{r3, r4, r5, pc}
    dec6:	bf00      	nop
    dec8:	200089a0 	.word	0x200089a0

0000decc <move_thread_to_end_of_prio_q>:
{
    decc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    dece:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    ded2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    ded4:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    ded6:	7b43      	ldrb	r3, [r0, #13]
    ded8:	da04      	bge.n	dee4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    deda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    dede:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    dee0:	f001 fd53 	bl	f98a <sys_dlist_remove>
	return list->head == list;
    dee4:	4a15      	ldr	r2, [pc, #84]	; (df3c <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
    dee6:	7b4b      	ldrb	r3, [r1, #13]
    dee8:	4610      	mov	r0, r2
    deea:	f063 037f 	orn	r3, r3, #127	; 0x7f
    deee:	734b      	strb	r3, [r1, #13]
    def0:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    def4:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    def6:	4283      	cmp	r3, r0
    def8:	bf08      	it	eq
    defa:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    defc:	b923      	cbnz	r3, df08 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    defe:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    df02:	6021      	str	r1, [r4, #0]
	list->tail = node;
    df04:	6251      	str	r1, [r2, #36]	; 0x24
}
    df06:	e00c      	b.n	df22 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    df08:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    df0c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    df10:	42b5      	cmp	r5, r6
    df12:	d00e      	beq.n	df32 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    df14:	42ae      	cmp	r6, r5
    df16:	dd0c      	ble.n	df32 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    df18:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    df1a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    df1e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    df20:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    df22:	6890      	ldr	r0, [r2, #8]
}
    df24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    df28:	1a43      	subs	r3, r0, r1
    df2a:	4258      	negs	r0, r3
    df2c:	4158      	adcs	r0, r3
    df2e:	f7ff bfaf 	b.w	de90 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    df32:	429c      	cmp	r4, r3
    df34:	d0e3      	beq.n	defe <move_thread_to_end_of_prio_q+0x32>
    df36:	681b      	ldr	r3, [r3, #0]
    df38:	e7e0      	b.n	defc <move_thread_to_end_of_prio_q+0x30>
    df3a:	bf00      	nop
    df3c:	200089a0 	.word	0x200089a0

0000df40 <ready_thread>:
{
    df40:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    df42:	f990 300d 	ldrsb.w	r3, [r0, #13]
    df46:	7b42      	ldrb	r2, [r0, #13]
    df48:	2b00      	cmp	r3, #0
    df4a:	db29      	blt.n	dfa0 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    df4c:	06d3      	lsls	r3, r2, #27
    df4e:	d127      	bne.n	dfa0 <ready_thread+0x60>
	return node->next != NULL;
    df50:	6983      	ldr	r3, [r0, #24]
    df52:	bb2b      	cbnz	r3, dfa0 <ready_thread+0x60>
	return list->head == list;
    df54:	4913      	ldr	r1, [pc, #76]	; (dfa4 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    df56:	f062 027f 	orn	r2, r2, #127	; 0x7f
    df5a:	7342      	strb	r2, [r0, #13]
    df5c:	460a      	mov	r2, r1
    df5e:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    df62:	4294      	cmp	r4, r2
    df64:	bf18      	it	ne
    df66:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    df68:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    df6a:	b923      	cbnz	r3, df76 <ready_thread+0x36>
	node->prev = tail;
    df6c:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    df70:	6020      	str	r0, [r4, #0]
	list->tail = node;
    df72:	6248      	str	r0, [r1, #36]	; 0x24
}
    df74:	e00c      	b.n	df90 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    df76:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    df7a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    df7e:	42b5      	cmp	r5, r6
    df80:	d00a      	beq.n	df98 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    df82:	42ae      	cmp	r6, r5
    df84:	dd08      	ble.n	df98 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    df86:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    df88:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    df8c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    df8e:	6058      	str	r0, [r3, #4]
		update_cache(0);
    df90:	2000      	movs	r0, #0
}
    df92:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    df94:	f7ff bf7c 	b.w	de90 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    df98:	42a3      	cmp	r3, r4
    df9a:	d0e7      	beq.n	df6c <ready_thread+0x2c>
    df9c:	681b      	ldr	r3, [r3, #0]
    df9e:	e7e4      	b.n	df6a <ready_thread+0x2a>
}
    dfa0:	bc70      	pop	{r4, r5, r6}
    dfa2:	4770      	bx	lr
    dfa4:	200089a0 	.word	0x200089a0

0000dfa8 <unready_thread>:
{
    dfa8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    dfaa:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    dfae:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    dfb0:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    dfb2:	7b43      	ldrb	r3, [r0, #13]
    dfb4:	da04      	bge.n	dfc0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    dfb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    dfba:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    dfbc:	f001 fce5 	bl	f98a <sys_dlist_remove>
	update_cache(thread == _current);
    dfc0:	4b04      	ldr	r3, [pc, #16]	; (dfd4 <unready_thread+0x2c>)
    dfc2:	6898      	ldr	r0, [r3, #8]
    dfc4:	1a43      	subs	r3, r0, r1
    dfc6:	4258      	negs	r0, r3
    dfc8:	4158      	adcs	r0, r3
}
    dfca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    dfce:	f7ff bf5f 	b.w	de90 <update_cache>
    dfd2:	bf00      	nop
    dfd4:	200089a0 	.word	0x200089a0

0000dfd8 <pend_locked>:
{
    dfd8:	b570      	push	{r4, r5, r6, lr}
    dfda:	4615      	mov	r5, r2
    dfdc:	461c      	mov	r4, r3
    dfde:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    dfe0:	f001 fd07 	bl	f9f2 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    dfe4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    dfe8:	bf08      	it	eq
    dfea:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    dfee:	d008      	beq.n	e002 <pend_locked+0x2a>
    dff0:	462a      	mov	r2, r5
    dff2:	4623      	mov	r3, r4
    dff4:	f106 0018 	add.w	r0, r6, #24
    dff8:	4902      	ldr	r1, [pc, #8]	; (e004 <pend_locked+0x2c>)
}
    dffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dffe:	f000 bafd 	b.w	e5fc <z_add_timeout>
    e002:	bd70      	pop	{r4, r5, r6, pc}
    e004:	0000f9af 	.word	0x0000f9af

0000e008 <k_sched_time_slice_set>:
{
    e008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e00a:	4604      	mov	r4, r0
    e00c:	460d      	mov	r5, r1
	__asm__ volatile(
    e00e:	f04f 0320 	mov.w	r3, #32
    e012:	f3ef 8711 	mrs	r7, BASEPRI
    e016:	f383 8812 	msr	BASEPRI_MAX, r3
    e01a:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    e01e:	2600      	movs	r6, #0
    e020:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    e024:	f240 30e7 	movw	r0, #999	; 0x3e7
    e028:	4631      	mov	r1, r6
    e02a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e02e:	2300      	movs	r3, #0
    e030:	fbe4 010c 	umlal	r0, r1, r4, ip
    e034:	f7fa f88e 	bl	8154 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    e038:	42b4      	cmp	r4, r6
    e03a:	dd02      	ble.n	e042 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    e03c:	2802      	cmp	r0, #2
    e03e:	bfb8      	it	lt
    e040:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    e042:	4a07      	ldr	r2, [pc, #28]	; (e060 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    e044:	4b07      	ldr	r3, [pc, #28]	; (e064 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    e046:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    e048:	4a07      	ldr	r2, [pc, #28]	; (e068 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    e04a:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    e04c:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    e04e:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    e050:	f7ff ff0a 	bl	de68 <z_reset_time_slice>
	__asm__ volatile(
    e054:	f387 8811 	msr	BASEPRI, r7
    e058:	f3bf 8f6f 	isb	sy
}
    e05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e05e:	bf00      	nop
    e060:	200089d0 	.word	0x200089d0
    e064:	200089a0 	.word	0x200089a0
    e068:	200089cc 	.word	0x200089cc

0000e06c <z_time_slice>:
{
    e06c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    e06e:	f04f 0320 	mov.w	r3, #32
    e072:	f3ef 8511 	mrs	r5, BASEPRI
    e076:	f383 8812 	msr	BASEPRI_MAX, r3
    e07a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    e07e:	4b17      	ldr	r3, [pc, #92]	; (e0dc <z_time_slice+0x70>)
    e080:	4a17      	ldr	r2, [pc, #92]	; (e0e0 <z_time_slice+0x74>)
    e082:	689c      	ldr	r4, [r3, #8]
    e084:	6811      	ldr	r1, [r2, #0]
    e086:	428c      	cmp	r4, r1
    e088:	d107      	bne.n	e09a <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    e08a:	4620      	mov	r0, r4
    e08c:	f7ff feec 	bl	de68 <z_reset_time_slice>
	__asm__ volatile(
    e090:	f385 8811 	msr	BASEPRI, r5
    e094:	f3bf 8f6f 	isb	sy
}
    e098:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    e09a:	2100      	movs	r1, #0
    e09c:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    e09e:	4a11      	ldr	r2, [pc, #68]	; (e0e4 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    e0a0:	6812      	ldr	r2, [r2, #0]
    e0a2:	b1c2      	cbz	r2, e0d6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    e0a4:	89e2      	ldrh	r2, [r4, #14]
    e0a6:	2a7f      	cmp	r2, #127	; 0x7f
    e0a8:	d815      	bhi.n	e0d6 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    e0aa:	7b62      	ldrb	r2, [r4, #13]
    e0ac:	06d2      	lsls	r2, r2, #27
    e0ae:	d112      	bne.n	e0d6 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    e0b0:	4a0d      	ldr	r2, [pc, #52]	; (e0e8 <z_time_slice+0x7c>)
    e0b2:	f994 100e 	ldrsb.w	r1, [r4, #14]
    e0b6:	6812      	ldr	r2, [r2, #0]
    e0b8:	4291      	cmp	r1, r2
    e0ba:	db0c      	blt.n	e0d6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    e0bc:	4a0b      	ldr	r2, [pc, #44]	; (e0ec <z_time_slice+0x80>)
    e0be:	4294      	cmp	r4, r2
    e0c0:	d009      	beq.n	e0d6 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    e0c2:	691a      	ldr	r2, [r3, #16]
    e0c4:	4282      	cmp	r2, r0
    e0c6:	dc03      	bgt.n	e0d0 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    e0c8:	4620      	mov	r0, r4
    e0ca:	f7ff feff 	bl	decc <move_thread_to_end_of_prio_q>
    e0ce:	e7dc      	b.n	e08a <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    e0d0:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    e0d2:	611a      	str	r2, [r3, #16]
    e0d4:	e7dc      	b.n	e090 <z_time_slice+0x24>
    e0d6:	2200      	movs	r2, #0
    e0d8:	e7fb      	b.n	e0d2 <z_time_slice+0x66>
    e0da:	bf00      	nop
    e0dc:	200089a0 	.word	0x200089a0
    e0e0:	200089c8 	.word	0x200089c8
    e0e4:	200089d0 	.word	0x200089d0
    e0e8:	200089cc 	.word	0x200089cc
    e0ec:	20008690 	.word	0x20008690

0000e0f0 <z_pend_curr>:
{
    e0f0:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    e0f2:	480c      	ldr	r0, [pc, #48]	; (e124 <z_pend_curr+0x34>)
    e0f4:	4d0c      	ldr	r5, [pc, #48]	; (e128 <z_pend_curr+0x38>)
    e0f6:	6886      	ldr	r6, [r0, #8]
{
    e0f8:	460c      	mov	r4, r1
	pending_current = _current;
    e0fa:	602e      	str	r6, [r5, #0]
{
    e0fc:	4611      	mov	r1, r2
    e0fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    e102:	f04f 0620 	mov.w	r6, #32
    e106:	f3ef 8511 	mrs	r5, BASEPRI
    e10a:	f386 8812 	msr	BASEPRI_MAX, r6
    e10e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    e112:	6880      	ldr	r0, [r0, #8]
    e114:	f7ff ff60 	bl	dfd8 <pend_locked>
	ret = arch_swap(key);
    e118:	4620      	mov	r0, r4
}
    e11a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e11e:	f7fc b8c1 	b.w	a2a4 <arch_swap>
    e122:	bf00      	nop
    e124:	200089a0 	.word	0x200089a0
    e128:	200089c8 	.word	0x200089c8

0000e12c <z_set_prio>:
{
    e12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e12e:	4604      	mov	r4, r0
    e130:	f04f 0320 	mov.w	r3, #32
    e134:	f3ef 8611 	mrs	r6, BASEPRI
    e138:	f383 8812 	msr	BASEPRI_MAX, r3
    e13c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    e140:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    e142:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    e144:	06da      	lsls	r2, r3, #27
    e146:	d119      	bne.n	e17c <z_set_prio+0x50>
	return node->next != NULL;
    e148:	6985      	ldr	r5, [r0, #24]
    e14a:	b9bd      	cbnz	r5, e17c <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e14c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e150:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    e152:	f001 fc1a 	bl	f98a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    e156:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    e158:	4a16      	ldr	r2, [pc, #88]	; (e1b4 <z_set_prio+0x88>)
    e15a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e15e:	7343      	strb	r3, [r0, #13]
    e160:	4613      	mov	r3, r2
				thread->base.prio = prio;
    e162:	7381      	strb	r1, [r0, #14]
    e164:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e168:	4298      	cmp	r0, r3
    e16a:	bf18      	it	ne
    e16c:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    e16e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e170:	b95d      	cbnz	r5, e18a <z_set_prio+0x5e>
	node->prev = tail;
    e172:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    e176:	6004      	str	r4, [r0, #0]
	list->tail = node;
    e178:	6254      	str	r4, [r2, #36]	; 0x24
}
    e17a:	e011      	b.n	e1a0 <z_set_prio+0x74>
    e17c:	2000      	movs	r0, #0
			thread->base.prio = prio;
    e17e:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    e180:	f386 8811 	msr	BASEPRI, r6
    e184:	f3bf 8f6f 	isb	sy
}
    e188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    e18a:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    e18e:	42b9      	cmp	r1, r7
    e190:	d00b      	beq.n	e1aa <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e192:	428f      	cmp	r7, r1
    e194:	dd09      	ble.n	e1aa <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    e196:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    e198:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    e19c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    e19e:	606c      	str	r4, [r5, #4]
			update_cache(1);
    e1a0:	2001      	movs	r0, #1
    e1a2:	f7ff fe75 	bl	de90 <update_cache>
    e1a6:	2001      	movs	r0, #1
    e1a8:	e7ea      	b.n	e180 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    e1aa:	42a8      	cmp	r0, r5
    e1ac:	d0e1      	beq.n	e172 <z_set_prio+0x46>
    e1ae:	682d      	ldr	r5, [r5, #0]
    e1b0:	e7de      	b.n	e170 <z_set_prio+0x44>
    e1b2:	bf00      	nop
    e1b4:	200089a0 	.word	0x200089a0

0000e1b8 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    e1b8:	b949      	cbnz	r1, e1ce <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e1ba:	f3ef 8005 	mrs	r0, IPSR
    e1be:	b930      	cbnz	r0, e1ce <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    e1c0:	4b05      	ldr	r3, [pc, #20]	; (e1d8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    e1c2:	69da      	ldr	r2, [r3, #28]
    e1c4:	689b      	ldr	r3, [r3, #8]
    e1c6:	429a      	cmp	r2, r3
    e1c8:	d001      	beq.n	e1ce <z_reschedule+0x16>
    e1ca:	f7fc b86b 	b.w	a2a4 <arch_swap>
    e1ce:	f381 8811 	msr	BASEPRI, r1
    e1d2:	f3bf 8f6f 	isb	sy
}
    e1d6:	4770      	bx	lr
    e1d8:	200089a0 	.word	0x200089a0

0000e1dc <z_sched_start>:
{
    e1dc:	b510      	push	{r4, lr}
	__asm__ volatile(
    e1de:	f04f 0220 	mov.w	r2, #32
    e1e2:	f3ef 8411 	mrs	r4, BASEPRI
    e1e6:	f382 8812 	msr	BASEPRI_MAX, r2
    e1ea:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    e1ee:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    e1f0:	0751      	lsls	r1, r2, #29
    e1f2:	d404      	bmi.n	e1fe <z_sched_start+0x22>
	__asm__ volatile(
    e1f4:	f384 8811 	msr	BASEPRI, r4
    e1f8:	f3bf 8f6f 	isb	sy
}
    e1fc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e1fe:	f022 0204 	bic.w	r2, r2, #4
    e202:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    e204:	f7ff fe9c 	bl	df40 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    e208:	4621      	mov	r1, r4
}
    e20a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    e20e:	4801      	ldr	r0, [pc, #4]	; (e214 <z_sched_start+0x38>)
    e210:	f7ff bfd2 	b.w	e1b8 <z_reschedule>
    e214:	20008c88 	.word	0x20008c88

0000e218 <z_impl_k_thread_suspend>:
{
    e218:	b570      	push	{r4, r5, r6, lr}
    e21a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    e21c:	3018      	adds	r0, #24
    e21e:	f001 fc79 	bl	fb14 <z_abort_timeout>
	__asm__ volatile(
    e222:	f04f 0320 	mov.w	r3, #32
    e226:	f3ef 8611 	mrs	r6, BASEPRI
    e22a:	f383 8812 	msr	BASEPRI_MAX, r3
    e22e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    e232:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    e236:	7b63      	ldrb	r3, [r4, #13]
    e238:	2a00      	cmp	r2, #0
    e23a:	da05      	bge.n	e248 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e23c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    e240:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e242:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    e244:	f001 fba1 	bl	f98a <sys_dlist_remove>
		update_cache(thread == _current);
    e248:	4d0b      	ldr	r5, [pc, #44]	; (e278 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    e24a:	7b63      	ldrb	r3, [r4, #13]
    e24c:	68a8      	ldr	r0, [r5, #8]
    e24e:	f043 0310 	orr.w	r3, r3, #16
    e252:	7363      	strb	r3, [r4, #13]
    e254:	1b03      	subs	r3, r0, r4
    e256:	4258      	negs	r0, r3
    e258:	4158      	adcs	r0, r3
    e25a:	f7ff fe19 	bl	de90 <update_cache>
	__asm__ volatile(
    e25e:	f386 8811 	msr	BASEPRI, r6
    e262:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    e266:	68ab      	ldr	r3, [r5, #8]
    e268:	42a3      	cmp	r3, r4
    e26a:	d103      	bne.n	e274 <z_impl_k_thread_suspend+0x5c>
}
    e26c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    e270:	f001 bc46 	b.w	fb00 <z_reschedule_unlocked>
}
    e274:	bd70      	pop	{r4, r5, r6, pc}
    e276:	bf00      	nop
    e278:	200089a0 	.word	0x200089a0

0000e27c <k_sched_lock>:
	__asm__ volatile(
    e27c:	f04f 0320 	mov.w	r3, #32
    e280:	f3ef 8111 	mrs	r1, BASEPRI
    e284:	f383 8812 	msr	BASEPRI_MAX, r3
    e288:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    e28c:	4b04      	ldr	r3, [pc, #16]	; (e2a0 <k_sched_lock+0x24>)
    e28e:	689a      	ldr	r2, [r3, #8]
    e290:	7bd3      	ldrb	r3, [r2, #15]
    e292:	3b01      	subs	r3, #1
    e294:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    e296:	f381 8811 	msr	BASEPRI, r1
    e29a:	f3bf 8f6f 	isb	sy
}
    e29e:	4770      	bx	lr
    e2a0:	200089a0 	.word	0x200089a0

0000e2a4 <k_sched_unlock>:
{
    e2a4:	b510      	push	{r4, lr}
	__asm__ volatile(
    e2a6:	f04f 0320 	mov.w	r3, #32
    e2aa:	f3ef 8411 	mrs	r4, BASEPRI
    e2ae:	f383 8812 	msr	BASEPRI_MAX, r3
    e2b2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    e2b6:	4b08      	ldr	r3, [pc, #32]	; (e2d8 <k_sched_unlock+0x34>)
		update_cache(0);
    e2b8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    e2ba:	689a      	ldr	r2, [r3, #8]
    e2bc:	7bd3      	ldrb	r3, [r2, #15]
    e2be:	3301      	adds	r3, #1
    e2c0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    e2c2:	f7ff fde5 	bl	de90 <update_cache>
	__asm__ volatile(
    e2c6:	f384 8811 	msr	BASEPRI, r4
    e2ca:	f3bf 8f6f 	isb	sy
}
    e2ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    e2d2:	f001 bc15 	b.w	fb00 <z_reschedule_unlocked>
    e2d6:	bf00      	nop
    e2d8:	200089a0 	.word	0x200089a0

0000e2dc <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    e2dc:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    e2de:	4b04      	ldr	r3, [pc, #16]	; (e2f0 <z_sched_init+0x14>)
    e2e0:	4608      	mov	r0, r1
    e2e2:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    e2e6:	e9c3 2208 	strd	r2, r2, [r3, #32]
    e2ea:	f7ff be8d 	b.w	e008 <k_sched_time_slice_set>
    e2ee:	bf00      	nop
    e2f0:	200089a0 	.word	0x200089a0

0000e2f4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    e2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    e2f6:	f04f 0320 	mov.w	r3, #32
    e2fa:	f3ef 8511 	mrs	r5, BASEPRI
    e2fe:	f383 8812 	msr	BASEPRI_MAX, r3
    e302:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    e306:	4919      	ldr	r1, [pc, #100]	; (e36c <z_impl_k_yield+0x78>)
    e308:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e30a:	7b43      	ldrb	r3, [r0, #13]
    e30c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e310:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    e312:	f001 fb3a 	bl	f98a <sys_dlist_remove>
	return list->head == list;
    e316:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    e318:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    e31a:	7b5a      	ldrb	r2, [r3, #13]
    e31c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    e320:	735a      	strb	r2, [r3, #13]
    e322:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
    e326:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e328:	4282      	cmp	r2, r0
    e32a:	bf08      	it	eq
    e32c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e32e:	b922      	cbnz	r2, e33a <z_impl_k_yield+0x46>
	node->prev = tail;
    e330:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    e334:	6023      	str	r3, [r4, #0]
	list->tail = node;
    e336:	624b      	str	r3, [r1, #36]	; 0x24
}
    e338:	e00c      	b.n	e354 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    e33a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    e33e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    e342:	42be      	cmp	r6, r7
    e344:	d00e      	beq.n	e364 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e346:	42b7      	cmp	r7, r6
    e348:	dd0c      	ble.n	e364 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    e34a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    e34c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    e350:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    e352:	6053      	str	r3, [r2, #4]
	update_cache(1);
    e354:	2001      	movs	r0, #1
    e356:	f7ff fd9b 	bl	de90 <update_cache>
    e35a:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    e35c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e360:	f7fb bfa0 	b.w	a2a4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    e364:	42a2      	cmp	r2, r4
    e366:	d0e3      	beq.n	e330 <z_impl_k_yield+0x3c>
    e368:	6812      	ldr	r2, [r2, #0]
    e36a:	e7e0      	b.n	e32e <z_impl_k_yield+0x3a>
    e36c:	200089a0 	.word	0x200089a0

0000e370 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    e370:	ea50 0301 	orrs.w	r3, r0, r1
{
    e374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e378:	4605      	mov	r5, r0
    e37a:	460e      	mov	r6, r1
	if (ticks == 0) {
    e37c:	d103      	bne.n	e386 <z_tick_sleep+0x16>
	z_impl_k_yield();
    e37e:	f7ff ffb9 	bl	e2f4 <z_impl_k_yield>
		k_yield();
		return 0;
    e382:	2000      	movs	r0, #0
    e384:	e02c      	b.n	e3e0 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    e386:	1c83      	adds	r3, r0, #2
    e388:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    e38c:	db2a      	blt.n	e3e4 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    e38e:	f001 fc03 	bl	fb98 <sys_clock_tick_get_32>
    e392:	1944      	adds	r4, r0, r5
    e394:	f04f 0320 	mov.w	r3, #32
    e398:	f3ef 8811 	mrs	r8, BASEPRI
    e39c:	f383 8812 	msr	BASEPRI_MAX, r3
    e3a0:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    e3a4:	4f11      	ldr	r7, [pc, #68]	; (e3ec <z_tick_sleep+0x7c>)
    e3a6:	4b12      	ldr	r3, [pc, #72]	; (e3f0 <z_tick_sleep+0x80>)
    e3a8:	68b8      	ldr	r0, [r7, #8]
    e3aa:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    e3ac:	f7ff fdfc 	bl	dfa8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    e3b0:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    e3b2:	4910      	ldr	r1, [pc, #64]	; (e3f4 <z_tick_sleep+0x84>)
    e3b4:	462a      	mov	r2, r5
    e3b6:	4633      	mov	r3, r6
    e3b8:	3018      	adds	r0, #24
    e3ba:	f000 f91f 	bl	e5fc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    e3be:	68ba      	ldr	r2, [r7, #8]
    e3c0:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    e3c2:	7b53      	ldrb	r3, [r2, #13]
    e3c4:	f043 0310 	orr.w	r3, r3, #16
    e3c8:	7353      	strb	r3, [r2, #13]
    e3ca:	f7fb ff6b 	bl	a2a4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    e3ce:	f001 fbe3 	bl	fb98 <sys_clock_tick_get_32>
    e3d2:	1a20      	subs	r0, r4, r0
    e3d4:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    e3d8:	2801      	cmp	r0, #1
    e3da:	f173 0300 	sbcs.w	r3, r3, #0
    e3de:	dbd0      	blt.n	e382 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    e3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    e3e4:	f06f 0401 	mvn.w	r4, #1
    e3e8:	1a24      	subs	r4, r4, r0
    e3ea:	e7d3      	b.n	e394 <z_tick_sleep+0x24>
    e3ec:	200089a0 	.word	0x200089a0
    e3f0:	200089c8 	.word	0x200089c8
    e3f4:	0000f9af 	.word	0x0000f9af

0000e3f8 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e3f8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    e3fc:	bf08      	it	eq
    e3fe:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    e402:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e404:	d106      	bne.n	e414 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    e406:	4b08      	ldr	r3, [pc, #32]	; (e428 <z_impl_k_sleep+0x30>)
    e408:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    e40a:	f7ff ff05 	bl	e218 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    e40e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    e412:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    e414:	f7ff ffac 	bl	e370 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    e418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    e41c:	fb80 0303 	smull	r0, r3, r0, r3
    e420:	0bc0      	lsrs	r0, r0, #15
    e422:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    e426:	e7f4      	b.n	e412 <z_impl_k_sleep+0x1a>
    e428:	200089a0 	.word	0x200089a0

0000e42c <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    e42c:	b538      	push	{r3, r4, r5, lr}
    e42e:	2100      	movs	r1, #0
    e430:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    e434:	4c08      	ldr	r4, [pc, #32]	; (e458 <z_impl_k_usleep+0x2c>)
    e436:	2300      	movs	r3, #0
    e438:	fbc0 4105 	smlal	r4, r1, r0, r5
    e43c:	4a07      	ldr	r2, [pc, #28]	; (e45c <z_impl_k_usleep+0x30>)
    e43e:	4620      	mov	r0, r4
    e440:	f7f9 fe88 	bl	8154 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    e444:	17c1      	asrs	r1, r0, #31
    e446:	f7ff ff93 	bl	e370 <z_tick_sleep>
    e44a:	4b04      	ldr	r3, [pc, #16]	; (e45c <z_impl_k_usleep+0x30>)
    e44c:	fb80 0303 	smull	r0, r3, r0, r3
    e450:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    e452:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    e456:	bd38      	pop	{r3, r4, r5, pc}
    e458:	000f423f 	.word	0x000f423f
    e45c:	000f4240 	.word	0x000f4240

0000e460 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    e460:	4b01      	ldr	r3, [pc, #4]	; (e468 <z_impl_z_current_get+0x8>)
    e462:	6898      	ldr	r0, [r3, #8]
    e464:	4770      	bx	lr
    e466:	bf00      	nop
    e468:	200089a0 	.word	0x200089a0

0000e46c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    e46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e470:	4604      	mov	r4, r0
    e472:	f04f 0320 	mov.w	r3, #32
    e476:	f3ef 8611 	mrs	r6, BASEPRI
    e47a:	f383 8812 	msr	BASEPRI_MAX, r3
    e47e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    e482:	7b03      	ldrb	r3, [r0, #12]
    e484:	07d9      	lsls	r1, r3, #31
    e486:	d50b      	bpl.n	e4a0 <z_thread_abort+0x34>
	__asm__ volatile(
    e488:	f386 8811 	msr	BASEPRI, r6
    e48c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    e490:	4040      	eors	r0, r0
    e492:	f380 8811 	msr	BASEPRI, r0
    e496:	f04f 0004 	mov.w	r0, #4
    e49a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    e49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    e4a0:	7b43      	ldrb	r3, [r0, #13]
    e4a2:	071a      	lsls	r2, r3, #28
    e4a4:	d504      	bpl.n	e4b0 <z_thread_abort+0x44>
    e4a6:	f386 8811 	msr	BASEPRI, r6
    e4aa:	f3bf 8f6f 	isb	sy
    e4ae:	e7f5      	b.n	e49c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    e4b0:	f023 0220 	bic.w	r2, r3, #32
    e4b4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    e4b8:	09d2      	lsrs	r2, r2, #7
    e4ba:	d120      	bne.n	e4fe <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    e4bc:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    e4be:	68a3      	ldr	r3, [r4, #8]
    e4c0:	b113      	cbz	r3, e4c8 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    e4c2:	4620      	mov	r0, r4
    e4c4:	f001 fa69 	bl	f99a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    e4c8:	f104 0018 	add.w	r0, r4, #24
    e4cc:	f001 fb22 	bl	fb14 <z_abort_timeout>
    e4d0:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    e4d4:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    e4d8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e4da:	42bd      	cmp	r5, r7
    e4dc:	d000      	beq.n	e4e0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    e4de:	b9b5      	cbnz	r5, e50e <z_thread_abort+0xa2>
		update_cache(1);
    e4e0:	2001      	movs	r0, #1
    e4e2:	f7ff fcd5 	bl	de90 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    e4e6:	4b10      	ldr	r3, [pc, #64]	; (e528 <z_thread_abort+0xbc>)
    e4e8:	689b      	ldr	r3, [r3, #8]
    e4ea:	42a3      	cmp	r3, r4
    e4ec:	d1db      	bne.n	e4a6 <z_thread_abort+0x3a>
    e4ee:	f3ef 8305 	mrs	r3, IPSR
    e4f2:	2b00      	cmp	r3, #0
    e4f4:	d1d7      	bne.n	e4a6 <z_thread_abort+0x3a>
    e4f6:	4630      	mov	r0, r6
    e4f8:	f7fb fed4 	bl	a2a4 <arch_swap>
	return ret;
    e4fc:	e7d3      	b.n	e4a6 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e4fe:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    e502:	f043 0308 	orr.w	r3, r3, #8
    e506:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    e508:	f001 fa3f 	bl	f98a <sys_dlist_remove>
}
    e50c:	e7d7      	b.n	e4be <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    e50e:	4628      	mov	r0, r5
    e510:	f001 fa43 	bl	f99a <unpend_thread_no_timeout>
    e514:	f105 0018 	add.w	r0, r5, #24
    e518:	f001 fafc 	bl	fb14 <z_abort_timeout>
		ready_thread(thread);
    e51c:	4628      	mov	r0, r5
    e51e:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    e522:	f7ff fd0d 	bl	df40 <ready_thread>
    e526:	e7d7      	b.n	e4d8 <z_thread_abort+0x6c>
    e528:	200089a0 	.word	0x200089a0

0000e52c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    e52c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    e52e:	4806      	ldr	r0, [pc, #24]	; (e548 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    e530:	4a06      	ldr	r2, [pc, #24]	; (e54c <z_data_copy+0x20>)
    e532:	4907      	ldr	r1, [pc, #28]	; (e550 <z_data_copy+0x24>)
    e534:	1a12      	subs	r2, r2, r0
    e536:	f001 fa00 	bl	f93a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    e53a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    e53e:	4a05      	ldr	r2, [pc, #20]	; (e554 <z_data_copy+0x28>)
    e540:	4905      	ldr	r1, [pc, #20]	; (e558 <z_data_copy+0x2c>)
    e542:	4806      	ldr	r0, [pc, #24]	; (e55c <z_data_copy+0x30>)
    e544:	f001 b9f9 	b.w	f93a <z_early_memcpy>
    e548:	20008000 	.word	0x20008000
    e54c:	200081a0 	.word	0x200081a0
    e550:	00010de8 	.word	0x00010de8
    e554:	00000000 	.word	0x00000000
    e558:	00010de8 	.word	0x00010de8
    e55c:	20008000 	.word	0x20008000

0000e560 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    e560:	4b03      	ldr	r3, [pc, #12]	; (e570 <elapsed+0x10>)
    e562:	681b      	ldr	r3, [r3, #0]
    e564:	b90b      	cbnz	r3, e56a <elapsed+0xa>
    e566:	f7fd bed5 	b.w	c314 <sys_clock_elapsed>
}
    e56a:	2000      	movs	r0, #0
    e56c:	4770      	bx	lr
    e56e:	bf00      	nop
    e570:	200089d4 	.word	0x200089d4

0000e574 <next_timeout>:

static int32_t next_timeout(void)
{
    e574:	b510      	push	{r4, lr}
	return list->head == list;
    e576:	4b11      	ldr	r3, [pc, #68]	; (e5bc <next_timeout+0x48>)
    e578:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e57a:	429c      	cmp	r4, r3
    e57c:	d10a      	bne.n	e594 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    e57e:	f7ff ffef 	bl	e560 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    e582:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    e586:	4b0e      	ldr	r3, [pc, #56]	; (e5c0 <next_timeout+0x4c>)
    e588:	691b      	ldr	r3, [r3, #16]
    e58a:	b113      	cbz	r3, e592 <next_timeout+0x1e>
    e58c:	4298      	cmp	r0, r3
    e58e:	bfa8      	it	ge
    e590:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    e592:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    e594:	f7ff ffe4 	bl	e560 <elapsed>
	if ((to == NULL) ||
    e598:	2c00      	cmp	r4, #0
    e59a:	d0f2      	beq.n	e582 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    e59c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    e5a0:	1a1b      	subs	r3, r3, r0
    e5a2:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    e5a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    e5aa:	f172 0100 	sbcs.w	r1, r2, #0
    e5ae:	dae8      	bge.n	e582 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    e5b0:	2a00      	cmp	r2, #0
    e5b2:	bfac      	ite	ge
    e5b4:	4618      	movge	r0, r3
    e5b6:	2000      	movlt	r0, #0
    e5b8:	e7e5      	b.n	e586 <next_timeout+0x12>
    e5ba:	bf00      	nop
    e5bc:	20008128 	.word	0x20008128
    e5c0:	200089a0 	.word	0x200089a0

0000e5c4 <remove_timeout>:
{
    e5c4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    e5c6:	b170      	cbz	r0, e5e6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    e5c8:	4b0b      	ldr	r3, [pc, #44]	; (e5f8 <remove_timeout+0x34>)
    e5ca:	685b      	ldr	r3, [r3, #4]
    e5cc:	4298      	cmp	r0, r3
    e5ce:	d00a      	beq.n	e5e6 <remove_timeout+0x22>
    e5d0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    e5d2:	b143      	cbz	r3, e5e6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    e5d4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    e5d8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    e5dc:	1912      	adds	r2, r2, r4
    e5de:	eb41 0105 	adc.w	r1, r1, r5
    e5e2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    e5e6:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    e5ea:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    e5ec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    e5ee:	2300      	movs	r3, #0
	node->prev = NULL;
    e5f0:	e9c0 3300 	strd	r3, r3, [r0]
}
    e5f4:	bd30      	pop	{r4, r5, pc}
    e5f6:	bf00      	nop
    e5f8:	20008128 	.word	0x20008128

0000e5fc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e5fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e600:	bf08      	it	eq
    e602:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    e606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e608:	4604      	mov	r4, r0
    e60a:	461d      	mov	r5, r3
    e60c:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e60e:	d061      	beq.n	e6d4 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    e610:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    e612:	f04f 0320 	mov.w	r3, #32
    e616:	f3ef 8711 	mrs	r7, BASEPRI
    e61a:	f383 8812 	msr	BASEPRI_MAX, r3
    e61e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    e622:	3201      	adds	r2, #1
    e624:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    e628:	da24      	bge.n	e674 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    e62a:	f06f 0301 	mvn.w	r3, #1
    e62e:	492f      	ldr	r1, [pc, #188]	; (e6ec <z_add_timeout+0xf0>)
    e630:	e9d1 2000 	ldrd	r2, r0, [r1]
    e634:	1a9b      	subs	r3, r3, r2
    e636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e63a:	eb62 0000 	sbc.w	r0, r2, r0
    e63e:	1b9e      	subs	r6, r3, r6
    e640:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    e644:	2e01      	cmp	r6, #1
    e646:	f170 0300 	sbcs.w	r3, r0, #0
    e64a:	da01      	bge.n	e650 <z_add_timeout+0x54>
    e64c:	2601      	movs	r6, #1
    e64e:	2000      	movs	r0, #0
    e650:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    e654:	4e26      	ldr	r6, [pc, #152]	; (e6f0 <z_add_timeout+0xf4>)
    e656:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    e65a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e65c:	45b4      	cmp	ip, r6
    e65e:	bf08      	it	eq
    e660:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    e664:	f1bc 0f00 	cmp.w	ip, #0
    e668:	d10d      	bne.n	e686 <z_add_timeout+0x8a>
	node->prev = tail;
    e66a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    e66e:	602c      	str	r4, [r5, #0]
	list->tail = node;
    e670:	6074      	str	r4, [r6, #4]
}
    e672:	e01c      	b.n	e6ae <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    e674:	f7ff ff74 	bl	e560 <elapsed>
    e678:	3601      	adds	r6, #1
    e67a:	f145 0500 	adc.w	r5, r5, #0
    e67e:	1836      	adds	r6, r6, r0
    e680:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    e684:	e7e4      	b.n	e650 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    e686:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    e68a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    e68e:	4293      	cmp	r3, r2
    e690:	eb71 0e00 	sbcs.w	lr, r1, r0
    e694:	da1f      	bge.n	e6d6 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    e696:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    e698:	f8dc 3004 	ldr.w	r3, [ip, #4]
    e69c:	eb60 0001 	sbc.w	r0, r0, r1
    e6a0:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    e6a4:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    e6a8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    e6aa:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    e6ae:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e6b0:	42b3      	cmp	r3, r6
    e6b2:	d00b      	beq.n	e6cc <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    e6b4:	429c      	cmp	r4, r3
    e6b6:	d109      	bne.n	e6cc <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    e6b8:	f7ff ff5c 	bl	e574 <next_timeout>

			if (next_time == 0 ||
    e6bc:	b118      	cbz	r0, e6c6 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    e6be:	4b0d      	ldr	r3, [pc, #52]	; (e6f4 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    e6c0:	691b      	ldr	r3, [r3, #16]
    e6c2:	4283      	cmp	r3, r0
    e6c4:	d002      	beq.n	e6cc <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    e6c6:	2100      	movs	r1, #0
    e6c8:	f7fd fdf4 	bl	c2b4 <sys_clock_set_timeout>
	__asm__ volatile(
    e6cc:	f387 8811 	msr	BASEPRI, r7
    e6d0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    e6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    e6d6:	1a9b      	subs	r3, r3, r2
    e6d8:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    e6dc:	45ac      	cmp	ip, r5
    e6de:	e9c4 3104 	strd	r3, r1, [r4, #16]
    e6e2:	d0c2      	beq.n	e66a <z_add_timeout+0x6e>
    e6e4:	f8dc c000 	ldr.w	ip, [ip]
    e6e8:	e7bc      	b.n	e664 <z_add_timeout+0x68>
    e6ea:	bf00      	nop
    e6ec:	20008790 	.word	0x20008790
    e6f0:	20008128 	.word	0x20008128
    e6f4:	200089a0 	.word	0x200089a0

0000e6f8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    e6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e6fc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    e6fe:	f7ff fcb5 	bl	e06c <z_time_slice>
	__asm__ volatile(
    e702:	f04f 0320 	mov.w	r3, #32
    e706:	f3ef 8611 	mrs	r6, BASEPRI
    e70a:	f383 8812 	msr	BASEPRI_MAX, r3
    e70e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    e712:	4f24      	ldr	r7, [pc, #144]	; (e7a4 <sys_clock_announce+0xac>)
	return list->head == list;
    e714:	f8df 8090 	ldr.w	r8, [pc, #144]	; e7a8 <sys_clock_announce+0xb0>
    e718:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    e71c:	4a23      	ldr	r2, [pc, #140]	; (e7ac <sys_clock_announce+0xb4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e71e:	4540      	cmp	r0, r8
	announce_remaining = ticks;
    e720:	603c      	str	r4, [r7, #0]
	return list->head == list;
    e722:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
    e726:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e72a:	d00b      	beq.n	e744 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    e72c:	b150      	cbz	r0, e744 <sys_clock_announce+0x4c>
    e72e:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    e732:	42ac      	cmp	r4, r5
    e734:	eb71 090c 	sbcs.w	r9, r1, ip
    e738:	da17      	bge.n	e76a <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    e73a:	1b2d      	subs	r5, r5, r4
    e73c:	eb6c 0c01 	sbc.w	ip, ip, r1
    e740:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    e744:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
    e746:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
    e74a:	eb4e 0101 	adc.w	r1, lr, r1
    e74e:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    e752:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    e754:	f7ff ff0e 	bl	e574 <next_timeout>
    e758:	4621      	mov	r1, r4
    e75a:	f7fd fdab 	bl	c2b4 <sys_clock_set_timeout>
	__asm__ volatile(
    e75e:	f386 8811 	msr	BASEPRI, r6
    e762:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    e766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    e76a:	18eb      	adds	r3, r5, r3
    e76c:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
    e770:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    e774:	2200      	movs	r2, #0
    e776:	2300      	movs	r3, #0
    e778:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    e77c:	f7ff ff22 	bl	e5c4 <remove_timeout>
    e780:	f386 8811 	msr	BASEPRI, r6
    e784:	f3bf 8f6f 	isb	sy
		t->fn(t);
    e788:	6883      	ldr	r3, [r0, #8]
    e78a:	4798      	blx	r3
	__asm__ volatile(
    e78c:	f04f 0320 	mov.w	r3, #32
    e790:	f3ef 8611 	mrs	r6, BASEPRI
    e794:	f383 8812 	msr	BASEPRI_MAX, r3
    e798:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    e79c:	683c      	ldr	r4, [r7, #0]
    e79e:	1b64      	subs	r4, r4, r5
    e7a0:	e7ba      	b.n	e718 <sys_clock_announce+0x20>
    e7a2:	bf00      	nop
    e7a4:	200089d4 	.word	0x200089d4
    e7a8:	20008128 	.word	0x20008128
    e7ac:	20008790 	.word	0x20008790

0000e7b0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    e7b0:	b510      	push	{r4, lr}
    e7b2:	f04f 0320 	mov.w	r3, #32
    e7b6:	f3ef 8411 	mrs	r4, BASEPRI
    e7ba:	f383 8812 	msr	BASEPRI_MAX, r3
    e7be:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    e7c2:	f7ff fecd 	bl	e560 <elapsed>
    e7c6:	4603      	mov	r3, r0
    e7c8:	4a05      	ldr	r2, [pc, #20]	; (e7e0 <sys_clock_tick_get+0x30>)
    e7ca:	e9d2 0100 	ldrd	r0, r1, [r2]
    e7ce:	1818      	adds	r0, r3, r0
    e7d0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    e7d4:	f384 8811 	msr	BASEPRI, r4
    e7d8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    e7dc:	bd10      	pop	{r4, pc}
    e7de:	bf00      	nop
    e7e0:	20008790 	.word	0x20008790

0000e7e4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    e7e4:	b570      	push	{r4, r5, r6, lr}
    e7e6:	4604      	mov	r4, r0
	__asm__ volatile(
    e7e8:	f04f 0320 	mov.w	r3, #32
    e7ec:	f3ef 8511 	mrs	r5, BASEPRI
    e7f0:	f383 8812 	msr	BASEPRI_MAX, r3
    e7f4:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    e7f8:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    e7fc:	3301      	adds	r3, #1
    e7fe:	f142 0200 	adc.w	r2, r2, #0
    e802:	2b02      	cmp	r3, #2
    e804:	f172 0200 	sbcs.w	r2, r2, #0
    e808:	d322      	bcc.n	e850 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
    e80a:	f001 f9c9 	bl	fba0 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    e80e:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    e812:	3001      	adds	r0, #1
    e814:	f141 0100 	adc.w	r1, r1, #0
    e818:	18c0      	adds	r0, r0, r3
    e81a:	eb41 0102 	adc.w	r1, r1, r2
    e81e:	2801      	cmp	r0, #1
    e820:	f171 0100 	sbcs.w	r1, r1, #0
    e824:	db32      	blt.n	e88c <z_timer_expiration_handler+0xa8>
    e826:	f001 f9bb 	bl	fba0 <z_impl_k_uptime_ticks>
    e82a:	3001      	adds	r0, #1
    e82c:	f141 0300 	adc.w	r3, r1, #0
    e830:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
    e834:	1880      	adds	r0, r0, r2
    e836:	f06f 0201 	mvn.w	r2, #1
    e83a:	eb43 0301 	adc.w	r3, r3, r1
    e83e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e842:	1a12      	subs	r2, r2, r0
    e844:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    e848:	4620      	mov	r0, r4
    e84a:	491a      	ldr	r1, [pc, #104]	; (e8b4 <z_timer_expiration_handler+0xd0>)
    e84c:	f7ff fed6 	bl	e5fc <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    e850:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e852:	3301      	adds	r3, #1
    e854:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    e856:	6a23      	ldr	r3, [r4, #32]
    e858:	b173      	cbz	r3, e878 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
    e85a:	f385 8811 	msr	BASEPRI, r5
    e85e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    e862:	4620      	mov	r0, r4
    e864:	6a23      	ldr	r3, [r4, #32]
    e866:	4798      	blx	r3
	__asm__ volatile(
    e868:	f04f 0320 	mov.w	r3, #32
    e86c:	f3ef 8511 	mrs	r5, BASEPRI
    e870:	f383 8812 	msr	BASEPRI_MAX, r3
    e874:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e878:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e87c:	42a6      	cmp	r6, r4
    e87e:	d000      	beq.n	e882 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    e880:	b94e      	cbnz	r6, e896 <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
    e882:	f385 8811 	msr	BASEPRI, r5
    e886:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    e88a:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    e88c:	f06f 0201 	mvn.w	r2, #1
    e890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e894:	e7d8      	b.n	e848 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
    e896:	4630      	mov	r0, r6
    e898:	f001 f8e3 	bl	fa62 <z_unpend_thread_no_timeout>
    e89c:	2300      	movs	r3, #0
    e89e:	67b3      	str	r3, [r6, #120]	; 0x78
    e8a0:	f385 8811 	msr	BASEPRI, r5
    e8a4:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    e8a8:	4630      	mov	r0, r6
}
    e8aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    e8ae:	f001 b8c8 	b.w	fa42 <z_ready_thread>
    e8b2:	bf00      	nop
    e8b4:	0000e7e5 	.word	0x0000e7e5

0000e8b8 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    e8b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e8bc:	bf08      	it	eq
    e8be:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    e8c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e8c6:	4619      	mov	r1, r3
    e8c8:	4605      	mov	r5, r0
    e8ca:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
    e8ce:	4614      	mov	r4, r2
    e8d0:	4691      	mov	r9, r2
    e8d2:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    e8d4:	d037      	beq.n	e946 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    e8d6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    e8da:	bf08      	it	eq
    e8dc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    e8e0:	4637      	mov	r7, r6
    e8e2:	4682      	mov	sl, r0
    e8e4:	d011      	beq.n	e90a <z_impl_k_timer_start+0x52>
    e8e6:	ea50 0306 	orrs.w	r3, r0, r6
    e8ea:	d00e      	beq.n	e90a <z_impl_k_timer_start+0x52>
    e8ec:	1c72      	adds	r2, r6, #1
    e8ee:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
    e8f2:	db0a      	blt.n	e90a <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
    e8f4:	2e02      	cmp	r6, #2
    e8f6:	4684      	mov	ip, r0
    e8f8:	f170 0000 	sbcs.w	r0, r0, #0
    e8fc:	bfbc      	itt	lt
    e8fe:	2702      	movlt	r7, #2
    e900:	f04f 0c00 	movlt.w	ip, #0
    e904:	3f01      	subs	r7, #1
    e906:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    e90a:	1c63      	adds	r3, r4, #1
    e90c:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    e910:	db0a      	blt.n	e928 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
    e912:	2c01      	cmp	r4, #1
    e914:	f171 0300 	sbcs.w	r3, r1, #0
    e918:	4622      	mov	r2, r4
    e91a:	bfbc      	itt	lt
    e91c:	2201      	movlt	r2, #1
    e91e:	2100      	movlt	r1, #0
    e920:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    e924:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    e928:	4628      	mov	r0, r5
    e92a:	f001 f8f3 	bl	fb14 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    e92e:	2300      	movs	r3, #0
	timer->period = period;
    e930:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
    e934:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    e936:	464a      	mov	r2, r9
    e938:	4643      	mov	r3, r8
    e93a:	4628      	mov	r0, r5
		     duration);
}
    e93c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    e940:	4902      	ldr	r1, [pc, #8]	; (e94c <z_impl_k_timer_start+0x94>)
    e942:	f7ff be5b 	b.w	e5fc <z_add_timeout>
}
    e946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e94a:	bf00      	nop
    e94c:	0000e7e5 	.word	0x0000e7e5

0000e950 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    e950:	4801      	ldr	r0, [pc, #4]	; (e958 <boot_banner+0x8>)
    e952:	f000 b86e 	b.w	ea32 <printk>
    e956:	bf00      	nop
    e958:	00010db8 	.word	0x00010db8

0000e95c <cbpprintf_external>:
{
    e95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e960:	4606      	mov	r6, r0
    e962:	460d      	mov	r5, r1
    e964:	4617      	mov	r7, r2
	if (buf == NULL) {
    e966:	4698      	mov	r8, r3
    e968:	b32b      	cbz	r3, e9b6 <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
    e96a:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
    e96e:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    e972:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    e976:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    e978:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    e97a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    e97e:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    e982:	441c      	add	r4, r3
    e984:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
    e986:	45ca      	cmp	sl, r9
    e988:	d309      	bcc.n	e99e <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    e98a:	4639      	mov	r1, r7
    e98c:	4630      	mov	r0, r6
    e98e:	46ac      	mov	ip, r5
    e990:	f8d8 2004 	ldr.w	r2, [r8, #4]
    e994:	f108 0308 	add.w	r3, r8, #8
}
    e998:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    e99c:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    e99e:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
    e9a2:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
    e9a6:	4620      	mov	r0, r4
		*ps = s;
    e9a8:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    e9ac:	f000 fc9d 	bl	f2ea <strlen>
    e9b0:	3001      	adds	r0, #1
    e9b2:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    e9b4:	e7e7      	b.n	e986 <cbpprintf_external+0x2a>
}
    e9b6:	f06f 0015 	mvn.w	r0, #21
    e9ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e9be <is_ptr>:
{
    e9be:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
    e9c0:	2500      	movs	r5, #0
{
    e9c2:	4602      	mov	r2, r0
	bool mod = false;
    e9c4:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
    e9c6:	4614      	mov	r4, r2
    e9c8:	f814 3b01 	ldrb.w	r3, [r4], #1
    e9cc:	b90b      	cbnz	r3, e9d2 <is_ptr+0x14>
					return false;
    e9ce:	4618      	mov	r0, r3
    e9d0:	e009      	b.n	e9e6 <is_ptr+0x28>
		if (mod) {
    e9d2:	b198      	cbz	r0, e9fc <is_ptr+0x3e>
			if (cnt == n) {
    e9d4:	428d      	cmp	r5, r1
    e9d6:	d107      	bne.n	e9e8 <is_ptr+0x2a>
				if (c == 'p') {
    e9d8:	2b70      	cmp	r3, #112	; 0x70
    e9da:	d004      	beq.n	e9e6 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
    e9dc:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
    e9e0:	2a3a      	cmp	r2, #58	; 0x3a
    e9e2:	d80b      	bhi.n	e9fc <is_ptr+0x3e>
					return false;
    e9e4:	2000      	movs	r0, #0
}
    e9e6:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
    e9e8:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
    e9ec:	2e3a      	cmp	r6, #58	; 0x3a
    e9ee:	d805      	bhi.n	e9fc <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
    e9f0:	7853      	ldrb	r3, [r2, #1]
				cnt++;
    e9f2:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
    e9f4:	1c94      	adds	r4, r2, #2
    e9f6:	2b00      	cmp	r3, #0
    e9f8:	d0e9      	beq.n	e9ce <is_ptr+0x10>
    e9fa:	2000      	movs	r0, #0
		if (c == '%') {
    e9fc:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
    e9fe:	4622      	mov	r2, r4
			mod = !mod;
    ea00:	bf08      	it	eq
    ea02:	f080 0001 	eoreq.w	r0, r0, #1
    ea06:	e7de      	b.n	e9c6 <is_ptr+0x8>

0000ea08 <arch_printk_char_out>:
}
    ea08:	2000      	movs	r0, #0
    ea0a:	4770      	bx	lr

0000ea0c <str_out>:
{
    ea0c:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    ea0e:	688a      	ldr	r2, [r1, #8]
    ea10:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    ea12:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    ea14:	b114      	cbz	r4, ea1c <str_out+0x10>
    ea16:	684b      	ldr	r3, [r1, #4]
    ea18:	4293      	cmp	r3, r2
    ea1a:	dc01      	bgt.n	ea20 <str_out+0x14>
		ctx->count++;
    ea1c:	608d      	str	r5, [r1, #8]
}
    ea1e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    ea20:	3b01      	subs	r3, #1
    ea22:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    ea24:	bf08      	it	eq
    ea26:	2200      	moveq	r2, #0
    ea28:	608d      	str	r5, [r1, #8]
    ea2a:	bf0c      	ite	eq
    ea2c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    ea2e:	54a0      	strbne	r0, [r4, r2]
    ea30:	e7f5      	b.n	ea1e <str_out+0x12>

0000ea32 <printk>:
{
    ea32:	b40f      	push	{r0, r1, r2, r3}
    ea34:	b507      	push	{r0, r1, r2, lr}
    ea36:	a904      	add	r1, sp, #16
    ea38:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    ea3c:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    ea3e:	f7f9 ff65 	bl	890c <vprintk>
}
    ea42:	b003      	add	sp, #12
    ea44:	f85d eb04 	ldr.w	lr, [sp], #4
    ea48:	b004      	add	sp, #16
    ea4a:	4770      	bx	lr

0000ea4c <snprintk>:
{
    ea4c:	b40c      	push	{r2, r3}
    ea4e:	b507      	push	{r0, r1, r2, lr}
    ea50:	ab04      	add	r3, sp, #16
    ea52:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    ea56:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    ea58:	f7f9 ff66 	bl	8928 <vsnprintk>
}
    ea5c:	b003      	add	sp, #12
    ea5e:	f85d eb04 	ldr.w	lr, [sp], #4
    ea62:	b002      	add	sp, #8
    ea64:	4770      	bx	lr

0000ea66 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    ea66:	4604      	mov	r4, r0
    ea68:	b508      	push	{r3, lr}
    ea6a:	4608      	mov	r0, r1
    ea6c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    ea6e:	461a      	mov	r2, r3
    ea70:	47a0      	blx	r4
	return z_impl_z_current_get();
    ea72:	f7ff fcf5 	bl	e460 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    ea76:	f7fc f83d 	bl	aaf4 <z_impl_k_thread_abort>

0000ea7a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ea7a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    ea7c:	f013 0307 	ands.w	r3, r3, #7
    ea80:	d105      	bne.n	ea8e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    ea82:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    ea84:	2b00      	cmp	r3, #0
    ea86:	bf0c      	ite	eq
    ea88:	2000      	moveq	r0, #0
    ea8a:	2003      	movne	r0, #3
    ea8c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    ea8e:	2b02      	cmp	r3, #2
    ea90:	d105      	bne.n	ea9e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    ea92:	8b40      	ldrh	r0, [r0, #26]
    ea94:	fab0 f080 	clz	r0, r0
    ea98:	0940      	lsrs	r0, r0, #5
    ea9a:	0080      	lsls	r0, r0, #2
    ea9c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    ea9e:	2b01      	cmp	r3, #1
    eaa0:	d105      	bne.n	eaae <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    eaa2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    eaa4:	2b00      	cmp	r3, #0
    eaa6:	bf0c      	ite	eq
    eaa8:	2000      	moveq	r0, #0
    eaaa:	2005      	movne	r0, #5
    eaac:	4770      	bx	lr
	int evt = EVT_NOP;
    eaae:	2000      	movs	r0, #0
}
    eab0:	4770      	bx	lr

0000eab2 <validate_args>:
{
    eab2:	b510      	push	{r4, lr}
    eab4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    eab6:	b100      	cbz	r0, eaba <validate_args+0x8>
    eab8:	b911      	cbnz	r1, eac0 <validate_args+0xe>
		return -EINVAL;
    eaba:	f06f 0015 	mvn.w	r0, #21
}
    eabe:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    eac0:	1d08      	adds	r0, r1, #4
    eac2:	f000 f895 	bl	ebf0 <sys_notify_validate>
	if ((rv == 0)
    eac6:	2800      	cmp	r0, #0
    eac8:	d1f9      	bne.n	eabe <validate_args+0xc>
	    && ((cli->notify.flags
    eaca:	68a3      	ldr	r3, [r4, #8]
    eacc:	2b03      	cmp	r3, #3
    eace:	d9f6      	bls.n	eabe <validate_args+0xc>
    ead0:	e7f3      	b.n	eaba <validate_args+0x8>

0000ead2 <notify_one>:
{
    ead2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ead6:	460d      	mov	r5, r1
    ead8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    eada:	4619      	mov	r1, r3
    eadc:	1d28      	adds	r0, r5, #4
{
    eade:	4690      	mov	r8, r2
    eae0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    eae2:	f000 f896 	bl	ec12 <sys_notify_finalize>
	if (cb) {
    eae6:	4604      	mov	r4, r0
    eae8:	b138      	cbz	r0, eafa <notify_one+0x28>
		cb(mgr, cli, state, res);
    eaea:	4633      	mov	r3, r6
    eaec:	4642      	mov	r2, r8
    eaee:	4629      	mov	r1, r5
    eaf0:	4638      	mov	r0, r7
    eaf2:	46a4      	mov	ip, r4
}
    eaf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    eaf8:	4760      	bx	ip
}
    eafa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000eafe <transition_complete>:
{
    eafe:	b410      	push	{r4}
	__asm__ volatile(
    eb00:	f04f 0420 	mov.w	r4, #32
    eb04:	f3ef 8211 	mrs	r2, BASEPRI
    eb08:	f384 8812 	msr	BASEPRI_MAX, r4
    eb0c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    eb10:	6141      	str	r1, [r0, #20]
}
    eb12:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    eb14:	2101      	movs	r1, #1
    eb16:	f7f9 bf1d 	b.w	8954 <process_event>

0000eb1a <onoff_manager_init>:
{
    eb1a:	b538      	push	{r3, r4, r5, lr}
    eb1c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    eb1e:	4605      	mov	r5, r0
    eb20:	b158      	cbz	r0, eb3a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    eb22:	b151      	cbz	r1, eb3a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    eb24:	680b      	ldr	r3, [r1, #0]
    eb26:	b143      	cbz	r3, eb3a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    eb28:	684b      	ldr	r3, [r1, #4]
    eb2a:	b133      	cbz	r3, eb3a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    eb2c:	221c      	movs	r2, #28
    eb2e:	2100      	movs	r1, #0
    eb30:	f000 fbf6 	bl	f320 <memset>
	return 0;
    eb34:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    eb36:	612c      	str	r4, [r5, #16]
}
    eb38:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    eb3a:	f06f 0015 	mvn.w	r0, #21
    eb3e:	e7fb      	b.n	eb38 <onoff_manager_init+0x1e>

0000eb40 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    eb40:	b570      	push	{r4, r5, r6, lr}
    eb42:	4605      	mov	r5, r0
    eb44:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    eb46:	f7ff ffb4 	bl	eab2 <validate_args>

	if (rv < 0) {
    eb4a:	1e04      	subs	r4, r0, #0
    eb4c:	db15      	blt.n	eb7a <onoff_request+0x3a>
    eb4e:	f04f 0320 	mov.w	r3, #32
    eb52:	f3ef 8211 	mrs	r2, BASEPRI
    eb56:	f383 8812 	msr	BASEPRI_MAX, r3
    eb5a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    eb5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    eb62:	8b6b      	ldrh	r3, [r5, #26]
    eb64:	8b2c      	ldrh	r4, [r5, #24]
    eb66:	428b      	cmp	r3, r1
    eb68:	f004 0407 	and.w	r4, r4, #7
    eb6c:	d107      	bne.n	eb7e <onoff_request+0x3e>
	__asm__ volatile(
    eb6e:	f382 8811 	msr	BASEPRI, r2
    eb72:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    eb76:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    eb7a:	4620      	mov	r0, r4
    eb7c:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    eb7e:	2c02      	cmp	r4, #2
    eb80:	d10c      	bne.n	eb9c <onoff_request+0x5c>
		mgr->refs += 1U;
    eb82:	3301      	adds	r3, #1
    eb84:	836b      	strh	r3, [r5, #26]
    eb86:	f382 8811 	msr	BASEPRI, r2
    eb8a:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    eb8e:	2300      	movs	r3, #0
    eb90:	4622      	mov	r2, r4
    eb92:	4631      	mov	r1, r6
    eb94:	4628      	mov	r0, r5
    eb96:	f7ff ff9c 	bl	ead2 <notify_one>
    eb9a:	e7ee      	b.n	eb7a <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    eb9c:	2c06      	cmp	r4, #6
    eb9e:	d814      	bhi.n	ebca <onoff_request+0x8a>
    eba0:	e8df f004 	tbb	[pc, r4]
    eba4:	13131304 	.word	0x13131304
    eba8:	1a04      	.short	0x1a04
    ebaa:	04          	.byte	0x04
    ebab:	00          	.byte	0x00
	parent->next = child;
    ebac:	2300      	movs	r3, #0
    ebae:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    ebb0:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    ebb2:	b93b      	cbnz	r3, ebc4 <onoff_request+0x84>
	list->head = node;
    ebb4:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    ebb8:	b9ac      	cbnz	r4, ebe6 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    ebba:	2102      	movs	r1, #2
    ebbc:	4628      	mov	r0, r5
    ebbe:	f7f9 fec9 	bl	8954 <process_event>
    ebc2:	e7da      	b.n	eb7a <onoff_request+0x3a>
	parent->next = child;
    ebc4:	601e      	str	r6, [r3, #0]
	list->tail = node;
    ebc6:	606e      	str	r6, [r5, #4]
}
    ebc8:	e7f6      	b.n	ebb8 <onoff_request+0x78>
    ebca:	f382 8811 	msr	BASEPRI, r2
    ebce:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    ebd2:	f06f 0404 	mvn.w	r4, #4
    ebd6:	e7d0      	b.n	eb7a <onoff_request+0x3a>
    ebd8:	f382 8811 	msr	BASEPRI, r2
    ebdc:	f3bf 8f6f 	isb	sy
    ebe0:	f06f 0485 	mvn.w	r4, #133	; 0x85
    ebe4:	e7c9      	b.n	eb7a <onoff_request+0x3a>
    ebe6:	f382 8811 	msr	BASEPRI, r2
    ebea:	f3bf 8f6f 	isb	sy
		if (notify) {
    ebee:	e7c4      	b.n	eb7a <onoff_request+0x3a>

0000ebf0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    ebf0:	4603      	mov	r3, r0
    ebf2:	b158      	cbz	r0, ec0c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    ebf4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    ebf6:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    ebfa:	2a01      	cmp	r2, #1
    ebfc:	d003      	beq.n	ec06 <sys_notify_validate+0x16>
    ebfe:	2a03      	cmp	r2, #3
    ec00:	d104      	bne.n	ec0c <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    ec02:	6802      	ldr	r2, [r0, #0]
    ec04:	b112      	cbz	r2, ec0c <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    ec06:	2000      	movs	r0, #0
    ec08:	6098      	str	r0, [r3, #8]
    ec0a:	4770      	bx	lr
    ec0c:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    ec10:	4770      	bx	lr

0000ec12 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    ec12:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    ec14:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    ec16:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    ec1a:	2a03      	cmp	r2, #3
    ec1c:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    ec20:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    ec22:	bf14      	ite	ne
    ec24:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    ec26:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    ec28:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    ec2a:	4770      	bx	lr

0000ec2c <encode_uint>:
{
    ec2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec30:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    ec32:	78d3      	ldrb	r3, [r2, #3]
{
    ec34:	4680      	mov	r8, r0
	switch (specifier) {
    ec36:	2b6f      	cmp	r3, #111	; 0x6f
{
    ec38:	460f      	mov	r7, r1
    ec3a:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    ec3c:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    ec40:	d029      	beq.n	ec96 <encode_uint+0x6a>
    ec42:	d824      	bhi.n	ec8e <encode_uint+0x62>
		return 10;
    ec44:	2b58      	cmp	r3, #88	; 0x58
    ec46:	bf0c      	ite	eq
    ec48:	2610      	moveq	r6, #16
    ec4a:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    ec4c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    ec50:	4632      	mov	r2, r6
    ec52:	2300      	movs	r3, #0
    ec54:	4640      	mov	r0, r8
    ec56:	4639      	mov	r1, r7
    ec58:	f7f9 fa7c 	bl	8154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ec5c:	2a09      	cmp	r2, #9
    ec5e:	b2d4      	uxtb	r4, r2
    ec60:	d81e      	bhi.n	eca0 <encode_uint+0x74>
    ec62:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    ec64:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ec66:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    ec68:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ec6c:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    ec70:	d301      	bcc.n	ec76 <encode_uint+0x4a>
    ec72:	45d1      	cmp	r9, sl
    ec74:	d811      	bhi.n	ec9a <encode_uint+0x6e>
	if (conv->flag_hash) {
    ec76:	782b      	ldrb	r3, [r5, #0]
    ec78:	069b      	lsls	r3, r3, #26
    ec7a:	d505      	bpl.n	ec88 <encode_uint+0x5c>
		if (radix == 8) {
    ec7c:	2e08      	cmp	r6, #8
    ec7e:	d115      	bne.n	ecac <encode_uint+0x80>
			conv->altform_0 = true;
    ec80:	78ab      	ldrb	r3, [r5, #2]
    ec82:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    ec86:	70ab      	strb	r3, [r5, #2]
}
    ec88:	4648      	mov	r0, r9
    ec8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    ec8e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    ec92:	2b70      	cmp	r3, #112	; 0x70
    ec94:	e7d7      	b.n	ec46 <encode_uint+0x1a>
	switch (specifier) {
    ec96:	2608      	movs	r6, #8
    ec98:	e7d8      	b.n	ec4c <encode_uint+0x20>
		value /= radix;
    ec9a:	4680      	mov	r8, r0
    ec9c:	460f      	mov	r7, r1
    ec9e:	e7d7      	b.n	ec50 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    eca0:	f1bb 0f19 	cmp.w	fp, #25
    eca4:	bf94      	ite	ls
    eca6:	3437      	addls	r4, #55	; 0x37
    eca8:	3457      	addhi	r4, #87	; 0x57
    ecaa:	e7db      	b.n	ec64 <encode_uint+0x38>
		} else if (radix == 16) {
    ecac:	2e10      	cmp	r6, #16
    ecae:	d1eb      	bne.n	ec88 <encode_uint+0x5c>
			conv->altform_0c = true;
    ecb0:	78ab      	ldrb	r3, [r5, #2]
    ecb2:	f043 0310 	orr.w	r3, r3, #16
    ecb6:	e7e6      	b.n	ec86 <encode_uint+0x5a>

0000ecb8 <outs>:
{
    ecb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ecbc:	4607      	mov	r7, r0
    ecbe:	4688      	mov	r8, r1
    ecc0:	4615      	mov	r5, r2
    ecc2:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    ecc4:	4614      	mov	r4, r2
    ecc6:	42b4      	cmp	r4, r6
    ecc8:	d305      	bcc.n	ecd6 <outs+0x1e>
    ecca:	b10e      	cbz	r6, ecd0 <outs+0x18>
	return (int)count;
    eccc:	1b60      	subs	r0, r4, r5
    ecce:	e008      	b.n	ece2 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    ecd0:	7823      	ldrb	r3, [r4, #0]
    ecd2:	2b00      	cmp	r3, #0
    ecd4:	d0fa      	beq.n	eccc <outs+0x14>
		int rc = out((int)*sp++, ctx);
    ecd6:	4641      	mov	r1, r8
    ecd8:	f814 0b01 	ldrb.w	r0, [r4], #1
    ecdc:	47b8      	blx	r7
		if (rc < 0) {
    ecde:	2800      	cmp	r0, #0
    ece0:	daf1      	bge.n	ecc6 <outs+0xe>
}
    ece2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ece6 <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    ece6:	68c3      	ldr	r3, [r0, #12]
    ece8:	6802      	ldr	r2, [r0, #0]
    ecea:	4293      	cmp	r3, r2
    ecec:	d904      	bls.n	ecf8 <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    ecee:	3b01      	subs	r3, #1
    ecf0:	1a9a      	subs	r2, r3, r2

		return false;
    ecf2:	2000      	movs	r0, #0
	} else if (!buffer->rd_idx) {
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    ecf4:	600a      	str	r2, [r1, #0]
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
    ecf6:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    ecf8:	6a00      	ldr	r0, [r0, #32]
	} else if (!buffer->rd_idx) {
    ecfa:	b913      	cbnz	r3, ed02 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    ecfc:	3801      	subs	r0, #1
    ecfe:	1a82      	subs	r2, r0, r2
		return false;
    ed00:	e7f7      	b.n	ecf2 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
    ed02:	1a82      	subs	r2, r0, r2
	return true;
    ed04:	2001      	movs	r0, #1
    ed06:	e7f5      	b.n	ecf4 <free_space+0xe>

0000ed08 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    ed08:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    ed0a:	a901      	add	r1, sp, #4
{
    ed0c:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    ed0e:	f7ff ffea 	bl	ece6 <free_space>
    ed12:	b120      	cbz	r0, ed1e <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    ed14:	9b01      	ldr	r3, [sp, #4]
    ed16:	68e2      	ldr	r2, [r4, #12]
    ed18:	3b01      	subs	r3, #1
    ed1a:	4413      	add	r3, r2
    ed1c:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    ed1e:	6a20      	ldr	r0, [r4, #32]
    ed20:	9b01      	ldr	r3, [sp, #4]
    ed22:	1ac0      	subs	r0, r0, r3
}
    ed24:	3801      	subs	r0, #1
    ed26:	b002      	add	sp, #8
    ed28:	bd10      	pop	{r4, pc}

0000ed2a <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    ed2a:	b510      	push	{r4, lr}
    ed2c:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    ed2e:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    ed30:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    ed32:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    ed34:	07d2      	lsls	r2, r2, #31
    ed36:	d502      	bpl.n	ed3e <idx_inc+0x14>
		return i & (buffer->size - 1);
    ed38:	3b01      	subs	r3, #1
    ed3a:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    ed3c:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    ed3e:	4298      	cmp	r0, r3
    ed40:	bf28      	it	cs
    ed42:	1ac0      	subcs	r0, r0, r3
    ed44:	e7fa      	b.n	ed3c <idx_inc+0x12>

0000ed46 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    ed46:	b538      	push	{r3, r4, r5, lr}
    ed48:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    ed4a:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
    ed4c:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    ed4e:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    ed50:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    ed54:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    ed58:	6801      	ldr	r1, [r0, #0]
    ed5a:	462a      	mov	r2, r5
{
    ed5c:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    ed5e:	f7ff ffe4 	bl	ed2a <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    ed62:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    ed64:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    ed66:	462a      	mov	r2, r5
    ed68:	4620      	mov	r0, r4
    ed6a:	f7ff ffde 	bl	ed2a <idx_inc>
    ed6e:	6060      	str	r0, [r4, #4]
}
    ed70:	bd38      	pop	{r3, r4, r5, pc}

0000ed72 <max_utilization_update>:
{
    ed72:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    ed74:	6903      	ldr	r3, [r0, #16]
{
    ed76:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    ed78:	075b      	lsls	r3, r3, #29
    ed7a:	d506      	bpl.n	ed8a <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    ed7c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    ed7e:	f7ff ffc3 	bl	ed08 <get_usage>
    ed82:	4285      	cmp	r5, r0
    ed84:	bf2c      	ite	cs
    ed86:	6265      	strcs	r5, [r4, #36]	; 0x24
    ed88:	6260      	strcc	r0, [r4, #36]	; 0x24
}
    ed8a:	bd38      	pop	{r3, r4, r5, pc}

0000ed8c <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    ed8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed90:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
    ed92:	2300      	movs	r3, #0
    ed94:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    ed96:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    ed9a:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
    ed9e:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
    eda0:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
    eda4:	468b      	mov	fp, r1
	if (item->hdr.busy && !item->hdr.valid) {
    eda6:	f003 0303 	and.w	r3, r3, #3
    edaa:	2b02      	cmp	r3, #2
{
    edac:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    edae:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    edb2:	d103      	bne.n	edbc <drop_item_locked+0x30>
		return item->skip.len;
    edb4:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    edb8:	08ad      	lsrs	r5, r5, #2
    edba:	d12e      	bne.n	ee1a <drop_item_locked+0x8e>
    edbc:	4630      	mov	r0, r6
    edbe:	69a3      	ldr	r3, [r4, #24]
    edc0:	4798      	blx	r3
    edc2:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
    edc4:	f1b8 0f00 	cmp.w	r8, #0
    edc8:	d038      	beq.n	ee3c <drop_item_locked+0xb0>
		if (item->hdr.busy) {
    edca:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    edce:	079b      	lsls	r3, r3, #30
    edd0:	d531      	bpl.n	ee36 <drop_item_locked+0xaa>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    edd2:	4620      	mov	r0, r4
    edd4:	f10b 0101 	add.w	r1, fp, #1
    edd8:	f7ff ffb5 	bl	ed46 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    eddc:	6861      	ldr	r1, [r4, #4]
    edde:	462a      	mov	r2, r5
    ede0:	4620      	mov	r0, r4
    ede2:	f7ff ffa2 	bl	ed2a <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    ede6:	6821      	ldr	r1, [r4, #0]
    ede8:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    edea:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    edec:	4620      	mov	r0, r4
    edee:	f7ff ff9c 	bl	ed2a <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    edf2:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    edf4:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    edf6:	68e1      	ldr	r1, [r4, #12]
    edf8:	4620      	mov	r0, r4
    edfa:	f7ff ff96 	bl	ed2a <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    edfe:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
    ee00:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    ee04:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    ee08:	f002 0203 	and.w	r2, r2, #3
    ee0c:	2a02      	cmp	r2, #2
    ee0e:	d10e      	bne.n	ee2e <drop_item_locked+0xa2>
		return item->skip.len;
    ee10:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
    ee14:	089b      	lsrs	r3, r3, #2
    ee16:	d00a      	beq.n	ee2e <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
    ee18:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    ee1a:	68e1      	ldr	r1, [r4, #12]
    ee1c:	462a      	mov	r2, r5
    ee1e:	4620      	mov	r0, r4
    ee20:	f7ff ff83 	bl	ed2a <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    ee24:	e9c4 0002 	strd	r0, r0, [r4, #8]
	}

	return item;
}
    ee28:	4630      	mov	r0, r6
    ee2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
    ee2e:	4630      	mov	r0, r6
    ee30:	69a3      	ldr	r3, [r4, #24]
    ee32:	4798      	blx	r3
    ee34:	4405      	add	r5, r0
			*user_packet = true;
    ee36:	2301      	movs	r3, #1
    ee38:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
    ee3a:	e7ee      	b.n	ee1a <drop_item_locked+0x8e>
		item = NULL;
    ee3c:	4646      	mov	r6, r8
	return item;
    ee3e:	e7f3      	b.n	ee28 <drop_item_locked+0x9c>

0000ee40 <mpsc_pbuf_init>:
{
    ee40:	b538      	push	{r3, r4, r5, lr}
    ee42:	460d      	mov	r5, r1
    ee44:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    ee46:	221c      	movs	r2, #28
    ee48:	2100      	movs	r1, #0
    ee4a:	f000 fa69 	bl	f320 <memset>
	buffer->max_usage = 0;
    ee4e:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
    ee50:	68eb      	ldr	r3, [r5, #12]
    ee52:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    ee54:	68ab      	ldr	r3, [r5, #8]
    ee56:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    ee58:	682b      	ldr	r3, [r5, #0]
    ee5a:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    ee5c:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
    ee5e:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
    ee60:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
    ee62:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    ee64:	b123      	cbz	r3, ee70 <mpsc_pbuf_init+0x30>
    ee66:	1e59      	subs	r1, r3, #1
    ee68:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    ee6a:	bf08      	it	eq
    ee6c:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    ee70:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    ee72:	2201      	movs	r2, #1
    ee74:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ee78:	2100      	movs	r1, #0
}
    ee7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ee7e:	f000 bd78 	b.w	f972 <z_impl_k_sem_init>

0000ee82 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    ee82:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    ee86:	4698      	mov	r8, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    ee88:	6a03      	ldr	r3, [r0, #32]
{
    ee8a:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
    ee8c:	3b01      	subs	r3, #1
    ee8e:	428b      	cmp	r3, r1
{
    ee90:	460e      	mov	r6, r1
    ee92:	4617      	mov	r7, r2
	if (wlen > (buffer->size - 1)) {
    ee94:	d351      	bcc.n	ef3a <mpsc_pbuf_alloc+0xb8>
	union mpsc_pbuf_generic *dropped_item = NULL;
    ee96:	2500      	movs	r5, #0
	__asm__ volatile(
    ee98:	f04f 0320 	mov.w	r3, #32
    ee9c:	f3ef 8911 	mrs	r9, BASEPRI
    eea0:	f383 8812 	msr	BASEPRI_MAX, r3
    eea4:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
		wrap = free_space(buffer, &free_wlen);
    eea8:	4620      	mov	r0, r4
    eeaa:	a901      	add	r1, sp, #4
    eeac:	f7ff ff1b 	bl	ece6 <free_space>

		if (free_wlen >= wlen) {
    eeb0:	f8dd a004 	ldr.w	sl, [sp, #4]
    eeb4:	45b2      	cmp	sl, r6
    eeb6:	d317      	bcc.n	eee8 <mpsc_pbuf_alloc+0x66>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    eeb8:	6822      	ldr	r2, [r4, #0]
			item =
    eeba:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
    eebc:	4620      	mov	r0, r4
			item->hdr.valid = 0;
    eebe:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
    eec2:	eb03 0582 	add.w	r5, r3, r2, lsl #2
			item->hdr.valid = 0;
    eec6:	f021 0103 	bic.w	r1, r1, #3
    eeca:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    eece:	6821      	ldr	r1, [r4, #0]
    eed0:	4632      	mov	r2, r6
    eed2:	f7ff ff2a 	bl	ed2a <idx_inc>
    eed6:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
    eed8:	f389 8811 	msr	BASEPRI, r9
    eedc:	f3bf 8f6f 	isb	sy
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    eee0:	4628      	mov	r0, r5
    eee2:	b002      	add	sp, #8
    eee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (wrap) {
    eee8:	b150      	cbz	r0, ef00 <mpsc_pbuf_alloc+0x7e>
			add_skip_item(buffer, free_wlen);
    eeea:	4651      	mov	r1, sl
    eeec:	4620      	mov	r0, r4
    eeee:	f7ff ff2a 	bl	ed46 <add_skip_item>
    eef2:	f389 8811 	msr	BASEPRI, r9
    eef6:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
    eefa:	2d00      	cmp	r5, #0
    eefc:	d0cb      	beq.n	ee96 <mpsc_pbuf_alloc+0x14>
    eefe:	e033      	b.n	ef68 <mpsc_pbuf_alloc+0xe6>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    ef00:	ea57 0308 	orrs.w	r3, r7, r8
    ef04:	d020      	beq.n	ef48 <mpsc_pbuf_alloc+0xc6>
			   !k_is_in_isr()) {
    ef06:	f000 fd1a 	bl	f93e <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    ef0a:	b9e8      	cbnz	r0, ef48 <mpsc_pbuf_alloc+0xc6>
    ef0c:	f389 8811 	msr	BASEPRI, r9
    ef10:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    ef14:	463a      	mov	r2, r7
    ef16:	4643      	mov	r3, r8
    ef18:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ef1c:	f7fe ff7c 	bl	de18 <z_impl_k_sem_take>
	__asm__ volatile(
    ef20:	f04f 0220 	mov.w	r2, #32
    ef24:	f3ef 8311 	mrs	r3, BASEPRI
    ef28:	f382 8812 	msr	BASEPRI_MAX, r2
    ef2c:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    ef30:	b128      	cbz	r0, ef3e <mpsc_pbuf_alloc+0xbc>
	__asm__ volatile(
    ef32:	f383 8811 	msr	BASEPRI, r3
    ef36:	f3bf 8f6f 	isb	sy
		return NULL;
    ef3a:	2500      	movs	r5, #0
    ef3c:	e7d0      	b.n	eee0 <mpsc_pbuf_alloc+0x5e>
    ef3e:	f383 8811 	msr	BASEPRI, r3
    ef42:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
    ef46:	e7d8      	b.n	eefa <mpsc_pbuf_alloc+0x78>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    ef48:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    ef4a:	4651      	mov	r1, sl
    ef4c:	4620      	mov	r0, r4
    ef4e:	f10d 0303 	add.w	r3, sp, #3
    ef52:	f3c2 0240 	ubfx	r2, r2, #1, #1
    ef56:	f7ff ff19 	bl	ed8c <drop_item_locked>
    ef5a:	4605      	mov	r5, r0
    ef5c:	f389 8811 	msr	BASEPRI, r9
    ef60:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
    ef64:	2800      	cmp	r0, #0
    ef66:	d0e8      	beq.n	ef3a <mpsc_pbuf_alloc+0xb8>
    ef68:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ef6c:	2b00      	cmp	r3, #0
    ef6e:	d093      	beq.n	ee98 <mpsc_pbuf_alloc+0x16>
			if (buffer->notify_drop) {
    ef70:	6963      	ldr	r3, [r4, #20]
    ef72:	2b00      	cmp	r3, #0
    ef74:	d08f      	beq.n	ee96 <mpsc_pbuf_alloc+0x14>
				buffer->notify_drop(buffer, dropped_item);
    ef76:	4629      	mov	r1, r5
    ef78:	4620      	mov	r0, r4
    ef7a:	4798      	blx	r3
    ef7c:	e78b      	b.n	ee96 <mpsc_pbuf_alloc+0x14>

0000ef7e <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    ef7e:	b570      	push	{r4, r5, r6, lr}
    ef80:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    ef82:	6983      	ldr	r3, [r0, #24]
    ef84:	4608      	mov	r0, r1
{
    ef86:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    ef88:	4798      	blx	r3
    ef8a:	4602      	mov	r2, r0
	__asm__ volatile(
    ef8c:	f04f 0320 	mov.w	r3, #32
    ef90:	f3ef 8611 	mrs	r6, BASEPRI
    ef94:	f383 8812 	msr	BASEPRI_MAX, r3
    ef98:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    ef9c:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    ef9e:	4620      	mov	r0, r4
	item->hdr.valid = 1;
    efa0:	f043 0301 	orr.w	r3, r3, #1
    efa4:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    efa6:	6861      	ldr	r1, [r4, #4]
    efa8:	f7ff febf 	bl	ed2a <idx_inc>
    efac:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    efae:	4620      	mov	r0, r4
    efb0:	f7ff fedf 	bl	ed72 <max_utilization_update>
	__asm__ volatile(
    efb4:	f386 8811 	msr	BASEPRI, r6
    efb8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    efbc:	bd70      	pop	{r4, r5, r6, pc}

0000efbe <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    efbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    efc0:	4604      	mov	r4, r0
	__asm__ volatile(
    efc2:	f04f 0320 	mov.w	r3, #32
    efc6:	f3ef 8611 	mrs	r6, BASEPRI
    efca:	f383 8812 	msr	BASEPRI_MAX, r3
    efce:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    efd2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    efd6:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    efd8:	bf88      	it	hi
    efda:	6a22      	ldrhi	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
    efdc:	69e1      	ldr	r1, [r4, #28]
	*res = buffer->size - buffer->tmp_rd_idx;
    efde:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
    efe0:	b132      	cbz	r2, eff0 <mpsc_pbuf_claim+0x32>
	return !item->hdr.valid && !item->hdr.busy;
    efe2:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		item = (union mpsc_pbuf_generic *)
    efe6:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
    efea:	f012 0003 	ands.w	r0, r2, #3
    efee:	d105      	bne.n	effc <mpsc_pbuf_claim+0x3e>
	__asm__ volatile(
    eff0:	f386 8811 	msr	BASEPRI, r6
    eff4:	f3bf 8f6f 	isb	sy
			item = NULL;
    eff8:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
    effa:	e02e      	b.n	f05a <mpsc_pbuf_claim+0x9c>
	if (item->hdr.busy && !item->hdr.valid) {
    effc:	2802      	cmp	r0, #2
    effe:	d103      	bne.n	f008 <mpsc_pbuf_claim+0x4a>
		return item->skip.len;
    f000:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
    f004:	08ad      	lsrs	r5, r5, #2
    f006:	d105      	bne.n	f014 <mpsc_pbuf_claim+0x56>
    f008:	07d0      	lsls	r0, r2, #31
    f00a:	d414      	bmi.n	f036 <mpsc_pbuf_claim+0x78>
					skip ? skip : buffer->get_wlen(item);
    f00c:	4638      	mov	r0, r7
    f00e:	69a3      	ldr	r3, [r4, #24]
    f010:	4798      	blx	r3
    f012:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    f014:	68a1      	ldr	r1, [r4, #8]
    f016:	462a      	mov	r2, r5
    f018:	4620      	mov	r0, r4
    f01a:	f7ff fe86 	bl	ed2a <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    f01e:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    f020:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    f022:	462a      	mov	r2, r5
    f024:	4620      	mov	r0, r4
    f026:	f7ff fe80 	bl	ed2a <idx_inc>
				buffer->rd_idx =
    f02a:	60e0      	str	r0, [r4, #12]
    f02c:	f386 8811 	msr	BASEPRI, r6
    f030:	f3bf 8f6f 	isb	sy
	} while (cont);
    f034:	e7c5      	b.n	efc2 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
    f036:	f042 0202 	orr.w	r2, r2, #2
    f03a:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    f03e:	69a3      	ldr	r3, [r4, #24]
    f040:	4638      	mov	r0, r7
    f042:	68a5      	ldr	r5, [r4, #8]
    f044:	4798      	blx	r3
    f046:	4629      	mov	r1, r5
    f048:	4602      	mov	r2, r0
    f04a:	4620      	mov	r0, r4
    f04c:	f7ff fe6d 	bl	ed2a <idx_inc>
				buffer->tmp_rd_idx =
    f050:	60a0      	str	r0, [r4, #8]
    f052:	f386 8811 	msr	BASEPRI, r6
    f056:	f3bf 8f6f 	isb	sy
}
    f05a:	4638      	mov	r0, r7
    f05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f05e <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    f05e:	b570      	push	{r4, r5, r6, lr}
    f060:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    f062:	6983      	ldr	r3, [r0, #24]
    f064:	4608      	mov	r0, r1
{
    f066:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    f068:	4798      	blx	r3
    f06a:	4602      	mov	r2, r0
	__asm__ volatile(
    f06c:	f04f 0320 	mov.w	r3, #32
    f070:	f3ef 8611 	mrs	r6, BASEPRI
    f074:	f383 8812 	msr	BASEPRI_MAX, r3
    f078:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    f07c:	782b      	ldrb	r3, [r5, #0]
    f07e:	f36f 0300 	bfc	r3, #0, #1
    f082:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    f084:	6923      	ldr	r3, [r4, #16]
    f086:	079b      	lsls	r3, r3, #30
    f088:	d505      	bpl.n	f096 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    f08a:	68e1      	ldr	r1, [r4, #12]
    f08c:	69e3      	ldr	r3, [r4, #28]
    f08e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    f092:	429d      	cmp	r5, r3
    f094:	d112      	bne.n	f0bc <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
    f096:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    f098:	4620      	mov	r0, r4
		witem->hdr.busy = 0;
    f09a:	f36f 0341 	bfc	r3, #1, #1
    f09e:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    f0a0:	68e1      	ldr	r1, [r4, #12]
    f0a2:	f7ff fe42 	bl	ed2a <idx_inc>
    f0a6:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    f0a8:	f386 8811 	msr	BASEPRI, r6
    f0ac:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    f0b0:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    f0b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f0b8:	f7fe be8e 	b.w	ddd8 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    f0bc:	682b      	ldr	r3, [r5, #0]
    f0be:	f360 039f 	bfi	r3, r0, #2, #30
    f0c2:	602b      	str	r3, [r5, #0]
    f0c4:	e7f0      	b.n	f0a8 <mpsc_pbuf_free+0x4a>

0000f0c6 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    f0c6:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    f0ca:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    f0cc:	bf88      	it	hi
    f0ce:	6a02      	ldrhi	r2, [r0, #32]
    f0d0:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    f0d2:	1e18      	subs	r0, r3, #0
    f0d4:	bf18      	it	ne
    f0d6:	2001      	movne	r0, #1
    f0d8:	4770      	bx	lr

0000f0da <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    f0da:	4770      	bx	lr

0000f0dc <nordicsemi_nrf53_init>:
	__asm__ volatile(
    f0dc:	f04f 0320 	mov.w	r3, #32
    f0e0:	f3ef 8111 	mrs	r1, BASEPRI
    f0e4:	f383 8812 	msr	BASEPRI_MAX, r3
    f0e8:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    f0ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f0f0:	2202      	movs	r2, #2
    f0f2:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    f0f6:	2201      	movs	r2, #1
    f0f8:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    f0fc:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    f100:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
    f104:	f381 8811 	msr	BASEPRI, r1
    f108:	f3bf 8f6f 	isb	sy
}
    f10c:	2000      	movs	r0, #0
    f10e:	4770      	bx	lr

0000f110 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    f110:	2806      	cmp	r0, #6
    f112:	d108      	bne.n	f126 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    f114:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f118:	2201      	movs	r2, #1
    f11a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    f11e:	f3bf 8f4f 	dsb	sy
        __WFE();
    f122:	bf20      	wfe
    while (true)
    f124:	e7fd      	b.n	f122 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    f126:	4770      	bx	lr

0000f128 <pm_state_exit_post_ops>:
    f128:	2300      	movs	r3, #0
    f12a:	f383 8811 	msr	BASEPRI, r3
    f12e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    f132:	4770      	bx	lr

0000f134 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    f134:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    f136:	075b      	lsls	r3, r3, #29
    f138:	d40b      	bmi.n	f152 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    f13a:	6803      	ldr	r3, [r0, #0]
    f13c:	8842      	ldrh	r2, [r0, #2]
    f13e:	f3c3 2349 	ubfx	r3, r3, #9, #10
    f142:	f3c2 02cb 	ubfx	r2, r2, #3, #12
    f146:	1898      	adds	r0, r3, r2
    f148:	3017      	adds	r0, #23
    f14a:	f020 0007 	bic.w	r0, r0, #7
    f14e:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
    f150:	4770      	bx	lr
	return 0;
    f152:	2000      	movs	r0, #0
}
    f154:	4770      	bx	lr

0000f156 <dummy_timestamp>:
}
    f156:	2000      	movs	r0, #0
    f158:	4770      	bx	lr

0000f15a <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    f15a:	f000 bb35 	b.w	f7c8 <sys_clock_cycle_get_32>

0000f15e <atomic_inc>:
{
    f15e:	4603      	mov	r3, r0
}
    f160:	e8d3 0fef 	ldaex	r0, [r3]
    f164:	1c42      	adds	r2, r0, #1
    f166:	e8c3 2fe1 	stlex	r1, r2, [r3]
    f16a:	2900      	cmp	r1, #0
    f16c:	d1f8      	bne.n	f160 <atomic_inc+0x2>
    f16e:	4770      	bx	lr

0000f170 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    f170:	2001      	movs	r0, #1
    f172:	f7fa ba53 	b.w	961c <z_log_dropped>

0000f176 <z_log_get_tag>:
}
    f176:	2000      	movs	r0, #0
    f178:	4770      	bx	lr

0000f17a <z_cbprintf_cpy>:
{
    f17a:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    f17c:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
    f180:	1b9b      	subs	r3, r3, r6
    f182:	428b      	cmp	r3, r1
{
    f184:	460c      	mov	r4, r1
    f186:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
    f188:	d30a      	bcc.n	f1a0 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    f18a:	6813      	ldr	r3, [r2, #0]
    f18c:	460a      	mov	r2, r1
    f18e:	4601      	mov	r1, r0
    f190:	1998      	adds	r0, r3, r6
    f192:	f000 f8ba 	bl	f30a <memcpy>
	return len;
    f196:	4620      	mov	r0, r4
	desc->off += len;
    f198:	68ab      	ldr	r3, [r5, #8]
    f19a:	4423      	add	r3, r4
    f19c:	60ab      	str	r3, [r5, #8]
}
    f19e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    f1a0:	f06f 001b 	mvn.w	r0, #27
    f1a4:	e7fb      	b.n	f19e <z_cbprintf_cpy+0x24>

0000f1a6 <z_log_msg_finalize>:
{
    f1a6:	b570      	push	{r4, r5, r6, lr}
    f1a8:	460e      	mov	r6, r1
    f1aa:	4615      	mov	r5, r2
    f1ac:	4619      	mov	r1, r3
	if (!msg) {
    f1ae:	4604      	mov	r4, r0
    f1b0:	b918      	cbnz	r0, f1ba <z_log_msg_finalize+0x14>
}
    f1b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    f1b6:	f7fa ba31 	b.w	961c <z_log_dropped>
	if (data) {
    f1ba:	b13b      	cbz	r3, f1cc <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
    f1bc:	f3c2 2349 	ubfx	r3, r2, #9, #10
    f1c0:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    f1c2:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    f1c6:	4418      	add	r0, r3
    f1c8:	f000 f89f 	bl	f30a <memcpy>
	msg->hdr.source = source;
    f1cc:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    f1d0:	4620      	mov	r0, r4
}
    f1d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    f1d6:	f7fa bba1 	b.w	991c <z_log_msg_commit>

0000f1da <buffer_write>:
{
    f1da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f1dc:	4606      	mov	r6, r0
    f1de:	460d      	mov	r5, r1
    f1e0:	4614      	mov	r4, r2
    f1e2:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    f1e4:	4621      	mov	r1, r4
    f1e6:	4628      	mov	r0, r5
    f1e8:	463a      	mov	r2, r7
    f1ea:	47b0      	blx	r6
	} while (len != 0);
    f1ec:	1a24      	subs	r4, r4, r0
		buf += processed;
    f1ee:	4405      	add	r5, r0
	} while (len != 0);
    f1f0:	d1f8      	bne.n	f1e4 <buffer_write+0xa>
}
    f1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f1f4 <cbvprintf>:
{
    f1f4:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    f1f6:	2400      	movs	r4, #0
    f1f8:	9400      	str	r4, [sp, #0]
    f1fa:	f7f9 fcb9 	bl	8b70 <z_cbvprintf_impl>
}
    f1fe:	b002      	add	sp, #8
    f200:	bd10      	pop	{r4, pc}

0000f202 <log_output_flush>:
{
    f202:	b510      	push	{r4, lr}
		     output->control_block->offset,
    f204:	6842      	ldr	r2, [r0, #4]
{
    f206:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    f208:	e9d2 2300 	ldrd	r2, r3, [r2]
    f20c:	6881      	ldr	r1, [r0, #8]
    f20e:	6800      	ldr	r0, [r0, #0]
    f210:	f7ff ffe3 	bl	f1da <buffer_write>
	output->control_block->offset = 0;
    f214:	2200      	movs	r2, #0
    f216:	6863      	ldr	r3, [r4, #4]
    f218:	601a      	str	r2, [r3, #0]
}
    f21a:	bd10      	pop	{r4, pc}

0000f21c <out_func>:
{
    f21c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    f21e:	684b      	ldr	r3, [r1, #4]
{
    f220:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    f222:	681a      	ldr	r2, [r3, #0]
    f224:	68cb      	ldr	r3, [r1, #12]
{
    f226:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    f228:	429a      	cmp	r2, r3
    f22a:	d102      	bne.n	f232 <out_func+0x16>
		log_output_flush(out_ctx);
    f22c:	4608      	mov	r0, r1
    f22e:	f7ff ffe8 	bl	f202 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    f232:	6863      	ldr	r3, [r4, #4]
    f234:	e8d3 2fef 	ldaex	r2, [r3]
    f238:	1c51      	adds	r1, r2, #1
    f23a:	e8c3 1fe0 	stlex	r0, r1, [r3]
    f23e:	2800      	cmp	r0, #0
    f240:	d1f8      	bne.n	f234 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
    f242:	68a3      	ldr	r3, [r4, #8]
}
    f244:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
    f246:	549d      	strb	r5, [r3, r2]
}
    f248:	bd38      	pop	{r3, r4, r5, pc}

0000f24a <cr_out_func>:
	if (c == '\n') {
    f24a:	280a      	cmp	r0, #10
{
    f24c:	b538      	push	{r3, r4, r5, lr}
    f24e:	4604      	mov	r4, r0
    f250:	460d      	mov	r5, r1
	if (c == '\n') {
    f252:	d102      	bne.n	f25a <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    f254:	200d      	movs	r0, #13
    f256:	f7ff ffe1 	bl	f21c <out_func>
	out_func(c, ctx);
    f25a:	4629      	mov	r1, r5
    f25c:	4620      	mov	r0, r4
    f25e:	f7ff ffdd 	bl	f21c <out_func>
}
    f262:	2000      	movs	r0, #0
    f264:	bd38      	pop	{r3, r4, r5, pc}

0000f266 <log_backend_uart_init>:
}
    f266:	4770      	bx	lr

0000f268 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    f268:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    f26a:	6800      	ldr	r0, [r0, #0]
    f26c:	f7fa bf4e 	b.w	a10c <z_arm_fatal_error>

0000f270 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    f270:	2100      	movs	r1, #0
    f272:	2001      	movs	r0, #1
    f274:	f7fa bf4a 	b.w	a10c <z_arm_fatal_error>

0000f278 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    f278:	b508      	push	{r3, lr}
	handler();
    f27a:	f7fa fff3 	bl	a264 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    f27e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    f282:	f7fb b8bb 	b.w	a3fc <z_arm_exc_exit>

0000f286 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    f286:	6e43      	ldr	r3, [r0, #100]	; 0x64
    f288:	f383 880b 	msr	PSPLIM, r3
}
    f28c:	4770      	bx	lr

0000f28e <z_log_msg_static_create.constprop.0>:
    f28e:	2300      	movs	r3, #0
    f290:	f7fa bb78 	b.w	9984 <z_impl_z_log_msg_static_create>

0000f294 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
    f294:	4770      	bx	lr

0000f296 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
    f296:	4770      	bx	lr

0000f298 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    f298:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    f29c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    f2a0:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    f2a2:	bf08      	it	eq
    f2a4:	f06f 0015 	mvneq.w	r0, #21
    f2a8:	4770      	bx	lr

0000f2aa <mpu_configure_region>:
{
    f2aa:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
    f2ac:	890a      	ldrh	r2, [r1, #8]
    f2ae:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    f2b0:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
    f2b2:	684c      	ldr	r4, [r1, #4]
    f2b4:	f002 021f 	and.w	r2, r2, #31
{
    f2b8:	b085      	sub	sp, #20
    f2ba:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
    f2be:	9300      	str	r3, [sp, #0]
    f2c0:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    f2c4:	f023 031f 	bic.w	r3, r3, #31
    f2c8:	1e62      	subs	r2, r4, #1
    f2ca:	4413      	add	r3, r2
    f2cc:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    f2d0:	2807      	cmp	r0, #7
    f2d2:	9303      	str	r3, [sp, #12]
    f2d4:	d904      	bls.n	f2e0 <mpu_configure_region+0x36>
}
    f2d6:	b005      	add	sp, #20
    f2d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f2dc:	f7fb bc56 	b.w	ab8c <region_allocate_and_init.part.0>
	region_init(index, region_conf);
    f2e0:	4669      	mov	r1, sp
    f2e2:	f7fb fc39 	bl	ab58 <region_init>
}
    f2e6:	b005      	add	sp, #20
    f2e8:	bd30      	pop	{r4, r5, pc}

0000f2ea <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    f2ea:	4603      	mov	r3, r0
	size_t n = 0;
    f2ec:	2000      	movs	r0, #0

	while (*s != '\0') {
    f2ee:	5c1a      	ldrb	r2, [r3, r0]
    f2f0:	b902      	cbnz	r2, f2f4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    f2f2:	4770      	bx	lr
		n++;
    f2f4:	3001      	adds	r0, #1
    f2f6:	e7fa      	b.n	f2ee <strlen+0x4>

0000f2f8 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    f2f8:	4603      	mov	r3, r0
	size_t n = 0;
    f2fa:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    f2fc:	5c1a      	ldrb	r2, [r3, r0]
    f2fe:	b10a      	cbz	r2, f304 <strnlen+0xc>
    f300:	4288      	cmp	r0, r1
    f302:	d100      	bne.n	f306 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    f304:	4770      	bx	lr
		n++;
    f306:	3001      	adds	r0, #1
    f308:	e7f8      	b.n	f2fc <strnlen+0x4>

0000f30a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    f30a:	b510      	push	{r4, lr}
    f30c:	1e43      	subs	r3, r0, #1
    f30e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    f310:	4291      	cmp	r1, r2
    f312:	d100      	bne.n	f316 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    f314:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    f316:	f811 4b01 	ldrb.w	r4, [r1], #1
    f31a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    f31e:	e7f7      	b.n	f310 <memcpy+0x6>

0000f320 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    f320:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    f322:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    f324:	4402      	add	r2, r0
    f326:	4293      	cmp	r3, r2
    f328:	d100      	bne.n	f32c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    f32a:	4770      	bx	lr
		*(d_byte++) = c_byte;
    f32c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    f330:	e7f9      	b.n	f326 <memset+0x6>

0000f332 <_stdout_hook_default>:
}
    f332:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f336:	4770      	bx	lr

0000f338 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    f338:	220c      	movs	r2, #12
    f33a:	6903      	ldr	r3, [r0, #16]
    f33c:	b2c9      	uxtb	r1, r1
    f33e:	fb01 3302 	mla	r3, r1, r2, r3
    f342:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
    f344:	f000 0007 	and.w	r0, r0, #7
    f348:	4770      	bx	lr

0000f34a <set_on_state>:
	__asm__ volatile(
    f34a:	f04f 0320 	mov.w	r3, #32
    f34e:	f3ef 8211 	mrs	r2, BASEPRI
    f352:	f383 8812 	msr	BASEPRI_MAX, r3
    f356:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    f35a:	6803      	ldr	r3, [r0, #0]
    f35c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f360:	f043 0302 	orr.w	r3, r3, #2
    f364:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    f366:	f382 8811 	msr	BASEPRI, r2
    f36a:	f3bf 8f6f 	isb	sy
}
    f36e:	4770      	bx	lr

0000f370 <stop>:
{
    f370:	b570      	push	{r4, r5, r6, lr}
    f372:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    f374:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    f376:	f04f 0420 	mov.w	r4, #32
    f37a:	f3ef 8511 	mrs	r5, BASEPRI
    f37e:	f384 8812 	msr	BASEPRI_MAX, r4
    f382:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    f386:	260c      	movs	r6, #12
    f388:	fb06 3401 	mla	r4, r6, r1, r3
    f38c:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    f38e:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    f392:	d008      	beq.n	f3a6 <stop+0x36>
    f394:	42a2      	cmp	r2, r4
    f396:	d006      	beq.n	f3a6 <stop+0x36>
	__asm__ volatile(
    f398:	f385 8811 	msr	BASEPRI, r5
    f39c:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    f3a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    f3a4:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    f3a6:	2201      	movs	r2, #1
    f3a8:	4371      	muls	r1, r6
    f3aa:	440b      	add	r3, r1
    f3ac:	679a      	str	r2, [r3, #120]	; 0x78
    f3ae:	f385 8811 	msr	BASEPRI, r5
    f3b2:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    f3b6:	6843      	ldr	r3, [r0, #4]
    f3b8:	440b      	add	r3, r1
    f3ba:	685b      	ldr	r3, [r3, #4]
    f3bc:	4798      	blx	r3
	return 0;
    f3be:	2000      	movs	r0, #0
    f3c0:	e7f0      	b.n	f3a4 <stop+0x34>

0000f3c2 <api_stop>:
	return stop(dev, subsys, CTX_API);
    f3c2:	2280      	movs	r2, #128	; 0x80
    f3c4:	f7ff bfd4 	b.w	f370 <stop>

0000f3c8 <async_start>:
{
    f3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f3ca:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    f3cc:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    f3ce:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    f3d0:	f04f 0520 	mov.w	r5, #32
    f3d4:	f3ef 8611 	mrs	r6, BASEPRI
    f3d8:	f385 8812 	msr	BASEPRI_MAX, r5
    f3dc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    f3e0:	250c      	movs	r5, #12
    f3e2:	4369      	muls	r1, r5
    f3e4:	440c      	add	r4, r1
    f3e6:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    f3e8:	f005 0c07 	and.w	ip, r5, #7
    f3ec:	f1bc 0f01 	cmp.w	ip, #1
    f3f0:	d10b      	bne.n	f40a <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    f3f2:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
    f3f4:	f386 8811 	msr	BASEPRI, r6
    f3f8:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    f3fc:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    f400:	6843      	ldr	r3, [r0, #4]
    f402:	585b      	ldr	r3, [r3, r1]
    f404:	4798      	blx	r3
	return 0;
    f406:	2000      	movs	r0, #0
}
    f408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    f40a:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    f40e:	42af      	cmp	r7, r5
    f410:	f386 8811 	msr	BASEPRI, r6
    f414:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    f418:	bf0c      	ite	eq
    f41a:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    f41e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    f422:	e7f1      	b.n	f408 <async_start+0x40>

0000f424 <api_start>:
{
    f424:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    f426:	2480      	movs	r4, #128	; 0x80
    f428:	9400      	str	r4, [sp, #0]
    f42a:	f7ff ffcd 	bl	f3c8 <async_start>
}
    f42e:	b002      	add	sp, #8
    f430:	bd10      	pop	{r4, pc}

0000f432 <onoff_started_callback>:
{
    f432:	b410      	push	{r4}
	notify(mgr, 0);
    f434:	241c      	movs	r4, #28
	return &data->mgr[type];
    f436:	6900      	ldr	r0, [r0, #16]
    f438:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    f43a:	fb03 0004 	mla	r0, r3, r4, r0
    f43e:	2100      	movs	r1, #0
}
    f440:	bc10      	pop	{r4}
	notify(mgr, 0);
    f442:	4710      	bx	r2

0000f444 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    f444:	2003      	movs	r0, #3
    f446:	f7fd baf1 	b.w	ca2c <nrfx_clock_start>

0000f44a <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    f44a:	2002      	movs	r0, #2
    f44c:	f7fd baee 	b.w	ca2c <nrfx_clock_start>

0000f450 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    f450:	2000      	movs	r0, #0
    f452:	f7fd baeb 	b.w	ca2c <nrfx_clock_start>

0000f456 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    f456:	2003      	movs	r0, #3
    f458:	f000 b9eb 	b.w	f832 <nrfx_clock_stop>

0000f45c <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    f45c:	2002      	movs	r0, #2
    f45e:	f000 b9e8 	b.w	f832 <nrfx_clock_stop>

0000f462 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    f462:	2000      	movs	r0, #0
    f464:	f000 b9e5 	b.w	f832 <nrfx_clock_stop>

0000f468 <blocking_start_callback>:
{
    f468:	4610      	mov	r0, r2
    f46a:	f7fe bcb5 	b.w	ddd8 <z_impl_k_sem_give>

0000f46e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f46e:	6843      	ldr	r3, [r0, #4]
}
    f470:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f472:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    f474:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    f476:	600b      	str	r3, [r1, #0]
}
    f478:	4770      	bx	lr

0000f47a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f47a:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    f47c:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f480:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    f482:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    f486:	6098      	str	r0, [r3, #8]
}
    f488:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    f48a:	60d9      	str	r1, [r3, #12]
    f48c:	4770      	bx	lr

0000f48e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f48e:	6843      	ldr	r3, [r0, #4]
}
    f490:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f492:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    f494:	6099      	str	r1, [r3, #8]
}
    f496:	4770      	bx	lr

0000f498 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f498:	6843      	ldr	r3, [r0, #4]
}
    f49a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f49c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    f49e:	60d9      	str	r1, [r3, #12]
}
    f4a0:	4770      	bx	lr

0000f4a2 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f4a2:	6843      	ldr	r3, [r0, #4]
    f4a4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    f4a6:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    f4a8:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    f4ac:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    f4ae:	6090      	str	r0, [r2, #8]
}
    f4b0:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    f4b2:	60d3      	str	r3, [r2, #12]
    f4b4:	4770      	bx	lr

0000f4b6 <gpio_nrfx_manage_callback>:
{
    f4b6:	b510      	push	{r4, lr}
	return port->data;
    f4b8:	6903      	ldr	r3, [r0, #16]
	return list->head;
    f4ba:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    f4bc:	b1f8      	cbz	r0, f4fe <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f4be:	4288      	cmp	r0, r1
    f4c0:	d119      	bne.n	f4f6 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    f4c2:	689c      	ldr	r4, [r3, #8]
	return node->next;
    f4c4:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    f4c6:	42a1      	cmp	r1, r4
	list->head = node;
    f4c8:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    f4ca:	d100      	bne.n	f4ce <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    f4cc:	6098      	str	r0, [r3, #8]
	parent->next = child;
    f4ce:	2000      	movs	r0, #0
    f4d0:	6008      	str	r0, [r1, #0]
	if (set) {
    f4d2:	b12a      	cbz	r2, f4e0 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    f4d4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    f4d6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    f4d8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    f4da:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    f4dc:	b902      	cbnz	r2, f4e0 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    f4de:	6099      	str	r1, [r3, #8]
	return 0;
    f4e0:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    f4e2:	e010      	b.n	f506 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f4e4:	4281      	cmp	r1, r0
    f4e6:	d106      	bne.n	f4f6 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    f4e8:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    f4ea:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    f4ec:	6898      	ldr	r0, [r3, #8]
    f4ee:	4281      	cmp	r1, r0
    f4f0:	d1ed      	bne.n	f4ce <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    f4f2:	609c      	str	r4, [r3, #8]
}
    f4f4:	e7eb      	b.n	f4ce <gpio_nrfx_manage_callback+0x18>
	return node->next;
    f4f6:	4604      	mov	r4, r0
    f4f8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f4fa:	2800      	cmp	r0, #0
    f4fc:	d1f2      	bne.n	f4e4 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    f4fe:	2a00      	cmp	r2, #0
    f500:	d1e8      	bne.n	f4d4 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    f502:	f06f 0015 	mvn.w	r0, #21
}
    f506:	bd10      	pop	{r4, pc}

0000f508 <ws2812_strip_update_rgb>:
	const struct spi_buf_set tx = {
    f508:	2301      	movs	r3, #1
{
    f50a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return dev->config;
    f50e:	6844      	ldr	r4, [r0, #4]
{
    f510:	b085      	sub	sp, #20
	const struct spi_buf_set tx = {
    f512:	9303      	str	r3, [sp, #12]
	overflow = size_mul_overflow(num_pixels, cfg->num_colors * 8, &nbytes);
    f514:	7ea3      	ldrb	r3, [r4, #26]
		.buf = cfg->px_buf,
    f516:	6926      	ldr	r6, [r4, #16]
	overflow = size_mul_overflow(num_pixels, cfg->num_colors * 8, &nbytes);
    f518:	00db      	lsls	r3, r3, #3
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
    f51a:	fba2 0303 	umull	r0, r3, r2, r3
		.len = cfg->px_buf_size,
    f51e:	6965      	ldr	r5, [r4, #20]
	const uint8_t one = cfg->one_frame, zero = cfg->zero_frame;
    f520:	7e27      	ldrb	r7, [r4, #24]
    f522:	f894 c019 	ldrb.w	ip, [r4, #25]
	struct spi_buf buf = {
    f526:	9600      	str	r6, [sp, #0]
    f528:	9501      	str	r5, [sp, #4]
	const struct spi_buf_set tx = {
    f52a:	f8cd d008 	str.w	sp, [sp, #8]
    f52e:	2b00      	cmp	r3, #0
    f530:	d13c      	bne.n	f5ac <ws2812_strip_update_rgb+0xa4>
	return !overflow && (nbytes <= cfg->px_buf_size);
    f532:	4285      	cmp	r5, r0
    f534:	d33a      	bcc.n	f5ac <ws2812_strip_update_rgb+0xa4>
	for (i = 0; i < num_pixels; i++) {
    f536:	4293      	cmp	r3, r2
    f538:	d135      	bne.n	f5a6 <ws2812_strip_update_rgb+0x9e>
 * @return a value from spi_write().
 */
static inline int spi_write_dt(const struct spi_dt_spec *spec,
			       const struct spi_buf_set *tx_bufs)
{
	return spi_write(spec->bus, &spec->config, tx_bufs);
    f53a:	4621      	mov	r1, r4
    f53c:	f851 0b04 	ldr.w	r0, [r1], #4
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    f540:	6883      	ldr	r3, [r0, #8]
    f542:	aa02      	add	r2, sp, #8
    f544:	681d      	ldr	r5, [r3, #0]
    f546:	2300      	movs	r3, #0
    f548:	47a8      	blx	r5
    f54a:	4605      	mov	r5, r0
	k_usleep(delay);
    f54c:	8c20      	ldrh	r0, [r4, #32]
	return z_impl_k_usleep(us);
    f54e:	f7fe ff6d 	bl	e42c <z_impl_k_usleep>
}
    f552:	4628      	mov	r0, r5
    f554:	b005      	add	sp, #20
    f556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			switch (cfg->color_mapping[j]) {
    f55a:	69e0      	ldr	r0, [r4, #28]
    f55c:	5d40      	ldrb	r0, [r0, r5]
    f55e:	2803      	cmp	r0, #3
    f560:	d827      	bhi.n	f5b2 <ws2812_strip_update_rgb+0xaa>
    f562:	e8df f000 	tbb	[pc, r0]
    f566:	0203      	.short	0x0203
    f568:	1e1c      	.short	0x1e1c
				pixel = pixels[i].r;
    f56a:	7848      	ldrb	r0, [r1, #1]
{
    f56c:	2507      	movs	r5, #7
    f56e:	f106 3eff 	add.w	lr, r6, #4294967295	; 0xffffffff
		buf[i] = color & BIT(7 - i) ? one_frame : zero_frame;
    f572:	fa20 f905 	lsr.w	r9, r0, r5
    f576:	f019 0f01 	tst.w	r9, #1
    f57a:	bf0c      	ite	eq
    f57c:	46e1      	moveq	r9, ip
    f57e:	46b9      	movne	r9, r7
	for (i = 0; i < 8; i++) {
    f580:	3d01      	subs	r5, #1
		buf[i] = color & BIT(7 - i) ? one_frame : zero_frame;
    f582:	f80e 9f01 	strb.w	r9, [lr, #1]!
	for (i = 0; i < 8; i++) {
    f586:	d2f4      	bcs.n	f572 <ws2812_strip_update_rgb+0x6a>
			px_buf += 8;
    f588:	3608      	adds	r6, #8
		for (j = 0; j < cfg->num_colors; j++) {
    f58a:	f108 0801 	add.w	r8, r8, #1
    f58e:	7ea0      	ldrb	r0, [r4, #26]
    f590:	fa5f f588 	uxtb.w	r5, r8
    f594:	42a8      	cmp	r0, r5
    f596:	d8e0      	bhi.n	f55a <ws2812_strip_update_rgb+0x52>
	for (i = 0; i < num_pixels; i++) {
    f598:	3301      	adds	r3, #1
    f59a:	3104      	adds	r1, #4
    f59c:	e7cb      	b.n	f536 <ws2812_strip_update_rgb+0x2e>
				pixel = pixels[i].g;
    f59e:	7888      	ldrb	r0, [r1, #2]
				break;
    f5a0:	e7e4      	b.n	f56c <ws2812_strip_update_rgb+0x64>
				pixel = pixels[i].b;
    f5a2:	78c8      	ldrb	r0, [r1, #3]
				break;
    f5a4:	e7e2      	b.n	f56c <ws2812_strip_update_rgb+0x64>
    f5a6:	f04f 0800 	mov.w	r8, #0
    f5aa:	e7f0      	b.n	f58e <ws2812_strip_update_rgb+0x86>
		return -ENOMEM;
    f5ac:	f06f 050b 	mvn.w	r5, #11
    f5b0:	e7cf      	b.n	f552 <ws2812_strip_update_rgb+0x4a>
			switch (cfg->color_mapping[j]) {
    f5b2:	f06f 0515 	mvn.w	r5, #21
    f5b6:	e7cc      	b.n	f552 <ws2812_strip_update_rgb+0x4a>

0000f5b8 <irq_connect4>:
#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(4);
    f5b8:	2200      	movs	r2, #0
    f5ba:	2101      	movs	r1, #1
    f5bc:	200a      	movs	r0, #10
    f5be:	f7fa be3b 	b.w	a238 <z_arm_irq_priority_set>

0000f5c2 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    f5c2:	b510      	push	{r4, lr}
	while (*count) {
    f5c4:	680b      	ldr	r3, [r1, #0]
    f5c6:	b913      	cbnz	r3, f5ce <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
    f5c8:	4618      	mov	r0, r3
	*buf_len = 0;
    f5ca:	6013      	str	r3, [r2, #0]
	return NULL;
    f5cc:	e005      	b.n	f5da <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
    f5ce:	6803      	ldr	r3, [r0, #0]
    f5d0:	685c      	ldr	r4, [r3, #4]
    f5d2:	b11c      	cbz	r4, f5dc <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
    f5d4:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
    f5d6:	6803      	ldr	r3, [r0, #0]
    f5d8:	6818      	ldr	r0, [r3, #0]
}
    f5da:	bd10      	pop	{r4, pc}
		++(*current);
    f5dc:	3308      	adds	r3, #8
    f5de:	6003      	str	r3, [r0, #0]
		--(*count);
    f5e0:	680b      	ldr	r3, [r1, #0]
    f5e2:	3b01      	subs	r3, #1
    f5e4:	600b      	str	r3, [r1, #0]
    f5e6:	e7ed      	b.n	f5c4 <spi_context_get_next_buf.constprop.0+0x2>

0000f5e8 <z_log_msg_static_create.constprop.0>:
    f5e8:	2300      	movs	r3, #0
    f5ea:	f7fa b9cb 	b.w	9984 <z_impl_z_log_msg_static_create>

0000f5ee <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    f5ee:	4603      	mov	r3, r0
    f5f0:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    f5f2:	7919      	ldrb	r1, [r3, #4]
    f5f4:	2301      	movs	r3, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    f5f6:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    f5f8:	fa03 f101 	lsl.w	r1, r3, r1
    f5fc:	6903      	ldr	r3, [r0, #16]
    f5fe:	681b      	ldr	r3, [r3, #0]
    f600:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    f602:	bf18      	it	ne
    f604:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    f608:	b112      	cbz	r2, f610 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    f60a:	6883      	ldr	r3, [r0, #8]
    f60c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    f60e:	4718      	bx	r3
    f610:	6883      	ldr	r3, [r0, #8]
    f612:	691b      	ldr	r3, [r3, #16]
    f614:	e7fb      	b.n	f60e <gpio_pin_set_dt.isra.0+0x20>

0000f616 <_spi_context_cs_control>:
{
    f616:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    f618:	6803      	ldr	r3, [r0, #0]
{
    f61a:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    f61c:	b1e3      	cbz	r3, f658 <_spi_context_cs_control+0x42>
    f61e:	6898      	ldr	r0, [r3, #8]
    f620:	b1d0      	cbz	r0, f658 <_spi_context_cs_control+0x42>
    f622:	6805      	ldr	r5, [r0, #0]
    f624:	b1c5      	cbz	r5, f658 <_spi_context_cs_control+0x42>
		if (on) {
    f626:	b149      	cbz	r1, f63c <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    f628:	2101      	movs	r1, #1
    f62a:	f7ff ffe0 	bl	f5ee <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    f62e:	6823      	ldr	r3, [r4, #0]
    f630:	689b      	ldr	r3, [r3, #8]
    f632:	6898      	ldr	r0, [r3, #8]
}
    f634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    f638:	f000 bab4 	b.w	fba4 <z_impl_k_busy_wait>
			if (!force_off &&
    f63c:	b912      	cbnz	r2, f644 <_spi_context_cs_control+0x2e>
    f63e:	889b      	ldrh	r3, [r3, #4]
    f640:	04db      	lsls	r3, r3, #19
    f642:	d409      	bmi.n	f658 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    f644:	6880      	ldr	r0, [r0, #8]
    f646:	f000 faad 	bl	fba4 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    f64a:	6823      	ldr	r3, [r4, #0]
    f64c:	2100      	movs	r1, #0
    f64e:	6898      	ldr	r0, [r3, #8]
}
    f650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    f654:	f7ff bfcb 	b.w	f5ee <gpio_pin_set_dt.isra.0>
}
    f658:	bd38      	pop	{r3, r4, r5, pc}

0000f65a <spi_context_unlock_unconditionally>:
{
    f65a:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    f65c:	2201      	movs	r2, #1
    f65e:	2100      	movs	r1, #0
{
    f660:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    f662:	f7ff ffd8 	bl	f616 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    f666:	69a3      	ldr	r3, [r4, #24]
    f668:	b933      	cbnz	r3, f678 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    f66a:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    f66c:	f104 0010 	add.w	r0, r4, #16
}
    f670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f674:	f7fe bbb0 	b.w	ddd8 <z_impl_k_sem_give>
    f678:	bd10      	pop	{r4, pc}

0000f67a <spi_nrfx_release>:
{
    f67a:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    f67c:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    f67e:	6803      	ldr	r3, [r0, #0]
    f680:	428b      	cmp	r3, r1
    f682:	d106      	bne.n	f692 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    f684:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
    f688:	b934      	cbnz	r4, f698 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    f68a:	f7ff ffe6 	bl	f65a <spi_context_unlock_unconditionally>
	return 0;
    f68e:	4620      	mov	r0, r4
}
    f690:	bd10      	pop	{r4, pc}
		return -EINVAL;
    f692:	f06f 0015 	mvn.w	r0, #21
    f696:	e7fb      	b.n	f690 <spi_nrfx_release+0x16>
		return -EBUSY;
    f698:	f06f 000f 	mvn.w	r0, #15
    f69c:	e7f8      	b.n	f690 <spi_nrfx_release+0x16>

0000f69e <uarte_nrfx_config_get>:
{
    f69e:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
    f6a0:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
    f6a2:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    f6a6:	e883 0003 	stmia.w	r3, {r0, r1}
}
    f6aa:	2000      	movs	r0, #0
    f6ac:	4770      	bx	lr

0000f6ae <uarte_nrfx_err_check>:
	return config->uarte_regs;
    f6ae:	6843      	ldr	r3, [r0, #4]
    f6b0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    f6b2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    f6b6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    f6ba:	4770      	bx	lr

0000f6bc <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    f6bc:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    f6be:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    f6c0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f6c2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    f6c6:	b150      	cbz	r0, f6de <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f6c8:	2000      	movs	r0, #0
	*c = *data->rx_data;
    f6ca:	6952      	ldr	r2, [r2, #20]
    f6cc:	7812      	ldrb	r2, [r2, #0]
    f6ce:	700a      	strb	r2, [r1, #0]
    f6d0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    f6d4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f6d8:	2201      	movs	r2, #1
    f6da:	601a      	str	r2, [r3, #0]
	return 0;
    f6dc:	4770      	bx	lr
		return -1;
    f6de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    f6e2:	4770      	bx	lr

0000f6e4 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    f6e4:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    f6e6:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f6e8:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    f6ec:	b940      	cbnz	r0, f700 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    f6ee:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    f6f0:	079b      	lsls	r3, r3, #30
    f6f2:	d406      	bmi.n	f702 <is_tx_ready.isra.0+0x1e>
    f6f4:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    f6f8:	3800      	subs	r0, #0
    f6fa:	bf18      	it	ne
    f6fc:	2001      	movne	r0, #1
    f6fe:	4770      	bx	lr
    f700:	2001      	movs	r0, #1
}
    f702:	4770      	bx	lr

0000f704 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    f704:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    f706:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    f708:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    f70c:	05c9      	lsls	r1, r1, #23
    f70e:	d518      	bpl.n	f742 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f710:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    f714:	b1a9      	cbz	r1, f742 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    f716:	f04f 0020 	mov.w	r0, #32
    f71a:	f3ef 8111 	mrs	r1, BASEPRI
    f71e:	f380 8812 	msr	BASEPRI_MAX, r0
    f722:	f3bf 8f6f 	isb	sy
    f726:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    f72a:	b130      	cbz	r0, f73a <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f72c:	2000      	movs	r0, #0
    f72e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    f732:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f736:	2001      	movs	r0, #1
    f738:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    f73a:	f381 8811 	msr	BASEPRI, r1
    f73e:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    f742:	6852      	ldr	r2, [r2, #4]
    f744:	06d2      	lsls	r2, r2, #27
    f746:	d515      	bpl.n	f774 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    f748:	f04f 0120 	mov.w	r1, #32
    f74c:	f3ef 8211 	mrs	r2, BASEPRI
    f750:	f381 8812 	msr	BASEPRI_MAX, r1
    f754:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f758:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    f75c:	b111      	cbz	r1, f764 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    f75e:	2100      	movs	r1, #0
    f760:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    f764:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    f768:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    f76c:	f382 8811 	msr	BASEPRI, r2
    f770:	f3bf 8f6f 	isb	sy
}
    f774:	4770      	bx	lr

0000f776 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
    f776:	4608      	mov	r0, r1
    f778:	b508      	push	{r3, lr}
	int err = EINVAL;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status = PSA_ERROR_GENERIC_ERROR;

	status = psa_generate_random(buffer, length);
    f77a:	4611      	mov	r1, r2
    f77c:	f7fc ffee 	bl	c75c <psa_generate_random>
	int err = EINVAL;
    f780:	2800      	cmp	r0, #0
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
    f782:	bf18      	it	ne
    f784:	2016      	movne	r0, #22
    f786:	bd08      	pop	{r3, pc}

0000f788 <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
    f788:	b508      	push	{r3, lr}
	(void)dev;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status;

	status = psa_crypto_init();
    f78a:	f000 f84b 	bl	f824 <psa_crypto_init>
	if (status != PSA_SUCCESS) {
		return -EINVAL;
    f78e:	2800      	cmp	r0, #0
		return -EINVAL;
	}
#endif

	return 0;
}
    f790:	bf18      	it	ne
    f792:	f06f 0015 	mvnne.w	r0, #21
    f796:	bd08      	pop	{r3, pc}

0000f798 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    f798:	4770      	bx	lr

0000f79a <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f79a:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    f79c:	f100 0350 	add.w	r3, r0, #80	; 0x50
    f7a0:	009b      	lsls	r3, r3, #2
    f7a2:	b29b      	uxth	r3, r3
    f7a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f7a8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
    f7ac:	601a      	str	r2, [r3, #0]
    f7ae:	681b      	ldr	r3, [r3, #0]
}
    f7b0:	4770      	bx	lr

0000f7b2 <z_nrf_rtc_timer_capture_task_address_get>:
	if (chan == 0) {
    f7b2:	b130      	cbz	r0, f7c2 <z_nrf_rtc_timer_capture_task_address_get+0x10>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
    f7b4:	3010      	adds	r0, #16
    f7b6:	0080      	lsls	r0, r0, #2
    return (uint32_t)p_reg + task;
    f7b8:	b2c0      	uxtb	r0, r0
    f7ba:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    f7be:	f500 30a8 	add.w	r0, r0, #86016	; 0x15000
}
    f7c2:	4770      	bx	lr

0000f7c4 <z_nrf_rtc_timer_set>:
	return compare_set(chan, target_time, handler, user_data);
    f7c4:	f7fc bbe4 	b.w	bf90 <compare_set>

0000f7c8 <sys_clock_cycle_get_32>:
{
    f7c8:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    f7ca:	f7fc fbbf 	bl	bf4c <z_nrf_rtc_timer_read>
}
    f7ce:	bd08      	pop	{r3, pc}

0000f7d0 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    f7d0:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
	while (*state <= &config->states[config->state_cnt - 1U]) {
    f7d2:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
    f7d6:	6843      	ldr	r3, [r0, #4]
    f7d8:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    f7da:	7a05      	ldrb	r5, [r0, #8]
    f7dc:	6844      	ldr	r4, [r0, #4]
    f7de:	4435      	add	r5, r6
    f7e0:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    f7e4:	42a3      	cmp	r3, r4
    f7e6:	d902      	bls.n	f7ee <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
    f7e8:	f06f 0001 	mvn.w	r0, #1
}
    f7ec:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
    f7ee:	795c      	ldrb	r4, [r3, #5]
    f7f0:	428c      	cmp	r4, r1
    f7f2:	d001      	beq.n	f7f8 <pinctrl_lookup_state+0x28>
		(*state)++;
    f7f4:	3308      	adds	r3, #8
    f7f6:	e7ef      	b.n	f7d8 <pinctrl_lookup_state+0x8>
			return 0;
    f7f8:	2000      	movs	r0, #0
    f7fa:	e7f7      	b.n	f7ec <pinctrl_lookup_state+0x1c>

0000f7fc <mbox_nrf_register_callback>:
{
    f7fc:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
    f7fe:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
    f800:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
    f802:	bf9f      	itttt	ls
    f804:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
    f808:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
    f80c:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
    f80e:	2000      	movls	r0, #0
		return -EINVAL;
    f810:	bf88      	it	hi
    f812:	f06f 0015 	mvnhi.w	r0, #21
}
    f816:	bd10      	pop	{r4, pc}

0000f818 <mbox_nrf_mtu_get>:
}
    f818:	2000      	movs	r0, #0
    f81a:	4770      	bx	lr

0000f81c <mbox_nrf_max_channels_get>:
}
    f81c:	2010      	movs	r0, #16
    f81e:	4770      	bx	lr

0000f820 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
    f820:	2000      	movs	r0, #0
    f822:	4770      	bx	lr

0000f824 <psa_crypto_init>:
}
    f824:	2000      	movs	r0, #0
    f826:	4770      	bx	lr

0000f828 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    f828:	f7fc bfd6 	b.w	c7d8 <SystemCoreClockUpdate>

0000f82c <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    f82c:	4700      	bx	r0

0000f82e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    f82e:	f000 b9b9 	b.w	fba4 <z_impl_k_busy_wait>

0000f832 <nrfx_clock_stop>:
    clock_stop(domain);
    f832:	f7fd b819 	b.w	c868 <clock_stop>

0000f836 <nrf_gpio_reconfigure>:
{
    f836:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f838:	4616      	mov	r6, r2
    f83a:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    f83e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    f840:	a801      	add	r0, sp, #4
{
    f842:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    f844:	f7fd f9b8 	bl	cbb8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    f848:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    f84a:	f1b6 0c00 	subs.w	ip, r6, #0
    f84e:	bf18      	it	ne
    f850:	f04f 0c01 	movne.w	ip, #1
    f854:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    f858:	1e0b      	subs	r3, r1, #0
    f85a:	bf18      	it	ne
    f85c:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    f85e:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    f860:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    f864:	bf14      	ite	ne
    f866:	f04f 0c0c 	movne.w	ip, #12
    f86a:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    f86e:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    f870:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    f874:	bf14      	ite	ne
    f876:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
    f87a:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    f87e:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    f880:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    f884:	bf14      	ite	ne
    f886:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    f88a:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
    f88e:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    f892:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    f896:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    f89a:	b101      	cbz	r1, f89e <nrf_gpio_reconfigure+0x68>
    f89c:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    f89e:	b10e      	cbz	r6, f8a4 <nrf_gpio_reconfigure+0x6e>
    f8a0:	7836      	ldrb	r6, [r6, #0]
    f8a2:	0076      	lsls	r6, r6, #1
    f8a4:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    f8a6:	b10d      	cbz	r5, f8ac <nrf_gpio_reconfigure+0x76>
    f8a8:	782d      	ldrb	r5, [r5, #0]
    f8aa:	00ad      	lsls	r5, r5, #2
    f8ac:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    f8ae:	b10c      	cbz	r4, f8b4 <nrf_gpio_reconfigure+0x7e>
    f8b0:	7824      	ldrb	r4, [r4, #0]
    f8b2:	0224      	lsls	r4, r4, #8
    f8b4:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    f8b6:	b10f      	cbz	r7, f8bc <nrf_gpio_reconfigure+0x86>
    f8b8:	783f      	ldrb	r7, [r7, #0]
    f8ba:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    f8bc:	430c      	orrs	r4, r1
    f8be:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    f8c0:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
    f8c4:	b003      	add	sp, #12
    f8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f8c8 <nrf_gpio_cfg_sense_set>:
{
    f8c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    f8ca:	f10d 030f 	add.w	r3, sp, #15
    f8ce:	9301      	str	r3, [sp, #4]
    f8d0:	2300      	movs	r3, #0
{
    f8d2:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    f8d6:	461a      	mov	r2, r3
    f8d8:	4619      	mov	r1, r3
    f8da:	9300      	str	r3, [sp, #0]
    f8dc:	f7ff ffab 	bl	f836 <nrf_gpio_reconfigure>
}
    f8e0:	b005      	add	sp, #20
    f8e2:	f85d fb04 	ldr.w	pc, [sp], #4

0000f8e6 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    f8e6:	1c43      	adds	r3, r0, #1
{
    f8e8:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    f8ea:	d005      	beq.n	f8f8 <spim_pin_uninit+0x12>
    nrf_gpio_cfg(
    f8ec:	2300      	movs	r3, #0
    f8ee:	2201      	movs	r2, #1
    f8f0:	4619      	mov	r1, r3
    f8f2:	9300      	str	r3, [sp, #0]
    f8f4:	f7fd fd42 	bl	d37c <nrf_gpio_cfg.constprop.0>
}
    f8f8:	b003      	add	sp, #12
    f8fa:	f85d fb04 	ldr.w	pc, [sp], #4

0000f8fe <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
    f8fe:	7f83      	ldrb	r3, [r0, #30]
    f900:	075a      	lsls	r2, r3, #29
    f902:	d40b      	bmi.n	f91c <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    f904:	7fc0      	ldrb	r0, [r0, #31]
    f906:	28ff      	cmp	r0, #255	; 0xff
    f908:	d008      	beq.n	f91c <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
    f90a:	079b      	lsls	r3, r3, #30
    f90c:	bf58      	it	pl
    f90e:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
    f912:	b909      	cbnz	r1, f918 <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
    f914:	f7fd bd22 	b.w	d35c <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    f918:	f7fd bd50 	b.w	d3bc <nrf_gpio_pin_set>
}
    f91c:	4770      	bx	lr

0000f91e <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    f91e:	4770      	bx	lr

0000f920 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    f920:	b140      	cbz	r0, f934 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    f922:	68c3      	ldr	r3, [r0, #12]
    f924:	7858      	ldrb	r0, [r3, #1]
    f926:	f010 0001 	ands.w	r0, r0, #1
    f92a:	bf1e      	ittt	ne
    f92c:	7818      	ldrbne	r0, [r3, #0]
    f92e:	fab0 f080 	clzne	r0, r0
    f932:	0940      	lsrne	r0, r0, #5
}
    f934:	4770      	bx	lr

0000f936 <z_early_memset>:
	(void) memset(dst, c, n);
    f936:	f7ff bcf3 	b.w	f320 <memset>

0000f93a <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    f93a:	f7ff bce6 	b.w	f30a <memcpy>

0000f93e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f93e:	f3ef 8005 	mrs	r0, IPSR
}
    f942:	3800      	subs	r0, #0
    f944:	bf18      	it	ne
    f946:	2001      	movne	r0, #1
    f948:	4770      	bx	lr

0000f94a <z_impl_k_thread_name_set>:
}
    f94a:	f06f 0057 	mvn.w	r0, #87	; 0x57
    f94e:	4770      	bx	lr

0000f950 <k_thread_name_get>:
}
    f950:	2000      	movs	r0, #0
    f952:	4770      	bx	lr

0000f954 <z_pm_save_idle_exit>:
{
    f954:	b508      	push	{r3, lr}
	pm_system_resume();
    f956:	f7fa fabb 	bl	9ed0 <pm_system_resume>
}
    f95a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    f95e:	f7ff bf1b 	b.w	f798 <sys_clock_idle_exit>

0000f962 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    f962:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f966:	428b      	cmp	r3, r1
    f968:	d001      	beq.n	f96e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    f96a:	f7fe bbdf 	b.w	e12c <z_set_prio>
}
    f96e:	2000      	movs	r0, #0
    f970:	4770      	bx	lr

0000f972 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    f972:	b13a      	cbz	r2, f984 <z_impl_k_sem_init+0x12>
    f974:	428a      	cmp	r2, r1
    f976:	d305      	bcc.n	f984 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    f978:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    f97c:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    f980:	2000      	movs	r0, #0
    f982:	4770      	bx	lr
		return -EINVAL;
    f984:	f06f 0015 	mvn.w	r0, #21
}
    f988:	4770      	bx	lr

0000f98a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    f98a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    f98e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    f990:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    f992:	2300      	movs	r3, #0
	node->prev = NULL;
    f994:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    f998:	4770      	bx	lr

0000f99a <unpend_thread_no_timeout>:
{
    f99a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    f99c:	f7ff fff5 	bl	f98a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    f9a0:	7b43      	ldrb	r3, [r0, #13]
    f9a2:	f023 0302 	bic.w	r3, r3, #2
    f9a6:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    f9a8:	2300      	movs	r3, #0
    f9aa:	6083      	str	r3, [r0, #8]
}
    f9ac:	bd08      	pop	{r3, pc}

0000f9ae <z_thread_timeout>:
{
    f9ae:	4601      	mov	r1, r0
    f9b0:	b510      	push	{r4, lr}
	__asm__ volatile(
    f9b2:	f04f 0320 	mov.w	r3, #32
    f9b6:	f3ef 8411 	mrs	r4, BASEPRI
    f9ba:	f383 8812 	msr	BASEPRI_MAX, r3
    f9be:	f3bf 8f6f 	isb	sy
		if (!killed) {
    f9c2:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    f9c6:	f013 0f28 	tst.w	r3, #40	; 0x28
    f9ca:	d10d      	bne.n	f9e8 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    f9cc:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    f9d0:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    f9d2:	b10b      	cbz	r3, f9d8 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    f9d4:	f7ff ffe1 	bl	f99a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    f9d8:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    f9dc:	f023 0314 	bic.w	r3, r3, #20
    f9e0:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    f9e4:	f7fe faac 	bl	df40 <ready_thread>
	__asm__ volatile(
    f9e8:	f384 8811 	msr	BASEPRI, r4
    f9ec:	f3bf 8f6f 	isb	sy
}
    f9f0:	bd10      	pop	{r4, pc}

0000f9f2 <add_to_waitq_locked>:
{
    f9f2:	b538      	push	{r3, r4, r5, lr}
    f9f4:	4604      	mov	r4, r0
    f9f6:	460d      	mov	r5, r1
	unready_thread(thread);
    f9f8:	f7fe fad6 	bl	dfa8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    f9fc:	7b63      	ldrb	r3, [r4, #13]
    f9fe:	f043 0302 	orr.w	r3, r3, #2
    fa02:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    fa04:	b1e5      	cbz	r5, fa40 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    fa06:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    fa08:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fa0a:	429d      	cmp	r5, r3
    fa0c:	d109      	bne.n	fa22 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    fa0e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    fa10:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    fa14:	601c      	str	r4, [r3, #0]
	list->tail = node;
    fa16:	606c      	str	r4, [r5, #4]
}
    fa18:	e012      	b.n	fa40 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    fa1a:	686a      	ldr	r2, [r5, #4]
    fa1c:	4293      	cmp	r3, r2
    fa1e:	d0f6      	beq.n	fa0e <add_to_waitq_locked+0x1c>
    fa20:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fa22:	2b00      	cmp	r3, #0
    fa24:	d0f3      	beq.n	fa0e <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    fa26:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    fa2a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    fa2e:	428a      	cmp	r2, r1
    fa30:	d0f3      	beq.n	fa1a <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    fa32:	4291      	cmp	r1, r2
    fa34:	ddf1      	ble.n	fa1a <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    fa36:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    fa38:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    fa3c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    fa3e:	605c      	str	r4, [r3, #4]
}
    fa40:	bd38      	pop	{r3, r4, r5, pc}

0000fa42 <z_ready_thread>:
{
    fa42:	b510      	push	{r4, lr}
	__asm__ volatile(
    fa44:	f04f 0320 	mov.w	r3, #32
    fa48:	f3ef 8411 	mrs	r4, BASEPRI
    fa4c:	f383 8812 	msr	BASEPRI_MAX, r3
    fa50:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    fa54:	f7fe fa74 	bl	df40 <ready_thread>
	__asm__ volatile(
    fa58:	f384 8811 	msr	BASEPRI, r4
    fa5c:	f3bf 8f6f 	isb	sy
}
    fa60:	bd10      	pop	{r4, pc}

0000fa62 <z_unpend_thread_no_timeout>:
{
    fa62:	b508      	push	{r3, lr}
	__asm__ volatile(
    fa64:	f04f 0320 	mov.w	r3, #32
    fa68:	f3ef 8111 	mrs	r1, BASEPRI
    fa6c:	f383 8812 	msr	BASEPRI_MAX, r3
    fa70:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    fa74:	f7ff ff91 	bl	f99a <unpend_thread_no_timeout>
	__asm__ volatile(
    fa78:	f381 8811 	msr	BASEPRI, r1
    fa7c:	f3bf 8f6f 	isb	sy
}
    fa80:	bd08      	pop	{r3, pc}

0000fa82 <z_unpend1_no_timeout>:
{
    fa82:	b508      	push	{r3, lr}
    fa84:	4603      	mov	r3, r0
	__asm__ volatile(
    fa86:	f04f 0220 	mov.w	r2, #32
    fa8a:	f3ef 8111 	mrs	r1, BASEPRI
    fa8e:	f382 8812 	msr	BASEPRI_MAX, r2
    fa92:	f3bf 8f6f 	isb	sy
	return list->head == list;
    fa96:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fa98:	4283      	cmp	r3, r0
    fa9a:	d007      	beq.n	faac <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    fa9c:	b108      	cbz	r0, faa2 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    fa9e:	f7ff ff7c 	bl	f99a <unpend_thread_no_timeout>
	__asm__ volatile(
    faa2:	f381 8811 	msr	BASEPRI, r1
    faa6:	f3bf 8f6f 	isb	sy
}
    faaa:	bd08      	pop	{r3, pc}
    faac:	2000      	movs	r0, #0
    faae:	e7f8      	b.n	faa2 <z_unpend1_no_timeout+0x20>

0000fab0 <z_unpend_first_thread>:
{
    fab0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    fab2:	f04f 0320 	mov.w	r3, #32
    fab6:	f3ef 8511 	mrs	r5, BASEPRI
    faba:	f383 8812 	msr	BASEPRI_MAX, r3
    fabe:	f3bf 8f6f 	isb	sy
	return list->head == list;
    fac2:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fac4:	42a0      	cmp	r0, r4
    fac6:	d00d      	beq.n	fae4 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    fac8:	b134      	cbz	r4, fad8 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    faca:	4620      	mov	r0, r4
    facc:	f7ff ff65 	bl	f99a <unpend_thread_no_timeout>
    fad0:	f104 0018 	add.w	r0, r4, #24
    fad4:	f000 f81e 	bl	fb14 <z_abort_timeout>
	__asm__ volatile(
    fad8:	f385 8811 	msr	BASEPRI, r5
    fadc:	f3bf 8f6f 	isb	sy
}
    fae0:	4620      	mov	r0, r4
    fae2:	bd38      	pop	{r3, r4, r5, pc}
    fae4:	2400      	movs	r4, #0
    fae6:	e7f7      	b.n	fad8 <z_unpend_first_thread+0x28>

0000fae8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    fae8:	4603      	mov	r3, r0
    faea:	b920      	cbnz	r0, faf6 <z_reschedule_irqlock+0xe>
    faec:	f3ef 8205 	mrs	r2, IPSR
    faf0:	b90a      	cbnz	r2, faf6 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    faf2:	f7fa bbd7 	b.w	a2a4 <arch_swap>
    faf6:	f383 8811 	msr	BASEPRI, r3
    fafa:	f3bf 8f6f 	isb	sy
}
    fafe:	4770      	bx	lr

0000fb00 <z_reschedule_unlocked>:
	__asm__ volatile(
    fb00:	f04f 0320 	mov.w	r3, #32
    fb04:	f3ef 8011 	mrs	r0, BASEPRI
    fb08:	f383 8812 	msr	BASEPRI_MAX, r3
    fb0c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    fb10:	f7ff bfea 	b.w	fae8 <z_reschedule_irqlock>

0000fb14 <z_abort_timeout>:
{
    fb14:	b510      	push	{r4, lr}
    fb16:	f04f 0220 	mov.w	r2, #32
    fb1a:	f3ef 8411 	mrs	r4, BASEPRI
    fb1e:	f382 8812 	msr	BASEPRI_MAX, r2
    fb22:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    fb26:	6803      	ldr	r3, [r0, #0]
    fb28:	b13b      	cbz	r3, fb3a <z_abort_timeout+0x26>
			remove_timeout(to);
    fb2a:	f7fe fd4b 	bl	e5c4 <remove_timeout>
			ret = 0;
    fb2e:	2000      	movs	r0, #0
	__asm__ volatile(
    fb30:	f384 8811 	msr	BASEPRI, r4
    fb34:	f3bf 8f6f 	isb	sy
}
    fb38:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    fb3a:	f06f 0015 	mvn.w	r0, #21
    fb3e:	e7f7      	b.n	fb30 <z_abort_timeout+0x1c>

0000fb40 <z_get_next_timeout_expiry>:
{
    fb40:	b510      	push	{r4, lr}
	__asm__ volatile(
    fb42:	f04f 0320 	mov.w	r3, #32
    fb46:	f3ef 8411 	mrs	r4, BASEPRI
    fb4a:	f383 8812 	msr	BASEPRI_MAX, r3
    fb4e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    fb52:	f7fe fd0f 	bl	e574 <next_timeout>
	__asm__ volatile(
    fb56:	f384 8811 	msr	BASEPRI, r4
    fb5a:	f3bf 8f6f 	isb	sy
}
    fb5e:	bd10      	pop	{r4, pc}

0000fb60 <z_set_timeout_expiry>:
{
    fb60:	b570      	push	{r4, r5, r6, lr}
    fb62:	4604      	mov	r4, r0
    fb64:	460d      	mov	r5, r1
	__asm__ volatile(
    fb66:	f04f 0320 	mov.w	r3, #32
    fb6a:	f3ef 8611 	mrs	r6, BASEPRI
    fb6e:	f383 8812 	msr	BASEPRI_MAX, r3
    fb72:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    fb76:	f7fe fcfd 	bl	e574 <next_timeout>
			      || (ticks <= next_to);
    fb7a:	2801      	cmp	r0, #1
    fb7c:	dd07      	ble.n	fb8e <z_set_timeout_expiry+0x2e>
    fb7e:	42a0      	cmp	r0, r4
    fb80:	db05      	blt.n	fb8e <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    fb82:	42a0      	cmp	r0, r4
    fb84:	4629      	mov	r1, r5
    fb86:	bfa8      	it	ge
    fb88:	4620      	movge	r0, r4
    fb8a:	f7fc fb93 	bl	c2b4 <sys_clock_set_timeout>
	__asm__ volatile(
    fb8e:	f386 8811 	msr	BASEPRI, r6
    fb92:	f3bf 8f6f 	isb	sy
}
    fb96:	bd70      	pop	{r4, r5, r6, pc}

0000fb98 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    fb98:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    fb9a:	f7fe fe09 	bl	e7b0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    fb9e:	bd08      	pop	{r3, pc}

0000fba0 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    fba0:	f7fe be06 	b.w	e7b0 <sys_clock_tick_get>

0000fba4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    fba4:	b108      	cbz	r0, fbaa <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    fba6:	f7f9 bb95 	b.w	92d4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    fbaa:	4770      	bx	lr

0000fbac <k_timer_init>:
	timer->status = 0U;
    fbac:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    fbae:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    fbb2:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    fbb6:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    fbba:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    fbbe:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    fbc0:	6343      	str	r3, [r0, #52]	; 0x34
}
    fbc2:	4770      	bx	lr

0000fbc4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    fbc4:	b510      	push	{r4, lr}
    fbc6:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    fbc8:	f7ff ffa4 	bl	fb14 <z_abort_timeout>

	if (inactive) {
    fbcc:	b9b0      	cbnz	r0, fbfc <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    fbce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fbd0:	b10b      	cbz	r3, fbd6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    fbd2:	4620      	mov	r0, r4
    fbd4:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    fbd6:	f104 0018 	add.w	r0, r4, #24
    fbda:	f7ff ff52 	bl	fa82 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    fbde:	b168      	cbz	r0, fbfc <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    fbe0:	f7ff ff2f 	bl	fa42 <z_ready_thread>
	__asm__ volatile(
    fbe4:	f04f 0320 	mov.w	r3, #32
    fbe8:	f3ef 8011 	mrs	r0, BASEPRI
    fbec:	f383 8812 	msr	BASEPRI_MAX, r3
    fbf0:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    fbf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbf8:	f7ff bf76 	b.w	fae8 <z_reschedule_irqlock>
    fbfc:	bd10      	pop	{r4, pc}

0000fbfe <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    fbfe:	4770      	bx	lr

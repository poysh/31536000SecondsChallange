
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_table>:
   10000:	80 9d 00 20 fd 35 01 00 95 95 01 00 b5 35 01 00     ... .5.......5..
   10010:	b5 35 01 00 b5 35 01 00 b5 35 01 00 b5 35 01 00     .5...5...5...5..
	...
   1002c:	d1 26 01 00 b5 35 01 00 00 00 00 00 6d 26 01 00     .&...5......m&..
   1003c:	b5 35 01 00                                         .5..

00010040 <_irq_vector_table>:
   10040:	69 27 01 00 69 27 01 00 69 27 01 00 69 27 01 00     i'..i'..i'..i'..
   10050:	69 27 01 00 69 27 01 00 69 27 01 00 69 27 01 00     i'..i'..i'..i'..
   10060:	69 27 01 00 69 27 01 00 69 27 01 00 69 27 01 00     i'..i'..i'..i'..
   10070:	69 27 01 00 69 27 01 00 69 27 01 00 69 27 01 00     i'..i'..i'..i'..
   10080:	69 27 01 00 69 27 01 00 69 27 01 00 69 27 01 00     i'..i'..i'..i'..
   10090:	69 27 01 00 69 27 01 00 69 27 01 00 69 27 01 00     i'..i'..i'..i'..
   100a0:	69 27 01 00 69 27 01 00 69 27 01 00 69 27 01 00     i'..i'..i'..i'..
   100b0:	69 27 01 00 69 27 01 00 69 27 01 00 69 27 01 00     i'..i'..i'..i'..
   100c0:	69 27 01 00 69 27 01 00 69 27 01 00 69 27 01 00     i'..i'..i'..i'..
   100d0:	69 27 01 00 69 27 01 00 69 27 01 00 69 27 01 00     i'..i'..i'..i'..
   100e0:	69 27 01 00 69 27 01 00 69 27 01 00 69 27 01 00     i'..i'..i'..i'..
   100f0:	69 27 01 00 69 27 01 00 69 27 01 00 69 27 01 00     i'..i'..i'..i'..
   10100:	69 27 01 00 69 27 01 00 69 27 01 00 69 27 01 00     i'..i'..i'..i'..
   10110:	69 27 01 00 69 27 01 00 69 27 01 00 69 27 01 00     i'..i'..i'..i'..
   10120:	69 27 01 00 69 27 01 00 69 27 01 00 69 27 01 00     i'..i'..i'..i'..
   10130:	69 27 01 00 69 27 01 00 69 27 01 00 69 27 01 00     i'..i'..i'..i'..
   10140:	69 27 01 00 69 27 01 00 69 27 01 00 69 27 01 00     i'..i'..i'..i'..
   10150:	69 27 01 00                                         i'..

Disassembly of section text:

00010154 <__aeabi_uldivmod>:
   10154:	b953      	cbnz	r3, 1016c <__aeabi_uldivmod+0x18>
   10156:	b94a      	cbnz	r2, 1016c <__aeabi_uldivmod+0x18>
   10158:	2900      	cmp	r1, #0
   1015a:	bf08      	it	eq
   1015c:	2800      	cmpeq	r0, #0
   1015e:	bf1c      	itt	ne
   10160:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   10164:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   10168:	f000 b80c 	b.w	10184 <__aeabi_idiv0>
   1016c:	f1ad 0c08 	sub.w	ip, sp, #8
   10170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10174:	f000 f808 	bl	10188 <__udivmoddi4>
   10178:	f8dd e004 	ldr.w	lr, [sp, #4]
   1017c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10180:	b004      	add	sp, #16
   10182:	4770      	bx	lr

00010184 <__aeabi_idiv0>:
   10184:	4770      	bx	lr
   10186:	bf00      	nop

00010188 <__udivmoddi4>:
   10188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1018c:	4686      	mov	lr, r0
   1018e:	468c      	mov	ip, r1
   10190:	4608      	mov	r0, r1
   10192:	9e08      	ldr	r6, [sp, #32]
   10194:	4615      	mov	r5, r2
   10196:	4674      	mov	r4, lr
   10198:	4619      	mov	r1, r3
   1019a:	2b00      	cmp	r3, #0
   1019c:	f040 80c1 	bne.w	10322 <__udivmoddi4+0x19a>
   101a0:	4285      	cmp	r5, r0
   101a2:	fab2 f282 	clz	r2, r2
   101a6:	d945      	bls.n	10234 <__udivmoddi4+0xac>
   101a8:	b14a      	cbz	r2, 101be <__udivmoddi4+0x36>
   101aa:	f1c2 0320 	rsb	r3, r2, #32
   101ae:	fa00 fc02 	lsl.w	ip, r0, r2
   101b2:	4095      	lsls	r5, r2
   101b4:	4094      	lsls	r4, r2
   101b6:	fa2e f303 	lsr.w	r3, lr, r3
   101ba:	ea43 0c0c 	orr.w	ip, r3, ip
   101be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   101c2:	b2a8      	uxth	r0, r5
   101c4:	0c23      	lsrs	r3, r4, #16
   101c6:	fbbc f8fe 	udiv	r8, ip, lr
   101ca:	fb0e cc18 	mls	ip, lr, r8, ip
   101ce:	fb08 f900 	mul.w	r9, r8, r0
   101d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   101d6:	4599      	cmp	r9, r3
   101d8:	d928      	bls.n	1022c <__udivmoddi4+0xa4>
   101da:	18eb      	adds	r3, r5, r3
   101dc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   101e0:	d204      	bcs.n	101ec <__udivmoddi4+0x64>
   101e2:	4599      	cmp	r9, r3
   101e4:	d902      	bls.n	101ec <__udivmoddi4+0x64>
   101e6:	f1a8 0702 	sub.w	r7, r8, #2
   101ea:	442b      	add	r3, r5
   101ec:	eba3 0309 	sub.w	r3, r3, r9
   101f0:	b2a4      	uxth	r4, r4
   101f2:	fbb3 fcfe 	udiv	ip, r3, lr
   101f6:	fb0e 331c 	mls	r3, lr, ip, r3
   101fa:	fb0c f000 	mul.w	r0, ip, r0
   101fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   10202:	42a0      	cmp	r0, r4
   10204:	d914      	bls.n	10230 <__udivmoddi4+0xa8>
   10206:	192c      	adds	r4, r5, r4
   10208:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   1020c:	d204      	bcs.n	10218 <__udivmoddi4+0x90>
   1020e:	42a0      	cmp	r0, r4
   10210:	d902      	bls.n	10218 <__udivmoddi4+0x90>
   10212:	f1ac 0302 	sub.w	r3, ip, #2
   10216:	442c      	add	r4, r5
   10218:	1a24      	subs	r4, r4, r0
   1021a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   1021e:	b11e      	cbz	r6, 10228 <__udivmoddi4+0xa0>
   10220:	40d4      	lsrs	r4, r2
   10222:	2300      	movs	r3, #0
   10224:	6034      	str	r4, [r6, #0]
   10226:	6073      	str	r3, [r6, #4]
   10228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1022c:	4647      	mov	r7, r8
   1022e:	e7dd      	b.n	101ec <__udivmoddi4+0x64>
   10230:	4663      	mov	r3, ip
   10232:	e7f1      	b.n	10218 <__udivmoddi4+0x90>
   10234:	bb92      	cbnz	r2, 1029c <__udivmoddi4+0x114>
   10236:	1b43      	subs	r3, r0, r5
   10238:	2101      	movs	r1, #1
   1023a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1023e:	b2af      	uxth	r7, r5
   10240:	0c20      	lsrs	r0, r4, #16
   10242:	fbb3 fcfe 	udiv	ip, r3, lr
   10246:	fb0e 331c 	mls	r3, lr, ip, r3
   1024a:	fb0c f807 	mul.w	r8, ip, r7
   1024e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   10252:	4598      	cmp	r8, r3
   10254:	d961      	bls.n	1031a <__udivmoddi4+0x192>
   10256:	18eb      	adds	r3, r5, r3
   10258:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1025c:	d204      	bcs.n	10268 <__udivmoddi4+0xe0>
   1025e:	4598      	cmp	r8, r3
   10260:	d902      	bls.n	10268 <__udivmoddi4+0xe0>
   10262:	f1ac 0002 	sub.w	r0, ip, #2
   10266:	442b      	add	r3, r5
   10268:	eba3 0308 	sub.w	r3, r3, r8
   1026c:	b2a4      	uxth	r4, r4
   1026e:	fbb3 fcfe 	udiv	ip, r3, lr
   10272:	fb0e 331c 	mls	r3, lr, ip, r3
   10276:	fb0c f707 	mul.w	r7, ip, r7
   1027a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1027e:	42a7      	cmp	r7, r4
   10280:	d94d      	bls.n	1031e <__udivmoddi4+0x196>
   10282:	192c      	adds	r4, r5, r4
   10284:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   10288:	d204      	bcs.n	10294 <__udivmoddi4+0x10c>
   1028a:	42a7      	cmp	r7, r4
   1028c:	d902      	bls.n	10294 <__udivmoddi4+0x10c>
   1028e:	f1ac 0302 	sub.w	r3, ip, #2
   10292:	442c      	add	r4, r5
   10294:	1be4      	subs	r4, r4, r7
   10296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1029a:	e7c0      	b.n	1021e <__udivmoddi4+0x96>
   1029c:	f1c2 0320 	rsb	r3, r2, #32
   102a0:	4095      	lsls	r5, r2
   102a2:	4094      	lsls	r4, r2
   102a4:	fa20 f103 	lsr.w	r1, r0, r3
   102a8:	fa2e f303 	lsr.w	r3, lr, r3
   102ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   102b0:	4090      	lsls	r0, r2
   102b2:	b2af      	uxth	r7, r5
   102b4:	4303      	orrs	r3, r0
   102b6:	fbb1 fcfe 	udiv	ip, r1, lr
   102ba:	fb0e 101c 	mls	r0, lr, ip, r1
   102be:	0c19      	lsrs	r1, r3, #16
   102c0:	fb0c f807 	mul.w	r8, ip, r7
   102c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   102c8:	4588      	cmp	r8, r1
   102ca:	d922      	bls.n	10312 <__udivmoddi4+0x18a>
   102cc:	1869      	adds	r1, r5, r1
   102ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   102d2:	d204      	bcs.n	102de <__udivmoddi4+0x156>
   102d4:	4588      	cmp	r8, r1
   102d6:	d902      	bls.n	102de <__udivmoddi4+0x156>
   102d8:	f1ac 0002 	sub.w	r0, ip, #2
   102dc:	4429      	add	r1, r5
   102de:	eba1 0108 	sub.w	r1, r1, r8
   102e2:	b29b      	uxth	r3, r3
   102e4:	fbb1 fcfe 	udiv	ip, r1, lr
   102e8:	fb0e 111c 	mls	r1, lr, ip, r1
   102ec:	fb0c f707 	mul.w	r7, ip, r7
   102f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   102f4:	429f      	cmp	r7, r3
   102f6:	d90e      	bls.n	10316 <__udivmoddi4+0x18e>
   102f8:	18eb      	adds	r3, r5, r3
   102fa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   102fe:	d204      	bcs.n	1030a <__udivmoddi4+0x182>
   10300:	429f      	cmp	r7, r3
   10302:	d902      	bls.n	1030a <__udivmoddi4+0x182>
   10304:	f1ac 0102 	sub.w	r1, ip, #2
   10308:	442b      	add	r3, r5
   1030a:	1bdb      	subs	r3, r3, r7
   1030c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   10310:	e793      	b.n	1023a <__udivmoddi4+0xb2>
   10312:	4660      	mov	r0, ip
   10314:	e7e3      	b.n	102de <__udivmoddi4+0x156>
   10316:	4661      	mov	r1, ip
   10318:	e7f7      	b.n	1030a <__udivmoddi4+0x182>
   1031a:	4660      	mov	r0, ip
   1031c:	e7a4      	b.n	10268 <__udivmoddi4+0xe0>
   1031e:	4663      	mov	r3, ip
   10320:	e7b8      	b.n	10294 <__udivmoddi4+0x10c>
   10322:	4283      	cmp	r3, r0
   10324:	d906      	bls.n	10334 <__udivmoddi4+0x1ac>
   10326:	b916      	cbnz	r6, 1032e <__udivmoddi4+0x1a6>
   10328:	2100      	movs	r1, #0
   1032a:	4608      	mov	r0, r1
   1032c:	e77c      	b.n	10228 <__udivmoddi4+0xa0>
   1032e:	e9c6 e000 	strd	lr, r0, [r6]
   10332:	e7f9      	b.n	10328 <__udivmoddi4+0x1a0>
   10334:	fab3 f783 	clz	r7, r3
   10338:	b98f      	cbnz	r7, 1035e <__udivmoddi4+0x1d6>
   1033a:	4283      	cmp	r3, r0
   1033c:	d301      	bcc.n	10342 <__udivmoddi4+0x1ba>
   1033e:	4572      	cmp	r2, lr
   10340:	d808      	bhi.n	10354 <__udivmoddi4+0x1cc>
   10342:	ebbe 0402 	subs.w	r4, lr, r2
   10346:	eb60 0303 	sbc.w	r3, r0, r3
   1034a:	2001      	movs	r0, #1
   1034c:	469c      	mov	ip, r3
   1034e:	b91e      	cbnz	r6, 10358 <__udivmoddi4+0x1d0>
   10350:	2100      	movs	r1, #0
   10352:	e769      	b.n	10228 <__udivmoddi4+0xa0>
   10354:	4638      	mov	r0, r7
   10356:	e7fa      	b.n	1034e <__udivmoddi4+0x1c6>
   10358:	e9c6 4c00 	strd	r4, ip, [r6]
   1035c:	e7f8      	b.n	10350 <__udivmoddi4+0x1c8>
   1035e:	f1c7 0c20 	rsb	ip, r7, #32
   10362:	40bb      	lsls	r3, r7
   10364:	fa0e f507 	lsl.w	r5, lr, r7
   10368:	fa22 f40c 	lsr.w	r4, r2, ip
   1036c:	fa2e f10c 	lsr.w	r1, lr, ip
   10370:	40ba      	lsls	r2, r7
   10372:	431c      	orrs	r4, r3
   10374:	fa20 f30c 	lsr.w	r3, r0, ip
   10378:	40b8      	lsls	r0, r7
   1037a:	ea4f 4914 	mov.w	r9, r4, lsr #16
   1037e:	4301      	orrs	r1, r0
   10380:	fa1f fe84 	uxth.w	lr, r4
   10384:	fbb3 f8f9 	udiv	r8, r3, r9
   10388:	fb09 3018 	mls	r0, r9, r8, r3
   1038c:	0c0b      	lsrs	r3, r1, #16
   1038e:	fb08 fa0e 	mul.w	sl, r8, lr
   10392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   10396:	459a      	cmp	sl, r3
   10398:	d940      	bls.n	1041c <__udivmoddi4+0x294>
   1039a:	18e3      	adds	r3, r4, r3
   1039c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   103a0:	d204      	bcs.n	103ac <__udivmoddi4+0x224>
   103a2:	459a      	cmp	sl, r3
   103a4:	d902      	bls.n	103ac <__udivmoddi4+0x224>
   103a6:	f1a8 0002 	sub.w	r0, r8, #2
   103aa:	4423      	add	r3, r4
   103ac:	eba3 030a 	sub.w	r3, r3, sl
   103b0:	b289      	uxth	r1, r1
   103b2:	fbb3 f8f9 	udiv	r8, r3, r9
   103b6:	fb09 3318 	mls	r3, r9, r8, r3
   103ba:	fb08 fe0e 	mul.w	lr, r8, lr
   103be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   103c2:	458e      	cmp	lr, r1
   103c4:	d92c      	bls.n	10420 <__udivmoddi4+0x298>
   103c6:	1861      	adds	r1, r4, r1
   103c8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   103cc:	d204      	bcs.n	103d8 <__udivmoddi4+0x250>
   103ce:	458e      	cmp	lr, r1
   103d0:	d902      	bls.n	103d8 <__udivmoddi4+0x250>
   103d2:	f1a8 0302 	sub.w	r3, r8, #2
   103d6:	4421      	add	r1, r4
   103d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   103dc:	eba1 010e 	sub.w	r1, r1, lr
   103e0:	fba0 9802 	umull	r9, r8, r0, r2
   103e4:	4541      	cmp	r1, r8
   103e6:	46ce      	mov	lr, r9
   103e8:	4643      	mov	r3, r8
   103ea:	d302      	bcc.n	103f2 <__udivmoddi4+0x26a>
   103ec:	d106      	bne.n	103fc <__udivmoddi4+0x274>
   103ee:	454d      	cmp	r5, r9
   103f0:	d204      	bcs.n	103fc <__udivmoddi4+0x274>
   103f2:	3801      	subs	r0, #1
   103f4:	ebb9 0e02 	subs.w	lr, r9, r2
   103f8:	eb68 0304 	sbc.w	r3, r8, r4
   103fc:	2e00      	cmp	r6, #0
   103fe:	d0a7      	beq.n	10350 <__udivmoddi4+0x1c8>
   10400:	ebb5 020e 	subs.w	r2, r5, lr
   10404:	eb61 0103 	sbc.w	r1, r1, r3
   10408:	fa01 fc0c 	lsl.w	ip, r1, ip
   1040c:	fa22 f307 	lsr.w	r3, r2, r7
   10410:	40f9      	lsrs	r1, r7
   10412:	ea4c 0303 	orr.w	r3, ip, r3
   10416:	e9c6 3100 	strd	r3, r1, [r6]
   1041a:	e799      	b.n	10350 <__udivmoddi4+0x1c8>
   1041c:	4640      	mov	r0, r8
   1041e:	e7c5      	b.n	103ac <__udivmoddi4+0x224>
   10420:	4643      	mov	r3, r8
   10422:	e7d9      	b.n	103d8 <__udivmoddi4+0x250>

00010424 <main>:
struct led_rgb pixels[STRIP_NUM_PIXELS];

static const struct device *const strip = DEVICE_DT_GET(STRIP_NODE);

void main(void)
{
   10424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10428:	b088      	sub	sp, #32
   1042a:	af00      	add	r7, sp, #0
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1042c:	489f      	ldr	r0, [pc, #636]	; (106ac <main+0x288>)
   1042e:	f00a f962 	bl	1a6f6 <z_device_is_ready>
	size_t cursor = 0, color = 0;
	int rc;

	if (device_is_ready(strip)) {
   10432:	2800      	cmp	r0, #0
   10434:	d079      	beq.n	1052a <main+0x106>
		LOG_INF("Found LED strip device %s", strip->name);
   10436:	4b9d      	ldr	r3, [pc, #628]	; (106ac <main+0x288>)
   10438:	6819      	ldr	r1, [r3, #0]
   1043a:	466c      	mov	r4, sp
   1043c:	2300      	movs	r3, #0
   1043e:	713b      	strb	r3, [r7, #4]
   10440:	2302      	movs	r3, #2
   10442:	717b      	strb	r3, [r7, #5]
   10444:	b088      	sub	sp, #32
   10446:	466e      	mov	r6, sp
   10448:	f116 0210 	adds.w	r2, r6, #16
   1044c:	d011      	beq.n	10472 <main+0x4e>
   1044e:	200e      	movs	r0, #14
   10450:	b11a      	cbz	r2, 1045a <main+0x36>
   10452:	2804      	cmp	r0, #4
   10454:	dd01      	ble.n	1045a <main+0x36>
   10456:	4b96      	ldr	r3, [pc, #600]	; (106b0 <main+0x28c>)
   10458:	6173      	str	r3, [r6, #20]
   1045a:	2300      	movs	r3, #0
   1045c:	703b      	strb	r3, [r7, #0]
   1045e:	2302      	movs	r3, #2
   10460:	707b      	strb	r3, [r7, #1]
   10462:	b19a      	cbz	r2, 1048c <main+0x68>
   10464:	2808      	cmp	r0, #8
   10466:	dd00      	ble.n	1046a <main+0x46>
   10468:	61b1      	str	r1, [r6, #24]
   1046a:	f106 031c 	add.w	r3, r6, #28
   1046e:	2100      	movs	r1, #0
   10470:	e00a      	b.n	10488 <main+0x64>
   10472:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10476:	e7eb      	b.n	10450 <main+0x2c>
   10478:	f101 0c20 	add.w	ip, r1, #32
   1047c:	44bc      	add	ip, r7
   1047e:	f81c cc20 	ldrb.w	ip, [ip, #-32]
   10482:	f803 cb01 	strb.w	ip, [r3], #1
   10486:	3101      	adds	r1, #1
   10488:	2901      	cmp	r1, #1
   1048a:	d9f5      	bls.n	10478 <main+0x54>
   1048c:	280d      	cmp	r0, #13
   1048e:	dd49      	ble.n	10524 <main+0x100>
   10490:	230e      	movs	r3, #14
   10492:	b142      	cbz	r2, 104a6 <main+0x82>
   10494:	2103      	movs	r1, #3
   10496:	7139      	strb	r1, [r7, #4]
   10498:	2100      	movs	r1, #0
   1049a:	7179      	strb	r1, [r7, #5]
   1049c:	71b9      	strb	r1, [r7, #6]
   1049e:	2101      	movs	r1, #1
   104a0:	71f9      	strb	r1, [r7, #7]
   104a2:	6878      	ldr	r0, [r7, #4]
   104a4:	6130      	str	r0, [r6, #16]
   104a6:	2100      	movs	r1, #0
   104a8:	f36f 0100 	bfc	r1, #0, #1
   104ac:	f36f 0141 	bfc	r1, #1, #1
   104b0:	f36f 0182 	bfc	r1, #2, #1
   104b4:	f36f 01c5 	bfc	r1, #3, #3
   104b8:	f04f 0803 	mov.w	r8, #3
   104bc:	f368 1188 	bfi	r1, r8, #6, #3
   104c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
   104c4:	f363 2152 	bfi	r1, r3, #9, #10
   104c8:	f36f 41de 	bfc	r1, #19, #12
   104cc:	f36f 71df 	bfc	r1, #31, #1
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   104d0:	4e78      	ldr	r6, [pc, #480]	; (106b4 <main+0x290>)
   104d2:	2300      	movs	r3, #0
   104d4:	4630      	mov	r0, r6
   104d6:	f008 ff46 	bl	19366 <z_impl_z_log_msg_static_create>
   104da:	46a5      	mov	sp, r4
	} else {
		LOG_ERR("LED strip device %s is not ready", strip->name);
		return;
	}

	LOG_INF("Displaying pattern on strip");
   104dc:	4b76      	ldr	r3, [pc, #472]	; (106b8 <main+0x294>)
   104de:	61fb      	str	r3, [r7, #28]
   104e0:	2302      	movs	r3, #2
   104e2:	713b      	strb	r3, [r7, #4]
   104e4:	2400      	movs	r4, #0
   104e6:	717c      	strb	r4, [r7, #5]
   104e8:	71bc      	strb	r4, [r7, #6]
   104ea:	71fc      	strb	r4, [r7, #7]
   104ec:	687b      	ldr	r3, [r7, #4]
   104ee:	61bb      	str	r3, [r7, #24]
   104f0:	4621      	mov	r1, r4
   104f2:	f364 0100 	bfi	r1, r4, #0, #1
   104f6:	f364 0141 	bfi	r1, r4, #1, #1
   104fa:	f364 0182 	bfi	r1, r4, #2, #1
   104fe:	f364 01c5 	bfi	r1, r4, #3, #3
   10502:	f368 1188 	bfi	r1, r8, #6, #3
   10506:	2308      	movs	r3, #8
   10508:	f363 2152 	bfi	r1, r3, #9, #10
   1050c:	f364 41de 	bfi	r1, r4, #19, #12
   10510:	f364 71df 	bfi	r1, r4, #31, #1
   10514:	4623      	mov	r3, r4
   10516:	f107 0218 	add.w	r2, r7, #24
   1051a:	4630      	mov	r0, r6
   1051c:	f008 ff23 	bl	19366 <z_impl_z_log_msg_static_create>
	size_t cursor = 0, color = 0;
   10520:	46a0      	mov	r8, r4
   10522:	e08d      	b.n	10640 <main+0x21c>
		LOG_INF("Found LED strip device %s", strip->name);
   10524:	f06f 031b 	mvn.w	r3, #27
   10528:	e7b3      	b.n	10492 <main+0x6e>
		LOG_ERR("LED strip device %s is not ready", strip->name);
   1052a:	4b60      	ldr	r3, [pc, #384]	; (106ac <main+0x288>)
   1052c:	6819      	ldr	r1, [r3, #0]
   1052e:	2300      	movs	r3, #0
   10530:	713b      	strb	r3, [r7, #4]
   10532:	2302      	movs	r3, #2
   10534:	717b      	strb	r3, [r7, #5]
   10536:	b088      	sub	sp, #32
   10538:	466c      	mov	r4, sp
   1053a:	f114 0210 	adds.w	r2, r4, #16
   1053e:	d011      	beq.n	10564 <main+0x140>
   10540:	200e      	movs	r0, #14
   10542:	b11a      	cbz	r2, 1054c <main+0x128>
   10544:	2804      	cmp	r0, #4
   10546:	dd01      	ble.n	1054c <main+0x128>
   10548:	4b5c      	ldr	r3, [pc, #368]	; (106bc <main+0x298>)
   1054a:	6163      	str	r3, [r4, #20]
   1054c:	2300      	movs	r3, #0
   1054e:	703b      	strb	r3, [r7, #0]
   10550:	2302      	movs	r3, #2
   10552:	707b      	strb	r3, [r7, #1]
   10554:	b19a      	cbz	r2, 1057e <main+0x15a>
   10556:	2808      	cmp	r0, #8
   10558:	dd00      	ble.n	1055c <main+0x138>
   1055a:	61a1      	str	r1, [r4, #24]
   1055c:	f104 031c 	add.w	r3, r4, #28
   10560:	2100      	movs	r1, #0
   10562:	e00a      	b.n	1057a <main+0x156>
   10564:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10568:	e7eb      	b.n	10542 <main+0x11e>
   1056a:	f101 0520 	add.w	r5, r1, #32
   1056e:	443d      	add	r5, r7
   10570:	f815 5c20 	ldrb.w	r5, [r5, #-32]
   10574:	f803 5b01 	strb.w	r5, [r3], #1
   10578:	3101      	adds	r1, #1
   1057a:	2901      	cmp	r1, #1
   1057c:	d9f5      	bls.n	1056a <main+0x146>
   1057e:	280d      	cmp	r0, #13
   10580:	dd26      	ble.n	105d0 <main+0x1ac>
   10582:	230e      	movs	r3, #14
   10584:	b142      	cbz	r2, 10598 <main+0x174>
   10586:	2103      	movs	r1, #3
   10588:	7139      	strb	r1, [r7, #4]
   1058a:	2100      	movs	r1, #0
   1058c:	7179      	strb	r1, [r7, #5]
   1058e:	71b9      	strb	r1, [r7, #6]
   10590:	2101      	movs	r1, #1
   10592:	71f9      	strb	r1, [r7, #7]
   10594:	6878      	ldr	r0, [r7, #4]
   10596:	6120      	str	r0, [r4, #16]
   10598:	2100      	movs	r1, #0
   1059a:	f36f 0100 	bfc	r1, #0, #1
   1059e:	f36f 0141 	bfc	r1, #1, #1
   105a2:	f36f 0182 	bfc	r1, #2, #1
   105a6:	f36f 01c5 	bfc	r1, #3, #3
   105aa:	2001      	movs	r0, #1
   105ac:	f360 1188 	bfi	r1, r0, #6, #3
   105b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
   105b4:	f363 2152 	bfi	r1, r3, #9, #10
   105b8:	f36f 41de 	bfc	r1, #19, #12
   105bc:	f36f 71df 	bfc	r1, #31, #1
   105c0:	2300      	movs	r3, #0
   105c2:	483c      	ldr	r0, [pc, #240]	; (106b4 <main+0x290>)
   105c4:	f008 fecf 	bl	19366 <z_impl_z_log_msg_static_create>
			}
		}

		k_sleep(DELAY_TIME);
	}
}
   105c8:	3720      	adds	r7, #32
   105ca:	46bd      	mov	sp, r7
   105cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("LED strip device %s is not ready", strip->name);
   105d0:	f06f 031b 	mvn.w	r3, #27
   105d4:	e7d6      	b.n	10584 <main+0x160>
			LOG_ERR("couldn't update strip: %d", rc);
   105d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   105da:	e04f      	b.n	1067c <main+0x258>
   105dc:	f06f 011b 	mvn.w	r1, #27
   105e0:	b13a      	cbz	r2, 105f2 <main+0x1ce>
   105e2:	2003      	movs	r0, #3
   105e4:	7138      	strb	r0, [r7, #4]
   105e6:	2000      	movs	r0, #0
   105e8:	7178      	strb	r0, [r7, #5]
   105ea:	71b8      	strb	r0, [r7, #6]
   105ec:	71f8      	strb	r0, [r7, #7]
   105ee:	6878      	ldr	r0, [r7, #4]
   105f0:	6118      	str	r0, [r3, #16]
   105f2:	f36f 0500 	bfc	r5, #0, #1
   105f6:	f36f 0541 	bfc	r5, #1, #1
   105fa:	f36f 0582 	bfc	r5, #2, #1
   105fe:	f36f 05c5 	bfc	r5, #3, #3
   10602:	2301      	movs	r3, #1
   10604:	f363 1588 	bfi	r5, r3, #6, #3
   10608:	f401 737b 	and.w	r3, r1, #1004	; 0x3ec
   1060c:	f363 2552 	bfi	r5, r3, #9, #10
   10610:	f36f 45de 	bfc	r5, #19, #12
   10614:	f36f 75df 	bfc	r5, #31, #1
   10618:	2300      	movs	r3, #0
   1061a:	4629      	mov	r1, r5
   1061c:	4825      	ldr	r0, [pc, #148]	; (106b4 <main+0x290>)
   1061e:	f008 fea2 	bl	19366 <z_impl_z_log_msg_static_create>
   10622:	46b5      	mov	sp, r6
		cursor++;
   10624:	3401      	adds	r4, #1
		if (cursor >= STRIP_NUM_PIXELS) {
   10626:	2c17      	cmp	r4, #23
   10628:	d905      	bls.n	10636 <main+0x212>
			color++;
   1062a:	f108 0801 	add.w	r8, r8, #1
			if (color == ARRAY_SIZE(colors)) {
   1062e:	f1b8 0f03 	cmp.w	r8, #3
   10632:	d036      	beq.n	106a2 <main+0x27e>
			cursor = 0;
   10634:	2400      	movs	r4, #0
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   10636:	f240 6067 	movw	r0, #1639	; 0x667
   1063a:	2100      	movs	r1, #0
   1063c:	f007 fbd6 	bl	17dec <z_impl_k_sleep>
		memset(&pixels, 0x00, sizeof(pixels));
   10640:	4e1f      	ldr	r6, [pc, #124]	; (106c0 <main+0x29c>)
   10642:	2260      	movs	r2, #96	; 0x60
   10644:	2100      	movs	r1, #0
   10646:	4630      	mov	r0, r6
   10648:	f009 f89f 	bl	1978a <memset>
		memcpy(&pixels[cursor], &colors[color], sizeof(struct led_rgb));
   1064c:	2204      	movs	r2, #4
   1064e:	491d      	ldr	r1, [pc, #116]	; (106c4 <main+0x2a0>)
   10650:	eb01 0188 	add.w	r1, r1, r8, lsl #2
   10654:	eb06 0084 	add.w	r0, r6, r4, lsl #2
   10658:	f009 f868 	bl	1972c <memcpy>
 * @warning May overwrite @a pixels
 */
static inline int led_strip_update_rgb(const struct device *dev,
				       struct led_rgb *pixels,
				       size_t num_pixels) {
	const struct led_strip_driver_api *api =
   1065c:	4813      	ldr	r0, [pc, #76]	; (106ac <main+0x288>)
   1065e:	6883      	ldr	r3, [r0, #8]
		(const struct led_strip_driver_api *)dev->api;

	return api->update_rgb(dev, pixels, num_pixels);
   10660:	681b      	ldr	r3, [r3, #0]
   10662:	2218      	movs	r2, #24
   10664:	4631      	mov	r1, r6
   10666:	4798      	blx	r3
		if (rc) {
   10668:	4684      	mov	ip, r0
   1066a:	2800      	cmp	r0, #0
   1066c:	d0da      	beq.n	10624 <main+0x200>
			LOG_ERR("couldn't update strip: %d", rc);
   1066e:	466e      	mov	r6, sp
   10670:	b088      	sub	sp, #32
   10672:	466b      	mov	r3, sp
   10674:	f113 0210 	adds.w	r2, r3, #16
   10678:	d0ad      	beq.n	105d6 <main+0x1b2>
   1067a:	210c      	movs	r1, #12
   1067c:	b152      	cbz	r2, 10694 <main+0x270>
   1067e:	4608      	mov	r0, r1
   10680:	2904      	cmp	r1, #4
   10682:	dd03      	ble.n	1068c <main+0x268>
   10684:	f8df e040 	ldr.w	lr, [pc, #64]	; 106c8 <main+0x2a4>
   10688:	f8c3 e014 	str.w	lr, [r3, #20]
   1068c:	2808      	cmp	r0, #8
   1068e:	dda5      	ble.n	105dc <main+0x1b8>
   10690:	f8c3 c018 	str.w	ip, [r3, #24]
   10694:	290b      	cmp	r1, #11
   10696:	dd01      	ble.n	1069c <main+0x278>
   10698:	210c      	movs	r1, #12
   1069a:	e7a1      	b.n	105e0 <main+0x1bc>
   1069c:	f06f 011b 	mvn.w	r1, #27
   106a0:	e79e      	b.n	105e0 <main+0x1bc>
				color = 0;
   106a2:	f04f 0800 	mov.w	r8, #0
			cursor = 0;
   106a6:	4644      	mov	r4, r8
   106a8:	e7c5      	b.n	10636 <main+0x212>
   106aa:	bf00      	nop
   106ac:	0001acf8 	.word	0x0001acf8
   106b0:	0001b058 	.word	0x0001b058
   106b4:	0001afa0 	.word	0x0001afa0
   106b8:	0001b074 	.word	0x0001b074
   106bc:	0001b090 	.word	0x0001b090
   106c0:	20008840 	.word	0x20008840
   106c4:	0001b0d0 	.word	0x0001b0d0
   106c8:	0001b0b4 	.word	0x0001b0b4

000106cc <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   106cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106d0:	b097      	sub	sp, #92	; 0x5c
   106d2:	af00      	add	r7, sp, #0
   106d4:	4683      	mov	fp, r0
   106d6:	61ba      	str	r2, [r7, #24]
   106d8:	613b      	str	r3, [r7, #16]
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
   106da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   106de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   106e2:	623b      	str	r3, [r7, #32]
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   106e4:	60f9      	str	r1, [r7, #12]
   106e6:	b151      	cbz	r1, 106fe <cbprintf_package_convert+0x32>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   106e8:	f89b 6002 	ldrb.w	r6, [fp, #2]
   106ec:	46b1      	mov	r9, r6
	ro_cpy = ros_nbr &&
   106ee:	b156      	cbz	r6, 10706 <cbprintf_package_convert+0x3a>
   106f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   106f4:	f013 0f01 	tst.w	r3, #1
   106f8:	d111      	bne.n	1071e <cbprintf_package_convert+0x52>
   106fa:	2300      	movs	r3, #0
   106fc:	e004      	b.n	10708 <cbprintf_package_convert+0x3c>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   106fe:	f007 fe5d 	bl	183bc <get_package_len>
   10702:	60f8      	str	r0, [r7, #12]
   10704:	e7f0      	b.n	106e8 <cbprintf_package_convert+0x1c>
	ro_cpy = ros_nbr &&
   10706:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   10708:	f89b 2003 	ldrb.w	r2, [fp, #3]
   1070c:	627a      	str	r2, [r7, #36]	; 0x24
	rw_cpy = rws_nbr > 0 &&
   1070e:	b142      	cbz	r2, 10722 <cbprintf_package_convert+0x56>
   10710:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   10714:	f012 0f02 	tst.w	r2, #2
   10718:	d122      	bne.n	10760 <cbprintf_package_convert+0x94>
   1071a:	2200      	movs	r2, #0
   1071c:	e002      	b.n	10724 <cbprintf_package_convert+0x58>
	ro_cpy = ros_nbr &&
   1071e:	2301      	movs	r3, #1
   10720:	e7f2      	b.n	10708 <cbprintf_package_convert+0x3c>
	rw_cpy = rws_nbr > 0 &&
   10722:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
   10724:	b902      	cbnz	r2, 10728 <cbprintf_package_convert+0x5c>
   10726:	b1eb      	cbz	r3, 10764 <cbprintf_package_convert+0x98>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
   10728:	f89b 5000 	ldrb.w	r5, [fp]
   1072c:	00aa      	lsls	r2, r5, #2
   1072e:	60ba      	str	r2, [r7, #8]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	const char *fmt = *(const char **)(buf + sizeof(void *));
   10730:	f8db 2004 	ldr.w	r2, [fp, #4]
   10734:	617a      	str	r2, [r7, #20]
	uint8_t *str_pos = &buf[args_size];
   10736:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
   1073a:	69ba      	ldr	r2, [r7, #24]
   1073c:	b1f2      	cbz	r2, 1077c <cbprintf_package_convert+0xb0>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
   1073e:	2b00      	cmp	r3, #0
   10740:	f040 8112 	bne.w	10968 <cbprintf_package_convert+0x29c>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   10744:	f1b9 0f00 	cmp.w	r9, #0
   10748:	f000 811d 	beq.w	10986 <cbprintf_package_convert+0x2ba>
   1074c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   10750:	f013 0f04 	tst.w	r3, #4
   10754:	f040 811b 	bne.w	1098e <cbprintf_package_convert+0x2c2>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
   10758:	2000      	movs	r0, #0
		keep_cnt = 0;
   1075a:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
   1075c:	4606      	mov	r6, r0
   1075e:	e107      	b.n	10970 <cbprintf_package_convert+0x2a4>
	rw_cpy = rws_nbr > 0 &&
   10760:	2201      	movs	r2, #1
   10762:	e7df      	b.n	10724 <cbprintf_package_convert+0x58>
		if (cb) {
   10764:	69bb      	ldr	r3, [r7, #24]
   10766:	b11b      	cbz	r3, 10770 <cbprintf_package_convert+0xa4>
			cb(in_packaged, in_len, ctx);
   10768:	693a      	ldr	r2, [r7, #16]
   1076a:	68f9      	ldr	r1, [r7, #12]
   1076c:	4658      	mov	r0, fp
   1076e:	4798      	blx	r3
		return in_len;
   10770:	68fc      	ldr	r4, [r7, #12]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   10772:	4620      	mov	r0, r4
   10774:	375c      	adds	r7, #92	; 0x5c
   10776:	46bd      	mov	sp, r7
   10778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
   1077c:	68fc      	ldr	r4, [r7, #12]
		if (ro_cpy) {
   1077e:	bb2b      	cbnz	r3, 107cc <cbprintf_package_convert+0x100>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   10780:	f1b9 0f00 	cmp.w	r9, #0
   10784:	d038      	beq.n	107f8 <cbprintf_package_convert+0x12c>
   10786:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1078a:	f013 0304 	ands.w	r3, r3, #4
   1078e:	613b      	str	r3, [r7, #16]
   10790:	d027      	beq.n	107e2 <cbprintf_package_convert+0x116>
				str_pos += ros_nbr;
   10792:	444d      	add	r5, r9
	size_t strl_cnt = 0;
   10794:	2300      	movs	r3, #0
   10796:	613b      	str	r3, [r7, #16]
   10798:	e023      	b.n	107e2 <cbprintf_package_convert+0x116>
				out_len += len;
   1079a:	4404      	add	r4, r0
				str_pos++;
   1079c:	3501      	adds	r5, #1
			for (int i = 0; i < ros_nbr; i++) {
   1079e:	3601      	adds	r6, #1
   107a0:	454e      	cmp	r6, r9
   107a2:	d21a      	bcs.n	107da <cbprintf_package_convert+0x10e>
				const char *str = *(const char **)&buf32[*str_pos];
   107a4:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
   107a6:	2300      	movs	r3, #0
   107a8:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
   107ac:	4619      	mov	r1, r3
   107ae:	69b8      	ldr	r0, [r7, #24]
   107b0:	f007 fe19 	bl	183e6 <append_string>
				if (strl && strl_cnt < strl_len) {
   107b4:	f1ba 0f00 	cmp.w	sl, #0
   107b8:	d0ef      	beq.n	1079a <cbprintf_package_convert+0xce>
   107ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   107be:	4598      	cmp	r8, r3
   107c0:	d2eb      	bcs.n	1079a <cbprintf_package_convert+0xce>
					strl[strl_cnt++] = (uint16_t)len;
   107c2:	f82a 0018 	strh.w	r0, [sl, r8, lsl #1]
   107c6:	f108 0801 	add.w	r8, r8, #1
   107ca:	e7e6      	b.n	1079a <cbprintf_package_convert+0xce>
			for (int i = 0; i < ros_nbr; i++) {
   107cc:	2600      	movs	r6, #0
	size_t strl_cnt = 0;
   107ce:	46b0      	mov	r8, r6
   107d0:	f8c7 a01c 	str.w	sl, [r7, #28]
   107d4:	f8d7 a084 	ldr.w	sl, [r7, #132]	; 0x84
   107d8:	e7e2      	b.n	107a0 <cbprintf_package_convert+0xd4>
   107da:	f8c7 8010 	str.w	r8, [r7, #16]
   107de:	f8d7 a01c 	ldr.w	sl, [r7, #28]
		bool drop_ro_str_pos = !(flags &
   107e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   107e6:	f003 0305 	and.w	r3, r3, #5
   107ea:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < rws_nbr; i++) {
   107ec:	f04f 0800 	mov.w	r8, #0
   107f0:	46a1      	mov	r9, r4
   107f2:	f8c7 b01c 	str.w	fp, [r7, #28]
   107f6:	e0a1      	b.n	1093c <cbprintf_package_convert+0x270>
	size_t strl_cnt = 0;
   107f8:	f8c7 9010 	str.w	r9, [r7, #16]
   107fc:	e7f1      	b.n	107e2 <cbprintf_package_convert+0x116>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   107fe:	2500      	movs	r5, #0
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   10800:	6a3b      	ldr	r3, [r7, #32]
   10802:	b97b      	cbnz	r3, 10824 <cbprintf_package_convert+0x158>
			if (is_ro) {
   10804:	2d00      	cmp	r5, #0
   10806:	d07b      	beq.n	10900 <cbprintf_package_convert+0x234>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   10808:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1080c:	f013 0f01 	tst.w	r3, #1
   10810:	d17b      	bne.n	1090a <cbprintf_package_convert+0x23e>
					out_len -= drop_ro_str_pos ? 2 : 1;
   10812:	68fb      	ldr	r3, [r7, #12]
   10814:	2b00      	cmp	r3, #0
   10816:	d171      	bne.n	108fc <cbprintf_package_convert+0x230>
   10818:	2302      	movs	r3, #2
   1081a:	eba9 0903 	sub.w	r9, r9, r3
   1081e:	e08a      	b.n	10936 <cbprintf_package_convert+0x26a>
   10820:	2501      	movs	r5, #1
   10822:	e7ed      	b.n	10800 <cbprintf_package_convert+0x134>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   10824:	4659      	mov	r1, fp
   10826:	6978      	ldr	r0, [r7, #20]
   10828:	f007 fe24 	bl	18474 <is_ptr>
   1082c:	2800      	cmp	r0, #0
   1082e:	d0e9      	beq.n	10804 <cbprintf_package_convert+0x138>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   10830:	466c      	mov	r4, sp
   10832:	2300      	movs	r3, #0
   10834:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   10838:	2302      	movs	r3, #2
   1083a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   1083e:	b08a      	sub	sp, #40	; 0x28
   10840:	4669      	mov	r1, sp
   10842:	f111 0210 	adds.w	r2, r1, #16
   10846:	d039      	beq.n	108bc <cbprintf_package_convert+0x1f0>
   10848:	2512      	movs	r5, #18
   1084a:	b11a      	cbz	r2, 10854 <cbprintf_package_convert+0x188>
   1084c:	2d04      	cmp	r5, #4
   1084e:	dd01      	ble.n	10854 <cbprintf_package_convert+0x188>
   10850:	4bb3      	ldr	r3, [pc, #716]	; (10b20 <cbprintf_package_convert+0x454>)
   10852:	614b      	str	r3, [r1, #20]
   10854:	2300      	movs	r3, #0
   10856:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
   1085a:	2302      	movs	r3, #2
   1085c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
   10860:	bb7a      	cbnz	r2, 108c2 <cbprintf_package_convert+0x1f6>
   10862:	2d11      	cmp	r5, #17
   10864:	dd47      	ble.n	108f6 <cbprintf_package_convert+0x22a>
   10866:	2312      	movs	r3, #18
   10868:	b162      	cbz	r2, 10884 <cbprintf_package_convert+0x1b8>
   1086a:	2004      	movs	r0, #4
   1086c:	f887 002c 	strb.w	r0, [r7, #44]	; 0x2c
   10870:	2000      	movs	r0, #0
   10872:	f887 002d 	strb.w	r0, [r7, #45]	; 0x2d
   10876:	f887 002e 	strb.w	r0, [r7, #46]	; 0x2e
   1087a:	2001      	movs	r0, #1
   1087c:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
   10880:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   10882:	6108      	str	r0, [r1, #16]
   10884:	f36f 0a00 	bfc	sl, #0, #1
   10888:	f36f 0a41 	bfc	sl, #1, #1
   1088c:	f36f 0a82 	bfc	sl, #2, #1
   10890:	f36f 0ac5 	bfc	sl, #3, #3
   10894:	2102      	movs	r1, #2
   10896:	f361 1a88 	bfi	sl, r1, #6, #3
   1089a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1089e:	f363 2a52 	bfi	sl, r3, #9, #10
   108a2:	f36f 4ade 	bfc	sl, #19, #12
   108a6:	f36f 7adf 	bfc	sl, #31, #1
   108aa:	2300      	movs	r3, #0
   108ac:	4651      	mov	r1, sl
   108ae:	489d      	ldr	r0, [pc, #628]	; (10b24 <cbprintf_package_convert+0x458>)
   108b0:	f008 fd59 	bl	19366 <z_impl_z_log_msg_static_create>
   108b4:	46a5      	mov	sp, r4
				out_len -= 2;
   108b6:	f1a9 0902 	sub.w	r9, r9, #2
				continue;
   108ba:	e03c      	b.n	10936 <cbprintf_package_convert+0x26a>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   108bc:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   108c0:	e7c3      	b.n	1084a <cbprintf_package_convert+0x17e>
   108c2:	462b      	mov	r3, r5
   108c4:	2d08      	cmp	r5, #8
   108c6:	dd01      	ble.n	108cc <cbprintf_package_convert+0x200>
   108c8:	6978      	ldr	r0, [r7, #20]
   108ca:	6188      	str	r0, [r1, #24]
   108cc:	2b0c      	cmp	r3, #12
   108ce:	dd01      	ble.n	108d4 <cbprintf_package_convert+0x208>
   108d0:	f8c1 b01c 	str.w	fp, [r1, #28]
   108d4:	f101 0320 	add.w	r3, r1, #32
   108d8:	2000      	movs	r0, #0
   108da:	e009      	b.n	108f0 <cbprintf_package_convert+0x224>
   108dc:	f100 0c30 	add.w	ip, r0, #48	; 0x30
   108e0:	f107 0e28 	add.w	lr, r7, #40	; 0x28
   108e4:	44f4      	add	ip, lr
   108e6:	f81c cc30 	ldrb.w	ip, [ip, #-48]
   108ea:	f803 cb01 	strb.w	ip, [r3], #1
   108ee:	3001      	adds	r0, #1
   108f0:	2801      	cmp	r0, #1
   108f2:	d9f3      	bls.n	108dc <cbprintf_package_convert+0x210>
   108f4:	e7b5      	b.n	10862 <cbprintf_package_convert+0x196>
   108f6:	f06f 031b 	mvn.w	r3, #27
   108fa:	e7b5      	b.n	10868 <cbprintf_package_convert+0x19c>
					out_len -= drop_ro_str_pos ? 2 : 1;
   108fc:	2301      	movs	r3, #1
   108fe:	e78c      	b.n	1081a <cbprintf_package_convert+0x14e>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   10900:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   10904:	f013 0f02 	tst.w	r3, #2
   10908:	d015      	beq.n	10936 <cbprintf_package_convert+0x26a>
				len = append_string(cb, NULL, str, 0);
   1090a:	2300      	movs	r3, #0
   1090c:	4622      	mov	r2, r4
   1090e:	4619      	mov	r1, r3
   10910:	69b8      	ldr	r0, [r7, #24]
   10912:	f007 fd68 	bl	183e6 <append_string>
				if (strl && strl_cnt < strl_len) {
   10916:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1091a:	b153      	cbz	r3, 10932 <cbprintf_package_convert+0x266>
   1091c:	693b      	ldr	r3, [r7, #16]
   1091e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   10922:	4293      	cmp	r3, r2
   10924:	d205      	bcs.n	10932 <cbprintf_package_convert+0x266>
					strl[strl_cnt++] = (uint16_t)len;
   10926:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   1092a:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
   1092e:	3301      	adds	r3, #1
   10930:	613b      	str	r3, [r7, #16]
				out_len += (len - 1);
   10932:	3801      	subs	r0, #1
   10934:	4481      	add	r9, r0
		for (int i = 0; i < rws_nbr; i++) {
   10936:	f108 0801 	add.w	r8, r8, #1
			uint8_t arg_pos = *str_pos++;
   1093a:	4635      	mov	r5, r6
		for (int i = 0; i < rws_nbr; i++) {
   1093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1093e:	4598      	cmp	r8, r3
   10940:	d210      	bcs.n	10964 <cbprintf_package_convert+0x298>
			uint8_t arg_idx = *str_pos++;
   10942:	462e      	mov	r6, r5
   10944:	f816 bb02 	ldrb.w	fp, [r6], #2
			uint8_t arg_pos = *str_pos++;
   10948:	786b      	ldrb	r3, [r5, #1]
			const char *str = *(const char **)&buf32[arg_pos];
   1094a:	69fa      	ldr	r2, [r7, #28]
   1094c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   10950:	4b75      	ldr	r3, [pc, #468]	; (10b28 <cbprintf_package_convert+0x45c>)
   10952:	429c      	cmp	r4, r3
   10954:	f4ff af53 	bcc.w	107fe <cbprintf_package_convert+0x132>
   10958:	4b74      	ldr	r3, [pc, #464]	; (10b2c <cbprintf_package_convert+0x460>)
   1095a:	429c      	cmp	r4, r3
   1095c:	f4ff af60 	bcc.w	10820 <cbprintf_package_convert+0x154>
   10960:	2500      	movs	r5, #0
   10962:	e74d      	b.n	10800 <cbprintf_package_convert+0x134>
   10964:	464c      	mov	r4, r9
   10966:	e704      	b.n	10772 <cbprintf_package_convert+0xa6>
		dst = cpy_str_pos;
   10968:	f107 0044 	add.w	r0, r7, #68	; 0x44
		keep_cnt = 0;
   1096c:	2300      	movs	r3, #0
   1096e:	61fb      	str	r3, [r7, #28]
	if (dst) {
   10970:	b118      	cbz	r0, 1097a <cbprintf_package_convert+0x2ae>
		memcpy(dst, str_pos, ros_nbr);
   10972:	464a      	mov	r2, r9
   10974:	4629      	mov	r1, r5
   10976:	f008 fed9 	bl	1972c <memcpy>
	str_pos += ros_nbr;
   1097a:	444d      	add	r5, r9
	for (int i = 0; i < rws_nbr; i++) {
   1097c:	f04f 0800 	mov.w	r8, #0
   10980:	f8c7 9004 	str.w	r9, [r7, #4]
   10984:	e01e      	b.n	109c4 <cbprintf_package_convert+0x2f8>
		dst = NULL;
   10986:	2000      	movs	r0, #0
		keep_cnt = 0;
   10988:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
   1098a:	4606      	mov	r6, r0
   1098c:	e7f0      	b.n	10970 <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
   1098e:	61fe      	str	r6, [r7, #28]
		dst = keep_str_pos;
   10990:	f107 0034 	add.w	r0, r7, #52	; 0x34
		scpy_cnt = 0;
   10994:	2600      	movs	r6, #0
   10996:	e7eb      	b.n	10970 <cbprintf_package_convert+0x2a4>
   10998:	2500      	movs	r5, #0
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   1099a:	6a3b      	ldr	r3, [r7, #32]
   1099c:	bb33      	cbnz	r3, 109ec <cbprintf_package_convert+0x320>
		if (is_ro) {
   1099e:	2d00      	cmp	r5, #0
   109a0:	d03b      	beq.n	10a1a <cbprintf_package_convert+0x34e>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   109a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   109a6:	f013 0f01 	tst.w	r3, #1
   109aa:	d026      	beq.n	109fa <cbprintf_package_convert+0x32e>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   109ac:	1c73      	adds	r3, r6, #1
   109ae:	f106 0230 	add.w	r2, r6, #48	; 0x30
   109b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
   109b6:	1856      	adds	r6, r2, r1
   109b8:	f806 9c14 	strb.w	r9, [r6, #-20]
   109bc:	b2de      	uxtb	r6, r3
	for (int i = 0; i < rws_nbr; i++) {
   109be:	f108 0801 	add.w	r8, r8, #1
		uint8_t arg_pos = *str_pos++;
   109c2:	4625      	mov	r5, r4
	for (int i = 0; i < rws_nbr; i++) {
   109c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   109c6:	4598      	cmp	r8, r3
   109c8:	d24a      	bcs.n	10a60 <cbprintf_package_convert+0x394>
		uint8_t arg_idx = *str_pos++;
   109ca:	462c      	mov	r4, r5
   109cc:	f814 ab02 	ldrb.w	sl, [r4], #2
		uint8_t arg_pos = *str_pos++;
   109d0:	f895 9001 	ldrb.w	r9, [r5, #1]
		const char *str = *(const char **)&buf32[arg_pos];
   109d4:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   109d8:	4a53      	ldr	r2, [pc, #332]	; (10b28 <cbprintf_package_convert+0x45c>)
   109da:	4293      	cmp	r3, r2
   109dc:	d3dc      	bcc.n	10998 <cbprintf_package_convert+0x2cc>
   109de:	4a53      	ldr	r2, [pc, #332]	; (10b2c <cbprintf_package_convert+0x460>)
   109e0:	4293      	cmp	r3, r2
   109e2:	d301      	bcc.n	109e8 <cbprintf_package_convert+0x31c>
   109e4:	2500      	movs	r5, #0
   109e6:	e7d8      	b.n	1099a <cbprintf_package_convert+0x2ce>
   109e8:	2501      	movs	r5, #1
   109ea:	e7d6      	b.n	1099a <cbprintf_package_convert+0x2ce>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   109ec:	4651      	mov	r1, sl
   109ee:	6978      	ldr	r0, [r7, #20]
   109f0:	f007 fd40 	bl	18474 <is_ptr>
   109f4:	2800      	cmp	r0, #0
   109f6:	d0d2      	beq.n	1099e <cbprintf_package_convert+0x2d2>
   109f8:	e7e1      	b.n	109be <cbprintf_package_convert+0x2f2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   109fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   109fe:	f013 0f04 	tst.w	r3, #4
   10a02:	d0dc      	beq.n	109be <cbprintf_package_convert+0x2f2>
				keep_str_pos[keep_cnt++] = arg_pos;
   10a04:	69fa      	ldr	r2, [r7, #28]
   10a06:	1c53      	adds	r3, r2, #1
   10a08:	3230      	adds	r2, #48	; 0x30
   10a0a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   10a0e:	440a      	add	r2, r1
   10a10:	f802 9c24 	strb.w	r9, [r2, #-36]
   10a14:	b2db      	uxtb	r3, r3
   10a16:	61fb      	str	r3, [r7, #28]
   10a18:	e7d1      	b.n	109be <cbprintf_package_convert+0x2f2>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   10a1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   10a1e:	f013 0f02 	tst.w	r3, #2
   10a22:	d009      	beq.n	10a38 <cbprintf_package_convert+0x36c>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   10a24:	1c73      	adds	r3, r6, #1
   10a26:	f106 0230 	add.w	r2, r6, #48	; 0x30
   10a2a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   10a2e:	1856      	adds	r6, r2, r1
   10a30:	f806 9c14 	strb.w	r9, [r6, #-20]
   10a34:	b2de      	uxtb	r6, r3
   10a36:	e7c2      	b.n	109be <cbprintf_package_convert+0x2f2>
				keep_str_pos[keep_cnt++] = arg_idx;
   10a38:	69f8      	ldr	r0, [r7, #28]
   10a3a:	1c43      	adds	r3, r0, #1
   10a3c:	f100 0130 	add.w	r1, r0, #48	; 0x30
   10a40:	f107 0228 	add.w	r2, r7, #40	; 0x28
   10a44:	188a      	adds	r2, r1, r2
   10a46:	f802 ac24 	strb.w	sl, [r2, #-36]
				keep_str_pos[keep_cnt++] = arg_pos;
   10a4a:	4602      	mov	r2, r0
   10a4c:	3202      	adds	r2, #2
   10a4e:	b2d2      	uxtb	r2, r2
   10a50:	61fa      	str	r2, [r7, #28]
   10a52:	f107 0258 	add.w	r2, r7, #88	; 0x58
   10a56:	fa52 f383 	uxtab	r3, r2, r3
   10a5a:	f803 9c24 	strb.w	r9, [r3, #-36]
   10a5e:	e7ae      	b.n	109be <cbprintf_package_convert+0x2f2>
	out_desc.len = in_desc->len;
   10a60:	f8d7 9004 	ldr.w	r9, [r7, #4]
   10a64:	f89b 3000 	ldrb.w	r3, [fp]
   10a68:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   10a6c:	f89b 3001 	ldrb.w	r3, [fp, #1]
   10a70:	4433      	add	r3, r6
   10a72:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   10a76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   10a7a:	f013 0f02 	tst.w	r3, #2
   10a7e:	d10e      	bne.n	10a9e <cbprintf_package_convert+0x3d2>
   10a80:	69fb      	ldr	r3, [r7, #28]
   10a82:	f3c3 0347 	ubfx	r3, r3, #1, #8
   10a86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   10a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   10a8e:	f013 0f01 	tst.w	r3, #1
   10a92:	d106      	bne.n	10aa2 <cbprintf_package_convert+0x3d6>
   10a94:	f013 0f04 	tst.w	r3, #4
   10a98:	d13f      	bne.n	10b1a <cbprintf_package_convert+0x44e>
   10a9a:	2300      	movs	r3, #0
   10a9c:	e002      	b.n	10aa4 <cbprintf_package_convert+0x3d8>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   10a9e:	2300      	movs	r3, #0
   10aa0:	e7f1      	b.n	10a86 <cbprintf_package_convert+0x3ba>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   10aa2:	2300      	movs	r3, #0
   10aa4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   10aa8:	f8db 0000 	ldr.w	r0, [fp]
   10aac:	6338      	str	r0, [r7, #48]	; 0x30
	*in_desc = out_desc;
   10aae:	6d78      	ldr	r0, [r7, #84]	; 0x54
   10ab0:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(in_packaged, args_size, ctx);
   10ab4:	f8d7 8010 	ldr.w	r8, [r7, #16]
   10ab8:	4642      	mov	r2, r8
   10aba:	68b9      	ldr	r1, [r7, #8]
   10abc:	4658      	mov	r0, fp
   10abe:	f8d7 a018 	ldr.w	sl, [r7, #24]
   10ac2:	47d0      	blx	sl
	if (rv < 0) {
   10ac4:	1e04      	subs	r4, r0, #0
   10ac6:	f6ff ae54 	blt.w	10772 <cbprintf_package_convert+0xa6>
	*in_desc = in_desc_backup;
   10aca:	6b38      	ldr	r0, [r7, #48]	; 0x30
   10acc:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   10ad0:	f8c7 8010 	str.w	r8, [r7, #16]
   10ad4:	4642      	mov	r2, r8
   10ad6:	69f9      	ldr	r1, [r7, #28]
   10ad8:	f107 0034 	add.w	r0, r7, #52	; 0x34
   10adc:	47d0      	blx	sl
	if (rv < 0) {
   10ade:	2800      	cmp	r0, #0
   10ae0:	db57      	blt.n	10b92 <cbprintf_package_convert+0x4c6>
	out_len += rv;
   10ae2:	eb04 0800 	add.w	r8, r4, r0
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   10ae6:	68b9      	ldr	r1, [r7, #8]
   10ae8:	4449      	add	r1, r9
   10aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10aec:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	rv = cb(str_pos, strs_len, ctx);
   10af0:	f8d7 9010 	ldr.w	r9, [r7, #16]
   10af4:	464a      	mov	r2, r9
   10af6:	68fb      	ldr	r3, [r7, #12]
   10af8:	1a59      	subs	r1, r3, r1
   10afa:	4628      	mov	r0, r5
   10afc:	47d0      	blx	sl
	if (rv < 0) {
   10afe:	1e04      	subs	r4, r0, #0
   10b00:	f6ff ae37 	blt.w	10772 <cbprintf_package_convert+0xa6>
	out_len += rv;
   10b04:	eb08 0504 	add.w	r5, r8, r4
	for (int i = 0; i < scpy_cnt; i++) {
   10b08:	f04f 0800 	mov.w	r8, #0
   10b0c:	627e      	str	r6, [r7, #36]	; 0x24
   10b0e:	f8c7 b020 	str.w	fp, [r7, #32]
   10b12:	4656      	mov	r6, sl
   10b14:	f8d7 b084 	ldr.w	fp, [r7, #132]	; 0x84
   10b18:	e01f      	b.n	10b5a <cbprintf_package_convert+0x48e>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   10b1a:	69fb      	ldr	r3, [r7, #28]
   10b1c:	e7c2      	b.n	10aa4 <cbprintf_package_convert+0x3d8>
   10b1e:	bf00      	nop
   10b20:	0001b0e4 	.word	0x0001b0e4
   10b24:	0001af70 	.word	0x0001af70
   10b28:	0001abe0 	.word	0x0001abe0
   10b2c:	0001beac 	.word	0x0001beac
		uint16_t str_len = strl ? strl[i] : 0;
   10b30:	f04f 0a00 	mov.w	sl, #0
		rv = cb(&loc, 1, ctx);
   10b34:	464a      	mov	r2, r9
   10b36:	2101      	movs	r1, #1
   10b38:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   10b3c:	47b0      	blx	r6
		if (rv < 0) {
   10b3e:	2800      	cmp	r0, #0
   10b40:	db29      	blt.n	10b96 <cbprintf_package_convert+0x4ca>
		out_len += rv;
   10b42:	4405      	add	r5, r0
		rv = append_string(cb, ctx, str, str_len);
   10b44:	4653      	mov	r3, sl
   10b46:	4622      	mov	r2, r4
   10b48:	4649      	mov	r1, r9
   10b4a:	4630      	mov	r0, r6
   10b4c:	f007 fc4b 	bl	183e6 <append_string>
		if (rv < 0) {
   10b50:	2800      	cmp	r0, #0
   10b52:	db22      	blt.n	10b9a <cbprintf_package_convert+0x4ce>
		out_len += rv;
   10b54:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
   10b56:	f108 0801 	add.w	r8, r8, #1
   10b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10b5c:	4598      	cmp	r8, r3
   10b5e:	da11      	bge.n	10b84 <cbprintf_package_convert+0x4b8>
		uint8_t loc = cpy_str_pos[i];
   10b60:	f108 0330 	add.w	r3, r8, #48	; 0x30
   10b64:	f107 0228 	add.w	r2, r7, #40	; 0x28
   10b68:	4413      	add	r3, r2
   10b6a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   10b6e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		const char *str = *(const char **)&buf32[loc];
   10b72:	6a3a      	ldr	r2, [r7, #32]
   10b74:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   10b78:	f1bb 0f00 	cmp.w	fp, #0
   10b7c:	d0d8      	beq.n	10b30 <cbprintf_package_convert+0x464>
   10b7e:	f83b a018 	ldrh.w	sl, [fp, r8, lsl #1]
   10b82:	e7d7      	b.n	10b34 <cbprintf_package_convert+0x468>
	(void)cb(NULL, 0, ctx);
   10b84:	693a      	ldr	r2, [r7, #16]
   10b86:	2100      	movs	r1, #0
   10b88:	4608      	mov	r0, r1
   10b8a:	69bb      	ldr	r3, [r7, #24]
   10b8c:	4798      	blx	r3
	return out_len;
   10b8e:	462c      	mov	r4, r5
   10b90:	e5ef      	b.n	10772 <cbprintf_package_convert+0xa6>
		return rv;
   10b92:	4604      	mov	r4, r0
   10b94:	e5ed      	b.n	10772 <cbprintf_package_convert+0xa6>
   10b96:	4604      	mov	r4, r0
   10b98:	e5eb      	b.n	10772 <cbprintf_package_convert+0xa6>
   10b9a:	4604      	mov	r4, r0
   10b9c:	e5e9      	b.n	10772 <cbprintf_package_convert+0xa6>
   10b9e:	bf00      	nop

00010ba0 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
   10ba0:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
   10ba2:	4b02      	ldr	r3, [pc, #8]	; (10bac <char_out+0xc>)
   10ba4:	681b      	ldr	r3, [r3, #0]
   10ba6:	4798      	blx	r3
}
   10ba8:	bd08      	pop	{r3, pc}
   10baa:	bf00      	nop
   10bac:	20008000 	.word	0x20008000

00010bb0 <__printk_hook_install>:
	_char_out = fn;
   10bb0:	4b01      	ldr	r3, [pc, #4]	; (10bb8 <__printk_hook_install+0x8>)
   10bb2:	6018      	str	r0, [r3, #0]
}
   10bb4:	4770      	bx	lr
   10bb6:	bf00      	nop
   10bb8:	20008000 	.word	0x20008000

00010bbc <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
   10bbc:	b500      	push	{lr}
   10bbe:	b083      	sub	sp, #12
   10bc0:	4602      	mov	r2, r0
   10bc2:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   10bc4:	2100      	movs	r1, #0
   10bc6:	9100      	str	r1, [sp, #0]
   10bc8:	4802      	ldr	r0, [pc, #8]	; (10bd4 <vprintk+0x18>)
   10bca:	f000 f935 	bl	10e38 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   10bce:	b003      	add	sp, #12
   10bd0:	f85d fb04 	ldr.w	pc, [sp], #4
   10bd4:	00010ba1 	.word	0x00010ba1

00010bd8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   10bd8:	b510      	push	{r4, lr}
   10bda:	b086      	sub	sp, #24
   10bdc:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   10bde:	9003      	str	r0, [sp, #12]
   10be0:	9104      	str	r1, [sp, #16]
   10be2:	2100      	movs	r1, #0
   10be4:	9105      	str	r1, [sp, #20]
   10be6:	9100      	str	r1, [sp, #0]
   10be8:	a903      	add	r1, sp, #12
   10bea:	4806      	ldr	r0, [pc, #24]	; (10c04 <vsnprintk+0x2c>)
   10bec:	f000 f924 	bl	10e38 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   10bf0:	9b05      	ldr	r3, [sp, #20]
   10bf2:	9a04      	ldr	r2, [sp, #16]
   10bf4:	4293      	cmp	r3, r2
   10bf6:	da01      	bge.n	10bfc <vsnprintk+0x24>
		str[ctx.count] = '\0';
   10bf8:	2200      	movs	r2, #0
   10bfa:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   10bfc:	9805      	ldr	r0, [sp, #20]
   10bfe:	b006      	add	sp, #24
   10c00:	bd10      	pop	{r4, pc}
   10c02:	bf00      	nop
   10c04:	000184c7 	.word	0x000184c7

00010c08 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   10c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10c0c:	b083      	sub	sp, #12
   10c0e:	4604      	mov	r4, r0
   10c10:	4608      	mov	r0, r1
   10c12:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10c14:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10c16:	f013 0f08 	tst.w	r3, #8
   10c1a:	d105      	bne.n	10c28 <process_event+0x20>
   10c1c:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   10c20:	2300      	movs	r3, #0
   10c22:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   10c24:	9301      	str	r3, [sp, #4]
}
   10c26:	e055      	b.n	10cd4 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
   10c28:	2901      	cmp	r1, #1
   10c2a:	d009      	beq.n	10c40 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   10c2c:	f043 0320 	orr.w	r3, r3, #32
   10c30:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10c32:	f385 8811 	msr	BASEPRI, r5
   10c36:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   10c3a:	b003      	add	sp, #12
   10c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10c40:	f043 0310 	orr.w	r3, r3, #16
   10c44:	8323      	strh	r3, [r4, #24]
   10c46:	e7f4      	b.n	10c32 <process_event+0x2a>
			evt = process_recheck(mgr);
   10c48:	4620      	mov	r0, r4
   10c4a:	f007 fca4 	bl	18596 <process_recheck>
   10c4e:	e043      	b.n	10cd8 <process_event+0xd0>
			res = mgr->last_res;
   10c50:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   10c54:	464a      	mov	r2, r9
   10c56:	4669      	mov	r1, sp
   10c58:	4620      	mov	r0, r4
   10c5a:	f007 fcb5 	bl	185c8 <process_complete>
		onoff_transition_fn transit = NULL;
   10c5e:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10c62:	8b23      	ldrh	r3, [r4, #24]
   10c64:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10c68:	42b7      	cmp	r7, r6
   10c6a:	d069      	beq.n	10d40 <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10c6c:	68a2      	ldr	r2, [r4, #8]
   10c6e:	2a00      	cmp	r2, #0
   10c70:	d066      	beq.n	10d40 <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10c72:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10c74:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   10c78:	8323      	strh	r3, [r4, #24]
   10c7a:	f385 8811 	msr	BASEPRI, r5
   10c7e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   10c82:	2a00      	cmp	r2, #0
   10c84:	d164      	bne.n	10d50 <process_event+0x148>
   10c86:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   10c88:	b12b      	cbz	r3, 10c96 <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
   10c8a:	464b      	mov	r3, r9
   10c8c:	463a      	mov	r2, r7
   10c8e:	4669      	mov	r1, sp
   10c90:	4620      	mov	r0, r4
   10c92:	f007 fd12 	bl	186ba <notify_all>
			if (transit != NULL) {
   10c96:	f1b8 0f00 	cmp.w	r8, #0
   10c9a:	d002      	beq.n	10ca2 <process_event+0x9a>
				transit(mgr, transition_complete);
   10c9c:	4934      	ldr	r1, [pc, #208]	; (10d70 <process_event+0x168>)
   10c9e:	4620      	mov	r0, r4
   10ca0:	47c0      	blx	r8
	__asm__ volatile(
   10ca2:	f04f 0320 	mov.w	r3, #32
   10ca6:	f3ef 8511 	mrs	r5, BASEPRI
   10caa:	f383 8812 	msr	BASEPRI_MAX, r3
   10cae:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10cb2:	8b23      	ldrh	r3, [r4, #24]
   10cb4:	f023 0308 	bic.w	r3, r3, #8
   10cb8:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10cba:	8b23      	ldrh	r3, [r4, #24]
   10cbc:	f013 0f10 	tst.w	r3, #16
   10cc0:	d04c      	beq.n	10d5c <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10cc2:	f023 0310 	bic.w	r3, r3, #16
   10cc6:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   10cc8:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   10cca:	8b26      	ldrh	r6, [r4, #24]
   10ccc:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   10cd0:	2800      	cmp	r0, #0
   10cd2:	d0ae      	beq.n	10c32 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   10cd4:	2802      	cmp	r0, #2
   10cd6:	d0b7      	beq.n	10c48 <process_event+0x40>
		if (evt == EVT_NOP) {
   10cd8:	2800      	cmp	r0, #0
   10cda:	d0aa      	beq.n	10c32 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   10cdc:	3801      	subs	r0, #1
   10cde:	2804      	cmp	r0, #4
   10ce0:	d82a      	bhi.n	10d38 <process_event+0x130>
   10ce2:	a301      	add	r3, pc, #4	; (adr r3, 10ce8 <process_event+0xe0>)
   10ce4:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   10ce8:	00010c51 	.word	0x00010c51
   10cec:	00010d39 	.word	0x00010d39
   10cf0:	00010cfd 	.word	0x00010cfd
   10cf4:	00010d11 	.word	0x00010d11
   10cf8:	00010d25 	.word	0x00010d25
			transit = mgr->transitions->start;
   10cfc:	6923      	ldr	r3, [r4, #16]
   10cfe:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
   10d02:	2106      	movs	r1, #6
   10d04:	4620      	mov	r0, r4
   10d06:	f007 fc1c 	bl	18542 <set_state>
		res = 0;
   10d0a:	f04f 0900 	mov.w	r9, #0
   10d0e:	e7a8      	b.n	10c62 <process_event+0x5a>
			transit = mgr->transitions->stop;
   10d10:	6923      	ldr	r3, [r4, #16]
   10d12:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   10d16:	2104      	movs	r1, #4
   10d18:	4620      	mov	r0, r4
   10d1a:	f007 fc12 	bl	18542 <set_state>
		res = 0;
   10d1e:	f04f 0900 	mov.w	r9, #0
   10d22:	e79e      	b.n	10c62 <process_event+0x5a>
			transit = mgr->transitions->reset;
   10d24:	6923      	ldr	r3, [r4, #16]
   10d26:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   10d2a:	2105      	movs	r1, #5
   10d2c:	4620      	mov	r0, r4
   10d2e:	f007 fc08 	bl	18542 <set_state>
		res = 0;
   10d32:	f04f 0900 	mov.w	r9, #0
   10d36:	e794      	b.n	10c62 <process_event+0x5a>
		if (evt == EVT_NOP) {
   10d38:	f04f 0800 	mov.w	r8, #0
   10d3c:	46c1      	mov	r9, r8
   10d3e:	e790      	b.n	10c62 <process_event+0x5a>
   10d40:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   10d42:	b10a      	cbz	r2, 10d48 <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10d44:	2200      	movs	r2, #0
   10d46:	e795      	b.n	10c74 <process_event+0x6c>
		    || (transit != NULL)) {
   10d48:	f1b8 0f00 	cmp.w	r8, #0
   10d4c:	d192      	bne.n	10c74 <process_event+0x6c>
   10d4e:	e7b4      	b.n	10cba <process_event+0xb2>
				notify_monitors(mgr, state, res);
   10d50:	464a      	mov	r2, r9
   10d52:	4639      	mov	r1, r7
   10d54:	4620      	mov	r0, r4
   10d56:	f007 fbfc 	bl	18552 <notify_monitors>
   10d5a:	e794      	b.n	10c86 <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10d5c:	f013 0f20 	tst.w	r3, #32
   10d60:	d004      	beq.n	10d6c <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10d62:	f023 0320 	bic.w	r3, r3, #32
   10d66:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   10d68:	2002      	movs	r0, #2
   10d6a:	e7ae      	b.n	10cca <process_event+0xc2>
		evt = EVT_NOP;
   10d6c:	2000      	movs	r0, #0
   10d6e:	e7ac      	b.n	10cca <process_event+0xc2>
   10d70:	000186e9 	.word	0x000186e9

00010d74 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
   10d74:	4684      	mov	ip, r0
   10d76:	4608      	mov	r0, r1
	bool loop = true;
   10d78:	2201      	movs	r2, #1
   10d7a:	e026      	b.n	10dca <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
   10d7c:	f89c 3000 	ldrb.w	r3, [ip]
   10d80:	f043 0304 	orr.w	r3, r3, #4
   10d84:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
   10d88:	b1f2      	cbz	r2, 10dc8 <extract_flags+0x54>
			++sp;
   10d8a:	3001      	adds	r0, #1
   10d8c:	e01c      	b.n	10dc8 <extract_flags+0x54>
			conv->flag_plus = true;
   10d8e:	f89c 3000 	ldrb.w	r3, [ip]
   10d92:	f043 0308 	orr.w	r3, r3, #8
   10d96:	f88c 3000 	strb.w	r3, [ip]
			break;
   10d9a:	e7f5      	b.n	10d88 <extract_flags+0x14>
			conv->flag_space = true;
   10d9c:	f89c 3000 	ldrb.w	r3, [ip]
   10da0:	f043 0310 	orr.w	r3, r3, #16
   10da4:	f88c 3000 	strb.w	r3, [ip]
			break;
   10da8:	e7ee      	b.n	10d88 <extract_flags+0x14>
			conv->flag_hash = true;
   10daa:	f89c 3000 	ldrb.w	r3, [ip]
   10dae:	f043 0320 	orr.w	r3, r3, #32
   10db2:	f88c 3000 	strb.w	r3, [ip]
			break;
   10db6:	e7e7      	b.n	10d88 <extract_flags+0x14>
			conv->flag_zero = true;
   10db8:	f89c 3000 	ldrb.w	r3, [ip]
   10dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10dc0:	f88c 3000 	strb.w	r3, [ip]
			break;
   10dc4:	e7e0      	b.n	10d88 <extract_flags+0x14>
		switch (*sp) {
   10dc6:	2200      	movs	r2, #0
		}
	} while (loop);
   10dc8:	b342      	cbz	r2, 10e1c <extract_flags+0xa8>
		switch (*sp) {
   10dca:	7803      	ldrb	r3, [r0, #0]
   10dcc:	3b20      	subs	r3, #32
   10dce:	2b10      	cmp	r3, #16
   10dd0:	d8f9      	bhi.n	10dc6 <extract_flags+0x52>
   10dd2:	a101      	add	r1, pc, #4	; (adr r1, 10dd8 <extract_flags+0x64>)
   10dd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   10dd8:	00010d9d 	.word	0x00010d9d
   10ddc:	00010dc7 	.word	0x00010dc7
   10de0:	00010dc7 	.word	0x00010dc7
   10de4:	00010dab 	.word	0x00010dab
   10de8:	00010dc7 	.word	0x00010dc7
   10dec:	00010dc7 	.word	0x00010dc7
   10df0:	00010dc7 	.word	0x00010dc7
   10df4:	00010dc7 	.word	0x00010dc7
   10df8:	00010dc7 	.word	0x00010dc7
   10dfc:	00010dc7 	.word	0x00010dc7
   10e00:	00010dc7 	.word	0x00010dc7
   10e04:	00010d8f 	.word	0x00010d8f
   10e08:	00010dc7 	.word	0x00010dc7
   10e0c:	00010d7d 	.word	0x00010d7d
   10e10:	00010dc7 	.word	0x00010dc7
   10e14:	00010dc7 	.word	0x00010dc7
   10e18:	00010db9 	.word	0x00010db9

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
   10e1c:	f89c 3000 	ldrb.w	r3, [ip]
   10e20:	f003 0344 	and.w	r3, r3, #68	; 0x44
   10e24:	2b44      	cmp	r3, #68	; 0x44
   10e26:	d000      	beq.n	10e2a <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
   10e28:	4770      	bx	lr
		conv->flag_zero = false;
   10e2a:	f89c 3000 	ldrb.w	r3, [ip]
   10e2e:	f36f 1386 	bfc	r3, #6, #1
   10e32:	f88c 3000 	strb.w	r3, [ip]
   10e36:	e7f7      	b.n	10e28 <extract_flags+0xb4>

00010e38 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   10e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e3c:	b091      	sub	sp, #68	; 0x44
   10e3e:	4606      	mov	r6, r0
   10e40:	460d      	mov	r5, r1
   10e42:	4691      	mov	r9, r2
   10e44:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10e46:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10e48:	f899 0000 	ldrb.w	r0, [r9]
   10e4c:	2800      	cmp	r0, #0
   10e4e:	f000 82b9 	beq.w	113c4 <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
   10e52:	2825      	cmp	r0, #37	; 0x25
   10e54:	d008      	beq.n	10e68 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   10e56:	f109 0901 	add.w	r9, r9, #1
   10e5a:	4629      	mov	r1, r5
   10e5c:	47b0      	blx	r6
   10e5e:	2800      	cmp	r0, #0
   10e60:	f2c0 82b1 	blt.w	113c6 <z_cbvprintf_impl+0x58e>
   10e64:	3401      	adds	r4, #1
			continue;
   10e66:	e7ef      	b.n	10e48 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   10e68:	2300      	movs	r3, #0
   10e6a:	9304      	str	r3, [sp, #16]
   10e6c:	9305      	str	r3, [sp, #20]
   10e6e:	9306      	str	r3, [sp, #24]
   10e70:	9307      	str	r3, [sp, #28]
   10e72:	9308      	str	r3, [sp, #32]
   10e74:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
   10e76:	4649      	mov	r1, r9
   10e78:	a806      	add	r0, sp, #24
   10e7a:	f007 fe51 	bl	18b20 <extract_conversion>
   10e7e:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   10e80:	f89d 3019 	ldrb.w	r3, [sp, #25]
   10e84:	f013 0f01 	tst.w	r3, #1
   10e88:	f000 8097 	beq.w	10fba <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
   10e8c:	9b03      	ldr	r3, [sp, #12]
   10e8e:	1d1a      	adds	r2, r3, #4
   10e90:	9203      	str	r2, [sp, #12]
   10e92:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   10e94:	2f00      	cmp	r7, #0
   10e96:	f2c0 8088 	blt.w	10faa <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   10e9a:	f89d 3019 	ldrb.w	r3, [sp, #25]
   10e9e:	f013 0f04 	tst.w	r3, #4
   10ea2:	f000 809c 	beq.w	10fde <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
   10ea6:	9b03      	ldr	r3, [sp, #12]
   10ea8:	1d1a      	adds	r2, r3, #4
   10eaa:	9203      	str	r2, [sp, #12]
   10eac:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
   10eb0:	f1ba 0f00 	cmp.w	sl, #0
   10eb4:	f2c0 808a 	blt.w	10fcc <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   10eb8:	2300      	movs	r3, #0
   10eba:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
   10ebc:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   10ebe:	f89d 301a 	ldrb.w	r3, [sp, #26]
   10ec2:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   10ec6:	f89d 1019 	ldrb.w	r1, [sp, #25]
   10eca:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   10ece:	2b01      	cmp	r3, #1
   10ed0:	f000 808e 	beq.w	10ff0 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   10ed4:	2b02      	cmp	r3, #2
   10ed6:	f000 80d3 	beq.w	11080 <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   10eda:	2b04      	cmp	r3, #4
   10edc:	f000 8124 	beq.w	11128 <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   10ee0:	2b03      	cmp	r3, #3
   10ee2:	f000 813b 	beq.w	1115c <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   10ee6:	f89d 8018 	ldrb.w	r8, [sp, #24]
   10eea:	f018 0b03 	ands.w	fp, r8, #3
   10eee:	f040 813b 	bne.w	11168 <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   10ef2:	f89d 301b 	ldrb.w	r3, [sp, #27]
   10ef6:	3b25      	subs	r3, #37	; 0x25
   10ef8:	2b53      	cmp	r3, #83	; 0x53
   10efa:	f200 81ca 	bhi.w	11292 <z_cbvprintf_impl+0x45a>
   10efe:	e8df f013 	tbh	[pc, r3, lsl #1]
   10f02:	0140      	.short	0x0140
   10f04:	01c801c8 	.word	0x01c801c8
   10f08:	01c801c8 	.word	0x01c801c8
   10f0c:	01c801c8 	.word	0x01c801c8
   10f10:	01c801c8 	.word	0x01c801c8
   10f14:	01c801c8 	.word	0x01c801c8
   10f18:	01c801c8 	.word	0x01c801c8
   10f1c:	01c801c8 	.word	0x01c801c8
   10f20:	01c801c8 	.word	0x01c801c8
   10f24:	01c801c8 	.word	0x01c801c8
   10f28:	01c801c8 	.word	0x01c801c8
   10f2c:	01c801c8 	.word	0x01c801c8
   10f30:	01c801c8 	.word	0x01c801c8
   10f34:	01c801c8 	.word	0x01c801c8
   10f38:	01c801c8 	.word	0x01c801c8
   10f3c:	01c801c8 	.word	0x01c801c8
   10f40:	01c801c8 	.word	0x01c801c8
   10f44:	01c801c8 	.word	0x01c801c8
   10f48:	01c801c8 	.word	0x01c801c8
   10f4c:	01c801c8 	.word	0x01c801c8
   10f50:	01c801c8 	.word	0x01c801c8
   10f54:	01c801c8 	.word	0x01c801c8
   10f58:	01c801c8 	.word	0x01c801c8
   10f5c:	01c801c8 	.word	0x01c801c8
   10f60:	01c801c8 	.word	0x01c801c8
   10f64:	01c801c8 	.word	0x01c801c8
   10f68:	01c80181 	.word	0x01c80181
   10f6c:	01c801c8 	.word	0x01c801c8
   10f70:	01c801c8 	.word	0x01c801c8
   10f74:	01c801c8 	.word	0x01c801c8
   10f78:	01c801c8 	.word	0x01c801c8
   10f7c:	015e01c8 	.word	0x015e01c8
   10f80:	01c80167 	.word	0x01c80167
   10f84:	01c801c8 	.word	0x01c801c8
   10f88:	016701c8 	.word	0x016701c8
   10f8c:	01c801c8 	.word	0x01c801c8
   10f90:	01c801c8 	.word	0x01c801c8
   10f94:	018101bd 	.word	0x018101bd
   10f98:	01c801a1 	.word	0x01c801a1
   10f9c:	014d01c8 	.word	0x014d01c8
   10fa0:	018101c8 	.word	0x018101c8
   10fa4:	01c801c8 	.word	0x01c801c8
   10fa8:	0181      	.short	0x0181
				conv->flag_dash = true;
   10faa:	f89d 3018 	ldrb.w	r3, [sp, #24]
   10fae:	f043 0304 	orr.w	r3, r3, #4
   10fb2:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
   10fb6:	427f      	negs	r7, r7
   10fb8:	e76f      	b.n	10e9a <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
   10fba:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   10fbe:	2b00      	cmp	r3, #0
   10fc0:	db02      	blt.n	10fc8 <z_cbvprintf_impl+0x190>
		int width = -1;
   10fc2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   10fc6:	e768      	b.n	10e9a <z_cbvprintf_impl+0x62>
			width = conv->width_value;
   10fc8:	9f07      	ldr	r7, [sp, #28]
   10fca:	e766      	b.n	10e9a <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
   10fcc:	f89d 3019 	ldrb.w	r3, [sp, #25]
   10fd0:	f36f 0341 	bfc	r3, #1, #1
   10fd4:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
   10fd8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   10fdc:	e76c      	b.n	10eb8 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
   10fde:	f013 0f02 	tst.w	r3, #2
   10fe2:	d002      	beq.n	10fea <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
   10fe4:	f8dd a020 	ldr.w	sl, [sp, #32]
   10fe8:	e766      	b.n	10eb8 <z_cbvprintf_impl+0x80>
		int precision = -1;
   10fea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   10fee:	e763      	b.n	10eb8 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
   10ff0:	1ecb      	subs	r3, r1, #3
   10ff2:	2b04      	cmp	r3, #4
   10ff4:	d804      	bhi.n	11000 <z_cbvprintf_impl+0x1c8>
   10ff6:	e8df f003 	tbb	[pc, r3]
   10ffa:	1d0b      	.short	0x1d0b
   10ffc:	3529      	.short	0x3529
   10ffe:	35          	.byte	0x35
   10fff:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   11000:	9b03      	ldr	r3, [sp, #12]
   11002:	1d1a      	adds	r2, r3, #4
   11004:	9203      	str	r2, [sp, #12]
   11006:	681b      	ldr	r3, [r3, #0]
   11008:	17da      	asrs	r2, r3, #31
   1100a:	9304      	str	r3, [sp, #16]
   1100c:	9205      	str	r2, [sp, #20]
				break;
   1100e:	e006      	b.n	1101e <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
   11010:	9b03      	ldr	r3, [sp, #12]
   11012:	1d1a      	adds	r2, r3, #4
   11014:	9203      	str	r2, [sp, #12]
   11016:	681b      	ldr	r3, [r3, #0]
   11018:	17da      	asrs	r2, r3, #31
   1101a:	9304      	str	r3, [sp, #16]
   1101c:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
   1101e:	2901      	cmp	r1, #1
   11020:	d028      	beq.n	11074 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
   11022:	2902      	cmp	r1, #2
   11024:	f47f af5f 	bne.w	10ee6 <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
   11028:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   1102c:	17da      	asrs	r2, r3, #31
   1102e:	9304      	str	r3, [sp, #16]
   11030:	9205      	str	r2, [sp, #20]
   11032:	e758      	b.n	10ee6 <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
   11034:	9b03      	ldr	r3, [sp, #12]
   11036:	3307      	adds	r3, #7
   11038:	f023 0307 	bic.w	r3, r3, #7
   1103c:	f103 0208 	add.w	r2, r3, #8
   11040:	9203      	str	r2, [sp, #12]
   11042:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   11046:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   1104a:	e7e8      	b.n	1101e <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
   1104c:	9b03      	ldr	r3, [sp, #12]
   1104e:	3307      	adds	r3, #7
   11050:	f023 0307 	bic.w	r3, r3, #7
   11054:	f103 0208 	add.w	r2, r3, #8
   11058:	9203      	str	r2, [sp, #12]
   1105a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   1105e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   11062:	e7dc      	b.n	1101e <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11064:	9b03      	ldr	r3, [sp, #12]
   11066:	1d1a      	adds	r2, r3, #4
   11068:	9203      	str	r2, [sp, #12]
   1106a:	681b      	ldr	r3, [r3, #0]
   1106c:	17da      	asrs	r2, r3, #31
				value->sint =
   1106e:	9304      	str	r3, [sp, #16]
   11070:	9205      	str	r2, [sp, #20]
				break;
   11072:	e7d4      	b.n	1101e <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
   11074:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   11078:	17da      	asrs	r2, r3, #31
   1107a:	9304      	str	r3, [sp, #16]
   1107c:	9205      	str	r2, [sp, #20]
   1107e:	e732      	b.n	10ee6 <z_cbvprintf_impl+0xae>
			switch (length_mod) {
   11080:	1ecb      	subs	r3, r1, #3
   11082:	2b04      	cmp	r3, #4
   11084:	d804      	bhi.n	11090 <z_cbvprintf_impl+0x258>
   11086:	e8df f003 	tbb	[pc, r3]
   1108a:	1f0b      	.short	0x1f0b
   1108c:	4135      	.short	0x4135
   1108e:	41          	.byte	0x41
   1108f:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   11090:	9b03      	ldr	r3, [sp, #12]
   11092:	1d1a      	adds	r2, r3, #4
   11094:	9203      	str	r2, [sp, #12]
   11096:	681b      	ldr	r3, [r3, #0]
   11098:	9304      	str	r3, [sp, #16]
   1109a:	2300      	movs	r3, #0
   1109c:	9305      	str	r3, [sp, #20]
				break;
   1109e:	e01e      	b.n	110de <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
   110a0:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
   110a4:	2b63      	cmp	r3, #99	; 0x63
   110a6:	d007      	beq.n	110b8 <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
   110a8:	9b03      	ldr	r3, [sp, #12]
   110aa:	1d1a      	adds	r2, r3, #4
   110ac:	9203      	str	r2, [sp, #12]
   110ae:	681b      	ldr	r3, [r3, #0]
   110b0:	9304      	str	r3, [sp, #16]
   110b2:	2300      	movs	r3, #0
   110b4:	9305      	str	r3, [sp, #20]
   110b6:	e012      	b.n	110de <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
   110b8:	9b03      	ldr	r3, [sp, #12]
   110ba:	1d1a      	adds	r2, r3, #4
   110bc:	9203      	str	r2, [sp, #12]
   110be:	681b      	ldr	r3, [r3, #0]
   110c0:	9304      	str	r3, [sp, #16]
   110c2:	2300      	movs	r3, #0
   110c4:	9305      	str	r3, [sp, #20]
   110c6:	e00a      	b.n	110de <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
   110c8:	9b03      	ldr	r3, [sp, #12]
   110ca:	3307      	adds	r3, #7
   110cc:	f023 0307 	bic.w	r3, r3, #7
   110d0:	f103 0208 	add.w	r2, r3, #8
   110d4:	9203      	str	r2, [sp, #12]
   110d6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   110da:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
   110de:	2901      	cmp	r1, #1
   110e0:	d01c      	beq.n	1111c <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
   110e2:	2902      	cmp	r1, #2
   110e4:	f47f aeff 	bne.w	10ee6 <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
   110e8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   110ec:	9304      	str	r3, [sp, #16]
   110ee:	2300      	movs	r3, #0
   110f0:	9305      	str	r3, [sp, #20]
   110f2:	e6f8      	b.n	10ee6 <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
   110f4:	9b03      	ldr	r3, [sp, #12]
   110f6:	3307      	adds	r3, #7
   110f8:	f023 0307 	bic.w	r3, r3, #7
   110fc:	f103 0208 	add.w	r2, r3, #8
   11100:	9203      	str	r2, [sp, #12]
   11102:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   11106:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   1110a:	e7e8      	b.n	110de <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
   1110c:	9b03      	ldr	r3, [sp, #12]
   1110e:	1d1a      	adds	r2, r3, #4
   11110:	9203      	str	r2, [sp, #12]
   11112:	681b      	ldr	r3, [r3, #0]
				value->uint =
   11114:	9304      	str	r3, [sp, #16]
   11116:	2300      	movs	r3, #0
   11118:	9305      	str	r3, [sp, #20]
				break;
   1111a:	e7e0      	b.n	110de <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
   1111c:	f89d 3010 	ldrb.w	r3, [sp, #16]
   11120:	9304      	str	r3, [sp, #16]
   11122:	2300      	movs	r3, #0
   11124:	9305      	str	r3, [sp, #20]
   11126:	e6de      	b.n	10ee6 <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
   11128:	2908      	cmp	r1, #8
   1112a:	d00b      	beq.n	11144 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
   1112c:	9b03      	ldr	r3, [sp, #12]
   1112e:	3307      	adds	r3, #7
   11130:	f023 0307 	bic.w	r3, r3, #7
   11134:	f103 0208 	add.w	r2, r3, #8
   11138:	9203      	str	r2, [sp, #12]
   1113a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1113e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   11142:	e6d0      	b.n	10ee6 <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
   11144:	9b03      	ldr	r3, [sp, #12]
   11146:	3307      	adds	r3, #7
   11148:	f023 0307 	bic.w	r3, r3, #7
   1114c:	f103 0208 	add.w	r2, r3, #8
   11150:	9203      	str	r2, [sp, #12]
   11152:	e9d3 2300 	ldrd	r2, r3, [r3]
   11156:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1115a:	e6c4      	b.n	10ee6 <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
   1115c:	9b03      	ldr	r3, [sp, #12]
   1115e:	1d1a      	adds	r2, r3, #4
   11160:	9203      	str	r2, [sp, #12]
   11162:	681b      	ldr	r3, [r3, #0]
   11164:	9304      	str	r3, [sp, #16]
   11166:	e6be      	b.n	10ee6 <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
   11168:	9f02      	ldr	r7, [sp, #8]
   1116a:	463b      	mov	r3, r7
   1116c:	464a      	mov	r2, r9
   1116e:	4629      	mov	r1, r5
   11170:	4630      	mov	r0, r6
   11172:	f007 fd7b 	bl	18c6c <outs>
   11176:	2800      	cmp	r0, #0
   11178:	f2c0 8125 	blt.w	113c6 <z_cbvprintf_impl+0x58e>
   1117c:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   1117e:	46b9      	mov	r9, r7
			continue;
   11180:	e662      	b.n	10e48 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
   11182:	4629      	mov	r1, r5
   11184:	2025      	movs	r0, #37	; 0x25
   11186:	47b0      	blx	r6
   11188:	2800      	cmp	r0, #0
   1118a:	f2c0 811c 	blt.w	113c6 <z_cbvprintf_impl+0x58e>
   1118e:	3401      	adds	r4, #1
		char sign = 0;
   11190:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   11192:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   11196:	f04f 0900 	mov.w	r9, #0
			break;
   1119a:	e07f      	b.n	1129c <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
   1119c:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
   111a0:	f1ba 0f00 	cmp.w	sl, #0
   111a4:	db07      	blt.n	111b6 <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
   111a6:	4651      	mov	r1, sl
   111a8:	4648      	mov	r0, r9
   111aa:	f008 fab5 	bl	19718 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   111ae:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
   111b2:	46d8      	mov	r8, fp
			precision = -1;

			break;
   111b4:	e072      	b.n	1129c <z_cbvprintf_impl+0x464>
				len = strlen(bps);
   111b6:	4648      	mov	r0, r9
   111b8:	f008 faa5 	bl	19706 <strlen>
   111bc:	e7f7      	b.n	111ae <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   111be:	9b04      	ldr	r3, [sp, #16]
   111c0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
   111c4:	46d8      	mov	r8, fp
			bpe = buf + 1;
   111c6:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
   111ca:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
   111ce:	e065      	b.n	1129c <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   111d0:	f018 0f08 	tst.w	r8, #8
   111d4:	d105      	bne.n	111e2 <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
   111d6:	f018 0810 	ands.w	r8, r8, #16
   111da:	d004      	beq.n	111e6 <z_cbvprintf_impl+0x3ae>
				sign = ' ';
   111dc:	f04f 0820 	mov.w	r8, #32
   111e0:	e001      	b.n	111e6 <z_cbvprintf_impl+0x3ae>
				sign = '+';
   111e2:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   111e6:	9a04      	ldr	r2, [sp, #16]
   111e8:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
   111ea:	2b00      	cmp	r3, #0
   111ec:	db02      	blt.n	111f4 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   111ee:	9204      	str	r2, [sp, #16]
   111f0:	9305      	str	r3, [sp, #20]
   111f2:	e008      	b.n	11206 <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
   111f4:	4252      	negs	r2, r2
   111f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   111fa:	9204      	str	r2, [sp, #16]
   111fc:	9305      	str	r3, [sp, #20]
				sign = '-';
   111fe:	f04f 082d 	mov.w	r8, #45	; 0x2d
   11202:	e000      	b.n	11206 <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
   11204:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   11206:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   1120a:	9300      	str	r3, [sp, #0]
   1120c:	ab0a      	add	r3, sp, #40	; 0x28
   1120e:	aa06      	add	r2, sp, #24
   11210:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11214:	f007 fcbb 	bl	18b8e <encode_uint>
   11218:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   1121a:	f1ba 0f00 	cmp.w	sl, #0
   1121e:	db6c      	blt.n	112fa <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
   11220:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   11224:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   11228:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1122c:	f36f 1286 	bfc	r2, #6, #1
   11230:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   11234:	459a      	cmp	sl, r3
   11236:	d963      	bls.n	11300 <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
   11238:	ebaa 0303 	sub.w	r3, sl, r3
   1123c:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
   1123e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   11242:	e02b      	b.n	1129c <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   11244:	9804      	ldr	r0, [sp, #16]
   11246:	b928      	cbnz	r0, 11254 <z_cbvprintf_impl+0x41c>
		char sign = 0;
   11248:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   1124a:	f8df a180 	ldr.w	sl, [pc, #384]	; 113cc <z_cbvprintf_impl+0x594>
			bps = "(nil)";
   1124e:	f1aa 0905 	sub.w	r9, sl, #5
   11252:	e023      	b.n	1129c <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11254:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   11258:	9300      	str	r3, [sp, #0]
   1125a:	ab0a      	add	r3, sp, #40	; 0x28
   1125c:	aa06      	add	r2, sp, #24
   1125e:	2100      	movs	r1, #0
   11260:	f007 fc95 	bl	18b8e <encode_uint>
   11264:	4681      	mov	r9, r0
				conv->altform_0c = true;
   11266:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1126a:	f043 0310 	orr.w	r3, r3, #16
   1126e:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
   11272:	2378      	movs	r3, #120	; 0x78
   11274:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
   11278:	46d8      	mov	r8, fp
				goto prec_int_pad0;
   1127a:	e7ce      	b.n	1121a <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   1127c:	4622      	mov	r2, r4
   1127e:	9904      	ldr	r1, [sp, #16]
   11280:	a806      	add	r0, sp, #24
   11282:	f007 fcd4 	bl	18c2e <store_count>
		char sign = 0;
   11286:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   11288:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   1128c:	f04f 0900 	mov.w	r9, #0
			}

			break;
   11290:	e004      	b.n	1129c <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
   11292:	46d8      	mov	r8, fp
   11294:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   11298:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   1129c:	f1b9 0f00 	cmp.w	r9, #0
   112a0:	f000 808d 	beq.w	113be <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   112a4:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
   112a8:	f1b8 0f00 	cmp.w	r8, #0
   112ac:	d000      	beq.n	112b0 <z_cbvprintf_impl+0x478>
			nj_len += 1U;
   112ae:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
   112b0:	f89d 201a 	ldrb.w	r2, [sp, #26]
   112b4:	f012 0f10 	tst.w	r2, #16
   112b8:	d025      	beq.n	11306 <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
   112ba:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   112bc:	9907      	ldr	r1, [sp, #28]
   112be:	440b      	add	r3, r1
		if (conv->pad_fp) {
   112c0:	f012 0f40 	tst.w	r2, #64	; 0x40
   112c4:	d001      	beq.n	112ca <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
   112c6:	9a08      	ldr	r2, [sp, #32]
   112c8:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   112ca:	2f00      	cmp	r7, #0
   112cc:	dd31      	ble.n	11332 <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
   112ce:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   112d0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   112d4:	f013 0f04 	tst.w	r3, #4
   112d8:	d12b      	bne.n	11332 <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   112da:	f013 0f40 	tst.w	r3, #64	; 0x40
   112de:	d017      	beq.n	11310 <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
   112e0:	f1b8 0f00 	cmp.w	r8, #0
   112e4:	d017      	beq.n	11316 <z_cbvprintf_impl+0x4de>
						OUTC(sign);
   112e6:	4629      	mov	r1, r5
   112e8:	4640      	mov	r0, r8
   112ea:	47b0      	blx	r6
   112ec:	2800      	cmp	r0, #0
   112ee:	db6a      	blt.n	113c6 <z_cbvprintf_impl+0x58e>
   112f0:	3401      	adds	r4, #1
						sign = 0;
   112f2:	46d8      	mov	r8, fp
					}
					pad = '0';
   112f4:	f04f 0b30 	mov.w	fp, #48	; 0x30
   112f8:	e00f      	b.n	1131a <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
   112fa:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   112fe:	e7cd      	b.n	1129c <z_cbvprintf_impl+0x464>
   11300:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   11304:	e7ca      	b.n	1129c <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
   11306:	f012 0f08 	tst.w	r2, #8
   1130a:	d0d7      	beq.n	112bc <z_cbvprintf_impl+0x484>
			nj_len += 1U;
   1130c:	3301      	adds	r3, #1
   1130e:	e7d5      	b.n	112bc <z_cbvprintf_impl+0x484>
				char pad = ' ';
   11310:	f04f 0b20 	mov.w	fp, #32
   11314:	e001      	b.n	1131a <z_cbvprintf_impl+0x4e2>
					pad = '0';
   11316:	f04f 0b30 	mov.w	fp, #48	; 0x30
   1131a:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   1131c:	1e5f      	subs	r7, r3, #1
   1131e:	2b00      	cmp	r3, #0
   11320:	dd07      	ble.n	11332 <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
   11322:	4629      	mov	r1, r5
   11324:	4658      	mov	r0, fp
   11326:	47b0      	blx	r6
   11328:	2800      	cmp	r0, #0
   1132a:	db4c      	blt.n	113c6 <z_cbvprintf_impl+0x58e>
   1132c:	3401      	adds	r4, #1
				while (width-- > 0) {
   1132e:	463b      	mov	r3, r7
   11330:	e7f4      	b.n	1131c <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   11332:	f1b8 0f00 	cmp.w	r8, #0
   11336:	d005      	beq.n	11344 <z_cbvprintf_impl+0x50c>
			OUTC(sign);
   11338:	4629      	mov	r1, r5
   1133a:	4640      	mov	r0, r8
   1133c:	47b0      	blx	r6
   1133e:	2800      	cmp	r0, #0
   11340:	db41      	blt.n	113c6 <z_cbvprintf_impl+0x58e>
   11342:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   11344:	f89d 301a 	ldrb.w	r3, [sp, #26]
   11348:	f3c3 1200 	ubfx	r2, r3, #4, #1
   1134c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   11350:	431a      	orrs	r2, r3
   11352:	d005      	beq.n	11360 <z_cbvprintf_impl+0x528>
				OUTC('0');
   11354:	4629      	mov	r1, r5
   11356:	2030      	movs	r0, #48	; 0x30
   11358:	47b0      	blx	r6
   1135a:	2800      	cmp	r0, #0
   1135c:	db33      	blt.n	113c6 <z_cbvprintf_impl+0x58e>
   1135e:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   11360:	f89d 301a 	ldrb.w	r3, [sp, #26]
   11364:	f013 0f10 	tst.w	r3, #16
   11368:	d006      	beq.n	11378 <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
   1136a:	4629      	mov	r1, r5
   1136c:	f89d 001b 	ldrb.w	r0, [sp, #27]
   11370:	47b0      	blx	r6
   11372:	2800      	cmp	r0, #0
   11374:	db27      	blt.n	113c6 <z_cbvprintf_impl+0x58e>
   11376:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   11378:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
   1137a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   1137e:	2b00      	cmp	r3, #0
   11380:	dd07      	ble.n	11392 <z_cbvprintf_impl+0x55a>
				OUTC('0');
   11382:	4629      	mov	r1, r5
   11384:	2030      	movs	r0, #48	; 0x30
   11386:	47b0      	blx	r6
   11388:	2800      	cmp	r0, #0
   1138a:	db1c      	blt.n	113c6 <z_cbvprintf_impl+0x58e>
   1138c:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   1138e:	4643      	mov	r3, r8
   11390:	e7f3      	b.n	1137a <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
   11392:	4653      	mov	r3, sl
   11394:	464a      	mov	r2, r9
   11396:	4629      	mov	r1, r5
   11398:	4630      	mov	r0, r6
   1139a:	f007 fc67 	bl	18c6c <outs>
   1139e:	2800      	cmp	r0, #0
   113a0:	db11      	blt.n	113c6 <z_cbvprintf_impl+0x58e>
   113a2:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   113a4:	2f00      	cmp	r7, #0
   113a6:	dd07      	ble.n	113b8 <z_cbvprintf_impl+0x580>
			OUTC(' ');
   113a8:	4629      	mov	r1, r5
   113aa:	2020      	movs	r0, #32
   113ac:	47b0      	blx	r6
   113ae:	2800      	cmp	r0, #0
   113b0:	db09      	blt.n	113c6 <z_cbvprintf_impl+0x58e>
   113b2:	3401      	adds	r4, #1
			--width;
   113b4:	3f01      	subs	r7, #1
   113b6:	e7f5      	b.n	113a4 <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
   113b8:	f8dd 9008 	ldr.w	r9, [sp, #8]
   113bc:	e544      	b.n	10e48 <z_cbvprintf_impl+0x10>
   113be:	f8dd 9008 	ldr.w	r9, [sp, #8]
   113c2:	e541      	b.n	10e48 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
   113c4:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   113c6:	b011      	add	sp, #68	; 0x44
   113c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113cc:	0001b1a1 	.word	0x0001b1a1

000113d0 <nrfx_coredep_delay_us>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   113d0:	b168      	cbz	r0, 113ee <nrfx_coredep_delay_us+0x1e>
{
   113d2:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   113d4:	4a06      	ldr	r2, [pc, #24]	; (113f0 <nrfx_coredep_delay_us+0x20>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
   113d6:	4b07      	ldr	r3, [pc, #28]	; (113f4 <nrfx_coredep_delay_us+0x24>)
   113d8:	681b      	ldr	r3, [r3, #0]
   113da:	4907      	ldr	r1, [pc, #28]	; (113f8 <nrfx_coredep_delay_us+0x28>)
   113dc:	fba1 1303 	umull	r1, r3, r1, r3
   113e0:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
   113e2:	fb00 f003 	mul.w	r0, r0, r3
   113e6:	f042 0301 	orr.w	r3, r2, #1
   113ea:	4798      	blx	r3
}
   113ec:	bd08      	pop	{r3, pc}
   113ee:	4770      	bx	lr
   113f0:	0001b050 	.word	0x0001b050
   113f4:	200080a4 	.word	0x200080a4
   113f8:	431bde83 	.word	0x431bde83

000113fc <mbox_rx_init>:

	remote_callback(user_data);
}

static int mbox_rx_init(void *user_data)
{
   113fc:	b500      	push	{lr}
   113fe:	b083      	sub	sp, #12
   11400:	4602      	mov	r2, r0
 * @param ch_id Channel ID
 */
static inline void mbox_init_channel(struct mbox_channel *channel, const struct device *dev,
				     uint32_t ch_id)
{
	channel->dev = dev;
   11402:	4b08      	ldr	r3, [pc, #32]	; (11424 <mbox_rx_init+0x28>)
   11404:	9300      	str	r3, [sp, #0]
	channel->id = ch_id;
   11406:	2308      	movs	r3, #8
   11408:	9301      	str	r3, [sp, #4]
		return -ENODEV;
	}

	mbox_init_channel(&channel, dev, CONFIG_NRF53_SYNC_RTC_IPM_IN);

	err = mbox_register_callback(&channel, mbox_callback, user_data);
   1140a:	4907      	ldr	r1, [pc, #28]	; (11428 <mbox_rx_init+0x2c>)
   1140c:	4668      	mov	r0, sp
   1140e:	f007 fefa 	bl	19206 <mbox_register_callback>
	if (err < 0) {
   11412:	2800      	cmp	r0, #0
   11414:	db03      	blt.n	1141e <mbox_rx_init+0x22>
		union { uintptr_t x; bool val; } parm1 = { .val = enable };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_MBOX_SET_ENABLED);
	}
#endif
	compiler_barrier();
	return z_impl_mbox_set_enabled(channel, enable);
   11416:	2101      	movs	r1, #1
   11418:	4668      	mov	r0, sp
   1141a:	f007 ff03 	bl	19224 <z_impl_mbox_set_enabled>
		return err;
	}

	return mbox_set_enabled(&channel, true);
}
   1141e:	b003      	add	sp, #12
   11420:	f85d fb04 	ldr.w	pc, [sp], #4
   11424:	0001acc8 	.word	0x0001acc8
   11428:	00019253 	.word	0x00019253

0001142c <free_resources>:
{
   1142c:	b510      	push	{r4, lr}
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
   1142e:	b2c4      	uxtb	r4, r0
   11430:	2301      	movs	r3, #1
   11432:	40a3      	lsls	r3, r4
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   11434:	4a05      	ldr	r2, [pc, #20]	; (1144c <free_resources+0x20>)
   11436:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
   1143a:	f3c0 2007 	ubfx	r0, r0, #8, #8
   1143e:	f003 ff4d 	bl	152dc <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
   11442:	4620      	mov	r0, r4
   11444:	f004 fd32 	bl	15eac <nrfx_dppi_channel_free>
}
   11448:	bd10      	pop	{r4, pc}
   1144a:	bf00      	nop
   1144c:	40017000 	.word	0x40017000

00011450 <ppi_rtc_to_ipc>:
{
   11450:	b538      	push	{r3, r4, r5, lr}
   11452:	4604      	mov	r4, r0
   11454:	460d      	mov	r5, r1
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
   11456:	f3c0 2007 	ubfx	r0, r0, #8, #8
   1145a:	f003 fdef 	bl	1503c <z_nrf_rtc_timer_compare_evt_address_get>
	nrf_ipc_task_t ipc_task = nrf_ipc_send_task_get(channels.ch.ipc_out);
   1145e:	f3c4 4307 	ubfx	r3, r4, #16, #8
}

NRF_STATIC_INLINE nrf_ipc_task_t nrf_ipc_send_task_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   11462:	009b      	lsls	r3, r3, #2
   11464:	b2db      	uxtb	r3, r3
	if (setup) {
   11466:	b13d      	cbz	r5, 11478 <ppi_rtc_to_ipc+0x28>
		nrf_ipc_subscribe_set(NRF_IPC, ipc_task, channels.ch.ppi);
   11468:	b2e4      	uxtb	r4, r4
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
   1146a:	4a06      	ldr	r2, [pc, #24]	; (11484 <ppi_rtc_to_ipc+0x34>)
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
   1146c:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
   11470:	50d4      	str	r4, [r2, r3]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   11472:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
}
   11476:	bd38      	pop	{r3, r4, r5, pc}

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
   11478:	2100      	movs	r1, #0
   1147a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
   1147e:	4a01      	ldr	r2, [pc, #4]	; (11484 <ppi_rtc_to_ipc+0x34>)
   11480:	50d1      	str	r1, [r2, r3]
   11482:	e7f8      	b.n	11476 <ppi_rtc_to_ipc+0x26>
   11484:	4002a080 	.word	0x4002a080

00011488 <ppi_ipc_to_rtc>:
{
   11488:	b570      	push	{r4, r5, r6, lr}
   1148a:	4605      	mov	r5, r0
   1148c:	460e      	mov	r6, r1
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
   1148e:	0e04      	lsrs	r4, r0, #24
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   11490:	00a4      	lsls	r4, r4, #2
   11492:	f504 7480 	add.w	r4, r4, #256	; 0x100
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
   11496:	f3c0 2007 	ubfx	r0, r0, #8, #8
   1149a:	f008 ff6f 	bl	1a37c <z_nrf_rtc_timer_capture_task_address_get>
	if (setup) {
   1149e:	b146      	cbz	r6, 114b2 <ppi_ipc_to_rtc+0x2a>
		nrfx_gppi_task_endpoint_setup(channels.ch.ppi, task_addr);
   114a0:	b2ed      	uxtb	r5, r5
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   114a2:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
   114a6:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
   114aa:	b2a4      	uxth	r4, r4
   114ac:	4b04      	ldr	r3, [pc, #16]	; (114c0 <ppi_ipc_to_rtc+0x38>)
   114ae:	511d      	str	r5, [r3, r4]
}
   114b0:	bd70      	pop	{r4, r5, r6, pc}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
   114b2:	2200      	movs	r2, #0
   114b4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
   114b8:	b2a4      	uxth	r4, r4
   114ba:	4b01      	ldr	r3, [pc, #4]	; (114c0 <ppi_ipc_to_rtc+0x38>)
   114bc:	511a      	str	r2, [r3, r4]
   114be:	e7f7      	b.n	114b0 <ppi_ipc_to_rtc+0x28>
   114c0:	4002a080 	.word	0x4002a080

000114c4 <remote_callback>:
{
   114c4:	b570      	push	{r4, r5, r6, lr}
   114c6:	b082      	sub	sp, #8
   114c8:	4604      	mov	r4, r0
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
   114ca:	f3c0 2607 	ubfx	r6, r0, #8, #8
   114ce:	4630      	mov	r0, r6
   114d0:	f003 fdbc 	bl	1504c <z_nrf_rtc_timer_compare_read>
   114d4:	4605      	mov	r5, r0
	ppi_ipc_to_rtc(channels, false);
   114d6:	2100      	movs	r1, #0
   114d8:	4620      	mov	r0, r4
   114da:	f7ff ffd5 	bl	11488 <ppi_ipc_to_rtc>
		ppi_rtc_to_ipc(channels, true);
   114de:	2101      	movs	r1, #1
   114e0:	4620      	mov	r0, r4
   114e2:	f7ff ffb5 	bl	11450 <ppi_rtc_to_ipc>
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
   114e6:	f105 0232 	add.w	r2, r5, #50	; 0x32
   114ea:	9401      	str	r4, [sp, #4]
   114ec:	4b04      	ldr	r3, [pc, #16]	; (11500 <remote_callback+0x3c>)
   114ee:	9300      	str	r3, [sp, #0]
   114f0:	0052      	lsls	r2, r2, #1
   114f2:	2300      	movs	r3, #0
   114f4:	4630      	mov	r0, r6
   114f6:	f008 ff65 	bl	1a3c4 <z_nrf_rtc_timer_set>
}
   114fa:	b002      	add	sp, #8
   114fc:	bd70      	pop	{r4, r5, r6, pc}
   114fe:	bf00      	nop
   11500:	0001923f 	.word	0x0001923f

00011504 <sync_rtc_setup>:

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
   11504:	b5f0      	push	{r4, r5, r6, r7, lr}
   11506:	b083      	sub	sp, #12
   11508:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
   1150a:	1d38      	adds	r0, r7, #4
   1150c:	f004 fcc6 	bl	15e9c <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
   11510:	4b31      	ldr	r3, [pc, #196]	; (115d8 <sync_rtc_setup+0xd4>)
   11512:	4298      	cmp	r0, r3
   11514:	d03b      	beq.n	1158e <sync_rtc_setup+0x8a>
		rv = -ENODEV;
   11516:	f06f 0412 	mvn.w	r4, #18
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
   1151a:	466d      	mov	r5, sp
   1151c:	b088      	sub	sp, #32
   1151e:	466b      	mov	r3, sp
   11520:	f113 0210 	adds.w	r2, r3, #16
   11524:	d052      	beq.n	115cc <sync_rtc_setup+0xc8>
   11526:	210c      	movs	r1, #12
   11528:	b13a      	cbz	r2, 1153a <sync_rtc_setup+0x36>
   1152a:	4608      	mov	r0, r1
   1152c:	2904      	cmp	r1, #4
   1152e:	dd01      	ble.n	11534 <sync_rtc_setup+0x30>
   11530:	4e2a      	ldr	r6, [pc, #168]	; (115dc <sync_rtc_setup+0xd8>)
   11532:	615e      	str	r6, [r3, #20]
   11534:	2808      	cmp	r0, #8
   11536:	dd00      	ble.n	1153a <sync_rtc_setup+0x36>
   11538:	619c      	str	r4, [r3, #24]
   1153a:	290b      	cmp	r1, #11
   1153c:	dd49      	ble.n	115d2 <sync_rtc_setup+0xce>
   1153e:	f04f 0c0c 	mov.w	ip, #12
   11542:	b13a      	cbz	r2, 11554 <sync_rtc_setup+0x50>
   11544:	2103      	movs	r1, #3
   11546:	7039      	strb	r1, [r7, #0]
   11548:	2100      	movs	r1, #0
   1154a:	7079      	strb	r1, [r7, #1]
   1154c:	70b9      	strb	r1, [r7, #2]
   1154e:	70f9      	strb	r1, [r7, #3]
   11550:	6838      	ldr	r0, [r7, #0]
   11552:	6118      	str	r0, [r3, #16]
   11554:	2100      	movs	r1, #0
   11556:	f36f 0100 	bfc	r1, #0, #1
   1155a:	f36f 0141 	bfc	r1, #1, #1
   1155e:	f36f 0182 	bfc	r1, #2, #1
   11562:	f36f 01c5 	bfc	r1, #3, #3
   11566:	2301      	movs	r3, #1
   11568:	f363 1188 	bfi	r1, r3, #6, #3
   1156c:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   11570:	f36c 2152 	bfi	r1, ip, #9, #10
   11574:	f36f 41de 	bfc	r1, #19, #12
   11578:	f36f 71df 	bfc	r1, #31, #1
   1157c:	2300      	movs	r3, #0
   1157e:	4818      	ldr	r0, [pc, #96]	; (115e0 <sync_rtc_setup+0xdc>)
   11580:	f007 fef1 	bl	19366 <z_impl_z_log_msg_static_create>
   11584:	46ad      	mov	sp, r5
	}

	return rv;
}
   11586:	4620      	mov	r0, r4
   11588:	370c      	adds	r7, #12
   1158a:	46bd      	mov	sp, r7
   1158c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
   1158e:	f003 fe7d 	bl	1528c <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
   11592:	1e04      	subs	r4, r0, #0
   11594:	db16      	blt.n	115c4 <sync_rtc_setup+0xc0>
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
   11596:	717c      	strb	r4, [r7, #5]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
   11598:	2307      	movs	r3, #7
   1159a:	71bb      	strb	r3, [r7, #6]
	channels.ch.ipc_in = CONFIG_NRF53_SYNC_RTC_IPM_IN;
   1159c:	2308      	movs	r3, #8
   1159e:	71fb      	strb	r3, [r7, #7]
	rv = mbox_rx_init((void *)channels.raw);
   115a0:	6878      	ldr	r0, [r7, #4]
   115a2:	f7ff ff2b 	bl	113fc <mbox_rx_init>
	if (rv < 0) {
   115a6:	1e04      	subs	r4, r0, #0
   115a8:	dbb7      	blt.n	1151a <sync_rtc_setup+0x16>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
   115aa:	793b      	ldrb	r3, [r7, #4]
   115ac:	2101      	movs	r1, #1
   115ae:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->CHENSET = mask;
   115b2:	4a0c      	ldr	r2, [pc, #48]	; (115e4 <sync_rtc_setup+0xe0>)
   115b4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
   115b8:	6878      	ldr	r0, [r7, #4]
   115ba:	f7ff ff65 	bl	11488 <ppi_ipc_to_rtc>
	if (rv != 0) {
   115be:	2c00      	cmp	r4, #0
   115c0:	d0e1      	beq.n	11586 <sync_rtc_setup+0x82>
   115c2:	e7aa      	b.n	1151a <sync_rtc_setup+0x16>
		nrfx_dppi_channel_free(channels.ch.ppi);
   115c4:	7938      	ldrb	r0, [r7, #4]
   115c6:	f004 fc71 	bl	15eac <nrfx_dppi_channel_free>
		goto bail;
   115ca:	e7f8      	b.n	115be <sync_rtc_setup+0xba>
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
   115cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   115d0:	e7aa      	b.n	11528 <sync_rtc_setup+0x24>
   115d2:	f06f 0c1b 	mvn.w	ip, #27
   115d6:	e7b4      	b.n	11542 <sync_rtc_setup+0x3e>
   115d8:	0bad0000 	.word	0x0bad0000
   115dc:	0001b1a8 	.word	0x0001b1a8
   115e0:	0001afd8 	.word	0x0001afd8
   115e4:	40017000 	.word	0x40017000

000115e8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   115e8:	f008 bf2a 	b.w	1a440 <SystemInit>

000115ec <msg_process>:
		return true;
	}
}

static void msg_process(union log_msg_generic *msg)
{
   115ec:	b538      	push	{r3, r4, r5, lr}
   115ee:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   115f0:	4c0b      	ldr	r4, [pc, #44]	; (11620 <msg_process+0x34>)
   115f2:	e000      	b.n	115f6 <msg_process+0xa>
   115f4:	3410      	adds	r4, #16
   115f6:	4b0b      	ldr	r3, [pc, #44]	; (11624 <msg_process+0x38>)
   115f8:	429c      	cmp	r4, r3
   115fa:	d20f      	bcs.n	1161c <msg_process+0x30>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   115fc:	6863      	ldr	r3, [r4, #4]
   115fe:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend) &&
   11600:	2b00      	cmp	r3, #0
   11602:	d0f7      	beq.n	115f4 <msg_process+0x8>
		    msg_filter_check(backend, msg)) {
   11604:	4629      	mov	r1, r5
   11606:	4620      	mov	r0, r4
   11608:	f007 fe44 	bl	19294 <msg_filter_check>
		if (log_backend_is_active(backend) &&
   1160c:	2800      	cmp	r0, #0
   1160e:	d0f1      	beq.n	115f4 <msg_process+0x8>
	backend->api->process(backend, msg);
   11610:	6823      	ldr	r3, [r4, #0]
   11612:	681b      	ldr	r3, [r3, #0]
   11614:	4629      	mov	r1, r5
   11616:	4620      	mov	r0, r4
   11618:	4798      	blx	r3
}
   1161a:	e7eb      	b.n	115f4 <msg_process+0x8>
			log_backend_msg_process(backend, msg);
		}
	}
}
   1161c:	bd38      	pop	{r3, r4, r5, pc}
   1161e:	bf00      	nop
   11620:	0001aff0 	.word	0x0001aff0
   11624:	0001b000 	.word	0x0001b000

00011628 <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
   11628:	b570      	push	{r4, r5, r6, lr}
   1162a:	4606      	mov	r6, r0
   1162c:	460d      	mov	r5, r1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1162e:	4c08      	ldr	r4, [pc, #32]	; (11650 <log_backend_notify_all+0x28>)
   11630:	e004      	b.n	1163c <log_backend_notify_all+0x14>
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
		backend->api->notify(backend, event, arg);
   11632:	462a      	mov	r2, r5
   11634:	4631      	mov	r1, r6
   11636:	4620      	mov	r0, r4
   11638:	4798      	blx	r3
   1163a:	3410      	adds	r4, #16
   1163c:	4b05      	ldr	r3, [pc, #20]	; (11654 <log_backend_notify_all+0x2c>)
   1163e:	429c      	cmp	r4, r3
   11640:	d204      	bcs.n	1164c <log_backend_notify_all+0x24>
	if (backend->api->notify) {
   11642:	6823      	ldr	r3, [r4, #0]
   11644:	699b      	ldr	r3, [r3, #24]
   11646:	2b00      	cmp	r3, #0
   11648:	d1f3      	bne.n	11632 <log_backend_notify_all+0xa>
   1164a:	e7f6      	b.n	1163a <log_backend_notify_all+0x12>
		log_backend_notify(backend, event, arg);
	}
}
   1164c:	bd70      	pop	{r4, r5, r6, pc}
   1164e:	bf00      	nop
   11650:	0001aff0 	.word	0x0001aff0
   11654:	0001b000 	.word	0x0001b000

00011658 <activate_foreach_backend>:
{
   11658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1165c:	4607      	mov	r7, r0
	uint32_t mask_cpy = mask;
   1165e:	4605      	mov	r5, r0
	while (mask_cpy) {
   11660:	e00a      	b.n	11678 <activate_foreach_backend+0x20>
			mask &= ~BIT(i);
   11662:	ea07 0708 	and.w	r7, r7, r8
					   backend->cb->ctx,
   11666:	4b14      	ldr	r3, [pc, #80]	; (116b8 <activate_foreach_backend+0x60>)
   11668:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   1166c:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   1166e:	2204      	movs	r2, #4
   11670:	6819      	ldr	r1, [r3, #0]
   11672:	4620      	mov	r0, r4
   11674:	f000 fa8c 	bl	11b90 <log_backend_enable>
	while (mask_cpy) {
   11678:	b1d5      	cbz	r5, 116b0 <activate_foreach_backend+0x58>
		uint32_t i = __builtin_ctz(mask_cpy);
   1167a:	fa95 f6a5 	rbit	r6, r5
   1167e:	fab6 f686 	clz	r6, r6
	STRUCT_SECTION_GET(log_backend, idx, &backend);
   11682:	4c0d      	ldr	r4, [pc, #52]	; (116b8 <activate_foreach_backend+0x60>)
   11684:	eb04 1406 	add.w	r4, r4, r6, lsl #4
		mask_cpy &= ~BIT(i);
   11688:	2301      	movs	r3, #1
   1168a:	40b3      	lsls	r3, r6
   1168c:	ea6f 0803 	mvn.w	r8, r3
   11690:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   11694:	7b23      	ldrb	r3, [r4, #12]
   11696:	2b00      	cmp	r3, #0
   11698:	d0ee      	beq.n	11678 <activate_foreach_backend+0x20>
	if (backend->api->is_ready != NULL) {
   1169a:	0133      	lsls	r3, r6, #4
   1169c:	4a06      	ldr	r2, [pc, #24]	; (116b8 <activate_foreach_backend+0x60>)
   1169e:	58d3      	ldr	r3, [r2, r3]
   116a0:	691b      	ldr	r3, [r3, #16]
   116a2:	2b00      	cmp	r3, #0
   116a4:	d0dd      	beq.n	11662 <activate_foreach_backend+0xa>
		return backend->api->is_ready(backend);
   116a6:	4620      	mov	r0, r4
   116a8:	4798      	blx	r3
   116aa:	2800      	cmp	r0, #0
   116ac:	d1e4      	bne.n	11678 <activate_foreach_backend+0x20>
   116ae:	e7d8      	b.n	11662 <activate_foreach_backend+0xa>
}
   116b0:	4638      	mov	r0, r7
   116b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   116b6:	bf00      	nop
   116b8:	0001aff0 	.word	0x0001aff0

000116bc <z_log_init>:
{
   116bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   116c0:	4680      	mov	r8, r0
   116c2:	460f      	mov	r7, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   116c4:	4b1e      	ldr	r3, [pc, #120]	; (11740 <z_log_init+0x84>)
   116c6:	e8d3 5fef 	ldaex	r5, [r3]
   116ca:	1c6a      	adds	r2, r5, #1
   116cc:	e8c3 2fe1 	stlex	r1, r2, [r3]
   116d0:	2900      	cmp	r1, #0
   116d2:	d1f8      	bne.n	116c6 <z_log_init+0xa>
	if (atomic_inc(&initialized) != 0) {
   116d4:	2d00      	cmp	r5, #0
   116d6:	d12f      	bne.n	11738 <z_log_init+0x7c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   116d8:	4c1a      	ldr	r4, [pc, #104]	; (11744 <z_log_init+0x88>)
	int i = 0;
   116da:	2600      	movs	r6, #0
   116dc:	e007      	b.n	116ee <z_log_init+0x32>
						   backend->cb->ctx,
   116de:	6863      	ldr	r3, [r4, #4]
				log_backend_enable(backend,
   116e0:	2204      	movs	r2, #4
   116e2:	6819      	ldr	r1, [r3, #0]
   116e4:	4620      	mov	r0, r4
   116e6:	f000 fa53 	bl	11b90 <log_backend_enable>
			i++;
   116ea:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   116ec:	3410      	adds	r4, #16
   116ee:	4b16      	ldr	r3, [pc, #88]	; (11748 <z_log_init+0x8c>)
   116f0:	429c      	cmp	r4, r3
   116f2:	d213      	bcs.n	1171c <z_log_init+0x60>
		if (backend->autostart) {
   116f4:	7b23      	ldrb	r3, [r4, #12]
   116f6:	2b00      	cmp	r3, #0
   116f8:	d0f8      	beq.n	116ec <z_log_init+0x30>
	if (backend->api->init) {
   116fa:	6823      	ldr	r3, [r4, #0]
   116fc:	68db      	ldr	r3, [r3, #12]
   116fe:	b10b      	cbz	r3, 11704 <z_log_init+0x48>
		backend->api->init(backend);
   11700:	4620      	mov	r0, r4
   11702:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   11704:	6823      	ldr	r3, [r4, #0]
   11706:	691b      	ldr	r3, [r3, #16]
   11708:	2b00      	cmp	r3, #0
   1170a:	d0e8      	beq.n	116de <z_log_init+0x22>
		return backend->api->is_ready(backend);
   1170c:	4620      	mov	r0, r4
   1170e:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   11710:	2800      	cmp	r0, #0
   11712:	d0e4      	beq.n	116de <z_log_init+0x22>
				mask |= BIT(i);
   11714:	2301      	movs	r3, #1
   11716:	40b3      	lsls	r3, r6
   11718:	431d      	orrs	r5, r3
   1171a:	e7e6      	b.n	116ea <z_log_init+0x2e>
	if (blocking) {
   1171c:	f1b8 0f00 	cmp.w	r8, #0
   11720:	d00b      	beq.n	1173a <z_log_init+0x7e>
		while (mask) {
   11722:	b155      	cbz	r5, 1173a <z_log_init+0x7e>
			mask = activate_foreach_backend(mask);
   11724:	4628      	mov	r0, r5
   11726:	f7ff ff97 	bl	11658 <activate_foreach_backend>
   1172a:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   1172c:	2f00      	cmp	r7, #0
   1172e:	d0f8      	beq.n	11722 <z_log_init+0x66>
				k_msleep(10);
   11730:	200a      	movs	r0, #10
   11732:	f007 fdb5 	bl	192a0 <k_msleep>
   11736:	e7f4      	b.n	11722 <z_log_init+0x66>
		return 0;
   11738:	2500      	movs	r5, #0
}
   1173a:	4628      	mov	r0, r5
   1173c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11740:	200088b4 	.word	0x200088b4
   11744:	0001aff0 	.word	0x0001aff0
   11748:	0001b000 	.word	0x0001b000

0001174c <thread_set>:
{
   1174c:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   1174e:	4b06      	ldr	r3, [pc, #24]	; (11768 <thread_set+0x1c>)
   11750:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   11752:	b118      	cbz	r0, 1175c <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   11754:	4b05      	ldr	r3, [pc, #20]	; (1176c <thread_set+0x20>)
   11756:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   11758:	2b09      	cmp	r3, #9
   1175a:	dc00      	bgt.n	1175e <thread_set+0x12>
}
   1175c:	bd08      	pop	{r3, pc}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1175e:	4804      	ldr	r0, [pc, #16]	; (11770 <thread_set+0x24>)
   11760:	f005 ff74 	bl	1764c <z_impl_k_sem_give>
}
   11764:	e7fa      	b.n	1175c <thread_set+0x10>
   11766:	bf00      	nop
   11768:	200088a8 	.word	0x200088a8
   1176c:	200088b0 	.word	0x200088b0
   11770:	20008190 	.word	0x20008190

00011774 <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   11774:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   11776:	4802      	ldr	r0, [pc, #8]	; (11780 <log_process_thread_timer_expiry_fn+0xc>)
   11778:	f005 ff68 	bl	1764c <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   1177c:	bd08      	pop	{r3, pc}
   1177e:	bf00      	nop
   11780:	20008190 	.word	0x20008190

00011784 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   11784:	b530      	push	{r4, r5, lr}
   11786:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   11788:	2200      	movs	r2, #0
   1178a:	490f      	ldr	r1, [pc, #60]	; (117c8 <enable_logger+0x44>)
   1178c:	480f      	ldr	r0, [pc, #60]	; (117cc <enable_logger+0x48>)
   1178e:	f009 fa02 	bl	1ab96 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11792:	4d0f      	ldr	r5, [pc, #60]	; (117d0 <enable_logger+0x4c>)
   11794:	2200      	movs	r2, #0
   11796:	2300      	movs	r3, #0
   11798:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1179c:	2400      	movs	r4, #0
   1179e:	9404      	str	r4, [sp, #16]
   117a0:	230e      	movs	r3, #14
   117a2:	9303      	str	r3, [sp, #12]
   117a4:	9402      	str	r4, [sp, #8]
   117a6:	9401      	str	r4, [sp, #4]
   117a8:	9400      	str	r4, [sp, #0]
   117aa:	4b0a      	ldr	r3, [pc, #40]	; (117d4 <enable_logger+0x50>)
   117ac:	f44f 7240 	mov.w	r2, #768	; 0x300
   117b0:	4909      	ldr	r1, [pc, #36]	; (117d8 <enable_logger+0x54>)
   117b2:	4628      	mov	r0, r5
   117b4:	f008 ffda 	bl	1a76c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   117b8:	4908      	ldr	r1, [pc, #32]	; (117dc <enable_logger+0x58>)
   117ba:	4628      	mov	r0, r5
   117bc:	f005 fd98 	bl	172f0 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   117c0:	4620      	mov	r0, r4
   117c2:	b009      	add	sp, #36	; 0x24
   117c4:	bd30      	pop	{r4, r5, pc}
   117c6:	bf00      	nop
   117c8:	00011775 	.word	0x00011775
   117cc:	20008660 	.word	0x20008660
   117d0:	200081a0 	.word	0x200081a0
   117d4:	00011af1 	.word	0x00011af1
   117d8:	20008d40 	.word	0x20008d40
   117dc:	0001b1dc 	.word	0x0001b1dc

000117e0 <log_format_func_t_get>:
}
   117e0:	4b01      	ldr	r3, [pc, #4]	; (117e8 <log_format_func_t_get+0x8>)
   117e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   117e6:	4770      	bx	lr
   117e8:	0001b1f8 	.word	0x0001b1f8

000117ec <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
   117ec:	b148      	cbz	r0, 11802 <log_set_timestamp_func+0x16>
{
   117ee:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
   117f0:	4a05      	ldr	r2, [pc, #20]	; (11808 <log_set_timestamp_func+0x1c>)
   117f2:	6010      	str	r0, [r2, #0]
	timestamp_freq = freq;
   117f4:	4b05      	ldr	r3, [pc, #20]	; (1180c <log_set_timestamp_func+0x20>)
   117f6:	6019      	str	r1, [r3, #0]
		log_output_timestamp_freq_set(freq);
   117f8:	4608      	mov	r0, r1
   117fa:	f000 fbeb 	bl	11fd4 <log_output_timestamp_freq_set>
	return 0;
   117fe:	2000      	movs	r0, #0
}
   11800:	bd08      	pop	{r3, pc}
		return -EINVAL;
   11802:	f06f 0015 	mvn.w	r0, #21
}
   11806:	4770      	bx	lr
   11808:	20008004 	.word	0x20008004
   1180c:	200088a4 	.word	0x200088a4

00011810 <z_log_notify_backend_enabled>:
{
   11810:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   11812:	4b05      	ldr	r3, [pc, #20]	; (11828 <z_log_notify_backend_enabled+0x18>)
   11814:	781b      	ldrb	r3, [r3, #0]
   11816:	b11b      	cbz	r3, 11820 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
   11818:	4b03      	ldr	r3, [pc, #12]	; (11828 <z_log_notify_backend_enabled+0x18>)
   1181a:	2201      	movs	r2, #1
   1181c:	701a      	strb	r2, [r3, #0]
}
   1181e:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   11820:	4802      	ldr	r0, [pc, #8]	; (1182c <z_log_notify_backend_enabled+0x1c>)
   11822:	f005 ff13 	bl	1764c <z_impl_k_sem_give>
}
   11826:	e7f7      	b.n	11818 <z_log_notify_backend_enabled+0x8>
   11828:	20008d34 	.word	0x20008d34
   1182c:	20008190 	.word	0x20008190

00011830 <z_log_dropped>:
   11830:	4b09      	ldr	r3, [pc, #36]	; (11858 <z_log_dropped+0x28>)
   11832:	e8d3 1fef 	ldaex	r1, [r3]
   11836:	3101      	adds	r1, #1
   11838:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1183c:	2a00      	cmp	r2, #0
   1183e:	d1f8      	bne.n	11832 <z_log_dropped+0x2>
	if (buffered) {
   11840:	b900      	cbnz	r0, 11844 <z_log_dropped+0x14>
}
   11842:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11844:	4b05      	ldr	r3, [pc, #20]	; (1185c <z_log_dropped+0x2c>)
   11846:	e8d3 1fef 	ldaex	r1, [r3]
   1184a:	3901      	subs	r1, #1
   1184c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   11850:	2a00      	cmp	r2, #0
   11852:	d0f6      	beq.n	11842 <z_log_dropped+0x12>
   11854:	e7f7      	b.n	11846 <z_log_dropped+0x16>
   11856:	bf00      	nop
   11858:	200088ac 	.word	0x200088ac
   1185c:	200088b0 	.word	0x200088b0

00011860 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11860:	4b04      	ldr	r3, [pc, #16]	; (11874 <z_log_dropped_read_and_clear+0x14>)
}
   11862:	2000      	movs	r0, #0
   11864:	4601      	mov	r1, r0
   11866:	e8d3 0fef 	ldaex	r0, [r3]
   1186a:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1186e:	2a00      	cmp	r2, #0
   11870:	d1f9      	bne.n	11866 <z_log_dropped_read_and_clear+0x6>
   11872:	4770      	bx	lr
   11874:	200088ac 	.word	0x200088ac

00011878 <dropped_notify>:
{
   11878:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   1187a:	f7ff fff1 	bl	11860 <z_log_dropped_read_and_clear>
   1187e:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11880:	4c09      	ldr	r4, [pc, #36]	; (118a8 <dropped_notify+0x30>)
   11882:	e000      	b.n	11886 <dropped_notify+0xe>
   11884:	3410      	adds	r4, #16
   11886:	4b09      	ldr	r3, [pc, #36]	; (118ac <dropped_notify+0x34>)
   11888:	429c      	cmp	r4, r3
   1188a:	d20b      	bcs.n	118a4 <dropped_notify+0x2c>
	return backend->cb->active;
   1188c:	6863      	ldr	r3, [r4, #4]
   1188e:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   11890:	2b00      	cmp	r3, #0
   11892:	d0f7      	beq.n	11884 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
   11894:	6823      	ldr	r3, [r4, #0]
   11896:	685b      	ldr	r3, [r3, #4]
   11898:	2b00      	cmp	r3, #0
   1189a:	d0f3      	beq.n	11884 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
   1189c:	4629      	mov	r1, r5
   1189e:	4620      	mov	r0, r4
   118a0:	4798      	blx	r3
   118a2:	e7ef      	b.n	11884 <dropped_notify+0xc>
}
   118a4:	bd38      	pop	{r3, r4, r5, pc}
   118a6:	bf00      	nop
   118a8:	0001aff0 	.word	0x0001aff0
   118ac:	0001b000 	.word	0x0001b000

000118b0 <z_log_dropped_pending>:
	return dropped_cnt > 0;
   118b0:	4b03      	ldr	r3, [pc, #12]	; (118c0 <z_log_dropped_pending+0x10>)
   118b2:	6818      	ldr	r0, [r3, #0]
}
   118b4:	2800      	cmp	r0, #0
   118b6:	bfd4      	ite	le
   118b8:	2000      	movle	r0, #0
   118ba:	2001      	movgt	r0, #1
   118bc:	4770      	bx	lr
   118be:	bf00      	nop
   118c0:	200088ac 	.word	0x200088ac

000118c4 <z_log_msg_init>:
{
   118c4:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   118c6:	4c04      	ldr	r4, [pc, #16]	; (118d8 <z_log_msg_init+0x14>)
   118c8:	4904      	ldr	r1, [pc, #16]	; (118dc <z_log_msg_init+0x18>)
   118ca:	4620      	mov	r0, r4
   118cc:	f007 fad5 	bl	18e7a <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   118d0:	4b03      	ldr	r3, [pc, #12]	; (118e0 <z_log_msg_init+0x1c>)
   118d2:	601c      	str	r4, [r3, #0]
}
   118d4:	bd10      	pop	{r4, pc}
   118d6:	bf00      	nop
   118d8:	20008140 	.word	0x20008140
   118dc:	0001b1e4 	.word	0x0001b1e4
   118e0:	200088a0 	.word	0x200088a0

000118e4 <log_core_init>:
{
   118e4:	b508      	push	{r3, lr}
	panic_mode = false;
   118e6:	2300      	movs	r3, #0
   118e8:	4a05      	ldr	r2, [pc, #20]	; (11900 <log_core_init+0x1c>)
   118ea:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   118ec:	4a05      	ldr	r2, [pc, #20]	; (11904 <log_core_init+0x20>)
   118ee:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   118f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   118f4:	4804      	ldr	r0, [pc, #16]	; (11908 <log_core_init+0x24>)
   118f6:	f7ff ff79 	bl	117ec <log_set_timestamp_func>
		z_log_msg_init();
   118fa:	f7ff ffe3 	bl	118c4 <z_log_msg_init>
}
   118fe:	bd08      	pop	{r3, pc}
   11900:	20008d35 	.word	0x20008d35
   11904:	200088ac 	.word	0x200088ac
   11908:	00019299 	.word	0x00019299

0001190c <z_log_msg_alloc>:
{
   1190c:	b508      	push	{r3, lr}
   1190e:	4601      	mov	r1, r0
	return msg_alloc(&log_buffer, wlen);
   11910:	4801      	ldr	r0, [pc, #4]	; (11918 <z_log_msg_alloc+0xc>)
   11912:	f007 fcdb 	bl	192cc <msg_alloc>
}
   11916:	bd08      	pop	{r3, pc}
   11918:	20008140 	.word	0x20008140

0001191c <z_log_msg_local_claim>:
{
   1191c:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   1191e:	4802      	ldr	r0, [pc, #8]	; (11928 <z_log_msg_local_claim+0xc>)
   11920:	f007 fb83 	bl	1902a <mpsc_pbuf_claim>
}
   11924:	bd08      	pop	{r3, pc}
   11926:	bf00      	nop
   11928:	20008140 	.word	0x20008140

0001192c <z_log_msg_free>:
{
   1192c:	b508      	push	{r3, lr}
   1192e:	4601      	mov	r1, r0
	msg_free(curr_log_buffer, msg);
   11930:	4b02      	ldr	r3, [pc, #8]	; (1193c <z_log_msg_free+0x10>)
   11932:	6818      	ldr	r0, [r3, #0]
   11934:	f007 fcd0 	bl	192d8 <msg_free>
}
   11938:	bd08      	pop	{r3, pc}
   1193a:	bf00      	nop
   1193c:	200088a0 	.word	0x200088a0

00011940 <z_log_msg_pending>:
{
   11940:	b508      	push	{r3, lr}
		return msg_pending(&log_buffer);
   11942:	4802      	ldr	r0, [pc, #8]	; (1194c <z_log_msg_pending+0xc>)
   11944:	f007 fccc 	bl	192e0 <msg_pending>
}
   11948:	bd08      	pop	{r3, pc}
   1194a:	bf00      	nop
   1194c:	20008140 	.word	0x20008140

00011950 <z_impl_log_process>:
{
   11950:	b510      	push	{r4, lr}
   11952:	b082      	sub	sp, #8
	k_timeout_t backoff = K_NO_WAIT;
   11954:	2200      	movs	r2, #0
   11956:	2300      	movs	r3, #0
   11958:	e9cd 2300 	strd	r2, r3, [sp]
	if (!backend_attached) {
   1195c:	4b26      	ldr	r3, [pc, #152]	; (119f8 <z_impl_log_process+0xa8>)
   1195e:	7818      	ldrb	r0, [r3, #0]
   11960:	b908      	cbnz	r0, 11966 <z_impl_log_process+0x16>
}
   11962:	b002      	add	sp, #8
   11964:	bd10      	pop	{r4, pc}
	msg = z_log_msg_claim(&backoff);
   11966:	4668      	mov	r0, sp
   11968:	f007 fcc3 	bl	192f2 <z_log_msg_claim>
	if (msg) {
   1196c:	4604      	mov	r4, r0
   1196e:	b168      	cbz	r0, 1198c <z_impl_log_process+0x3c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11970:	4b22      	ldr	r3, [pc, #136]	; (119fc <z_impl_log_process+0xac>)
   11972:	e8d3 1fef 	ldaex	r1, [r3]
   11976:	3901      	subs	r1, #1
   11978:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1197c:	2a00      	cmp	r2, #0
   1197e:	d1f8      	bne.n	11972 <z_impl_log_process+0x22>
		msg_process(msg);
   11980:	4620      	mov	r0, r4
   11982:	f7ff fe33 	bl	115ec <msg_process>
		z_log_msg_free(msg);
   11986:	4620      	mov	r0, r4
   11988:	f7ff ffd0 	bl	1192c <z_log_msg_free>
		bool dropped_pend = z_log_dropped_pending();
   1198c:	f7ff ff90 	bl	118b0 <z_log_dropped_pending>
		if ((dropped_pend || unordered_pend) &&
   11990:	b958      	cbnz	r0, 119aa <z_impl_log_process+0x5a>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   11992:	4a1b      	ldr	r2, [pc, #108]	; (11a00 <z_impl_log_process+0xb0>)
   11994:	6813      	ldr	r3, [r2, #0]
   11996:	6851      	ldr	r1, [r2, #4]
   11998:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   1199c:	f141 0100 	adc.w	r1, r1, #0
   119a0:	6013      	str	r3, [r2, #0]
   119a2:	6051      	str	r1, [r2, #4]
	return z_log_msg_pending();
   119a4:	f7ff ffcc 	bl	11940 <z_log_msg_pending>
   119a8:	e7db      	b.n	11962 <z_impl_log_process+0x12>
	return z_impl_k_uptime_ticks();
   119aa:	f009 f8de 	bl	1ab6a <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   119ae:	014a      	lsls	r2, r1, #5
   119b0:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   119b4:	0143      	lsls	r3, r0, #5
   119b6:	1a1b      	subs	r3, r3, r0
   119b8:	eb62 0201 	sbc.w	r2, r2, r1
   119bc:	0092      	lsls	r2, r2, #2
   119be:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   119c2:	009b      	lsls	r3, r3, #2
   119c4:	181b      	adds	r3, r3, r0
   119c6:	eb42 0201 	adc.w	r2, r2, r1
   119ca:	00d2      	lsls	r2, r2, #3
   119cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   119d0:	f3c3 3310 	ubfx	r3, r3, #12, #17
   119d4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   119d8:	0bd2      	lsrs	r2, r2, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   119da:	4809      	ldr	r0, [pc, #36]	; (11a00 <z_impl_log_process+0xb0>)
   119dc:	6801      	ldr	r1, [r0, #0]
   119de:	6840      	ldr	r0, [r0, #4]
   119e0:	1a5b      	subs	r3, r3, r1
   119e2:	eb62 0200 	sbc.w	r2, r2, r0
		if ((dropped_pend || unordered_pend) &&
   119e6:	f240 31e9 	movw	r1, #1001	; 0x3e9
   119ea:	428b      	cmp	r3, r1
   119ec:	f172 0200 	sbcs.w	r2, r2, #0
   119f0:	d3cf      	bcc.n	11992 <z_impl_log_process+0x42>
				dropped_notify();
   119f2:	f7ff ff41 	bl	11878 <dropped_notify>
			if (unordered_pend) {
   119f6:	e7cc      	b.n	11992 <z_impl_log_process+0x42>
   119f8:	20008d34 	.word	0x20008d34
   119fc:	200088b0 	.word	0x200088b0
   11a00:	20008658 	.word	0x20008658

00011a04 <z_impl_log_panic>:
	if (panic_mode) {
   11a04:	4b0f      	ldr	r3, [pc, #60]	; (11a44 <z_impl_log_panic+0x40>)
   11a06:	781b      	ldrb	r3, [r3, #0]
   11a08:	b103      	cbz	r3, 11a0c <z_impl_log_panic+0x8>
   11a0a:	4770      	bx	lr
{
   11a0c:	b510      	push	{r4, lr}
	(void)z_log_init(true, false);
   11a0e:	2100      	movs	r1, #0
   11a10:	2001      	movs	r0, #1
   11a12:	f7ff fe53 	bl	116bc <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11a16:	4c0c      	ldr	r4, [pc, #48]	; (11a48 <z_impl_log_panic+0x44>)
   11a18:	e000      	b.n	11a1c <z_impl_log_panic+0x18>
   11a1a:	3410      	adds	r4, #16
   11a1c:	4b0b      	ldr	r3, [pc, #44]	; (11a4c <z_impl_log_panic+0x48>)
   11a1e:	429c      	cmp	r4, r3
   11a20:	d208      	bcs.n	11a34 <z_impl_log_panic+0x30>
	return backend->cb->active;
   11a22:	6863      	ldr	r3, [r4, #4]
   11a24:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   11a26:	2b00      	cmp	r3, #0
   11a28:	d0f7      	beq.n	11a1a <z_impl_log_panic+0x16>
	backend->api->panic(backend);
   11a2a:	6823      	ldr	r3, [r4, #0]
   11a2c:	689b      	ldr	r3, [r3, #8]
   11a2e:	4620      	mov	r0, r4
   11a30:	4798      	blx	r3
}
   11a32:	e7f2      	b.n	11a1a <z_impl_log_panic+0x16>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   11a34:	f7ff ff8c 	bl	11950 <z_impl_log_process>
		while (log_process() == true) {
   11a38:	2800      	cmp	r0, #0
   11a3a:	d1fb      	bne.n	11a34 <z_impl_log_panic+0x30>
	panic_mode = true;
   11a3c:	4b01      	ldr	r3, [pc, #4]	; (11a44 <z_impl_log_panic+0x40>)
   11a3e:	2201      	movs	r2, #1
   11a40:	701a      	strb	r2, [r3, #0]
}
   11a42:	bd10      	pop	{r4, pc}
   11a44:	20008d35 	.word	0x20008d35
   11a48:	0001aff0 	.word	0x0001aff0
   11a4c:	0001b000 	.word	0x0001b000

00011a50 <z_log_msg_post_finalize>:
{
   11a50:	b510      	push	{r4, lr}
   11a52:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11a54:	4b19      	ldr	r3, [pc, #100]	; (11abc <z_log_msg_post_finalize+0x6c>)
   11a56:	e8d3 2fef 	ldaex	r2, [r3]
   11a5a:	1c51      	adds	r1, r2, #1
   11a5c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   11a60:	2800      	cmp	r0, #0
   11a62:	d1f8      	bne.n	11a56 <z_log_msg_post_finalize+0x6>
	if (panic_mode) {
   11a64:	4b16      	ldr	r3, [pc, #88]	; (11ac0 <z_log_msg_post_finalize+0x70>)
   11a66:	781b      	ldrb	r3, [r3, #0]
   11a68:	b963      	cbnz	r3, 11a84 <z_log_msg_post_finalize+0x34>
	} else if (proc_tid != NULL) {
   11a6a:	4b16      	ldr	r3, [pc, #88]	; (11ac4 <z_log_msg_post_finalize+0x74>)
   11a6c:	681b      	ldr	r3, [r3, #0]
   11a6e:	b1bb      	cbz	r3, 11aa0 <z_log_msg_post_finalize+0x50>
		if (cnt == 0) {
   11a70:	b1c2      	cbz	r2, 11aa4 <z_log_msg_post_finalize+0x54>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   11a72:	2a0a      	cmp	r2, #10
   11a74:	d114      	bne.n	11aa0 <z_log_msg_post_finalize+0x50>
	z_impl_k_timer_stop(timer);
   11a76:	4814      	ldr	r0, [pc, #80]	; (11ac8 <z_log_msg_post_finalize+0x78>)
   11a78:	f009 f899 	bl	1abae <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   11a7c:	4813      	ldr	r0, [pc, #76]	; (11acc <z_log_msg_post_finalize+0x7c>)
   11a7e:	f005 fde5 	bl	1764c <z_impl_k_sem_give>
}
   11a82:	e00d      	b.n	11aa0 <z_log_msg_post_finalize+0x50>
   11a84:	f04f 0320 	mov.w	r3, #32
   11a88:	f3ef 8411 	mrs	r4, BASEPRI
   11a8c:	f383 8812 	msr	BASEPRI_MAX, r3
   11a90:	f3bf 8f6f 	isb	sy
   11a94:	f7ff ff5c 	bl	11950 <z_impl_log_process>
	__asm__ volatile(
   11a98:	f384 8811 	msr	BASEPRI, r4
   11a9c:	f3bf 8f6f 	isb	sy
   11aa0:	b002      	add	sp, #8
   11aa2:	bd10      	pop	{r4, pc}
	z_impl_k_timer_start(timer, duration, period);
   11aa4:	2200      	movs	r2, #0
   11aa6:	2300      	movs	r3, #0
   11aa8:	e9cd 2300 	strd	r2, r3, [sp]
   11aac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11ab0:	2300      	movs	r3, #0
   11ab2:	4805      	ldr	r0, [pc, #20]	; (11ac8 <z_log_msg_post_finalize+0x78>)
   11ab4:	f006 fc14 	bl	182e0 <z_impl_k_timer_start>
   11ab8:	e7f2      	b.n	11aa0 <z_log_msg_post_finalize+0x50>
   11aba:	bf00      	nop
   11abc:	200088b0 	.word	0x200088b0
   11ac0:	20008d35 	.word	0x20008d35
   11ac4:	200088a8 	.word	0x200088a8
   11ac8:	20008660 	.word	0x20008660
   11acc:	20008190 	.word	0x20008190

00011ad0 <z_log_msg_commit>:
{
   11ad0:	b510      	push	{r4, lr}
   11ad2:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   11ad4:	4b04      	ldr	r3, [pc, #16]	; (11ae8 <z_log_msg_commit+0x18>)
   11ad6:	681b      	ldr	r3, [r3, #0]
   11ad8:	4798      	blx	r3
   11ada:	60a0      	str	r0, [r4, #8]
	msg_commit(&log_buffer, msg);
   11adc:	4621      	mov	r1, r4
   11ade:	4803      	ldr	r0, [pc, #12]	; (11aec <z_log_msg_commit+0x1c>)
   11ae0:	f007 fc0b 	bl	192fa <msg_commit>
}
   11ae4:	bd10      	pop	{r4, pc}
   11ae6:	bf00      	nop
   11ae8:	20008004 	.word	0x20008004
   11aec:	20008140 	.word	0x20008140

00011af0 <log_process_thread_func>:
{
   11af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t activate_mask = z_log_init(false, false);
   11af4:	2100      	movs	r1, #0
   11af6:	4608      	mov	r0, r1
   11af8:	f7ff fde0 	bl	116bc <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   11afc:	4680      	mov	r8, r0
   11afe:	b140      	cbz	r0, 11b12 <log_process_thread_func+0x22>
   11b00:	f240 6667 	movw	r6, #1639	; 0x667
   11b04:	2700      	movs	r7, #0
	return z_impl_z_current_get();
   11b06:	f006 f9d1 	bl	17eac <z_impl_z_current_get>
	thread_set(k_current_get());
   11b0a:	f7ff fe1f 	bl	1174c <thread_set>
	bool processed_any = false;
   11b0e:	2500      	movs	r5, #0
   11b10:	e015      	b.n	11b3e <log_process_thread_func+0x4e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   11b12:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   11b16:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   11b1a:	e7f4      	b.n	11b06 <log_process_thread_func+0x16>
			activate_mask = activate_foreach_backend(activate_mask);
   11b1c:	4640      	mov	r0, r8
   11b1e:	f7ff fd9b 	bl	11658 <activate_foreach_backend>
			if (!activate_mask) {
   11b22:	4680      	mov	r8, r0
   11b24:	b970      	cbnz	r0, 11b44 <log_process_thread_func+0x54>
				timeout = K_FOREVER;
   11b26:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   11b2a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   11b2e:	e009      	b.n	11b44 <log_process_thread_func+0x54>
   11b30:	462c      	mov	r4, r5
	return z_impl_k_sem_take(sem, timeout);
   11b32:	4632      	mov	r2, r6
   11b34:	463b      	mov	r3, r7
   11b36:	4809      	ldr	r0, [pc, #36]	; (11b5c <log_process_thread_func+0x6c>)
   11b38:	f005 fdac 	bl	17694 <z_impl_k_sem_take>
{
   11b3c:	4625      	mov	r5, r4
		if (activate_mask) {
   11b3e:	f1b8 0f00 	cmp.w	r8, #0
   11b42:	d1eb      	bne.n	11b1c <log_process_thread_func+0x2c>
   11b44:	f7ff ff04 	bl	11950 <z_impl_log_process>
		if (log_process() == false) {
   11b48:	4604      	mov	r4, r0
   11b4a:	2800      	cmp	r0, #0
   11b4c:	d1f6      	bne.n	11b3c <log_process_thread_func+0x4c>
			if (processed_any) {
   11b4e:	2d00      	cmp	r5, #0
   11b50:	d0ee      	beq.n	11b30 <log_process_thread_func+0x40>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
   11b52:	2100      	movs	r1, #0
   11b54:	4608      	mov	r0, r1
   11b56:	f7ff fd67 	bl	11628 <log_backend_notify_all>
   11b5a:	e7ea      	b.n	11b32 <log_process_thread_func+0x42>
   11b5c:	20008190 	.word	0x20008190

00011b60 <log_src_cnt_get>:
	if (z_log_is_local_domain(domain_id)) {
		return log_const_source_id(__log_const_end);
	}

	return link_source_count(domain_id);
}
   11b60:	4802      	ldr	r0, [pc, #8]	; (11b6c <log_src_cnt_get+0xc>)
   11b62:	4b03      	ldr	r3, [pc, #12]	; (11b70 <log_src_cnt_get+0x10>)
   11b64:	1ac0      	subs	r0, r0, r3
   11b66:	08c0      	lsrs	r0, r0, #3
   11b68:	4770      	bx	lr
   11b6a:	bf00      	nop
   11b6c:	0001aff0 	.word	0x0001aff0
   11b70:	0001af70 	.word	0x0001af70

00011b74 <log_source_name_get>:

	return (const char *)cached;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
   11b74:	b510      	push	{r4, lr}
   11b76:	460c      	mov	r4, r1
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   11b78:	f7ff fff2 	bl	11b60 <log_src_cnt_get>
   11b7c:	42a0      	cmp	r0, r4
   11b7e:	d903      	bls.n	11b88 <log_source_name_get+0x14>
			return __log_const_start[source_id].name;
   11b80:	4b02      	ldr	r3, [pc, #8]	; (11b8c <log_source_name_get+0x18>)
   11b82:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			return NULL;
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   11b86:	bd10      	pop	{r4, pc}
			return NULL;
   11b88:	2000      	movs	r0, #0
   11b8a:	e7fc      	b.n	11b86 <log_source_name_get+0x12>
   11b8c:	0001af70 	.word	0x0001af70

00011b90 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   11b90:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   11b92:	4b09      	ldr	r3, [pc, #36]	; (11bb8 <log_backend_enable+0x28>)
   11b94:	1ac3      	subs	r3, r0, r3
   11b96:	111b      	asrs	r3, r3, #4
   11b98:	3301      	adds	r3, #1
	backend->cb->id = id;
   11b9a:	f8d0 c004 	ldr.w	ip, [r0, #4]
   11b9e:	f88c 3004 	strb.w	r3, [ip, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
   11ba2:	6843      	ldr	r3, [r0, #4]
   11ba4:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   11ba6:	6843      	ldr	r3, [r0, #4]
   11ba8:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   11baa:	6843      	ldr	r3, [r0, #4]
   11bac:	2201      	movs	r2, #1
   11bae:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   11bb0:	f7ff fe2e 	bl	11810 <z_log_notify_backend_enabled>
}
   11bb4:	bd08      	pop	{r3, pc}
   11bb6:	bf00      	nop
   11bb8:	0001aff0 	.word	0x0001aff0

00011bbc <cbprintf_package_copy>:
{
   11bbc:	b500      	push	{lr}
   11bbe:	b089      	sub	sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
   11bc0:	9205      	str	r2, [sp, #20]
   11bc2:	9306      	str	r3, [sp, #24]
   11bc4:	2300      	movs	r3, #0
   11bc6:	9307      	str	r3, [sp, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   11bc8:	b162      	cbz	r2, 11be4 <cbprintf_package_copy+0x28>
   11bca:	4a07      	ldr	r2, [pc, #28]	; (11be8 <cbprintf_package_copy+0x2c>)
   11bcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11bce:	9302      	str	r3, [sp, #8]
   11bd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11bd2:	9301      	str	r3, [sp, #4]
   11bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11bd6:	9300      	str	r3, [sp, #0]
   11bd8:	ab05      	add	r3, sp, #20
   11bda:	f7fe fd77 	bl	106cc <cbprintf_package_convert>
}
   11bde:	b009      	add	sp, #36	; 0x24
   11be0:	f85d fb04 	ldr.w	pc, [sp], #4
	return cbprintf_package_convert(in_packaged, in_len,
   11be4:	2200      	movs	r2, #0
   11be6:	e7f1      	b.n	11bcc <cbprintf_package_copy+0x10>
   11be8:	0001930b 	.word	0x0001930b

00011bec <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   11bec:	b40e      	push	{r1, r2, r3}
   11bee:	b500      	push	{lr}
   11bf0:	b084      	sub	sp, #16
   11bf2:	4601      	mov	r1, r0
   11bf4:	ab05      	add	r3, sp, #20
   11bf6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   11bfa:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   11bfc:	2000      	movs	r0, #0
   11bfe:	9000      	str	r0, [sp, #0]
   11c00:	4803      	ldr	r0, [pc, #12]	; (11c10 <print_formatted+0x24>)
   11c02:	f7ff f919 	bl	10e38 <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
   11c06:	b004      	add	sp, #16
   11c08:	f85d eb04 	ldr.w	lr, [sp], #4
   11c0c:	b003      	add	sp, #12
   11c0e:	4770      	bx	lr
   11c10:	000194a3 	.word	0x000194a3

00011c14 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
   11c14:	b530      	push	{r4, r5, lr}
   11c16:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
   11c18:	f011 0f44 	tst.w	r1, #68	; 0x44
   11c1c:	d005      	beq.n	11c2a <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
   11c1e:	4b1a      	ldr	r3, [pc, #104]	; (11c88 <timestamp_print+0x74>)
   11c20:	681c      	ldr	r4, [r3, #0]
   11c22:	b934      	cbnz	r4, 11c32 <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
   11c24:	2000      	movs	r0, #0
	}

	return length;
}
   11c26:	b005      	add	sp, #20
   11c28:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   11c2a:	4918      	ldr	r1, [pc, #96]	; (11c8c <timestamp_print+0x78>)
   11c2c:	f7ff ffde 	bl	11bec <print_formatted>
   11c30:	e7f9      	b.n	11c26 <timestamp_print+0x12>
		timestamp /= timestamp_div;
   11c32:	4b17      	ldr	r3, [pc, #92]	; (11c90 <timestamp_print+0x7c>)
   11c34:	6819      	ldr	r1, [r3, #0]
   11c36:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   11c3a:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
   11c3e:	4a15      	ldr	r2, [pc, #84]	; (11c94 <timestamp_print+0x80>)
   11c40:	fba2 320c 	umull	r3, r2, r2, ip
   11c44:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   11c46:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   11c4a:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
   11c4e:	4b12      	ldr	r3, [pc, #72]	; (11c98 <timestamp_print+0x84>)
   11c50:	fba3 530e 	umull	r5, r3, r3, lr
   11c54:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   11c56:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
   11c5a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   11c5e:	fb0c f101 	mul.w	r1, ip, r1
   11c62:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   11c66:	fb04 1115 	mls	r1, r4, r5, r1
   11c6a:	fb0c f101 	mul.w	r1, ip, r1
   11c6e:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
   11c72:	9102      	str	r1, [sp, #8]
   11c74:	9501      	str	r5, [sp, #4]
   11c76:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   11c7a:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
   11c7e:	9100      	str	r1, [sp, #0]
   11c80:	4906      	ldr	r1, [pc, #24]	; (11c9c <timestamp_print+0x88>)
   11c82:	f7ff ffb3 	bl	11bec <print_formatted>
   11c86:	e7ce      	b.n	11c26 <timestamp_print+0x12>
   11c88:	200088bc 	.word	0x200088bc
   11c8c:	0001b218 	.word	0x0001b218
   11c90:	200088b8 	.word	0x200088b8
   11c94:	91a2b3c5 	.word	0x91a2b3c5
   11c98:	88888889 	.word	0x88888889
   11c9c:	0001b224 	.word	0x0001b224

00011ca0 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   11ca0:	b161      	cbz	r1, 11cbc <color_print+0x1c>
{
   11ca2:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   11ca4:	b12a      	cbz	r2, 11cb2 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   11ca6:	4a06      	ldr	r2, [pc, #24]	; (11cc0 <color_print+0x20>)
   11ca8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   11cac:	b912      	cbnz	r2, 11cb4 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   11cae:	4a05      	ldr	r2, [pc, #20]	; (11cc4 <color_print+0x24>)
   11cb0:	e000      	b.n	11cb4 <color_print+0x14>
   11cb2:	4a04      	ldr	r2, [pc, #16]	; (11cc4 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   11cb4:	4904      	ldr	r1, [pc, #16]	; (11cc8 <color_print+0x28>)
   11cb6:	f7ff ff99 	bl	11bec <print_formatted>
	}
}
   11cba:	bd08      	pop	{r3, pc}
   11cbc:	4770      	bx	lr
   11cbe:	bf00      	nop
   11cc0:	0001b2c8 	.word	0x0001b2c8
   11cc4:	0001b240 	.word	0x0001b240
   11cc8:	0001b248 	.word	0x0001b248

00011ccc <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
   11ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11cd0:	4605      	mov	r5, r0
   11cd2:	4690      	mov	r8, r2
   11cd4:	461e      	mov	r6, r3
   11cd6:	9f06      	ldr	r7, [sp, #24]
	int total = 0;

	if (level_on) {
   11cd8:	b981      	cbnz	r1, 11cfc <ids_print+0x30>
	int total = 0;
   11cda:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
   11cdc:	b12e      	cbz	r6, 11cea <ids_print+0x1e>
		total += print_formatted(output, "%s/", domain);
   11cde:	4632      	mov	r2, r6
   11ce0:	4910      	ldr	r1, [pc, #64]	; (11d24 <ids_print+0x58>)
   11ce2:	4628      	mov	r0, r5
   11ce4:	f7ff ff82 	bl	11bec <print_formatted>
   11ce8:	4404      	add	r4, r0
	}

	if (source) {
   11cea:	b1b7      	cbz	r7, 11d1a <ids_print+0x4e>
		total += print_formatted(output,
   11cec:	f1b8 0f00 	cmp.w	r8, #0
   11cf0:	d00d      	beq.n	11d0e <ids_print+0x42>
				(func_on &&
   11cf2:	9b07      	ldr	r3, [sp, #28]
   11cf4:	2b04      	cmp	r3, #4
   11cf6:	d013      	beq.n	11d20 <ids_print+0x54>
		total += print_formatted(output,
   11cf8:	490b      	ldr	r1, [pc, #44]	; (11d28 <ids_print+0x5c>)
   11cfa:	e009      	b.n	11d10 <ids_print+0x44>
		total += print_formatted(output, "<%s> ", severity[level]);
   11cfc:	4b0b      	ldr	r3, [pc, #44]	; (11d2c <ids_print+0x60>)
   11cfe:	9a07      	ldr	r2, [sp, #28]
   11d00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   11d04:	490a      	ldr	r1, [pc, #40]	; (11d30 <ids_print+0x64>)
   11d06:	f7ff ff71 	bl	11bec <print_formatted>
   11d0a:	4604      	mov	r4, r0
   11d0c:	e7e6      	b.n	11cdc <ids_print+0x10>
		total += print_formatted(output,
   11d0e:	4906      	ldr	r1, [pc, #24]	; (11d28 <ids_print+0x5c>)
   11d10:	463a      	mov	r2, r7
   11d12:	4628      	mov	r0, r5
   11d14:	f7ff ff6a 	bl	11bec <print_formatted>
   11d18:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
   11d1a:	4620      	mov	r0, r4
   11d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   11d20:	4904      	ldr	r1, [pc, #16]	; (11d34 <ids_print+0x68>)
   11d22:	e7f5      	b.n	11d10 <ids_print+0x44>
   11d24:	0001b260 	.word	0x0001b260
   11d28:	0001b250 	.word	0x0001b250
   11d2c:	0001b2dc 	.word	0x0001b2dc
   11d30:	0001b258 	.word	0x0001b258
   11d34:	0001b24c 	.word	0x0001b24c

00011d38 <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
   11d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d3c:	b085      	sub	sp, #20
   11d3e:	4605      	mov	r5, r0
   11d40:	460c      	mov	r4, r1
   11d42:	4616      	mov	r6, r2
   11d44:	9303      	str	r3, [sp, #12]
   11d46:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   11d4a:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   11d4e:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   11d52:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   11d56:	f007 fad6 	bl	19306 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   11d5a:	b1d8      	cbz	r0, 11d94 <prefix_print+0x5c>
   11d5c:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
   11d5e:	4912      	ldr	r1, [pc, #72]	; (11da8 <prefix_print+0x70>)
   11d60:	4628      	mov	r0, r5
   11d62:	f7ff ff43 	bl	11bec <print_formatted>
   11d66:	4607      	mov	r7, r0
	}

	if (stamp) {
   11d68:	f1bb 0f00 	cmp.w	fp, #0
   11d6c:	d114      	bne.n	11d98 <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
   11d6e:	4642      	mov	r2, r8
   11d70:	4651      	mov	r1, sl
   11d72:	4628      	mov	r0, r5
   11d74:	f007 fb55 	bl	19422 <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
   11d78:	f8cd 8004 	str.w	r8, [sp, #4]
   11d7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11d7e:	9300      	str	r3, [sp, #0]
   11d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11d82:	4632      	mov	r2, r6
   11d84:	4649      	mov	r1, r9
   11d86:	4628      	mov	r0, r5
   11d88:	f7ff ffa0 	bl	11ccc <ids_print>

	return length;
}
   11d8c:	4438      	add	r0, r7
   11d8e:	b005      	add	sp, #20
   11d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   11d94:	2700      	movs	r7, #0
   11d96:	e7e7      	b.n	11d68 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
   11d98:	9a03      	ldr	r2, [sp, #12]
   11d9a:	4621      	mov	r1, r4
   11d9c:	4628      	mov	r0, r5
   11d9e:	f7ff ff39 	bl	11c14 <timestamp_print>
   11da2:	4407      	add	r7, r0
   11da4:	e7e3      	b.n	11d6e <prefix_print+0x36>
   11da6:	bf00      	nop
   11da8:	0001b264 	.word	0x0001b264

00011dac <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   11dac:	f011 0f10 	tst.w	r1, #16
   11db0:	d10b      	bne.n	11dca <newline_print+0x1e>
{
   11db2:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   11db4:	f011 0f20 	tst.w	r1, #32
   11db8:	d003      	beq.n	11dc2 <newline_print+0x16>
		print_formatted(ctx, "\n");
   11dba:	4904      	ldr	r1, [pc, #16]	; (11dcc <newline_print+0x20>)
   11dbc:	f7ff ff16 	bl	11bec <print_formatted>
}
   11dc0:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   11dc2:	4903      	ldr	r1, [pc, #12]	; (11dd0 <newline_print+0x24>)
   11dc4:	f7ff ff12 	bl	11bec <print_formatted>
   11dc8:	e7fa      	b.n	11dc0 <newline_print+0x14>
   11dca:	4770      	bx	lr
   11dcc:	0001bea8 	.word	0x0001bea8
   11dd0:	0001b268 	.word	0x0001b268

00011dd4 <hexdump_line_print>:
{
   11dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11dd8:	4605      	mov	r5, r0
   11dda:	460f      	mov	r7, r1
   11ddc:	4616      	mov	r6, r2
   11dde:	4698      	mov	r8, r3
	newline_print(output, flags);
   11de0:	9906      	ldr	r1, [sp, #24]
   11de2:	f7ff ffe3 	bl	11dac <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   11de6:	2400      	movs	r4, #0
   11de8:	4544      	cmp	r4, r8
   11dea:	da05      	bge.n	11df8 <hexdump_line_print+0x24>
		print_formatted(output, " ");
   11dec:	4923      	ldr	r1, [pc, #140]	; (11e7c <hexdump_line_print+0xa8>)
   11dee:	4628      	mov	r0, r5
   11df0:	f7ff fefc 	bl	11bec <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   11df4:	3401      	adds	r4, #1
   11df6:	e7f7      	b.n	11de8 <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11df8:	2400      	movs	r4, #0
   11dfa:	e009      	b.n	11e10 <hexdump_line_print+0x3c>
			print_formatted(output, " ");
   11dfc:	491f      	ldr	r1, [pc, #124]	; (11e7c <hexdump_line_print+0xa8>)
   11dfe:	4628      	mov	r0, r5
   11e00:	f7ff fef4 	bl	11bec <print_formatted>
   11e04:	e00b      	b.n	11e1e <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
   11e06:	491e      	ldr	r1, [pc, #120]	; (11e80 <hexdump_line_print+0xac>)
   11e08:	4628      	mov	r0, r5
   11e0a:	f7ff feef 	bl	11bec <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11e0e:	3401      	adds	r4, #1
   11e10:	2c0f      	cmp	r4, #15
   11e12:	dc0c      	bgt.n	11e2e <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   11e14:	2c00      	cmp	r4, #0
   11e16:	dd02      	ble.n	11e1e <hexdump_line_print+0x4a>
   11e18:	f014 0f07 	tst.w	r4, #7
   11e1c:	d0ee      	beq.n	11dfc <hexdump_line_print+0x28>
		if (i < length) {
   11e1e:	42b4      	cmp	r4, r6
   11e20:	d2f1      	bcs.n	11e06 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   11e22:	5d3a      	ldrb	r2, [r7, r4]
   11e24:	4917      	ldr	r1, [pc, #92]	; (11e84 <hexdump_line_print+0xb0>)
   11e26:	4628      	mov	r0, r5
   11e28:	f7ff fee0 	bl	11bec <print_formatted>
   11e2c:	e7ef      	b.n	11e0e <hexdump_line_print+0x3a>
	print_formatted(output, "|");
   11e2e:	4916      	ldr	r1, [pc, #88]	; (11e88 <hexdump_line_print+0xb4>)
   11e30:	4628      	mov	r0, r5
   11e32:	f7ff fedb 	bl	11bec <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11e36:	2400      	movs	r4, #0
   11e38:	e009      	b.n	11e4e <hexdump_line_print+0x7a>
			print_formatted(output, " ");
   11e3a:	4910      	ldr	r1, [pc, #64]	; (11e7c <hexdump_line_print+0xa8>)
   11e3c:	4628      	mov	r0, r5
   11e3e:	f7ff fed5 	bl	11bec <print_formatted>
   11e42:	e00b      	b.n	11e5c <hexdump_line_print+0x88>
			print_formatted(output, "%c",
   11e44:	4911      	ldr	r1, [pc, #68]	; (11e8c <hexdump_line_print+0xb8>)
   11e46:	4628      	mov	r0, r5
   11e48:	f7ff fed0 	bl	11bec <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11e4c:	3401      	adds	r4, #1
   11e4e:	2c0f      	cmp	r4, #15
   11e50:	dc12      	bgt.n	11e78 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
   11e52:	2c00      	cmp	r4, #0
   11e54:	dd02      	ble.n	11e5c <hexdump_line_print+0x88>
   11e56:	f014 0f07 	tst.w	r4, #7
   11e5a:	d0ee      	beq.n	11e3a <hexdump_line_print+0x66>
		if (i < length) {
   11e5c:	42b4      	cmp	r4, r6
   11e5e:	d206      	bcs.n	11e6e <hexdump_line_print+0x9a>
			unsigned char c = (unsigned char)data[i];
   11e60:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
   11e62:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
   11e66:	2b5e      	cmp	r3, #94	; 0x5e
   11e68:	d9ec      	bls.n	11e44 <hexdump_line_print+0x70>
   11e6a:	222e      	movs	r2, #46	; 0x2e
   11e6c:	e7ea      	b.n	11e44 <hexdump_line_print+0x70>
			print_formatted(output, " ");
   11e6e:	4903      	ldr	r1, [pc, #12]	; (11e7c <hexdump_line_print+0xa8>)
   11e70:	4628      	mov	r0, r5
   11e72:	f7ff febb 	bl	11bec <print_formatted>
   11e76:	e7e9      	b.n	11e4c <hexdump_line_print+0x78>
}
   11e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11e7c:	0001b25c 	.word	0x0001b25c
   11e80:	0001b274 	.word	0x0001b274
   11e84:	0001b26c 	.word	0x0001b26c
   11e88:	0001b278 	.word	0x0001b278
   11e8c:	0001b27c 	.word	0x0001b27c

00011e90 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   11e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e94:	b084      	sub	sp, #16
   11e96:	4604      	mov	r4, r0
   11e98:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   11e9c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   11e9e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   11ea0:	b995      	cbnz	r5, 11ec8 <log_output_process+0x38>
		prefix_offset = 0;
		/* source set to 1 indicates raw string and contrary to printk
		 * case it should not append anything to the output (printk is
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   11ea2:	2b01      	cmp	r3, #1
   11ea4:	d01b      	beq.n	11ede <log_output_process+0x4e>
   11ea6:	4817      	ldr	r0, [pc, #92]	; (11f04 <log_output_process+0x74>)
		prefix_offset = 0;
   11ea8:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
   11eac:	b127      	cbz	r7, 11eb8 <log_output_process+0x28>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   11eae:	463b      	mov	r3, r7
   11eb0:	4622      	mov	r2, r4
   11eb2:	4915      	ldr	r1, [pc, #84]	; (11f08 <log_output_process+0x78>)
   11eb4:	f006 faae 	bl	18414 <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   11eb8:	b9ae      	cbnz	r6, 11ee6 <log_output_process+0x56>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   11eba:	b9ed      	cbnz	r5, 11ef8 <log_output_process+0x68>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   11ebc:	4620      	mov	r0, r4
   11ebe:	f007 fae3 	bl	19488 <log_output_flush>
}
   11ec2:	b004      	add	sp, #16
   11ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
   11ec8:	9502      	str	r5, [sp, #8]
   11eca:	9301      	str	r3, [sp, #4]
   11ecc:	9200      	str	r2, [sp, #0]
   11ece:	460b      	mov	r3, r1
   11ed0:	2200      	movs	r2, #0
   11ed2:	990e      	ldr	r1, [sp, #56]	; 0x38
   11ed4:	f7ff ff30 	bl	11d38 <prefix_print>
   11ed8:	4680      	mov	r8, r0
		cb = out_func;
   11eda:	480c      	ldr	r0, [pc, #48]	; (11f0c <log_output_process+0x7c>)
   11edc:	e7e6      	b.n	11eac <log_output_process+0x1c>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   11ede:	480b      	ldr	r0, [pc, #44]	; (11f0c <log_output_process+0x7c>)
		prefix_offset = 0;
   11ee0:	f04f 0800 	mov.w	r8, #0
   11ee4:	e7e2      	b.n	11eac <log_output_process+0x1c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
   11ee6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11ee8:	9300      	str	r3, [sp, #0]
   11eea:	4643      	mov	r3, r8
   11eec:	4632      	mov	r2, r6
   11eee:	990c      	ldr	r1, [sp, #48]	; 0x30
   11ef0:	4620      	mov	r0, r4
   11ef2:	f007 faae 	bl	19452 <log_msg_hexdump>
   11ef6:	e7e0      	b.n	11eba <log_output_process+0x2a>
		postfix_print(output, flags, level);
   11ef8:	462a      	mov	r2, r5
   11efa:	990e      	ldr	r1, [sp, #56]	; 0x38
   11efc:	4620      	mov	r0, r4
   11efe:	f007 fa9c 	bl	1943a <postfix_print>
   11f02:	e7db      	b.n	11ebc <log_output_process+0x2c>
   11f04:	000194d3 	.word	0x000194d3
   11f08:	00019413 	.word	0x00019413
   11f0c:	000194a3 	.word	0x000194a3

00011f10 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   11f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f14:	b086      	sub	sp, #24
   11f16:	4605      	mov	r5, r0
   11f18:	460c      	mov	r4, r1
   11f1a:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   11f1c:	f8d1 8008 	ldr.w	r8, [r1, #8]
	return msg->hdr.desc.level;
   11f20:	880e      	ldrh	r6, [r1, #0]
   11f22:	f3c6 1682 	ubfx	r6, r6, #6, #3
	return msg->hdr.desc.domain;
   11f26:	7808      	ldrb	r0, [r1, #0]
   11f28:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	return msg->hdr.source;
   11f2c:	684b      	ldr	r3, [r1, #4]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   11f2e:	b133      	cbz	r3, 11f3e <log_output_msg_process+0x2e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   11f30:	4a11      	ldr	r2, [pc, #68]	; (11f78 <log_output_msg_process+0x68>)
   11f32:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   11f34:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   11f38:	2900      	cmp	r1, #0
   11f3a:	da18      	bge.n	11f6e <log_output_msg_process+0x5e>
   11f3c:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   11f3e:	4622      	mov	r2, r4
   11f40:	f852 1b10 	ldr.w	r1, [r2], #16
   11f44:	f3c1 2149 	ubfx	r1, r1, #9, #10
	*len = msg->hdr.desc.data_len;
   11f48:	8860      	ldrh	r0, [r4, #2]
   11f4a:	f3c0 00cb 	ubfx	r0, r0, #3, #12
	return msg->data + msg->hdr.desc.package_len;
   11f4e:	1854      	adds	r4, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   11f50:	b901      	cbnz	r1, 11f54 <log_output_msg_process+0x44>
   11f52:	2200      	movs	r2, #0
   11f54:	9704      	str	r7, [sp, #16]
   11f56:	9003      	str	r0, [sp, #12]
   11f58:	9402      	str	r4, [sp, #8]
   11f5a:	9201      	str	r2, [sp, #4]
   11f5c:	9600      	str	r6, [sp, #0]
   11f5e:	2200      	movs	r2, #0
   11f60:	4641      	mov	r1, r8
   11f62:	4628      	mov	r0, r5
   11f64:	f7ff ff94 	bl	11e90 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   11f68:	b006      	add	sp, #24
   11f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   11f6e:	f7ff fe01 	bl	11b74 <log_source_name_get>
   11f72:	4603      	mov	r3, r0
   11f74:	e7e3      	b.n	11f3e <log_output_msg_process+0x2e>
   11f76:	bf00      	nop
   11f78:	0001af70 	.word	0x0001af70

00011f7c <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   11f7c:	b570      	push	{r4, r5, r6, lr}
   11f7e:	b082      	sub	sp, #8
   11f80:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   11f82:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   11f84:	f242 730f 	movw	r3, #9999	; 0x270f
   11f88:	428b      	cmp	r3, r1
   11f8a:	bf28      	it	cs
   11f8c:	460b      	movcs	r3, r1
   11f8e:	4a0e      	ldr	r2, [pc, #56]	; (11fc8 <log_output_dropped_process+0x4c>)
   11f90:	2105      	movs	r1, #5
   11f92:	4668      	mov	r0, sp
   11f94:	f006 fabd 	bl	18512 <snprintk>
   11f98:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   11f9a:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   11f9c:	685b      	ldr	r3, [r3, #4]
   11f9e:	220b      	movs	r2, #11
   11fa0:	490a      	ldr	r1, [pc, #40]	; (11fcc <log_output_dropped_process+0x50>)
   11fa2:	4628      	mov	r0, r5
   11fa4:	f007 fa28 	bl	193f8 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   11fa8:	6863      	ldr	r3, [r4, #4]
   11faa:	685b      	ldr	r3, [r3, #4]
   11fac:	4632      	mov	r2, r6
   11fae:	4669      	mov	r1, sp
   11fb0:	4628      	mov	r0, r5
   11fb2:	f007 fa21 	bl	193f8 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   11fb6:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   11fb8:	685b      	ldr	r3, [r3, #4]
   11fba:	221b      	movs	r2, #27
   11fbc:	4904      	ldr	r1, [pc, #16]	; (11fd0 <log_output_dropped_process+0x54>)
   11fbe:	4628      	mov	r0, r5
   11fc0:	f007 fa1a 	bl	193f8 <buffer_write>
}
   11fc4:	b002      	add	sp, #8
   11fc6:	bd70      	pop	{r4, r5, r6, pc}
   11fc8:	0001b184 	.word	0x0001b184
   11fcc:	0001b29c 	.word	0x0001b29c
   11fd0:	0001b280 	.word	0x0001b280

00011fd4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   11fd4:	4b07      	ldr	r3, [pc, #28]	; (11ff4 <log_output_timestamp_freq_set+0x20>)
   11fd6:	2201      	movs	r2, #1
   11fd8:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   11fda:	e004      	b.n	11fe6 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
   11fdc:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   11fde:	4a05      	ldr	r2, [pc, #20]	; (11ff4 <log_output_timestamp_freq_set+0x20>)
   11fe0:	6813      	ldr	r3, [r2, #0]
   11fe2:	005b      	lsls	r3, r3, #1
   11fe4:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   11fe6:	4b04      	ldr	r3, [pc, #16]	; (11ff8 <log_output_timestamp_freq_set+0x24>)
   11fe8:	4298      	cmp	r0, r3
   11fea:	d8f7      	bhi.n	11fdc <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
   11fec:	4b03      	ldr	r3, [pc, #12]	; (11ffc <log_output_timestamp_freq_set+0x28>)
   11fee:	6018      	str	r0, [r3, #0]
}
   11ff0:	4770      	bx	lr
   11ff2:	bf00      	nop
   11ff4:	200088b8 	.word	0x200088b8
   11ff8:	000f4240 	.word	0x000f4240
   11ffc:	200088bc 	.word	0x200088bc

00012000 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   12000:	b570      	push	{r4, r5, r6, lr}
   12002:	4606      	mov	r6, r0
   12004:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
   12006:	2400      	movs	r4, #0
   12008:	e005      	b.n	12016 <char_out+0x16>
			uart_poll_out(uart_dev, data[i]);
   1200a:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
   1200c:	4804      	ldr	r0, [pc, #16]	; (12020 <char_out+0x20>)
   1200e:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   12010:	685b      	ldr	r3, [r3, #4]
   12012:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   12014:	3401      	adds	r4, #1
   12016:	42ac      	cmp	r4, r5
   12018:	d3f7      	bcc.n	1200a <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   1201a:	4628      	mov	r0, r5
   1201c:	bd70      	pop	{r4, r5, r6, pc}
   1201e:	bf00      	nop
   12020:	0001acb0 	.word	0x0001acb0

00012024 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   12024:	4b01      	ldr	r3, [pc, #4]	; (1202c <format_set+0x8>)
   12026:	6019      	str	r1, [r3, #0]
	return 0;
}
   12028:	2000      	movs	r0, #0
   1202a:	4770      	bx	lr
   1202c:	200088d8 	.word	0x200088d8

00012030 <panic>:
		}
	}
}

static void panic(struct log_backend const *const backend)
{
   12030:	b508      	push	{r3, lr}
	in_panic = true;
   12032:	4b03      	ldr	r3, [pc, #12]	; (12040 <panic+0x10>)
   12034:	2201      	movs	r2, #1
   12036:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   12038:	4802      	ldr	r0, [pc, #8]	; (12044 <panic+0x14>)
   1203a:	f007 fa25 	bl	19488 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
   1203e:	bd08      	pop	{r3, pc}
   12040:	20008d36 	.word	0x20008d36
   12044:	0001b32c 	.word	0x0001b32c

00012048 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
   12048:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   1204a:	4802      	ldr	r0, [pc, #8]	; (12054 <dropped+0xc>)
   1204c:	f7ff ff96 	bl	11f7c <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
   12050:	bd08      	pop	{r3, pc}
   12052:	bf00      	nop
   12054:	0001b32c 	.word	0x0001b32c

00012058 <process>:
{
   12058:	b510      	push	{r4, lr}
   1205a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1205c:	4b04      	ldr	r3, [pc, #16]	; (12070 <process+0x18>)
   1205e:	6818      	ldr	r0, [r3, #0]
   12060:	f7ff fbbe 	bl	117e0 <log_format_func_t_get>
   12064:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
   12066:	220f      	movs	r2, #15
   12068:	4621      	mov	r1, r4
   1206a:	4802      	ldr	r0, [pc, #8]	; (12074 <process+0x1c>)
   1206c:	4798      	blx	r3
}
   1206e:	bd10      	pop	{r4, pc}
   12070:	200088d8 	.word	0x200088d8
   12074:	0001b32c 	.word	0x0001b32c

00012078 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   12078:	b570      	push	{r4, r5, r6, lr}
   1207a:	4605      	mov	r5, r0
	__asm__ volatile(
   1207c:	f04f 0320 	mov.w	r3, #32
   12080:	f3ef 8611 	mrs	r6, BASEPRI
   12084:	f383 8812 	msr	BASEPRI_MAX, r3
   12088:	f3bf 8f6f 	isb	sy
   1208c:	4b0e      	ldr	r3, [pc, #56]	; (120c8 <pm_state_notify+0x50>)
   1208e:	681c      	ldr	r4, [r3, #0]
   12090:	e00d      	b.n	120ae <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
   12092:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
   12094:	b13a      	cbz	r2, 120a6 <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   12096:	4b0d      	ldr	r3, [pc, #52]	; (120cc <pm_state_notify+0x54>)
   12098:	7d1b      	ldrb	r3, [r3, #20]
   1209a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1209e:	490c      	ldr	r1, [pc, #48]	; (120d0 <pm_state_notify+0x58>)
   120a0:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   120a4:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   120a6:	4623      	mov	r3, r4
	return node->next;
   120a8:	6824      	ldr	r4, [r4, #0]
   120aa:	b104      	cbz	r4, 120ae <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   120ac:	b123      	cbz	r3, 120b8 <pm_state_notify+0x40>
   120ae:	b12c      	cbz	r4, 120bc <pm_state_notify+0x44>
		if (entering_state) {
   120b0:	2d00      	cmp	r5, #0
   120b2:	d0ee      	beq.n	12092 <pm_state_notify+0x1a>
			callback = notifier->state_entry;
   120b4:	6862      	ldr	r2, [r4, #4]
   120b6:	e7ed      	b.n	12094 <pm_state_notify+0x1c>
   120b8:	461c      	mov	r4, r3
   120ba:	e7f8      	b.n	120ae <pm_state_notify+0x36>
	__asm__ volatile(
   120bc:	f386 8811 	msr	BASEPRI, r6
   120c0:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   120c4:	bd70      	pop	{r4, r5, r6, pc}
   120c6:	bf00      	nop
   120c8:	200088f4 	.word	0x200088f4
   120cc:	20008cf8 	.word	0x20008cf8
   120d0:	200088e8 	.word	0x200088e8

000120d4 <pm_exit_pos_ops>:
{
   120d4:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
   120d6:	4b06      	ldr	r3, [pc, #24]	; (120f0 <pm_exit_pos_ops+0x1c>)
   120d8:	b123      	cbz	r3, 120e4 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
   120da:	7841      	ldrb	r1, [r0, #1]
   120dc:	7800      	ldrb	r0, [r0, #0]
   120de:	f007 f88c 	bl	191fa <pm_state_exit_post_ops>
}
   120e2:	bd08      	pop	{r3, pc}
   120e4:	2300      	movs	r3, #0
   120e6:	f383 8811 	msr	BASEPRI, r3
   120ea:	f3bf 8f6f 	isb	sy
   120ee:	e7f8      	b.n	120e2 <pm_exit_pos_ops+0xe>
   120f0:	000191fb 	.word	0x000191fb

000120f4 <pm_system_resume>:

void pm_system_resume(void)
{
   120f4:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   120f6:	4b0e      	ldr	r3, [pc, #56]	; (12130 <pm_system_resume+0x3c>)
   120f8:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   120fa:	4621      	mov	r1, r4
   120fc:	480d      	ldr	r0, [pc, #52]	; (12134 <pm_system_resume+0x40>)
   120fe:	f007 f9f8 	bl	194f2 <atomic_test_and_clear_bit>
   12102:	b900      	cbnz	r0, 12106 <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
   12104:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
   12106:	0065      	lsls	r5, r4, #1
   12108:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1210c:	4e0a      	ldr	r6, [pc, #40]	; (12138 <pm_system_resume+0x44>)
   1210e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   12112:	f7ff ffdf 	bl	120d4 <pm_exit_pos_ops>
		pm_state_notify(false);
   12116:	2000      	movs	r0, #0
   12118:	f7ff ffae 	bl	12078 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1211c:	192b      	adds	r3, r5, r4
   1211e:	0099      	lsls	r1, r3, #2
   12120:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12124:	2200      	movs	r2, #0
   12126:	5072      	str	r2, [r6, r1]
   12128:	605a      	str	r2, [r3, #4]
   1212a:	609a      	str	r2, [r3, #8]
}
   1212c:	e7ea      	b.n	12104 <pm_system_resume+0x10>
   1212e:	bf00      	nop
   12130:	20008cf8 	.word	0x20008cf8
   12134:	200088fc 	.word	0x200088fc
   12138:	200088e8 	.word	0x200088e8

0001213c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   1213c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1213e:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
   12140:	4b38      	ldr	r3, [pc, #224]	; (12224 <pm_system_suspend+0xe8>)
   12142:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
   12144:	f04f 0320 	mov.w	r3, #32
   12148:	f3ef 8611 	mrs	r6, BASEPRI
   1214c:	f383 8812 	msr	BASEPRI_MAX, r3
   12150:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   12154:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   12158:	4b33      	ldr	r3, [pc, #204]	; (12228 <pm_system_suspend+0xec>)
   1215a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1215e:	2b00      	cmp	r3, #0
   12160:	d039      	beq.n	121d6 <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   12162:	4b32      	ldr	r3, [pc, #200]	; (1222c <pm_system_suspend+0xf0>)
   12164:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   12168:	4f2f      	ldr	r7, [pc, #188]	; (12228 <pm_system_suspend+0xec>)
   1216a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   1216e:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   12172:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12176:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   1217a:	2300      	movs	r3, #0
   1217c:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
   12180:	f386 8811 	msr	BASEPRI, r6
   12184:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   12188:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1218c:	4a27      	ldr	r2, [pc, #156]	; (1222c <pm_system_suspend+0xf0>)
   1218e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   12192:	2b00      	cmp	r3, #0
   12194:	d044      	beq.n	12220 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   12196:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1219a:	d12b      	bne.n	121f4 <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1219c:	f005 fb34 	bl	17808 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   121a0:	2001      	movs	r0, #1
   121a2:	f7ff ff69 	bl	12078 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
   121a6:	4621      	mov	r1, r4
   121a8:	4821      	ldr	r0, [pc, #132]	; (12230 <pm_system_suspend+0xf4>)
   121aa:	f007 f9ba 	bl	19522 <atomic_set_bit>
	if (pm_state_set != NULL) {
   121ae:	4b21      	ldr	r3, [pc, #132]	; (12234 <pm_system_suspend+0xf8>)
   121b0:	b15b      	cbz	r3, 121ca <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
   121b2:	4a1e      	ldr	r2, [pc, #120]	; (1222c <pm_system_suspend+0xf0>)
   121b4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   121b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   121bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   121c0:	7859      	ldrb	r1, [r3, #1]
   121c2:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
   121c6:	f007 f810 	bl	191ea <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   121ca:	f7ff ff93 	bl	120f4 <pm_system_resume>
	k_sched_unlock();
   121ce:	f005 fd1d 	bl	17c0c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   121d2:	2001      	movs	r0, #1
}
   121d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
   121d6:	4601      	mov	r1, r0
   121d8:	4620      	mov	r0, r4
   121da:	f000 f831 	bl	12240 <pm_policy_next_state>
		if (info != NULL) {
   121de:	2800      	cmp	r0, #0
   121e0:	d0ce      	beq.n	12180 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
   121e2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   121e6:	4b11      	ldr	r3, [pc, #68]	; (1222c <pm_system_suspend+0xf0>)
   121e8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   121ec:	c807      	ldmia	r0, {r0, r1, r2}
   121ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   121f2:	e7c5      	b.n	12180 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
   121f4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   121f8:	4b0c      	ldr	r3, [pc, #48]	; (1222c <pm_system_suspend+0xf0>)
   121fa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   121fe:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
   12200:	0c41      	lsrs	r1, r0, #17
   12202:	03c0      	lsls	r0, r0, #15
   12204:	4b0c      	ldr	r3, [pc, #48]	; (12238 <pm_system_suspend+0xfc>)
   12206:	18c0      	adds	r0, r0, r3
   12208:	4a0c      	ldr	r2, [pc, #48]	; (1223c <pm_system_suspend+0x100>)
   1220a:	f04f 0300 	mov.w	r3, #0
   1220e:	f141 0100 	adc.w	r1, r1, #0
   12212:	f7fd ff9f 	bl	10154 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   12216:	2101      	movs	r1, #1
   12218:	1a28      	subs	r0, r5, r0
   1221a:	f008 fc77 	bl	1ab0c <z_set_timeout_expiry>
   1221e:	e7bd      	b.n	1219c <pm_system_suspend+0x60>
		return false;
   12220:	2000      	movs	r0, #0
   12222:	e7d7      	b.n	121d4 <pm_system_suspend+0x98>
   12224:	20008cf8 	.word	0x20008cf8
   12228:	200088dc 	.word	0x200088dc
   1222c:	200088e8 	.word	0x200088e8
   12230:	200088fc 	.word	0x200088fc
   12234:	000191eb 	.word	0x000191eb
   12238:	000f423f 	.word	0x000f423f
   1223c:	000f4240 	.word	0x000f4240

00012240 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   12240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12244:	b082      	sub	sp, #8
   12246:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   12248:	a901      	add	r1, sp, #4
   1224a:	f000 f845 	bl	122d8 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1224e:	1e44      	subs	r4, r0, #1
   12250:	b224      	sxth	r4, r4
   12252:	e007      	b.n	12264 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
   12254:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   12258:	d033      	beq.n	122c2 <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
   1225a:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
   1225c:	45b0      	cmp	r8, r6
   1225e:	d930      	bls.n	122c2 <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   12260:	3c01      	subs	r4, #1
   12262:	b224      	sxth	r4, r4
   12264:	2c00      	cmp	r4, #0
   12266:	db2b      	blt.n	122c0 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
   12268:	9b01      	ldr	r3, [sp, #4]
   1226a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1226e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
   12272:	7869      	ldrb	r1, [r5, #1]
   12274:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
   12278:	f007 f962 	bl	19540 <pm_policy_state_lock_is_active>
   1227c:	2800      	cmp	r0, #0
   1227e:	d1ef      	bne.n	12260 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
   12280:	6868      	ldr	r0, [r5, #4]
   12282:	0c41      	lsrs	r1, r0, #17
   12284:	03c0      	lsls	r0, r0, #15
   12286:	4f11      	ldr	r7, [pc, #68]	; (122cc <pm_policy_next_state+0x8c>)
   12288:	19c0      	adds	r0, r0, r7
   1228a:	4a11      	ldr	r2, [pc, #68]	; (122d0 <pm_policy_next_state+0x90>)
   1228c:	f04f 0300 	mov.w	r3, #0
   12290:	f141 0100 	adc.w	r1, r1, #0
   12294:	f7fd ff5e 	bl	10154 <__aeabi_uldivmod>
   12298:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
   1229a:	68ab      	ldr	r3, [r5, #8]
   1229c:	0c59      	lsrs	r1, r3, #17
   1229e:	03db      	lsls	r3, r3, #15
   122a0:	19d8      	adds	r0, r3, r7
   122a2:	4a0b      	ldr	r2, [pc, #44]	; (122d0 <pm_policy_next_state+0x90>)
   122a4:	f04f 0300 	mov.w	r3, #0
   122a8:	f141 0100 	adc.w	r1, r1, #0
   122ac:	f7fd ff52 	bl	10154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   122b0:	4b08      	ldr	r3, [pc, #32]	; (122d4 <pm_policy_next_state+0x94>)
   122b2:	681b      	ldr	r3, [r3, #0]
   122b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   122b8:	d0cc      	beq.n	12254 <pm_policy_next_state+0x14>
   122ba:	4283      	cmp	r3, r0
   122bc:	d8ca      	bhi.n	12254 <pm_policy_next_state+0x14>
   122be:	e7cf      	b.n	12260 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
   122c0:	2500      	movs	r5, #0
}
   122c2:	4628      	mov	r0, r5
   122c4:	b002      	add	sp, #8
   122c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   122ca:	bf00      	nop
   122cc:	000f423f 	.word	0x000f423f
   122d0:	000f4240 	.word	0x000f4240
   122d4:	20008008 	.word	0x20008008

000122d8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   122d8:	b908      	cbnz	r0, 122de <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   122da:	4b02      	ldr	r3, [pc, #8]	; (122e4 <pm_state_cpu_get_all+0xc>)
   122dc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   122de:	2000      	movs	r0, #0
   122e0:	4770      	bx	lr
   122e2:	bf00      	nop
   122e4:	0001b340 	.word	0x0001b340

000122e8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   122e8:	4901      	ldr	r1, [pc, #4]	; (122f0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   122ea:	2210      	movs	r2, #16
	str	r2, [r1]
   122ec:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   122ee:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   122f0:	e000ed10 	.word	0xe000ed10

000122f4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   122f4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   122f6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   122f8:	f380 8811 	msr	BASEPRI, r0
	isb
   122fc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   12300:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   12304:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   12306:	b662      	cpsie	i
	isb
   12308:	f3bf 8f6f 	isb	sy

	bx	lr
   1230c:	4770      	bx	lr
   1230e:	bf00      	nop

00012310 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12310:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12312:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12314:	f381 8811 	msr	BASEPRI, r1

	wfe
   12318:	bf20      	wfe

	msr	BASEPRI, r0
   1231a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1231e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12320:	4770      	bx	lr
   12322:	bf00      	nop

00012324 <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   12324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12328:	b082      	sub	sp, #8
   1232a:	af00      	add	r7, sp, #0
   1232c:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1232e:	f8d0 e000 	ldr.w	lr, [r0]
   12332:	f8d0 c004 	ldr.w	ip, [r0, #4]
   12336:	6886      	ldr	r6, [r0, #8]
   12338:	466d      	mov	r5, sp
   1233a:	b08a      	sub	sp, #40	; 0x28
   1233c:	466b      	mov	r3, sp
   1233e:	f113 0210 	adds.w	r2, r3, #16
   12342:	f000 80f3 	beq.w	1252c <esf_dump+0x208>
   12346:	2114      	movs	r1, #20
   12348:	b18a      	cbz	r2, 1236e <esf_dump+0x4a>
   1234a:	4608      	mov	r0, r1
   1234c:	2904      	cmp	r1, #4
   1234e:	dd03      	ble.n	12358 <esf_dump+0x34>
   12350:	f8df 8208 	ldr.w	r8, [pc, #520]	; 1255c <esf_dump+0x238>
   12354:	f8c3 8014 	str.w	r8, [r3, #20]
   12358:	2808      	cmp	r0, #8
   1235a:	dd01      	ble.n	12360 <esf_dump+0x3c>
   1235c:	f8c3 e018 	str.w	lr, [r3, #24]
   12360:	280c      	cmp	r0, #12
   12362:	dd01      	ble.n	12368 <esf_dump+0x44>
   12364:	f8c3 c01c 	str.w	ip, [r3, #28]
   12368:	2810      	cmp	r0, #16
   1236a:	dd00      	ble.n	1236e <esf_dump+0x4a>
   1236c:	621e      	str	r6, [r3, #32]
   1236e:	2913      	cmp	r1, #19
   12370:	f340 80df 	ble.w	12532 <esf_dump+0x20e>
   12374:	f04f 0c14 	mov.w	ip, #20
   12378:	b13a      	cbz	r2, 1238a <esf_dump+0x66>
   1237a:	2105      	movs	r1, #5
   1237c:	7139      	strb	r1, [r7, #4]
   1237e:	2100      	movs	r1, #0
   12380:	7179      	strb	r1, [r7, #5]
   12382:	71b9      	strb	r1, [r7, #6]
   12384:	71f9      	strb	r1, [r7, #7]
   12386:	6878      	ldr	r0, [r7, #4]
   12388:	6118      	str	r0, [r3, #16]
   1238a:	2100      	movs	r1, #0
   1238c:	f36f 0100 	bfc	r1, #0, #1
   12390:	f36f 0141 	bfc	r1, #1, #1
   12394:	f36f 0182 	bfc	r1, #2, #1
   12398:	f36f 01c5 	bfc	r1, #3, #3
   1239c:	2301      	movs	r3, #1
   1239e:	f363 1188 	bfi	r1, r3, #6, #3
   123a2:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
   123a6:	f36c 2152 	bfi	r1, ip, #9, #10
   123aa:	f36f 41de 	bfc	r1, #19, #12
   123ae:	f36f 71df 	bfc	r1, #31, #1
   123b2:	2300      	movs	r3, #0
   123b4:	486a      	ldr	r0, [pc, #424]	; (12560 <esf_dump+0x23c>)
   123b6:	f006 ffd6 	bl	19366 <z_impl_z_log_msg_static_create>
   123ba:	46ad      	mov	sp, r5
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   123bc:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   123c0:	f8d4 c010 	ldr.w	ip, [r4, #16]
   123c4:	6966      	ldr	r6, [r4, #20]
   123c6:	466d      	mov	r5, sp
   123c8:	b08a      	sub	sp, #40	; 0x28
   123ca:	466b      	mov	r3, sp
   123cc:	f113 0210 	adds.w	r2, r3, #16
   123d0:	f000 80b2 	beq.w	12538 <esf_dump+0x214>
   123d4:	2114      	movs	r1, #20
   123d6:	b18a      	cbz	r2, 123fc <esf_dump+0xd8>
   123d8:	4608      	mov	r0, r1
   123da:	2904      	cmp	r1, #4
   123dc:	dd03      	ble.n	123e6 <esf_dump+0xc2>
   123de:	f8df 8184 	ldr.w	r8, [pc, #388]	; 12564 <esf_dump+0x240>
   123e2:	f8c3 8014 	str.w	r8, [r3, #20]
   123e6:	2808      	cmp	r0, #8
   123e8:	dd01      	ble.n	123ee <esf_dump+0xca>
   123ea:	f8c3 e018 	str.w	lr, [r3, #24]
   123ee:	280c      	cmp	r0, #12
   123f0:	dd01      	ble.n	123f6 <esf_dump+0xd2>
   123f2:	f8c3 c01c 	str.w	ip, [r3, #28]
   123f6:	2810      	cmp	r0, #16
   123f8:	dd00      	ble.n	123fc <esf_dump+0xd8>
   123fa:	621e      	str	r6, [r3, #32]
   123fc:	2913      	cmp	r1, #19
   123fe:	f340 809e 	ble.w	1253e <esf_dump+0x21a>
   12402:	f04f 0c14 	mov.w	ip, #20
   12406:	b13a      	cbz	r2, 12418 <esf_dump+0xf4>
   12408:	2105      	movs	r1, #5
   1240a:	7139      	strb	r1, [r7, #4]
   1240c:	2100      	movs	r1, #0
   1240e:	7179      	strb	r1, [r7, #5]
   12410:	71b9      	strb	r1, [r7, #6]
   12412:	71f9      	strb	r1, [r7, #7]
   12414:	6878      	ldr	r0, [r7, #4]
   12416:	6118      	str	r0, [r3, #16]
   12418:	2100      	movs	r1, #0
   1241a:	f36f 0100 	bfc	r1, #0, #1
   1241e:	f36f 0141 	bfc	r1, #1, #1
   12422:	f36f 0182 	bfc	r1, #2, #1
   12426:	f36f 01c5 	bfc	r1, #3, #3
   1242a:	2301      	movs	r3, #1
   1242c:	f363 1188 	bfi	r1, r3, #6, #3
   12430:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
   12434:	f36c 2152 	bfi	r1, ip, #9, #10
   12438:	f36f 41de 	bfc	r1, #19, #12
   1243c:	f36f 71df 	bfc	r1, #31, #1
   12440:	2300      	movs	r3, #0
   12442:	4847      	ldr	r0, [pc, #284]	; (12560 <esf_dump+0x23c>)
   12444:	f006 ff8f 	bl	19366 <z_impl_z_log_msg_static_create>
   12448:	46ad      	mov	sp, r5
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1244a:	69e6      	ldr	r6, [r4, #28]
   1244c:	466d      	mov	r5, sp
   1244e:	b088      	sub	sp, #32
   12450:	466b      	mov	r3, sp
   12452:	f113 0210 	adds.w	r2, r3, #16
   12456:	d075      	beq.n	12544 <esf_dump+0x220>
   12458:	210c      	movs	r1, #12
   1245a:	b14a      	cbz	r2, 12470 <esf_dump+0x14c>
   1245c:	4608      	mov	r0, r1
   1245e:	2904      	cmp	r1, #4
   12460:	dd03      	ble.n	1246a <esf_dump+0x146>
   12462:	f8df c104 	ldr.w	ip, [pc, #260]	; 12568 <esf_dump+0x244>
   12466:	f8c3 c014 	str.w	ip, [r3, #20]
   1246a:	2808      	cmp	r0, #8
   1246c:	dd00      	ble.n	12470 <esf_dump+0x14c>
   1246e:	619e      	str	r6, [r3, #24]
   12470:	290b      	cmp	r1, #11
   12472:	dd6a      	ble.n	1254a <esf_dump+0x226>
   12474:	f04f 0c0c 	mov.w	ip, #12
   12478:	b13a      	cbz	r2, 1248a <esf_dump+0x166>
   1247a:	2103      	movs	r1, #3
   1247c:	7139      	strb	r1, [r7, #4]
   1247e:	2100      	movs	r1, #0
   12480:	7179      	strb	r1, [r7, #5]
   12482:	71b9      	strb	r1, [r7, #6]
   12484:	71f9      	strb	r1, [r7, #7]
   12486:	6878      	ldr	r0, [r7, #4]
   12488:	6118      	str	r0, [r3, #16]
   1248a:	2100      	movs	r1, #0
   1248c:	f36f 0100 	bfc	r1, #0, #1
   12490:	f36f 0141 	bfc	r1, #1, #1
   12494:	f36f 0182 	bfc	r1, #2, #1
   12498:	f36f 01c5 	bfc	r1, #3, #3
   1249c:	2301      	movs	r3, #1
   1249e:	f363 1188 	bfi	r1, r3, #6, #3
   124a2:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   124a6:	f36c 2152 	bfi	r1, ip, #9, #10
   124aa:	f36f 41de 	bfc	r1, #19, #12
   124ae:	f36f 71df 	bfc	r1, #31, #1
   124b2:	2300      	movs	r3, #0
   124b4:	482a      	ldr	r0, [pc, #168]	; (12560 <esf_dump+0x23c>)
   124b6:	f006 ff56 	bl	19366 <z_impl_z_log_msg_static_create>
   124ba:	46ad      	mov	sp, r5
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   124bc:	69a4      	ldr	r4, [r4, #24]
   124be:	b088      	sub	sp, #32
   124c0:	466b      	mov	r3, sp
   124c2:	f113 0210 	adds.w	r2, r3, #16
   124c6:	d043      	beq.n	12550 <esf_dump+0x22c>
   124c8:	210c      	movs	r1, #12
   124ca:	b13a      	cbz	r2, 124dc <esf_dump+0x1b8>
   124cc:	4608      	mov	r0, r1
   124ce:	2904      	cmp	r1, #4
   124d0:	dd01      	ble.n	124d6 <esf_dump+0x1b2>
   124d2:	4d26      	ldr	r5, [pc, #152]	; (1256c <esf_dump+0x248>)
   124d4:	615d      	str	r5, [r3, #20]
   124d6:	2808      	cmp	r0, #8
   124d8:	dd00      	ble.n	124dc <esf_dump+0x1b8>
   124da:	619c      	str	r4, [r3, #24]
   124dc:	290b      	cmp	r1, #11
   124de:	dd3a      	ble.n	12556 <esf_dump+0x232>
   124e0:	240c      	movs	r4, #12
   124e2:	b13a      	cbz	r2, 124f4 <esf_dump+0x1d0>
   124e4:	2103      	movs	r1, #3
   124e6:	7139      	strb	r1, [r7, #4]
   124e8:	2100      	movs	r1, #0
   124ea:	7179      	strb	r1, [r7, #5]
   124ec:	71b9      	strb	r1, [r7, #6]
   124ee:	71f9      	strb	r1, [r7, #7]
   124f0:	6878      	ldr	r0, [r7, #4]
   124f2:	6118      	str	r0, [r3, #16]
   124f4:	2100      	movs	r1, #0
   124f6:	f36f 0100 	bfc	r1, #0, #1
   124fa:	f36f 0141 	bfc	r1, #1, #1
   124fe:	f36f 0182 	bfc	r1, #2, #1
   12502:	f36f 01c5 	bfc	r1, #3, #3
   12506:	2301      	movs	r3, #1
   12508:	f363 1188 	bfi	r1, r3, #6, #3
   1250c:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   12510:	f364 2152 	bfi	r1, r4, #9, #10
   12514:	f36f 41de 	bfc	r1, #19, #12
   12518:	f36f 71df 	bfc	r1, #31, #1
   1251c:	2300      	movs	r3, #0
   1251e:	4810      	ldr	r0, [pc, #64]	; (12560 <esf_dump+0x23c>)
   12520:	f006 ff21 	bl	19366 <z_impl_z_log_msg_static_create>
		esf->basic.pc);
}
   12524:	3708      	adds	r7, #8
   12526:	46bd      	mov	sp, r7
   12528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1252c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12530:	e70a      	b.n	12348 <esf_dump+0x24>
   12532:	f06f 0c1b 	mvn.w	ip, #27
   12536:	e71f      	b.n	12378 <esf_dump+0x54>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   12538:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1253c:	e74b      	b.n	123d6 <esf_dump+0xb2>
   1253e:	f06f 0c1b 	mvn.w	ip, #27
   12542:	e760      	b.n	12406 <esf_dump+0xe2>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   12544:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12548:	e787      	b.n	1245a <esf_dump+0x136>
   1254a:	f06f 0c1b 	mvn.w	ip, #27
   1254e:	e793      	b.n	12478 <esf_dump+0x154>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   12550:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12554:	e7b9      	b.n	124ca <esf_dump+0x1a6>
   12556:	f06f 041b 	mvn.w	r4, #27
   1255a:	e7c2      	b.n	124e2 <esf_dump+0x1be>
   1255c:	0001b340 	.word	0x0001b340
   12560:	0001afb8 	.word	0x0001afb8
   12564:	0001b370 	.word	0x0001b370
   12568:	0001b3a0 	.word	0x0001b3a0
   1256c:	0001b3b0 	.word	0x0001b3b0

00012570 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   12570:	2800      	cmp	r0, #0
   12572:	db07      	blt.n	12584 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12574:	f000 021f 	and.w	r2, r0, #31
   12578:	0940      	lsrs	r0, r0, #5
   1257a:	2301      	movs	r3, #1
   1257c:	4093      	lsls	r3, r2
   1257e:	4a02      	ldr	r2, [pc, #8]	; (12588 <__NVIC_EnableIRQ+0x18>)
   12580:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
   12584:	4770      	bx	lr
   12586:	bf00      	nop
   12588:	e000e100 	.word	0xe000e100

0001258c <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1258c:	2800      	cmp	r0, #0
   1258e:	db0c      	blt.n	125aa <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12590:	f000 021f 	and.w	r2, r0, #31
   12594:	0940      	lsrs	r0, r0, #5
   12596:	2301      	movs	r3, #1
   12598:	4093      	lsls	r3, r2
   1259a:	3020      	adds	r0, #32
   1259c:	4a03      	ldr	r2, [pc, #12]	; (125ac <__NVIC_DisableIRQ+0x20>)
   1259e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   125a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   125a6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
   125aa:	4770      	bx	lr
   125ac:	e000e100 	.word	0xe000e100

000125b0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   125b0:	2800      	cmp	r0, #0
   125b2:	db08      	blt.n	125c6 <__NVIC_SetPriority+0x16>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   125b4:	0149      	lsls	r1, r1, #5
   125b6:	b2c9      	uxtb	r1, r1
   125b8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
   125bc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
   125c0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
   125c4:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   125c6:	f000 000f 	and.w	r0, r0, #15
   125ca:	0149      	lsls	r1, r1, #5
   125cc:	b2c9      	uxtb	r1, r1
   125ce:	4b01      	ldr	r3, [pc, #4]	; (125d4 <__NVIC_SetPriority+0x24>)
   125d0:	5419      	strb	r1, [r3, r0]
  }
}
   125d2:	4770      	bx	lr
   125d4:	e000ed14 	.word	0xe000ed14

000125d8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   125d8:	0942      	lsrs	r2, r0, #5
   125da:	4b05      	ldr	r3, [pc, #20]	; (125f0 <arch_irq_is_enabled+0x18>)
   125dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   125e0:	f000 001f 	and.w	r0, r0, #31
   125e4:	2301      	movs	r3, #1
   125e6:	fa03 f000 	lsl.w	r0, r3, r0
}
   125ea:	4010      	ands	r0, r2
   125ec:	4770      	bx	lr
   125ee:	bf00      	nop
   125f0:	e000e100 	.word	0xe000e100

000125f4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   125f4:	bf30      	wfi
    b z_SysNmiOnReset
   125f6:	f7ff bffd 	b.w	125f4 <z_SysNmiOnReset>
   125fa:	bf00      	nop

000125fc <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   125fc:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   125fe:	4b0b      	ldr	r3, [pc, #44]	; (1262c <z_arm_prep_c+0x30>)
   12600:	4a0b      	ldr	r2, [pc, #44]	; (12630 <z_arm_prep_c+0x34>)
   12602:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   12606:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   12608:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1260c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   12610:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12614:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   12618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1261c:	f004 fda4 	bl	17168 <z_bss_zero>
	z_data_copy();
   12620:	f005 fc82 	bl	17f28 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   12624:	f000 ffd0 	bl	135c8 <z_arm_interrupt_init>
	z_cstart();
   12628:	f004 fdfa 	bl	17220 <z_cstart>
   1262c:	e000ed00 	.word	0xe000ed00
   12630:	00010000 	.word	0x00010000

00012634 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   12634:	4a0a      	ldr	r2, [pc, #40]	; (12660 <arch_swap+0x2c>)
   12636:	6893      	ldr	r3, [r2, #8]
   12638:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
   1263c:	4909      	ldr	r1, [pc, #36]	; (12664 <arch_swap+0x30>)
   1263e:	6809      	ldr	r1, [r1, #0]
   12640:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12644:	4908      	ldr	r1, [pc, #32]	; (12668 <arch_swap+0x34>)
   12646:	684b      	ldr	r3, [r1, #4]
   12648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1264c:	604b      	str	r3, [r1, #4]
   1264e:	2300      	movs	r3, #0
   12650:	f383 8811 	msr	BASEPRI, r3
   12654:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   12658:	6893      	ldr	r3, [r2, #8]
}
   1265a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
   1265e:	4770      	bx	lr
   12660:	20008cf8 	.word	0x20008cf8
   12664:	0001bd88 	.word	0x0001bd88
   12668:	e000ed00 	.word	0xe000ed00

0001266c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1266c:	4916      	ldr	r1, [pc, #88]	; (126c8 <z_arm_pendsv+0x5c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1266e:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   12670:	f882 e0b1 	strb.w	lr, [r2, #177]	; 0xb1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   12674:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   12678:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1267a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1267e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12682:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   12684:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   12688:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1268c:	4f0f      	ldr	r7, [pc, #60]	; (126cc <z_arm_pendsv+0x60>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1268e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   12692:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   12694:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   12696:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   12698:	f992 e0b1 	ldrsb.w	lr, [r2, #177]	; 0xb1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1269c:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
   126a0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   126a2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   126a6:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   126aa:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   126ae:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   126b2:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   126b6:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   126ba:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   126bc:	f006 ff70 	bl	195a0 <configure_builtin_stack_guard>
    pop {r2, lr}
   126c0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   126c4:	4770      	bx	lr
   126c6:	0000      	.short	0x0000
    ldr r1, =_kernel
   126c8:	20008cf8 	.word	0x20008cf8
    ldr v4, =_SCS_ICSR
   126cc:	e000ed04 	.word	0xe000ed04

000126d0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   126d0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   126d4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   126d6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   126da:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   126de:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   126e0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   126e4:	2902      	cmp	r1, #2
    beq _oops
   126e6:	d0ff      	beq.n	126e8 <_oops>

000126e8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   126e8:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   126ea:	f006 ff37 	bl	1955c <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   126ee:	bd01      	pop	{r0, pc}

000126f0 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   126f0:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   126f2:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   126f6:	4910      	ldr	r1, [pc, #64]	; (12738 <arch_new_thread+0x48>)
   126f8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   126fc:	f021 0101 	bic.w	r1, r1, #1
   12700:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   12704:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   12708:	9b01      	ldr	r3, [sp, #4]
   1270a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1270e:	9b02      	ldr	r3, [sp, #8]
   12710:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   12714:	9b03      	ldr	r3, [sp, #12]
   12716:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1271a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1271e:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
   12722:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   12724:	2300      	movs	r3, #0
   12726:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   1272a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
   1272e:	23bc      	movs	r3, #188	; 0xbc
   12730:	f880 30b1 	strb.w	r3, [r0, #177]	; 0xb1
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   12734:	bc10      	pop	{r4}
   12736:	4770      	bx	lr
   12738:	0001852f 	.word	0x0001852f

0001273c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1273c:	4b09      	ldr	r3, [pc, #36]	; (12764 <arch_switch_to_main_thread+0x28>)
   1273e:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
   12740:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   12744:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   12748:	4610      	mov	r0, r2
   1274a:	f381 8809 	msr	PSP, r1
   1274e:	2100      	movs	r1, #0
   12750:	b663      	cpsie	if
   12752:	f381 8811 	msr	BASEPRI, r1
   12756:	f3bf 8f6f 	isb	sy
   1275a:	2200      	movs	r2, #0
   1275c:	2300      	movs	r3, #0
   1275e:	f005 fee6 	bl	1852e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   12762:	bf00      	nop
   12764:	20008cf8 	.word	0x20008cf8

00012768 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   12768:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1276a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1276c:	4a0b      	ldr	r2, [pc, #44]	; (1279c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1276e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   12770:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   12772:	bf1e      	ittt	ne
	movne	r1, #0
   12774:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   12776:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   12778:	f008 f81a 	blne	1a7b0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1277c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1277e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   12782:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   12786:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1278a:	4905      	ldr	r1, [pc, #20]	; (127a0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1278c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1278e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   12790:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   12792:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   12796:	4903      	ldr	r1, [pc, #12]	; (127a4 <_isr_wrapper+0x3c>)
	bx r1
   12798:	4708      	bx	r1
   1279a:	0000      	.short	0x0000
	ldr r2, =_kernel
   1279c:	20008cf8 	.word	0x20008cf8
	ldr r1, =_sw_isr_table
   127a0:	0001ad10 	.word	0x0001ad10
	ldr r1, =z_arm_int_exit
   127a4:	000127a9 	.word	0x000127a9

000127a8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   127a8:	4b04      	ldr	r3, [pc, #16]	; (127bc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   127aa:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   127ac:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   127ae:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   127b0:	d003      	beq.n	127ba <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   127b2:	4903      	ldr	r1, [pc, #12]	; (127c0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   127b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   127b8:	600a      	str	r2, [r1, #0]

000127ba <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   127ba:	4770      	bx	lr
	ldr r3, =_kernel
   127bc:	20008cf8 	.word	0x20008cf8
	ldr r1, =_SCS_ICSR
   127c0:	e000ed04 	.word	0xe000ed04

000127c4 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   127c4:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   127c6:	4b0d      	ldr	r3, [pc, #52]	; (127fc <z_arm_is_synchronous_svc+0x38>)
   127c8:	695a      	ldr	r2, [r3, #20]
   127ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   127ce:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   127d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   127d4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
   127d8:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   127dc:	695a      	ldr	r2, [r3, #20]
   127de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   127e2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   127e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   127e8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   127ec:	f64d 7302 	movw	r3, #57090	; 0xdf02
   127f0:	4299      	cmp	r1, r3
   127f2:	d001      	beq.n	127f8 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
   127f4:	2000      	movs	r0, #0
   127f6:	4770      	bx	lr
		return true;
   127f8:	2001      	movs	r0, #1
}
   127fa:	4770      	bx	lr
   127fc:	e000ed00 	.word	0xe000ed00

00012800 <get_esf>:
 *
 * @return ESF pointer on success, otherwise return NULL
 */
static inline z_arch_esf_t *get_esf(uint32_t msp, uint32_t psp, uint32_t exc_return,
	bool *nested_exc)
{
   12800:	b5f0      	push	{r4, r5, r6, r7, lr}
   12802:	b089      	sub	sp, #36	; 0x24
   12804:	461d      	mov	r5, r3
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
   12806:	2300      	movs	r3, #0
   12808:	702b      	strb	r3, [r5, #0]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1280a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1280e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   12812:	d142      	bne.n	1289a <get_esf+0x9a>
   12814:	4606      	mov	r6, r0
   12816:	460f      	mov	r7, r1
   12818:	4614      	mov	r4, r2
		} else {
			ptr_esf = (z_arch_esf_t *)__TZ_get_MSP_NS();
		}
	}
#elif defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1281a:	f012 0f01 	tst.w	r2, #1
   1281e:	d13f      	bne.n	128a0 <get_esf+0xa0>
		 * This is a fatal error.
		 */
		return NULL;
	}

	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   12820:	f012 0f40 	tst.w	r2, #64	; 0x40
   12824:	d107      	bne.n	12836 <get_esf+0x36>
	z_arch_esf_t *ptr_esf = NULL;
   12826:	2000      	movs	r0, #0
	bool alternative_state_exc = false;
   12828:	4603      	mov	r3, r0
		PR_EXC("SPSEL in thread mode does not indicate PSP");
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
   1282a:	bbbb      	cbnz	r3, 1289c <get_esf+0x9c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1282c:	f014 0f08 	tst.w	r4, #8
   12830:	d02f      	beq.n	12892 <get_esf+0x92>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
   12832:	4638      	mov	r0, r7
   12834:	e032      	b.n	1289c <get_esf+0x9c>
		PR_FAULT_INFO("Exception occurred in Secure State");
   12836:	4b1b      	ldr	r3, [pc, #108]	; (128a4 <get_esf+0xa4>)
   12838:	9307      	str	r3, [sp, #28]
   1283a:	2302      	movs	r3, #2
   1283c:	f88d 3004 	strb.w	r3, [sp, #4]
   12840:	2300      	movs	r3, #0
   12842:	f88d 3005 	strb.w	r3, [sp, #5]
   12846:	f88d 3006 	strb.w	r3, [sp, #6]
   1284a:	f88d 3007 	strb.w	r3, [sp, #7]
   1284e:	9a01      	ldr	r2, [sp, #4]
   12850:	9206      	str	r2, [sp, #24]
   12852:	4619      	mov	r1, r3
   12854:	f363 0100 	bfi	r1, r3, #0, #1
   12858:	f363 0141 	bfi	r1, r3, #1, #1
   1285c:	f363 0182 	bfi	r1, r3, #2, #1
   12860:	f363 01c5 	bfi	r1, r3, #3, #3
   12864:	2201      	movs	r2, #1
   12866:	f362 1188 	bfi	r1, r2, #6, #3
   1286a:	2208      	movs	r2, #8
   1286c:	f362 2152 	bfi	r1, r2, #9, #10
   12870:	f363 41de 	bfi	r1, r3, #19, #12
   12874:	f363 71df 	bfi	r1, r3, #31, #1
   12878:	aa06      	add	r2, sp, #24
   1287a:	480b      	ldr	r0, [pc, #44]	; (128a8 <get_esf+0xa8>)
   1287c:	f006 fd73 	bl	19366 <z_impl_z_log_msg_static_create>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   12880:	f014 0f04 	tst.w	r4, #4
   12884:	d002      	beq.n	1288c <get_esf+0x8c>
			ptr_esf = (z_arch_esf_t *)psp;
   12886:	4638      	mov	r0, r7
		alternative_state_exc = true;
   12888:	2301      	movs	r3, #1
   1288a:	e7ce      	b.n	1282a <get_esf+0x2a>
			ptr_esf = (z_arch_esf_t *)msp;
   1288c:	4630      	mov	r0, r6
		alternative_state_exc = true;
   1288e:	2301      	movs	r3, #1
   12890:	e7cb      	b.n	1282a <get_esf+0x2a>

		} else {
			/* Returning to handler mode */
			ptr_esf = (z_arch_esf_t *)msp;
   12892:	4630      	mov	r0, r6
			*nested_exc = true;
   12894:	2301      	movs	r3, #1
   12896:	702b      	strb	r3, [r5, #0]
   12898:	e000      	b.n	1289c <get_esf+0x9c>
		return NULL;
   1289a:	2000      	movs	r0, #0
		}
	}

	return ptr_esf;
}
   1289c:	b009      	add	sp, #36	; 0x24
   1289e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   128a0:	2000      	movs	r0, #0
   128a2:	e7fb      	b.n	1289c <get_esf+0x9c>
   128a4:	0001b3e0 	.word	0x0001b3e0
   128a8:	0001afb8 	.word	0x0001afb8

000128ac <mem_manage_fault>:
{
   128ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   128b0:	b0a6      	sub	sp, #152	; 0x98
   128b2:	af00      	add	r7, sp, #0
   128b4:	4605      	mov	r5, r0
   128b6:	460e      	mov	r6, r1
   128b8:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   128ba:	4baf      	ldr	r3, [pc, #700]	; (12b78 <mem_manage_fault+0x2cc>)
   128bc:	61fb      	str	r3, [r7, #28]
   128be:	2302      	movs	r3, #2
   128c0:	713b      	strb	r3, [r7, #4]
   128c2:	2300      	movs	r3, #0
   128c4:	717b      	strb	r3, [r7, #5]
   128c6:	71bb      	strb	r3, [r7, #6]
   128c8:	71fb      	strb	r3, [r7, #7]
   128ca:	687a      	ldr	r2, [r7, #4]
   128cc:	61ba      	str	r2, [r7, #24]
   128ce:	4619      	mov	r1, r3
   128d0:	f363 0100 	bfi	r1, r3, #0, #1
   128d4:	f363 0141 	bfi	r1, r3, #1, #1
   128d8:	f363 0182 	bfi	r1, r3, #2, #1
   128dc:	f363 01c5 	bfi	r1, r3, #3, #3
   128e0:	2201      	movs	r2, #1
   128e2:	f362 1188 	bfi	r1, r2, #6, #3
   128e6:	2208      	movs	r2, #8
   128e8:	f362 2152 	bfi	r1, r2, #9, #10
   128ec:	f363 41de 	bfi	r1, r3, #19, #12
   128f0:	f363 71df 	bfi	r1, r3, #31, #1
   128f4:	f107 0218 	add.w	r2, r7, #24
   128f8:	48a0      	ldr	r0, [pc, #640]	; (12b7c <mem_manage_fault+0x2d0>)
   128fa:	f006 fd34 	bl	19366 <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   128fe:	4ba0      	ldr	r3, [pc, #640]	; (12b80 <mem_manage_fault+0x2d4>)
   12900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12902:	f013 0f10 	tst.w	r3, #16
   12906:	d135      	bne.n	12974 <mem_manage_fault+0xc8>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   12908:	4b9d      	ldr	r3, [pc, #628]	; (12b80 <mem_manage_fault+0x2d4>)
   1290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1290c:	f013 0f08 	tst.w	r3, #8
   12910:	d153      	bne.n	129ba <mem_manage_fault+0x10e>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   12912:	4b9b      	ldr	r3, [pc, #620]	; (12b80 <mem_manage_fault+0x2d4>)
   12914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12916:	f013 0f02 	tst.w	r3, #2
   1291a:	d171      	bne.n	12a00 <mem_manage_fault+0x154>
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1291c:	4b98      	ldr	r3, [pc, #608]	; (12b80 <mem_manage_fault+0x2d4>)
   1291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12920:	f013 0f01 	tst.w	r3, #1
   12924:	f040 80e0 	bne.w	12ae8 <mem_manage_fault+0x23c>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   12928:	4b95      	ldr	r3, [pc, #596]	; (12b80 <mem_manage_fault+0x2d4>)
   1292a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1292c:	f013 0f20 	tst.w	r3, #32
   12930:	f040 80fd 	bne.w	12b2e <mem_manage_fault+0x282>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   12934:	4b92      	ldr	r3, [pc, #584]	; (12b80 <mem_manage_fault+0x2d4>)
   12936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12938:	f013 0f10 	tst.w	r3, #16
   1293c:	d101      	bne.n	12942 <mem_manage_fault+0x96>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1293e:	4b90      	ldr	r3, [pc, #576]	; (12b80 <mem_manage_fault+0x2d4>)
   12940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   12942:	4b8f      	ldr	r3, [pc, #572]	; (12b80 <mem_manage_fault+0x2d4>)
   12944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12946:	f013 0f20 	tst.w	r3, #32
   1294a:	d004      	beq.n	12956 <mem_manage_fault+0xaa>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   1294c:	4a8c      	ldr	r2, [pc, #560]	; (12b80 <mem_manage_fault+0x2d4>)
   1294e:	6a53      	ldr	r3, [r2, #36]	; 0x24
   12950:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   12954:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   12956:	4a8a      	ldr	r2, [pc, #552]	; (12b80 <mem_manage_fault+0x2d4>)
   12958:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1295a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1295e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12960:	2101      	movs	r1, #1
   12962:	4628      	mov	r0, r5
   12964:	f006 fe21 	bl	195aa <memory_fault_recoverable>
   12968:	7020      	strb	r0, [r4, #0]
}
   1296a:	2000      	movs	r0, #0
   1296c:	3798      	adds	r7, #152	; 0x98
   1296e:	46bd      	mov	sp, r7
   12970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
   12974:	4b83      	ldr	r3, [pc, #524]	; (12b84 <mem_manage_fault+0x2d8>)
   12976:	637b      	str	r3, [r7, #52]	; 0x34
   12978:	2302      	movs	r3, #2
   1297a:	713b      	strb	r3, [r7, #4]
   1297c:	2300      	movs	r3, #0
   1297e:	717b      	strb	r3, [r7, #5]
   12980:	71bb      	strb	r3, [r7, #6]
   12982:	71fb      	strb	r3, [r7, #7]
   12984:	687a      	ldr	r2, [r7, #4]
   12986:	633a      	str	r2, [r7, #48]	; 0x30
   12988:	4619      	mov	r1, r3
   1298a:	f363 0100 	bfi	r1, r3, #0, #1
   1298e:	f363 0141 	bfi	r1, r3, #1, #1
   12992:	f363 0182 	bfi	r1, r3, #2, #1
   12996:	f363 01c5 	bfi	r1, r3, #3, #3
   1299a:	2201      	movs	r2, #1
   1299c:	f362 1188 	bfi	r1, r2, #6, #3
   129a0:	2208      	movs	r2, #8
   129a2:	f362 2152 	bfi	r1, r2, #9, #10
   129a6:	f363 41de 	bfi	r1, r3, #19, #12
   129aa:	f363 71df 	bfi	r1, r3, #31, #1
   129ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
   129b2:	4872      	ldr	r0, [pc, #456]	; (12b7c <mem_manage_fault+0x2d0>)
   129b4:	f006 fcd7 	bl	19366 <z_impl_z_log_msg_static_create>
   129b8:	e7a6      	b.n	12908 <mem_manage_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   129ba:	4b73      	ldr	r3, [pc, #460]	; (12b88 <mem_manage_fault+0x2dc>)
   129bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   129be:	2302      	movs	r3, #2
   129c0:	713b      	strb	r3, [r7, #4]
   129c2:	2300      	movs	r3, #0
   129c4:	717b      	strb	r3, [r7, #5]
   129c6:	71bb      	strb	r3, [r7, #6]
   129c8:	71fb      	strb	r3, [r7, #7]
   129ca:	687a      	ldr	r2, [r7, #4]
   129cc:	64ba      	str	r2, [r7, #72]	; 0x48
   129ce:	4619      	mov	r1, r3
   129d0:	f363 0100 	bfi	r1, r3, #0, #1
   129d4:	f363 0141 	bfi	r1, r3, #1, #1
   129d8:	f363 0182 	bfi	r1, r3, #2, #1
   129dc:	f363 01c5 	bfi	r1, r3, #3, #3
   129e0:	2201      	movs	r2, #1
   129e2:	f362 1188 	bfi	r1, r2, #6, #3
   129e6:	2208      	movs	r2, #8
   129e8:	f362 2152 	bfi	r1, r2, #9, #10
   129ec:	f363 41de 	bfi	r1, r3, #19, #12
   129f0:	f363 71df 	bfi	r1, r3, #31, #1
   129f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
   129f8:	4860      	ldr	r0, [pc, #384]	; (12b7c <mem_manage_fault+0x2d0>)
   129fa:	f006 fcb4 	bl	19366 <z_impl_z_log_msg_static_create>
   129fe:	e788      	b.n	12912 <mem_manage_fault+0x66>
		PR_FAULT_INFO("  Data Access Violation");
   12a00:	4b62      	ldr	r3, [pc, #392]	; (12b8c <mem_manage_fault+0x2e0>)
   12a02:	667b      	str	r3, [r7, #100]	; 0x64
   12a04:	2302      	movs	r3, #2
   12a06:	713b      	strb	r3, [r7, #4]
   12a08:	2300      	movs	r3, #0
   12a0a:	717b      	strb	r3, [r7, #5]
   12a0c:	71bb      	strb	r3, [r7, #6]
   12a0e:	71fb      	strb	r3, [r7, #7]
   12a10:	687a      	ldr	r2, [r7, #4]
   12a12:	663a      	str	r2, [r7, #96]	; 0x60
   12a14:	4619      	mov	r1, r3
   12a16:	f363 0100 	bfi	r1, r3, #0, #1
   12a1a:	f363 0141 	bfi	r1, r3, #1, #1
   12a1e:	f363 0182 	bfi	r1, r3, #2, #1
   12a22:	f363 01c5 	bfi	r1, r3, #3, #3
   12a26:	2201      	movs	r2, #1
   12a28:	f362 1188 	bfi	r1, r2, #6, #3
   12a2c:	2208      	movs	r2, #8
   12a2e:	f362 2152 	bfi	r1, r2, #9, #10
   12a32:	f363 41de 	bfi	r1, r3, #19, #12
   12a36:	f363 71df 	bfi	r1, r3, #31, #1
   12a3a:	f107 0260 	add.w	r2, r7, #96	; 0x60
   12a3e:	484f      	ldr	r0, [pc, #316]	; (12b7c <mem_manage_fault+0x2d0>)
   12a40:	f006 fc91 	bl	19366 <z_impl_z_log_msg_static_create>
		uint32_t temp = SCB->MMFAR;
   12a44:	4b4e      	ldr	r3, [pc, #312]	; (12b80 <mem_manage_fault+0x2d4>)
   12a46:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   12a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12a4a:	f013 0f80 	tst.w	r3, #128	; 0x80
   12a4e:	f43f af65 	beq.w	1291c <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   12a52:	46e8      	mov	r8, sp
   12a54:	b088      	sub	sp, #32
   12a56:	466b      	mov	r3, sp
   12a58:	f113 0210 	adds.w	r2, r3, #16
   12a5c:	d011      	beq.n	12a82 <mem_manage_fault+0x1d6>
   12a5e:	210c      	movs	r1, #12
   12a60:	b152      	cbz	r2, 12a78 <mem_manage_fault+0x1cc>
   12a62:	468c      	mov	ip, r1
   12a64:	2904      	cmp	r1, #4
   12a66:	dd03      	ble.n	12a70 <mem_manage_fault+0x1c4>
   12a68:	f8df e124 	ldr.w	lr, [pc, #292]	; 12b90 <mem_manage_fault+0x2e4>
   12a6c:	f8c3 e014 	str.w	lr, [r3, #20]
   12a70:	f1bc 0f08 	cmp.w	ip, #8
   12a74:	dd08      	ble.n	12a88 <mem_manage_fault+0x1dc>
   12a76:	6198      	str	r0, [r3, #24]
   12a78:	290b      	cmp	r1, #11
   12a7a:	dd32      	ble.n	12ae2 <mem_manage_fault+0x236>
   12a7c:	f04f 0c0c 	mov.w	ip, #12
   12a80:	e004      	b.n	12a8c <mem_manage_fault+0x1e0>
   12a82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12a86:	e7eb      	b.n	12a60 <mem_manage_fault+0x1b4>
   12a88:	f06f 0c1b 	mvn.w	ip, #27
   12a8c:	b13a      	cbz	r2, 12a9e <mem_manage_fault+0x1f2>
   12a8e:	2103      	movs	r1, #3
   12a90:	7139      	strb	r1, [r7, #4]
   12a92:	2100      	movs	r1, #0
   12a94:	7179      	strb	r1, [r7, #5]
   12a96:	71b9      	strb	r1, [r7, #6]
   12a98:	71f9      	strb	r1, [r7, #7]
   12a9a:	6878      	ldr	r0, [r7, #4]
   12a9c:	6118      	str	r0, [r3, #16]
   12a9e:	2100      	movs	r1, #0
   12aa0:	f36f 0100 	bfc	r1, #0, #1
   12aa4:	f36f 0141 	bfc	r1, #1, #1
   12aa8:	f36f 0182 	bfc	r1, #2, #1
   12aac:	f36f 01c5 	bfc	r1, #3, #3
   12ab0:	2301      	movs	r3, #1
   12ab2:	f363 1188 	bfi	r1, r3, #6, #3
   12ab6:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   12aba:	f363 2152 	bfi	r1, r3, #9, #10
   12abe:	f36f 41de 	bfc	r1, #19, #12
   12ac2:	f36f 71df 	bfc	r1, #31, #1
   12ac6:	2300      	movs	r3, #0
   12ac8:	482c      	ldr	r0, [pc, #176]	; (12b7c <mem_manage_fault+0x2d0>)
   12aca:	f006 fc4c 	bl	19366 <z_impl_z_log_msg_static_create>
   12ace:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   12ad0:	2e00      	cmp	r6, #0
   12ad2:	f43f af23 	beq.w	1291c <mem_manage_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   12ad6:	4a2a      	ldr	r2, [pc, #168]	; (12b80 <mem_manage_fault+0x2d4>)
   12ad8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   12ade:	6293      	str	r3, [r2, #40]	; 0x28
   12ae0:	e71c      	b.n	1291c <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   12ae2:	f06f 0c1b 	mvn.w	ip, #27
   12ae6:	e7d1      	b.n	12a8c <mem_manage_fault+0x1e0>
		PR_FAULT_INFO("  Instruction Access Violation");
   12ae8:	4b2a      	ldr	r3, [pc, #168]	; (12b94 <mem_manage_fault+0x2e8>)
   12aea:	67fb      	str	r3, [r7, #124]	; 0x7c
   12aec:	2302      	movs	r3, #2
   12aee:	713b      	strb	r3, [r7, #4]
   12af0:	2300      	movs	r3, #0
   12af2:	717b      	strb	r3, [r7, #5]
   12af4:	71bb      	strb	r3, [r7, #6]
   12af6:	71fb      	strb	r3, [r7, #7]
   12af8:	687a      	ldr	r2, [r7, #4]
   12afa:	67ba      	str	r2, [r7, #120]	; 0x78
   12afc:	4619      	mov	r1, r3
   12afe:	f363 0100 	bfi	r1, r3, #0, #1
   12b02:	f363 0141 	bfi	r1, r3, #1, #1
   12b06:	f363 0182 	bfi	r1, r3, #2, #1
   12b0a:	f363 01c5 	bfi	r1, r3, #3, #3
   12b0e:	2201      	movs	r2, #1
   12b10:	f362 1188 	bfi	r1, r2, #6, #3
   12b14:	2208      	movs	r2, #8
   12b16:	f362 2152 	bfi	r1, r2, #9, #10
   12b1a:	f363 41de 	bfi	r1, r3, #19, #12
   12b1e:	f363 71df 	bfi	r1, r3, #31, #1
   12b22:	f107 0278 	add.w	r2, r7, #120	; 0x78
   12b26:	4815      	ldr	r0, [pc, #84]	; (12b7c <mem_manage_fault+0x2d0>)
   12b28:	f006 fc1d 	bl	19366 <z_impl_z_log_msg_static_create>
   12b2c:	e6fc      	b.n	12928 <mem_manage_fault+0x7c>
		PR_FAULT_INFO(
   12b2e:	4b1a      	ldr	r3, [pc, #104]	; (12b98 <mem_manage_fault+0x2ec>)
   12b30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   12b34:	2302      	movs	r3, #2
   12b36:	713b      	strb	r3, [r7, #4]
   12b38:	2300      	movs	r3, #0
   12b3a:	717b      	strb	r3, [r7, #5]
   12b3c:	71bb      	strb	r3, [r7, #6]
   12b3e:	71fb      	strb	r3, [r7, #7]
   12b40:	687a      	ldr	r2, [r7, #4]
   12b42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   12b46:	4619      	mov	r1, r3
   12b48:	f363 0100 	bfi	r1, r3, #0, #1
   12b4c:	f363 0141 	bfi	r1, r3, #1, #1
   12b50:	f363 0182 	bfi	r1, r3, #2, #1
   12b54:	f363 01c5 	bfi	r1, r3, #3, #3
   12b58:	2201      	movs	r2, #1
   12b5a:	f362 1188 	bfi	r1, r2, #6, #3
   12b5e:	2208      	movs	r2, #8
   12b60:	f362 2152 	bfi	r1, r2, #9, #10
   12b64:	f363 41de 	bfi	r1, r3, #19, #12
   12b68:	f363 71df 	bfi	r1, r3, #31, #1
   12b6c:	f107 0290 	add.w	r2, r7, #144	; 0x90
   12b70:	4802      	ldr	r0, [pc, #8]	; (12b7c <mem_manage_fault+0x2d0>)
   12b72:	f006 fbf8 	bl	19366 <z_impl_z_log_msg_static_create>
   12b76:	e6dd      	b.n	12934 <mem_manage_fault+0x88>
   12b78:	0001b404 	.word	0x0001b404
   12b7c:	0001afb8 	.word	0x0001afb8
   12b80:	e000ed00 	.word	0xe000ed00
   12b84:	0001b41c 	.word	0x0001b41c
   12b88:	0001b450 	.word	0x0001b450
   12b8c:	0001b464 	.word	0x0001b464
   12b90:	0001b47c 	.word	0x0001b47c
   12b94:	0001b494 	.word	0x0001b494
   12b98:	0001b4b4 	.word	0x0001b4b4

00012b9c <bus_fault>:
{
   12b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ba0:	b0ac      	sub	sp, #176	; 0xb0
   12ba2:	af00      	add	r7, sp, #0
   12ba4:	4605      	mov	r5, r0
   12ba6:	460e      	mov	r6, r1
   12ba8:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
   12baa:	4bbc      	ldr	r3, [pc, #752]	; (12e9c <bus_fault+0x300>)
   12bac:	61fb      	str	r3, [r7, #28]
   12bae:	2302      	movs	r3, #2
   12bb0:	713b      	strb	r3, [r7, #4]
   12bb2:	2300      	movs	r3, #0
   12bb4:	717b      	strb	r3, [r7, #5]
   12bb6:	71bb      	strb	r3, [r7, #6]
   12bb8:	71fb      	strb	r3, [r7, #7]
   12bba:	687a      	ldr	r2, [r7, #4]
   12bbc:	61ba      	str	r2, [r7, #24]
   12bbe:	4619      	mov	r1, r3
   12bc0:	f363 0100 	bfi	r1, r3, #0, #1
   12bc4:	f363 0141 	bfi	r1, r3, #1, #1
   12bc8:	f363 0182 	bfi	r1, r3, #2, #1
   12bcc:	f363 01c5 	bfi	r1, r3, #3, #3
   12bd0:	2201      	movs	r2, #1
   12bd2:	f362 1188 	bfi	r1, r2, #6, #3
   12bd6:	2208      	movs	r2, #8
   12bd8:	f362 2152 	bfi	r1, r2, #9, #10
   12bdc:	f363 41de 	bfi	r1, r3, #19, #12
   12be0:	f363 71df 	bfi	r1, r3, #31, #1
   12be4:	f107 0218 	add.w	r2, r7, #24
   12be8:	48ad      	ldr	r0, [pc, #692]	; (12ea0 <bus_fault+0x304>)
   12bea:	f006 fbbc 	bl	19366 <z_impl_z_log_msg_static_create>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   12bee:	4bad      	ldr	r3, [pc, #692]	; (12ea4 <bus_fault+0x308>)
   12bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12bf2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   12bf6:	d12a      	bne.n	12c4e <bus_fault+0xb2>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   12bf8:	4baa      	ldr	r3, [pc, #680]	; (12ea4 <bus_fault+0x308>)
   12bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12bfc:	f413 6f00 	tst.w	r3, #2048	; 0x800
   12c00:	d148      	bne.n	12c94 <bus_fault+0xf8>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   12c02:	4ba8      	ldr	r3, [pc, #672]	; (12ea4 <bus_fault+0x308>)
   12c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12c06:	f413 7f00 	tst.w	r3, #512	; 0x200
   12c0a:	d166      	bne.n	12cda <bus_fault+0x13e>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   12c0c:	4ba5      	ldr	r3, [pc, #660]	; (12ea4 <bus_fault+0x308>)
   12c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12c10:	f413 6f80 	tst.w	r3, #1024	; 0x400
   12c14:	f040 80d5 	bne.w	12dc2 <bus_fault+0x226>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   12c18:	4ba2      	ldr	r3, [pc, #648]	; (12ea4 <bus_fault+0x308>)
   12c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12c1c:	f413 7f80 	tst.w	r3, #256	; 0x100
   12c20:	f040 80f2 	bne.w	12e08 <bus_fault+0x26c>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   12c24:	4b9f      	ldr	r3, [pc, #636]	; (12ea4 <bus_fault+0x308>)
   12c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12c28:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12c2c:	f040 8111 	bne.w	12e52 <bus_fault+0x2b6>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12c30:	4a9c      	ldr	r2, [pc, #624]	; (12ea4 <bus_fault+0x308>)
   12c32:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12c34:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   12c38:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12c3a:	2101      	movs	r1, #1
   12c3c:	4628      	mov	r0, r5
   12c3e:	f006 fcb4 	bl	195aa <memory_fault_recoverable>
   12c42:	7020      	strb	r0, [r4, #0]
}
   12c44:	2000      	movs	r0, #0
   12c46:	37b0      	adds	r7, #176	; 0xb0
   12c48:	46bd      	mov	sp, r7
   12c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error");
   12c4e:	4b96      	ldr	r3, [pc, #600]	; (12ea8 <bus_fault+0x30c>)
   12c50:	637b      	str	r3, [r7, #52]	; 0x34
   12c52:	2302      	movs	r3, #2
   12c54:	713b      	strb	r3, [r7, #4]
   12c56:	2300      	movs	r3, #0
   12c58:	717b      	strb	r3, [r7, #5]
   12c5a:	71bb      	strb	r3, [r7, #6]
   12c5c:	71fb      	strb	r3, [r7, #7]
   12c5e:	687a      	ldr	r2, [r7, #4]
   12c60:	633a      	str	r2, [r7, #48]	; 0x30
   12c62:	4619      	mov	r1, r3
   12c64:	f363 0100 	bfi	r1, r3, #0, #1
   12c68:	f363 0141 	bfi	r1, r3, #1, #1
   12c6c:	f363 0182 	bfi	r1, r3, #2, #1
   12c70:	f363 01c5 	bfi	r1, r3, #3, #3
   12c74:	2201      	movs	r2, #1
   12c76:	f362 1188 	bfi	r1, r2, #6, #3
   12c7a:	2208      	movs	r2, #8
   12c7c:	f362 2152 	bfi	r1, r2, #9, #10
   12c80:	f363 41de 	bfi	r1, r3, #19, #12
   12c84:	f363 71df 	bfi	r1, r3, #31, #1
   12c88:	f107 0230 	add.w	r2, r7, #48	; 0x30
   12c8c:	4884      	ldr	r0, [pc, #528]	; (12ea0 <bus_fault+0x304>)
   12c8e:	f006 fb6a 	bl	19366 <z_impl_z_log_msg_static_create>
   12c92:	e7b1      	b.n	12bf8 <bus_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   12c94:	4b85      	ldr	r3, [pc, #532]	; (12eac <bus_fault+0x310>)
   12c96:	64fb      	str	r3, [r7, #76]	; 0x4c
   12c98:	2302      	movs	r3, #2
   12c9a:	713b      	strb	r3, [r7, #4]
   12c9c:	2300      	movs	r3, #0
   12c9e:	717b      	strb	r3, [r7, #5]
   12ca0:	71bb      	strb	r3, [r7, #6]
   12ca2:	71fb      	strb	r3, [r7, #7]
   12ca4:	687a      	ldr	r2, [r7, #4]
   12ca6:	64ba      	str	r2, [r7, #72]	; 0x48
   12ca8:	4619      	mov	r1, r3
   12caa:	f363 0100 	bfi	r1, r3, #0, #1
   12cae:	f363 0141 	bfi	r1, r3, #1, #1
   12cb2:	f363 0182 	bfi	r1, r3, #2, #1
   12cb6:	f363 01c5 	bfi	r1, r3, #3, #3
   12cba:	2201      	movs	r2, #1
   12cbc:	f362 1188 	bfi	r1, r2, #6, #3
   12cc0:	2208      	movs	r2, #8
   12cc2:	f362 2152 	bfi	r1, r2, #9, #10
   12cc6:	f363 41de 	bfi	r1, r3, #19, #12
   12cca:	f363 71df 	bfi	r1, r3, #31, #1
   12cce:	f107 0248 	add.w	r2, r7, #72	; 0x48
   12cd2:	4873      	ldr	r0, [pc, #460]	; (12ea0 <bus_fault+0x304>)
   12cd4:	f006 fb47 	bl	19366 <z_impl_z_log_msg_static_create>
   12cd8:	e793      	b.n	12c02 <bus_fault+0x66>
		PR_FAULT_INFO("  Precise data bus error");
   12cda:	4b75      	ldr	r3, [pc, #468]	; (12eb0 <bus_fault+0x314>)
   12cdc:	667b      	str	r3, [r7, #100]	; 0x64
   12cde:	2302      	movs	r3, #2
   12ce0:	713b      	strb	r3, [r7, #4]
   12ce2:	2300      	movs	r3, #0
   12ce4:	717b      	strb	r3, [r7, #5]
   12ce6:	71bb      	strb	r3, [r7, #6]
   12ce8:	71fb      	strb	r3, [r7, #7]
   12cea:	687a      	ldr	r2, [r7, #4]
   12cec:	663a      	str	r2, [r7, #96]	; 0x60
   12cee:	4619      	mov	r1, r3
   12cf0:	f363 0100 	bfi	r1, r3, #0, #1
   12cf4:	f363 0141 	bfi	r1, r3, #1, #1
   12cf8:	f363 0182 	bfi	r1, r3, #2, #1
   12cfc:	f363 01c5 	bfi	r1, r3, #3, #3
   12d00:	2201      	movs	r2, #1
   12d02:	f362 1188 	bfi	r1, r2, #6, #3
   12d06:	2208      	movs	r2, #8
   12d08:	f362 2152 	bfi	r1, r2, #9, #10
   12d0c:	f363 41de 	bfi	r1, r3, #19, #12
   12d10:	f363 71df 	bfi	r1, r3, #31, #1
   12d14:	f107 0260 	add.w	r2, r7, #96	; 0x60
   12d18:	4861      	ldr	r0, [pc, #388]	; (12ea0 <bus_fault+0x304>)
   12d1a:	f006 fb24 	bl	19366 <z_impl_z_log_msg_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
   12d1e:	4b61      	ldr	r3, [pc, #388]	; (12ea4 <bus_fault+0x308>)
   12d20:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   12d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12d24:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   12d28:	f43f af70 	beq.w	12c0c <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   12d2c:	46e8      	mov	r8, sp
   12d2e:	b088      	sub	sp, #32
   12d30:	466b      	mov	r3, sp
   12d32:	f113 0210 	adds.w	r2, r3, #16
   12d36:	d011      	beq.n	12d5c <bus_fault+0x1c0>
   12d38:	210c      	movs	r1, #12
   12d3a:	b152      	cbz	r2, 12d52 <bus_fault+0x1b6>
   12d3c:	468c      	mov	ip, r1
   12d3e:	2904      	cmp	r1, #4
   12d40:	dd03      	ble.n	12d4a <bus_fault+0x1ae>
   12d42:	f8df e170 	ldr.w	lr, [pc, #368]	; 12eb4 <bus_fault+0x318>
   12d46:	f8c3 e014 	str.w	lr, [r3, #20]
   12d4a:	f1bc 0f08 	cmp.w	ip, #8
   12d4e:	dd08      	ble.n	12d62 <bus_fault+0x1c6>
   12d50:	6198      	str	r0, [r3, #24]
   12d52:	290b      	cmp	r1, #11
   12d54:	dd32      	ble.n	12dbc <bus_fault+0x220>
   12d56:	f04f 0c0c 	mov.w	ip, #12
   12d5a:	e004      	b.n	12d66 <bus_fault+0x1ca>
   12d5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12d60:	e7eb      	b.n	12d3a <bus_fault+0x19e>
   12d62:	f06f 0c1b 	mvn.w	ip, #27
   12d66:	b13a      	cbz	r2, 12d78 <bus_fault+0x1dc>
   12d68:	2103      	movs	r1, #3
   12d6a:	7139      	strb	r1, [r7, #4]
   12d6c:	2100      	movs	r1, #0
   12d6e:	7179      	strb	r1, [r7, #5]
   12d70:	71b9      	strb	r1, [r7, #6]
   12d72:	71f9      	strb	r1, [r7, #7]
   12d74:	6878      	ldr	r0, [r7, #4]
   12d76:	6118      	str	r0, [r3, #16]
   12d78:	2100      	movs	r1, #0
   12d7a:	f36f 0100 	bfc	r1, #0, #1
   12d7e:	f36f 0141 	bfc	r1, #1, #1
   12d82:	f36f 0182 	bfc	r1, #2, #1
   12d86:	f36f 01c5 	bfc	r1, #3, #3
   12d8a:	2301      	movs	r3, #1
   12d8c:	f363 1188 	bfi	r1, r3, #6, #3
   12d90:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   12d94:	f363 2152 	bfi	r1, r3, #9, #10
   12d98:	f36f 41de 	bfc	r1, #19, #12
   12d9c:	f36f 71df 	bfc	r1, #31, #1
   12da0:	2300      	movs	r3, #0
   12da2:	483f      	ldr	r0, [pc, #252]	; (12ea0 <bus_fault+0x304>)
   12da4:	f006 fadf 	bl	19366 <z_impl_z_log_msg_static_create>
   12da8:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   12daa:	2e00      	cmp	r6, #0
   12dac:	f43f af2e 	beq.w	12c0c <bus_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   12db0:	4a3c      	ldr	r2, [pc, #240]	; (12ea4 <bus_fault+0x308>)
   12db2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12db4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   12db8:	6293      	str	r3, [r2, #40]	; 0x28
   12dba:	e727      	b.n	12c0c <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   12dbc:	f06f 0c1b 	mvn.w	ip, #27
   12dc0:	e7d1      	b.n	12d66 <bus_fault+0x1ca>
		PR_FAULT_INFO("  Imprecise data bus error");
   12dc2:	4b3d      	ldr	r3, [pc, #244]	; (12eb8 <bus_fault+0x31c>)
   12dc4:	67fb      	str	r3, [r7, #124]	; 0x7c
   12dc6:	2302      	movs	r3, #2
   12dc8:	713b      	strb	r3, [r7, #4]
   12dca:	2300      	movs	r3, #0
   12dcc:	717b      	strb	r3, [r7, #5]
   12dce:	71bb      	strb	r3, [r7, #6]
   12dd0:	71fb      	strb	r3, [r7, #7]
   12dd2:	687a      	ldr	r2, [r7, #4]
   12dd4:	67ba      	str	r2, [r7, #120]	; 0x78
   12dd6:	4619      	mov	r1, r3
   12dd8:	f363 0100 	bfi	r1, r3, #0, #1
   12ddc:	f363 0141 	bfi	r1, r3, #1, #1
   12de0:	f363 0182 	bfi	r1, r3, #2, #1
   12de4:	f363 01c5 	bfi	r1, r3, #3, #3
   12de8:	2201      	movs	r2, #1
   12dea:	f362 1188 	bfi	r1, r2, #6, #3
   12dee:	2208      	movs	r2, #8
   12df0:	f362 2152 	bfi	r1, r2, #9, #10
   12df4:	f363 41de 	bfi	r1, r3, #19, #12
   12df8:	f363 71df 	bfi	r1, r3, #31, #1
   12dfc:	f107 0278 	add.w	r2, r7, #120	; 0x78
   12e00:	4827      	ldr	r0, [pc, #156]	; (12ea0 <bus_fault+0x304>)
   12e02:	f006 fab0 	bl	19366 <z_impl_z_log_msg_static_create>
   12e06:	e707      	b.n	12c18 <bus_fault+0x7c>
		PR_FAULT_INFO("  Instruction bus error");
   12e08:	4b2c      	ldr	r3, [pc, #176]	; (12ebc <bus_fault+0x320>)
   12e0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   12e0e:	2302      	movs	r3, #2
   12e10:	713b      	strb	r3, [r7, #4]
   12e12:	2300      	movs	r3, #0
   12e14:	717b      	strb	r3, [r7, #5]
   12e16:	71bb      	strb	r3, [r7, #6]
   12e18:	71fb      	strb	r3, [r7, #7]
   12e1a:	687a      	ldr	r2, [r7, #4]
   12e1c:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
   12e20:	4619      	mov	r1, r3
   12e22:	f363 0100 	bfi	r1, r3, #0, #1
   12e26:	f363 0141 	bfi	r1, r3, #1, #1
   12e2a:	f363 0182 	bfi	r1, r3, #2, #1
   12e2e:	f363 01c5 	bfi	r1, r3, #3, #3
   12e32:	2201      	movs	r2, #1
   12e34:	f362 1188 	bfi	r1, r2, #6, #3
   12e38:	2208      	movs	r2, #8
   12e3a:	f362 2152 	bfi	r1, r2, #9, #10
   12e3e:	f363 41de 	bfi	r1, r3, #19, #12
   12e42:	f363 71df 	bfi	r1, r3, #31, #1
   12e46:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
   12e4a:	4815      	ldr	r0, [pc, #84]	; (12ea0 <bus_fault+0x304>)
   12e4c:	f006 fa8b 	bl	19366 <z_impl_z_log_msg_static_create>
   12e50:	e6ee      	b.n	12c30 <bus_fault+0x94>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   12e52:	4b1b      	ldr	r3, [pc, #108]	; (12ec0 <bus_fault+0x324>)
   12e54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   12e58:	2302      	movs	r3, #2
   12e5a:	713b      	strb	r3, [r7, #4]
   12e5c:	2300      	movs	r3, #0
   12e5e:	717b      	strb	r3, [r7, #5]
   12e60:	71bb      	strb	r3, [r7, #6]
   12e62:	71fb      	strb	r3, [r7, #7]
   12e64:	687a      	ldr	r2, [r7, #4]
   12e66:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   12e6a:	4619      	mov	r1, r3
   12e6c:	f363 0100 	bfi	r1, r3, #0, #1
   12e70:	f363 0141 	bfi	r1, r3, #1, #1
   12e74:	f363 0182 	bfi	r1, r3, #2, #1
   12e78:	f363 01c5 	bfi	r1, r3, #3, #3
   12e7c:	2201      	movs	r2, #1
   12e7e:	f362 1188 	bfi	r1, r2, #6, #3
   12e82:	2208      	movs	r2, #8
   12e84:	f362 2152 	bfi	r1, r2, #9, #10
   12e88:	f363 41de 	bfi	r1, r3, #19, #12
   12e8c:	f363 71df 	bfi	r1, r3, #31, #1
   12e90:	f107 0290 	add.w	r2, r7, #144	; 0x90
   12e94:	4802      	ldr	r0, [pc, #8]	; (12ea0 <bus_fault+0x304>)
   12e96:	f006 fa66 	bl	19366 <z_impl_z_log_msg_static_create>
   12e9a:	e6c9      	b.n	12c30 <bus_fault+0x94>
   12e9c:	0001b4e4 	.word	0x0001b4e4
   12ea0:	0001afb8 	.word	0x0001afb8
   12ea4:	e000ed00 	.word	0xe000ed00
   12ea8:	0001b4fc 	.word	0x0001b4fc
   12eac:	0001b450 	.word	0x0001b450
   12eb0:	0001b510 	.word	0x0001b510
   12eb4:	0001b52c 	.word	0x0001b52c
   12eb8:	0001b544 	.word	0x0001b544
   12ebc:	0001b560 	.word	0x0001b560
   12ec0:	0001b4b4 	.word	0x0001b4b4

00012ec4 <usage_fault>:
{
   12ec4:	b510      	push	{r4, lr}
   12ec6:	b0b2      	sub	sp, #200	; 0xc8
	PR_FAULT_INFO("***** USAGE FAULT *****");
   12ec8:	4baf      	ldr	r3, [pc, #700]	; (13188 <usage_fault+0x2c4>)
   12eca:	9307      	str	r3, [sp, #28]
   12ecc:	2302      	movs	r3, #2
   12ece:	f88d 3004 	strb.w	r3, [sp, #4]
   12ed2:	2300      	movs	r3, #0
   12ed4:	f88d 3005 	strb.w	r3, [sp, #5]
   12ed8:	f88d 3006 	strb.w	r3, [sp, #6]
   12edc:	f88d 3007 	strb.w	r3, [sp, #7]
   12ee0:	9a01      	ldr	r2, [sp, #4]
   12ee2:	9206      	str	r2, [sp, #24]
   12ee4:	4619      	mov	r1, r3
   12ee6:	f363 0100 	bfi	r1, r3, #0, #1
   12eea:	f363 0141 	bfi	r1, r3, #1, #1
   12eee:	f363 0182 	bfi	r1, r3, #2, #1
   12ef2:	f363 01c5 	bfi	r1, r3, #3, #3
   12ef6:	2201      	movs	r2, #1
   12ef8:	f362 1188 	bfi	r1, r2, #6, #3
   12efc:	2208      	movs	r2, #8
   12efe:	f362 2152 	bfi	r1, r2, #9, #10
   12f02:	f363 41de 	bfi	r1, r3, #19, #12
   12f06:	f363 71df 	bfi	r1, r3, #31, #1
   12f0a:	aa06      	add	r2, sp, #24
   12f0c:	489f      	ldr	r0, [pc, #636]	; (1318c <usage_fault+0x2c8>)
   12f0e:	f006 fa2a 	bl	19366 <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   12f12:	4b9f      	ldr	r3, [pc, #636]	; (13190 <usage_fault+0x2cc>)
   12f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f16:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   12f1a:	d12b      	bne.n	12f74 <usage_fault+0xb0>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   12f1c:	4b9c      	ldr	r3, [pc, #624]	; (13190 <usage_fault+0x2cc>)
   12f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f20:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   12f24:	d14c      	bne.n	12fc0 <usage_fault+0xfc>
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   12f26:	4b9a      	ldr	r3, [pc, #616]	; (13190 <usage_fault+0x2cc>)
   12f28:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   12f2a:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   12f2e:	d16d      	bne.n	1300c <usage_fault+0x148>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   12f30:	4b97      	ldr	r3, [pc, #604]	; (13190 <usage_fault+0x2cc>)
   12f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f34:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   12f38:	f040 808e 	bne.w	13058 <usage_fault+0x194>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   12f3c:	4b94      	ldr	r3, [pc, #592]	; (13190 <usage_fault+0x2cc>)
   12f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f40:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   12f44:	f040 80ae 	bne.w	130a4 <usage_fault+0x1e0>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   12f48:	4b91      	ldr	r3, [pc, #580]	; (13190 <usage_fault+0x2cc>)
   12f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f4c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   12f50:	f040 80ce 	bne.w	130f0 <usage_fault+0x22c>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   12f54:	4b8e      	ldr	r3, [pc, #568]	; (13190 <usage_fault+0x2cc>)
   12f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f58:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   12f5c:	f040 80ee 	bne.w	1313c <usage_fault+0x278>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   12f60:	4a8b      	ldr	r2, [pc, #556]	; (13190 <usage_fault+0x2cc>)
   12f62:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12f64:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   12f68:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   12f6c:	6293      	str	r3, [r2, #40]	; 0x28
}
   12f6e:	4620      	mov	r0, r4
   12f70:	b032      	add	sp, #200	; 0xc8
   12f72:	bd10      	pop	{r4, pc}
		PR_FAULT_INFO("  Division by zero");
   12f74:	4b87      	ldr	r3, [pc, #540]	; (13194 <usage_fault+0x2d0>)
   12f76:	930d      	str	r3, [sp, #52]	; 0x34
   12f78:	2302      	movs	r3, #2
   12f7a:	f88d 3004 	strb.w	r3, [sp, #4]
   12f7e:	2300      	movs	r3, #0
   12f80:	f88d 3005 	strb.w	r3, [sp, #5]
   12f84:	f88d 3006 	strb.w	r3, [sp, #6]
   12f88:	f88d 3007 	strb.w	r3, [sp, #7]
   12f8c:	9a01      	ldr	r2, [sp, #4]
   12f8e:	920c      	str	r2, [sp, #48]	; 0x30
   12f90:	4619      	mov	r1, r3
   12f92:	f363 0100 	bfi	r1, r3, #0, #1
   12f96:	f363 0141 	bfi	r1, r3, #1, #1
   12f9a:	f363 0182 	bfi	r1, r3, #2, #1
   12f9e:	f363 01c5 	bfi	r1, r3, #3, #3
   12fa2:	2201      	movs	r2, #1
   12fa4:	f362 1188 	bfi	r1, r2, #6, #3
   12fa8:	2208      	movs	r2, #8
   12faa:	f362 2152 	bfi	r1, r2, #9, #10
   12fae:	f363 41de 	bfi	r1, r3, #19, #12
   12fb2:	f363 71df 	bfi	r1, r3, #31, #1
   12fb6:	aa0c      	add	r2, sp, #48	; 0x30
   12fb8:	4874      	ldr	r0, [pc, #464]	; (1318c <usage_fault+0x2c8>)
   12fba:	f006 f9d4 	bl	19366 <z_impl_z_log_msg_static_create>
   12fbe:	e7ad      	b.n	12f1c <usage_fault+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
   12fc0:	4b75      	ldr	r3, [pc, #468]	; (13198 <usage_fault+0x2d4>)
   12fc2:	9313      	str	r3, [sp, #76]	; 0x4c
   12fc4:	2302      	movs	r3, #2
   12fc6:	f88d 3004 	strb.w	r3, [sp, #4]
   12fca:	2300      	movs	r3, #0
   12fcc:	f88d 3005 	strb.w	r3, [sp, #5]
   12fd0:	f88d 3006 	strb.w	r3, [sp, #6]
   12fd4:	f88d 3007 	strb.w	r3, [sp, #7]
   12fd8:	9a01      	ldr	r2, [sp, #4]
   12fda:	9212      	str	r2, [sp, #72]	; 0x48
   12fdc:	4619      	mov	r1, r3
   12fde:	f363 0100 	bfi	r1, r3, #0, #1
   12fe2:	f363 0141 	bfi	r1, r3, #1, #1
   12fe6:	f363 0182 	bfi	r1, r3, #2, #1
   12fea:	f363 01c5 	bfi	r1, r3, #3, #3
   12fee:	2201      	movs	r2, #1
   12ff0:	f362 1188 	bfi	r1, r2, #6, #3
   12ff4:	2208      	movs	r2, #8
   12ff6:	f362 2152 	bfi	r1, r2, #9, #10
   12ffa:	f363 41de 	bfi	r1, r3, #19, #12
   12ffe:	f363 71df 	bfi	r1, r3, #31, #1
   13002:	aa12      	add	r2, sp, #72	; 0x48
   13004:	4861      	ldr	r0, [pc, #388]	; (1318c <usage_fault+0x2c8>)
   13006:	f006 f9ae 	bl	19366 <z_impl_z_log_msg_static_create>
   1300a:	e78c      	b.n	12f26 <usage_fault+0x62>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   1300c:	4b63      	ldr	r3, [pc, #396]	; (1319c <usage_fault+0x2d8>)
   1300e:	9319      	str	r3, [sp, #100]	; 0x64
   13010:	2402      	movs	r4, #2
   13012:	f88d 4004 	strb.w	r4, [sp, #4]
   13016:	2300      	movs	r3, #0
   13018:	f88d 3005 	strb.w	r3, [sp, #5]
   1301c:	f88d 3006 	strb.w	r3, [sp, #6]
   13020:	f88d 3007 	strb.w	r3, [sp, #7]
   13024:	9a01      	ldr	r2, [sp, #4]
   13026:	9218      	str	r2, [sp, #96]	; 0x60
   13028:	4619      	mov	r1, r3
   1302a:	f363 0100 	bfi	r1, r3, #0, #1
   1302e:	f363 0141 	bfi	r1, r3, #1, #1
   13032:	f363 0182 	bfi	r1, r3, #2, #1
   13036:	f363 01c5 	bfi	r1, r3, #3, #3
   1303a:	2201      	movs	r2, #1
   1303c:	f362 1188 	bfi	r1, r2, #6, #3
   13040:	2208      	movs	r2, #8
   13042:	f362 2152 	bfi	r1, r2, #9, #10
   13046:	f363 41de 	bfi	r1, r3, #19, #12
   1304a:	f363 71df 	bfi	r1, r3, #31, #1
   1304e:	aa18      	add	r2, sp, #96	; 0x60
   13050:	484e      	ldr	r0, [pc, #312]	; (1318c <usage_fault+0x2c8>)
   13052:	f006 f988 	bl	19366 <z_impl_z_log_msg_static_create>
		reason = K_ERR_STACK_CHK_FAIL;
   13056:	e76b      	b.n	12f30 <usage_fault+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
   13058:	4b51      	ldr	r3, [pc, #324]	; (131a0 <usage_fault+0x2dc>)
   1305a:	931f      	str	r3, [sp, #124]	; 0x7c
   1305c:	2302      	movs	r3, #2
   1305e:	f88d 3004 	strb.w	r3, [sp, #4]
   13062:	2300      	movs	r3, #0
   13064:	f88d 3005 	strb.w	r3, [sp, #5]
   13068:	f88d 3006 	strb.w	r3, [sp, #6]
   1306c:	f88d 3007 	strb.w	r3, [sp, #7]
   13070:	9a01      	ldr	r2, [sp, #4]
   13072:	921e      	str	r2, [sp, #120]	; 0x78
   13074:	4619      	mov	r1, r3
   13076:	f363 0100 	bfi	r1, r3, #0, #1
   1307a:	f363 0141 	bfi	r1, r3, #1, #1
   1307e:	f363 0182 	bfi	r1, r3, #2, #1
   13082:	f363 01c5 	bfi	r1, r3, #3, #3
   13086:	2201      	movs	r2, #1
   13088:	f362 1188 	bfi	r1, r2, #6, #3
   1308c:	2208      	movs	r2, #8
   1308e:	f362 2152 	bfi	r1, r2, #9, #10
   13092:	f363 41de 	bfi	r1, r3, #19, #12
   13096:	f363 71df 	bfi	r1, r3, #31, #1
   1309a:	aa1e      	add	r2, sp, #120	; 0x78
   1309c:	483b      	ldr	r0, [pc, #236]	; (1318c <usage_fault+0x2c8>)
   1309e:	f006 f962 	bl	19366 <z_impl_z_log_msg_static_create>
   130a2:	e74b      	b.n	12f3c <usage_fault+0x78>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   130a4:	4b3f      	ldr	r3, [pc, #252]	; (131a4 <usage_fault+0x2e0>)
   130a6:	9325      	str	r3, [sp, #148]	; 0x94
   130a8:	2302      	movs	r3, #2
   130aa:	f88d 3004 	strb.w	r3, [sp, #4]
   130ae:	2300      	movs	r3, #0
   130b0:	f88d 3005 	strb.w	r3, [sp, #5]
   130b4:	f88d 3006 	strb.w	r3, [sp, #6]
   130b8:	f88d 3007 	strb.w	r3, [sp, #7]
   130bc:	9a01      	ldr	r2, [sp, #4]
   130be:	9224      	str	r2, [sp, #144]	; 0x90
   130c0:	4619      	mov	r1, r3
   130c2:	f363 0100 	bfi	r1, r3, #0, #1
   130c6:	f363 0141 	bfi	r1, r3, #1, #1
   130ca:	f363 0182 	bfi	r1, r3, #2, #1
   130ce:	f363 01c5 	bfi	r1, r3, #3, #3
   130d2:	2201      	movs	r2, #1
   130d4:	f362 1188 	bfi	r1, r2, #6, #3
   130d8:	2208      	movs	r2, #8
   130da:	f362 2152 	bfi	r1, r2, #9, #10
   130de:	f363 41de 	bfi	r1, r3, #19, #12
   130e2:	f363 71df 	bfi	r1, r3, #31, #1
   130e6:	aa24      	add	r2, sp, #144	; 0x90
   130e8:	4828      	ldr	r0, [pc, #160]	; (1318c <usage_fault+0x2c8>)
   130ea:	f006 f93c 	bl	19366 <z_impl_z_log_msg_static_create>
   130ee:	e72b      	b.n	12f48 <usage_fault+0x84>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   130f0:	4b2d      	ldr	r3, [pc, #180]	; (131a8 <usage_fault+0x2e4>)
   130f2:	932b      	str	r3, [sp, #172]	; 0xac
   130f4:	2302      	movs	r3, #2
   130f6:	f88d 3004 	strb.w	r3, [sp, #4]
   130fa:	2300      	movs	r3, #0
   130fc:	f88d 3005 	strb.w	r3, [sp, #5]
   13100:	f88d 3006 	strb.w	r3, [sp, #6]
   13104:	f88d 3007 	strb.w	r3, [sp, #7]
   13108:	9a01      	ldr	r2, [sp, #4]
   1310a:	922a      	str	r2, [sp, #168]	; 0xa8
   1310c:	4619      	mov	r1, r3
   1310e:	f363 0100 	bfi	r1, r3, #0, #1
   13112:	f363 0141 	bfi	r1, r3, #1, #1
   13116:	f363 0182 	bfi	r1, r3, #2, #1
   1311a:	f363 01c5 	bfi	r1, r3, #3, #3
   1311e:	2201      	movs	r2, #1
   13120:	f362 1188 	bfi	r1, r2, #6, #3
   13124:	2208      	movs	r2, #8
   13126:	f362 2152 	bfi	r1, r2, #9, #10
   1312a:	f363 41de 	bfi	r1, r3, #19, #12
   1312e:	f363 71df 	bfi	r1, r3, #31, #1
   13132:	aa2a      	add	r2, sp, #168	; 0xa8
   13134:	4815      	ldr	r0, [pc, #84]	; (1318c <usage_fault+0x2c8>)
   13136:	f006 f916 	bl	19366 <z_impl_z_log_msg_static_create>
   1313a:	e70b      	b.n	12f54 <usage_fault+0x90>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1313c:	4b1b      	ldr	r3, [pc, #108]	; (131ac <usage_fault+0x2e8>)
   1313e:	9331      	str	r3, [sp, #196]	; 0xc4
   13140:	2302      	movs	r3, #2
   13142:	f88d 3004 	strb.w	r3, [sp, #4]
   13146:	2300      	movs	r3, #0
   13148:	f88d 3005 	strb.w	r3, [sp, #5]
   1314c:	f88d 3006 	strb.w	r3, [sp, #6]
   13150:	f88d 3007 	strb.w	r3, [sp, #7]
   13154:	9a01      	ldr	r2, [sp, #4]
   13156:	9230      	str	r2, [sp, #192]	; 0xc0
   13158:	4619      	mov	r1, r3
   1315a:	f363 0100 	bfi	r1, r3, #0, #1
   1315e:	f363 0141 	bfi	r1, r3, #1, #1
   13162:	f363 0182 	bfi	r1, r3, #2, #1
   13166:	f363 01c5 	bfi	r1, r3, #3, #3
   1316a:	2201      	movs	r2, #1
   1316c:	f362 1188 	bfi	r1, r2, #6, #3
   13170:	2208      	movs	r2, #8
   13172:	f362 2152 	bfi	r1, r2, #9, #10
   13176:	f363 41de 	bfi	r1, r3, #19, #12
   1317a:	f363 71df 	bfi	r1, r3, #31, #1
   1317e:	aa30      	add	r2, sp, #192	; 0xc0
   13180:	4802      	ldr	r0, [pc, #8]	; (1318c <usage_fault+0x2c8>)
   13182:	f006 f8f0 	bl	19366 <z_impl_z_log_msg_static_create>
   13186:	e6eb      	b.n	12f60 <usage_fault+0x9c>
   13188:	0001b578 	.word	0x0001b578
   1318c:	0001afb8 	.word	0x0001afb8
   13190:	e000ed00 	.word	0xe000ed00
   13194:	0001b590 	.word	0x0001b590
   13198:	0001b5a4 	.word	0x0001b5a4
   1319c:	0001b5c0 	.word	0x0001b5c0
   131a0:	0001b5ec 	.word	0x0001b5ec
   131a4:	0001b60c 	.word	0x0001b60c
   131a8:	0001b634 	.word	0x0001b634
   131ac:	0001b650 	.word	0x0001b650

000131b0 <hard_fault>:
{
   131b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   131b2:	b09b      	sub	sp, #108	; 0x6c
   131b4:	af00      	add	r7, sp, #0
   131b6:	4606      	mov	r6, r0
   131b8:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
   131ba:	4b85      	ldr	r3, [pc, #532]	; (133d0 <hard_fault+0x220>)
   131bc:	61fb      	str	r3, [r7, #28]
   131be:	2302      	movs	r3, #2
   131c0:	713b      	strb	r3, [r7, #4]
   131c2:	2400      	movs	r4, #0
   131c4:	717c      	strb	r4, [r7, #5]
   131c6:	71bc      	strb	r4, [r7, #6]
   131c8:	71fc      	strb	r4, [r7, #7]
   131ca:	687b      	ldr	r3, [r7, #4]
   131cc:	61bb      	str	r3, [r7, #24]
   131ce:	4621      	mov	r1, r4
   131d0:	f364 0100 	bfi	r1, r4, #0, #1
   131d4:	f364 0141 	bfi	r1, r4, #1, #1
   131d8:	f364 0182 	bfi	r1, r4, #2, #1
   131dc:	f364 01c5 	bfi	r1, r4, #3, #3
   131e0:	2301      	movs	r3, #1
   131e2:	f363 1188 	bfi	r1, r3, #6, #3
   131e6:	2308      	movs	r3, #8
   131e8:	f363 2152 	bfi	r1, r3, #9, #10
   131ec:	f364 41de 	bfi	r1, r4, #19, #12
   131f0:	f364 71df 	bfi	r1, r4, #31, #1
   131f4:	4623      	mov	r3, r4
   131f6:	f107 0218 	add.w	r2, r7, #24
   131fa:	4876      	ldr	r0, [pc, #472]	; (133d4 <hard_fault+0x224>)
   131fc:	f006 f8b3 	bl	19366 <z_impl_z_log_msg_static_create>
	*recoverable = false;
   13200:	702c      	strb	r4, [r5, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13202:	4b75      	ldr	r3, [pc, #468]	; (133d8 <hard_fault+0x228>)
   13204:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   13206:	f014 0402 	ands.w	r4, r4, #2
   1320a:	d10c      	bne.n	13226 <hard_fault+0x76>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1320c:	4b72      	ldr	r3, [pc, #456]	; (133d8 <hard_fault+0x228>)
   1320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13210:	2b00      	cmp	r3, #0
   13212:	db2c      	blt.n	1326e <hard_fault+0xbe>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   13214:	4b70      	ldr	r3, [pc, #448]	; (133d8 <hard_fault+0x228>)
   13216:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   13218:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   1321c:	d14a      	bne.n	132b4 <hard_fault+0x104>
}
   1321e:	4620      	mov	r0, r4
   13220:	376c      	adds	r7, #108	; 0x6c
   13222:	46bd      	mov	sp, r7
   13224:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
   13226:	4b6d      	ldr	r3, [pc, #436]	; (133dc <hard_fault+0x22c>)
   13228:	667b      	str	r3, [r7, #100]	; 0x64
   1322a:	2302      	movs	r3, #2
   1322c:	713b      	strb	r3, [r7, #4]
   1322e:	2400      	movs	r4, #0
   13230:	717c      	strb	r4, [r7, #5]
   13232:	71bc      	strb	r4, [r7, #6]
   13234:	71fc      	strb	r4, [r7, #7]
   13236:	687b      	ldr	r3, [r7, #4]
   13238:	663b      	str	r3, [r7, #96]	; 0x60
   1323a:	4621      	mov	r1, r4
   1323c:	f364 0100 	bfi	r1, r4, #0, #1
   13240:	f364 0141 	bfi	r1, r4, #1, #1
   13244:	f364 0182 	bfi	r1, r4, #2, #1
   13248:	f364 01c5 	bfi	r1, r4, #3, #3
   1324c:	2301      	movs	r3, #1
   1324e:	f363 1188 	bfi	r1, r3, #6, #3
   13252:	2308      	movs	r3, #8
   13254:	f363 2152 	bfi	r1, r3, #9, #10
   13258:	f364 41de 	bfi	r1, r4, #19, #12
   1325c:	f364 71df 	bfi	r1, r4, #31, #1
   13260:	4623      	mov	r3, r4
   13262:	f107 0260 	add.w	r2, r7, #96	; 0x60
   13266:	485b      	ldr	r0, [pc, #364]	; (133d4 <hard_fault+0x224>)
   13268:	f006 f87d 	bl	19366 <z_impl_z_log_msg_static_create>
   1326c:	e7d7      	b.n	1321e <hard_fault+0x6e>
		PR_EXC("  Debug event");
   1326e:	4b5c      	ldr	r3, [pc, #368]	; (133e0 <hard_fault+0x230>)
   13270:	64fb      	str	r3, [r7, #76]	; 0x4c
   13272:	2302      	movs	r3, #2
   13274:	713b      	strb	r3, [r7, #4]
   13276:	2300      	movs	r3, #0
   13278:	717b      	strb	r3, [r7, #5]
   1327a:	71bb      	strb	r3, [r7, #6]
   1327c:	71fb      	strb	r3, [r7, #7]
   1327e:	687a      	ldr	r2, [r7, #4]
   13280:	64ba      	str	r2, [r7, #72]	; 0x48
   13282:	4619      	mov	r1, r3
   13284:	f363 0100 	bfi	r1, r3, #0, #1
   13288:	f363 0141 	bfi	r1, r3, #1, #1
   1328c:	f363 0182 	bfi	r1, r3, #2, #1
   13290:	f363 01c5 	bfi	r1, r3, #3, #3
   13294:	2201      	movs	r2, #1
   13296:	f362 1188 	bfi	r1, r2, #6, #3
   1329a:	2208      	movs	r2, #8
   1329c:	f362 2152 	bfi	r1, r2, #9, #10
   132a0:	f363 41de 	bfi	r1, r3, #19, #12
   132a4:	f363 71df 	bfi	r1, r3, #31, #1
   132a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
   132ac:	4849      	ldr	r0, [pc, #292]	; (133d4 <hard_fault+0x224>)
   132ae:	f006 f85a 	bl	19366 <z_impl_z_log_msg_static_create>
   132b2:	e7b4      	b.n	1321e <hard_fault+0x6e>
		PR_EXC("  Fault escalation (see below)");
   132b4:	4b4b      	ldr	r3, [pc, #300]	; (133e4 <hard_fault+0x234>)
   132b6:	637b      	str	r3, [r7, #52]	; 0x34
   132b8:	2302      	movs	r3, #2
   132ba:	713b      	strb	r3, [r7, #4]
   132bc:	2300      	movs	r3, #0
   132be:	717b      	strb	r3, [r7, #5]
   132c0:	71bb      	strb	r3, [r7, #6]
   132c2:	71fb      	strb	r3, [r7, #7]
   132c4:	687a      	ldr	r2, [r7, #4]
   132c6:	633a      	str	r2, [r7, #48]	; 0x30
   132c8:	4619      	mov	r1, r3
   132ca:	f363 0100 	bfi	r1, r3, #0, #1
   132ce:	f363 0141 	bfi	r1, r3, #1, #1
   132d2:	f363 0182 	bfi	r1, r3, #2, #1
   132d6:	f363 01c5 	bfi	r1, r3, #3, #3
   132da:	2201      	movs	r2, #1
   132dc:	f362 1188 	bfi	r1, r2, #6, #3
   132e0:	2208      	movs	r2, #8
   132e2:	f362 2152 	bfi	r1, r2, #9, #10
   132e6:	f363 41de 	bfi	r1, r3, #19, #12
   132ea:	f363 71df 	bfi	r1, r3, #31, #1
   132ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
   132f2:	4838      	ldr	r0, [pc, #224]	; (133d4 <hard_fault+0x224>)
   132f4:	f006 f837 	bl	19366 <z_impl_z_log_msg_static_create>
		if (z_arm_is_synchronous_svc(esf)) {
   132f8:	4630      	mov	r0, r6
   132fa:	f7ff fa63 	bl	127c4 <z_arm_is_synchronous_svc>
   132fe:	2800      	cmp	r0, #0
   13300:	d042      	beq.n	13388 <hard_fault+0x1d8>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   13302:	6834      	ldr	r4, [r6, #0]
   13304:	466d      	mov	r5, sp
   13306:	b088      	sub	sp, #32
   13308:	466b      	mov	r3, sp
   1330a:	f113 0210 	adds.w	r2, r3, #16
   1330e:	d00f      	beq.n	13330 <hard_fault+0x180>
   13310:	210c      	movs	r1, #12
   13312:	b14a      	cbz	r2, 13328 <hard_fault+0x178>
   13314:	4608      	mov	r0, r1
   13316:	2904      	cmp	r1, #4
   13318:	dd03      	ble.n	13322 <hard_fault+0x172>
   1331a:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 133e8 <hard_fault+0x238>
   1331e:	f8c3 c014 	str.w	ip, [r3, #20]
   13322:	2808      	cmp	r0, #8
   13324:	dd07      	ble.n	13336 <hard_fault+0x186>
   13326:	619c      	str	r4, [r3, #24]
   13328:	290b      	cmp	r1, #11
   1332a:	dd2a      	ble.n	13382 <hard_fault+0x1d2>
   1332c:	240c      	movs	r4, #12
   1332e:	e004      	b.n	1333a <hard_fault+0x18a>
   13330:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   13334:	e7ed      	b.n	13312 <hard_fault+0x162>
   13336:	f06f 041b 	mvn.w	r4, #27
   1333a:	b13a      	cbz	r2, 1334c <hard_fault+0x19c>
   1333c:	2103      	movs	r1, #3
   1333e:	7139      	strb	r1, [r7, #4]
   13340:	2100      	movs	r1, #0
   13342:	7179      	strb	r1, [r7, #5]
   13344:	71b9      	strb	r1, [r7, #6]
   13346:	71f9      	strb	r1, [r7, #7]
   13348:	6878      	ldr	r0, [r7, #4]
   1334a:	6118      	str	r0, [r3, #16]
   1334c:	2100      	movs	r1, #0
   1334e:	f36f 0100 	bfc	r1, #0, #1
   13352:	f36f 0141 	bfc	r1, #1, #1
   13356:	f36f 0182 	bfc	r1, #2, #1
   1335a:	f36f 01c5 	bfc	r1, #3, #3
   1335e:	2301      	movs	r3, #1
   13360:	f363 1188 	bfi	r1, r3, #6, #3
   13364:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   13368:	f363 2152 	bfi	r1, r3, #9, #10
   1336c:	f36f 41de 	bfc	r1, #19, #12
   13370:	f36f 71df 	bfc	r1, #31, #1
   13374:	2300      	movs	r3, #0
   13376:	4817      	ldr	r0, [pc, #92]	; (133d4 <hard_fault+0x224>)
   13378:	f005 fff5 	bl	19366 <z_impl_z_log_msg_static_create>
   1337c:	46ad      	mov	sp, r5
			reason = esf->basic.r0;
   1337e:	6834      	ldr	r4, [r6, #0]
   13380:	e74d      	b.n	1321e <hard_fault+0x6e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   13382:	f06f 041b 	mvn.w	r4, #27
   13386:	e7d8      	b.n	1333a <hard_fault+0x18a>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   13388:	4b13      	ldr	r3, [pc, #76]	; (133d8 <hard_fault+0x228>)
   1338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1338c:	f013 0fff 	tst.w	r3, #255	; 0xff
   13390:	d10f      	bne.n	133b2 <hard_fault+0x202>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   13392:	4b11      	ldr	r3, [pc, #68]	; (133d8 <hard_fault+0x228>)
   13394:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   13396:	f414 447f 	ands.w	r4, r4, #65280	; 0xff00
   1339a:	d111      	bne.n	133c0 <hard_fault+0x210>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   1339c:	4b0e      	ldr	r3, [pc, #56]	; (133d8 <hard_fault+0x228>)
   1339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   133a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   133a4:	f4ff af3b 	bcc.w	1321e <hard_fault+0x6e>
			reason = usage_fault(esf);
   133a8:	4630      	mov	r0, r6
   133aa:	f7ff fd8b 	bl	12ec4 <usage_fault>
   133ae:	4604      	mov	r4, r0
	return reason;
   133b0:	e735      	b.n	1321e <hard_fault+0x6e>
			reason = mem_manage_fault(esf, 1, recoverable);
   133b2:	462a      	mov	r2, r5
   133b4:	2101      	movs	r1, #1
   133b6:	4630      	mov	r0, r6
   133b8:	f7ff fa78 	bl	128ac <mem_manage_fault>
   133bc:	4604      	mov	r4, r0
   133be:	e72e      	b.n	1321e <hard_fault+0x6e>
			reason = bus_fault(esf, 1, recoverable);
   133c0:	462a      	mov	r2, r5
   133c2:	2101      	movs	r1, #1
   133c4:	4630      	mov	r0, r6
   133c6:	f7ff fbe9 	bl	12b9c <bus_fault>
   133ca:	4604      	mov	r4, r0
   133cc:	e727      	b.n	1321e <hard_fault+0x6e>
   133ce:	bf00      	nop
   133d0:	0001b67c 	.word	0x0001b67c
   133d4:	0001afb8 	.word	0x0001afb8
   133d8:	e000ed00 	.word	0xe000ed00
   133dc:	0001b694 	.word	0x0001b694
   133e0:	0001b6b8 	.word	0x0001b6b8
   133e4:	0001b6c8 	.word	0x0001b6c8
   133e8:	0001b6e8 	.word	0x0001b6e8

000133ec <debug_monitor>:
{
   133ec:	b500      	push	{lr}
   133ee:	b089      	sub	sp, #36	; 0x24
	*recoverable = false;
   133f0:	2300      	movs	r3, #0
   133f2:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
   133f4:	4a13      	ldr	r2, [pc, #76]	; (13444 <debug_monitor+0x58>)
   133f6:	9207      	str	r2, [sp, #28]
   133f8:	2202      	movs	r2, #2
   133fa:	f88d 2004 	strb.w	r2, [sp, #4]
   133fe:	f88d 3005 	strb.w	r3, [sp, #5]
   13402:	f88d 3006 	strb.w	r3, [sp, #6]
   13406:	f88d 3007 	strb.w	r3, [sp, #7]
   1340a:	9a01      	ldr	r2, [sp, #4]
   1340c:	9206      	str	r2, [sp, #24]
   1340e:	4619      	mov	r1, r3
   13410:	f363 0100 	bfi	r1, r3, #0, #1
   13414:	f363 0141 	bfi	r1, r3, #1, #1
   13418:	f363 0182 	bfi	r1, r3, #2, #1
   1341c:	f363 01c5 	bfi	r1, r3, #3, #3
   13420:	2201      	movs	r2, #1
   13422:	f362 1188 	bfi	r1, r2, #6, #3
   13426:	2208      	movs	r2, #8
   13428:	f362 2152 	bfi	r1, r2, #9, #10
   1342c:	f363 41de 	bfi	r1, r3, #19, #12
   13430:	f363 71df 	bfi	r1, r3, #31, #1
   13434:	aa06      	add	r2, sp, #24
   13436:	4804      	ldr	r0, [pc, #16]	; (13448 <debug_monitor+0x5c>)
   13438:	f005 ff95 	bl	19366 <z_impl_z_log_msg_static_create>
}
   1343c:	b009      	add	sp, #36	; 0x24
   1343e:	f85d fb04 	ldr.w	pc, [sp], #4
   13442:	bf00      	nop
   13444:	0001b704 	.word	0x0001b704
   13448:	0001afb8 	.word	0x0001afb8

0001344c <reserved_exception>:
{
   1344c:	b590      	push	{r4, r7, lr}
   1344e:	b083      	sub	sp, #12
   13450:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** %s %d) *****",
   13452:	290f      	cmp	r1, #15
   13454:	dc23      	bgt.n	1349e <reserved_exception+0x52>
   13456:	4c30      	ldr	r4, [pc, #192]	; (13518 <reserved_exception+0xcc>)
   13458:	3910      	subs	r1, #16
   1345a:	2300      	movs	r3, #0
   1345c:	713b      	strb	r3, [r7, #4]
   1345e:	2302      	movs	r3, #2
   13460:	717b      	strb	r3, [r7, #5]
   13462:	b08a      	sub	sp, #40	; 0x28
   13464:	46ec      	mov	ip, sp
   13466:	f11c 0210 	adds.w	r2, ip, #16
   1346a:	d01a      	beq.n	134a2 <reserved_exception+0x56>
   1346c:	2012      	movs	r0, #18
   1346e:	b122      	cbz	r2, 1347a <reserved_exception+0x2e>
   13470:	2804      	cmp	r0, #4
   13472:	dd02      	ble.n	1347a <reserved_exception+0x2e>
   13474:	4b29      	ldr	r3, [pc, #164]	; (1351c <reserved_exception+0xd0>)
   13476:	f8cc 3014 	str.w	r3, [ip, #20]
   1347a:	2300      	movs	r3, #0
   1347c:	703b      	strb	r3, [r7, #0]
   1347e:	2302      	movs	r3, #2
   13480:	707b      	strb	r3, [r7, #1]
   13482:	b1e2      	cbz	r2, 134be <reserved_exception+0x72>
   13484:	4603      	mov	r3, r0
   13486:	2808      	cmp	r0, #8
   13488:	dd01      	ble.n	1348e <reserved_exception+0x42>
   1348a:	f8cc 4018 	str.w	r4, [ip, #24]
   1348e:	2b0c      	cmp	r3, #12
   13490:	dd01      	ble.n	13496 <reserved_exception+0x4a>
   13492:	f8cc 101c 	str.w	r1, [ip, #28]
   13496:	f10c 0320 	add.w	r3, ip, #32
   1349a:	2100      	movs	r1, #0
   1349c:	e00d      	b.n	134ba <reserved_exception+0x6e>
   1349e:	4c20      	ldr	r4, [pc, #128]	; (13520 <reserved_exception+0xd4>)
   134a0:	e7da      	b.n	13458 <reserved_exception+0xc>
   134a2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   134a6:	e7e2      	b.n	1346e <reserved_exception+0x22>
   134a8:	f101 0408 	add.w	r4, r1, #8
   134ac:	eb04 0e07 	add.w	lr, r4, r7
   134b0:	f81e ec08 	ldrb.w	lr, [lr, #-8]
   134b4:	f803 eb01 	strb.w	lr, [r3], #1
   134b8:	3101      	adds	r1, #1
   134ba:	2901      	cmp	r1, #1
   134bc:	d9f4      	bls.n	134a8 <reserved_exception+0x5c>
   134be:	2811      	cmp	r0, #17
   134c0:	dd26      	ble.n	13510 <reserved_exception+0xc4>
   134c2:	2312      	movs	r3, #18
   134c4:	b14a      	cbz	r2, 134da <reserved_exception+0x8e>
   134c6:	2104      	movs	r1, #4
   134c8:	7139      	strb	r1, [r7, #4]
   134ca:	2100      	movs	r1, #0
   134cc:	7179      	strb	r1, [r7, #5]
   134ce:	71b9      	strb	r1, [r7, #6]
   134d0:	2101      	movs	r1, #1
   134d2:	71f9      	strb	r1, [r7, #7]
   134d4:	6878      	ldr	r0, [r7, #4]
   134d6:	f8cc 0010 	str.w	r0, [ip, #16]
   134da:	2100      	movs	r1, #0
   134dc:	f36f 0100 	bfc	r1, #0, #1
   134e0:	f36f 0141 	bfc	r1, #1, #1
   134e4:	f36f 0182 	bfc	r1, #2, #1
   134e8:	f36f 01c5 	bfc	r1, #3, #3
   134ec:	2001      	movs	r0, #1
   134ee:	f360 1188 	bfi	r1, r0, #6, #3
   134f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
   134f6:	f363 2152 	bfi	r1, r3, #9, #10
   134fa:	f36f 41de 	bfc	r1, #19, #12
   134fe:	f36f 71df 	bfc	r1, #31, #1
   13502:	2300      	movs	r3, #0
   13504:	4807      	ldr	r0, [pc, #28]	; (13524 <reserved_exception+0xd8>)
   13506:	f005 ff2e 	bl	19366 <z_impl_z_log_msg_static_create>
}
   1350a:	370c      	adds	r7, #12
   1350c:	46bd      	mov	sp, r7
   1350e:	bd90      	pop	{r4, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   13510:	f06f 031b 	mvn.w	r3, #27
   13514:	e7d6      	b.n	134c4 <reserved_exception+0x78>
   13516:	bf00      	nop
   13518:	0001b728 	.word	0x0001b728
   1351c:	0001b75c 	.word	0x0001b75c
   13520:	0001b740 	.word	0x0001b740
   13524:	0001afb8 	.word	0x0001afb8

00013528 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   13528:	b530      	push	{r4, r5, lr}
   1352a:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1352c:	4b1a      	ldr	r3, [pc, #104]	; (13598 <z_arm_fault+0x70>)
   1352e:	685c      	ldr	r4, [r3, #4]
   13530:	f3c4 0408 	ubfx	r4, r4, #0, #9
   13534:	2300      	movs	r3, #0
   13536:	f383 8811 	msr	BASEPRI, r3
   1353a:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
   1353e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   13542:	f7ff f95d 	bl	12800 <get_esf>
   13546:	4605      	mov	r5, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   13548:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   1354c:	4621      	mov	r1, r4
   1354e:	f006 f82e 	bl	195ae <fault_handle>
	if (recoverable) {
   13552:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   13556:	b10b      	cbz	r3, 1355c <z_arm_fault+0x34>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   13558:	b00b      	add	sp, #44	; 0x2c
   1355a:	bd30      	pop	{r4, r5, pc}
   1355c:	4604      	mov	r4, r0
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1355e:	2220      	movs	r2, #32
   13560:	4629      	mov	r1, r5
   13562:	a801      	add	r0, sp, #4
   13564:	f006 f8e2 	bl	1972c <memcpy>
	if (nested_exc) {
   13568:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1356c:	b14b      	cbz	r3, 13582 <z_arm_fault+0x5a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1356e:	9b08      	ldr	r3, [sp, #32]
   13570:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13574:	b95a      	cbnz	r2, 1358e <z_arm_fault+0x66>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13576:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1357a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1357e:	9308      	str	r3, [sp, #32]
   13580:	e005      	b.n	1358e <z_arm_fault+0x66>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13582:	9b08      	ldr	r3, [sp, #32]
   13584:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   13588:	f023 0301 	bic.w	r3, r3, #1
   1358c:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   1358e:	a901      	add	r1, sp, #4
   13590:	4620      	mov	r0, r4
   13592:	f005 ffd7 	bl	19544 <z_arm_fatal_error>
   13596:	e7df      	b.n	13558 <z_arm_fault+0x30>
   13598:	e000ed00 	.word	0xe000ed00

0001359c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1359c:	4b04      	ldr	r3, [pc, #16]	; (135b0 <z_arm_fault_init+0x14>)
   1359e:	695a      	ldr	r2, [r3, #20]
   135a0:	f042 0210 	orr.w	r2, r2, #16
   135a4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   135a6:	695a      	ldr	r2, [r3, #20]
   135a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   135ac:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   135ae:	4770      	bx	lr
   135b0:	e000ed00 	.word	0xe000ed00

000135b4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   135b4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   135b8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   135bc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   135be:	4672      	mov	r2, lr
	bl z_arm_fault
   135c0:	f7ff ffb2 	bl	13528 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   135c4:	bd01      	pop	{r0, pc}
   135c6:	bf00      	nop

000135c8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   135c8:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   135ca:	e007      	b.n	135dc <z_arm_interrupt_init+0x14>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   135cc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   135d0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   135d4:	2120      	movs	r1, #32
   135d6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   135da:	3201      	adds	r2, #1
   135dc:	2a44      	cmp	r2, #68	; 0x44
   135de:	dc09      	bgt.n	135f4 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   135e0:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   135e2:	2b00      	cmp	r3, #0
   135e4:	daf2      	bge.n	135cc <z_arm_interrupt_init+0x4>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   135e6:	f003 030f 	and.w	r3, r3, #15
   135ea:	4903      	ldr	r1, [pc, #12]	; (135f8 <z_arm_interrupt_init+0x30>)
   135ec:	4419      	add	r1, r3
   135ee:	2320      	movs	r3, #32
   135f0:	760b      	strb	r3, [r1, #24]
   135f2:	e7f2      	b.n	135da <z_arm_interrupt_init+0x12>
	}
}
   135f4:	4770      	bx	lr
   135f6:	bf00      	nop
   135f8:	e000ecfc 	.word	0xe000ecfc

000135fc <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
   135fc:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
   135fe:	4915      	ldr	r1, [pc, #84]	; (13654 <__start+0x58>)
    strb r0, [r1]
   13600:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   13602:	2000      	movs	r0, #0
    msr CONTROL, r0
   13604:	f380 8814 	msr	CONTROL, r0
    isb
   13608:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   1360c:	2000      	movs	r0, #0
    msr MSPLIM, r0
   1360e:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   13612:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   13616:	f7fd ffe7 	bl	115e8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1361a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   1361c:	490e      	ldr	r1, [pc, #56]	; (13658 <__start+0x5c>)
    str r0, [r1]
   1361e:	6008      	str	r0, [r1, #0]
    dsb
   13620:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13624:	480d      	ldr	r0, [pc, #52]	; (1365c <__start+0x60>)
    msr msp, r0
   13626:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1362a:	f000 f841 	bl	136b0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1362e:	2020      	movs	r0, #32
    msr BASEPRI, r0
   13630:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   13634:	480a      	ldr	r0, [pc, #40]	; (13660 <__start+0x64>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   13636:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   1363a:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1363c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13640:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   13644:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   13646:	4308      	orrs	r0, r1
    msr CONTROL, r0
   13648:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1364c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   13650:	f7fe ffd4 	bl	125fc <z_arm_prep_c>
    ldr r1, =z_sys_post_kernel
   13654:	20008d3a 	.word	0x20008d3a
    ldr r1, =_SCS_MPU_CTRL
   13658:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1365c:	20009d80 	.word	0x20009d80
    ldr r0, =z_interrupt_stacks
   13660:	20009040 	.word	0x20009040

00013664 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   13664:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13668:	4905      	ldr	r1, [pc, #20]	; (13680 <__NVIC_SystemReset+0x1c>)
   1366a:	68ca      	ldr	r2, [r1, #12]
   1366c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13670:	4b04      	ldr	r3, [pc, #16]	; (13684 <__NVIC_SystemReset+0x20>)
   13672:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13674:	60cb      	str	r3, [r1, #12]
   13676:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1367a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1367c:	e7fd      	b.n	1367a <__NVIC_SystemReset+0x16>
   1367e:	bf00      	nop
   13680:	e000ed00 	.word	0xe000ed00
   13684:	05fa0004 	.word	0x05fa0004

00013688 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   13688:	4b08      	ldr	r3, [pc, #32]	; (136ac <z_arm_clear_arm_mpu_config+0x24>)
   1368a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
   1368e:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   13692:	2300      	movs	r3, #0
   13694:	e006      	b.n	136a4 <z_arm_clear_arm_mpu_config+0x1c>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
   13696:	4a05      	ldr	r2, [pc, #20]	; (136ac <z_arm_clear_arm_mpu_config+0x24>)
   13698:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  mpu->RLAR = 0U;
   1369c:	2100      	movs	r1, #0
   1369e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   136a2:	3301      	adds	r3, #1
   136a4:	4283      	cmp	r3, r0
   136a6:	dbf6      	blt.n	13696 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
   136a8:	4770      	bx	lr
   136aa:	bf00      	nop
   136ac:	e000ed00 	.word	0xe000ed00

000136b0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   136b0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   136b2:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   136b4:	2400      	movs	r4, #0
   136b6:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   136ba:	f7ff ffe5 	bl	13688 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   136be:	4623      	mov	r3, r4
   136c0:	e008      	b.n	136d4 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   136c2:	f103 0120 	add.w	r1, r3, #32
   136c6:	4a0e      	ldr	r2, [pc, #56]	; (13700 <z_arm_init_arch_hw_at_boot+0x50>)
   136c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   136cc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   136d0:	3301      	adds	r3, #1
   136d2:	b2db      	uxtb	r3, r3
   136d4:	2b0f      	cmp	r3, #15
   136d6:	d9f4      	bls.n	136c2 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   136d8:	2300      	movs	r3, #0
   136da:	e008      	b.n	136ee <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   136dc:	f103 0160 	add.w	r1, r3, #96	; 0x60
   136e0:	4a07      	ldr	r2, [pc, #28]	; (13700 <z_arm_init_arch_hw_at_boot+0x50>)
   136e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   136e6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   136ea:	3301      	adds	r3, #1
   136ec:	b2db      	uxtb	r3, r3
   136ee:	2b0f      	cmp	r3, #15
   136f0:	d9f4      	bls.n	136dc <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   136f2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   136f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   136f8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   136fc:	bd10      	pop	{r4, pc}
   136fe:	bf00      	nop
   13700:	e000e100 	.word	0xe000e100

00013704 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   13704:	b508      	push	{r3, lr}
	if (_current == thread) {
   13706:	4b0a      	ldr	r3, [pc, #40]	; (13730 <z_impl_k_thread_abort+0x2c>)
   13708:	689b      	ldr	r3, [r3, #8]
   1370a:	4283      	cmp	r3, r0
   1370c:	d002      	beq.n	13714 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
   1370e:	f004 fbd3 	bl	17eb8 <z_thread_abort>
}
   13712:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13714:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13718:	2b00      	cmp	r3, #0
   1371a:	d0f8      	beq.n	1370e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1371c:	4b05      	ldr	r3, [pc, #20]	; (13734 <z_impl_k_thread_abort+0x30>)
   1371e:	685a      	ldr	r2, [r3, #4]
   13720:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   13724:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   13726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   13728:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1372c:	625a      	str	r2, [r3, #36]	; 0x24
   1372e:	e7ee      	b.n	1370e <z_impl_k_thread_abort+0xa>
   13730:	20008cf8 	.word	0x20008cf8
   13734:	e000ed00 	.word	0xe000ed00

00013738 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   13738:	b510      	push	{r4, lr}
   1373a:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1373c:	4c0a      	ldr	r4, [pc, #40]	; (13768 <z_arm_configure_static_mpu_regions+0x30>)
   1373e:	4623      	mov	r3, r4
   13740:	4a0a      	ldr	r2, [pc, #40]	; (1376c <z_arm_configure_static_mpu_regions+0x34>)
   13742:	2101      	movs	r1, #1
   13744:	480a      	ldr	r0, [pc, #40]	; (13770 <z_arm_configure_static_mpu_regions+0x38>)
   13746:	f005 ffbc 	bl	196c2 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1374a:	2300      	movs	r3, #0
   1374c:	9301      	str	r3, [sp, #4]
   1374e:	9302      	str	r3, [sp, #8]
   13750:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   13752:	4b08      	ldr	r3, [pc, #32]	; (13774 <z_arm_configure_static_mpu_regions+0x3c>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   13754:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   13756:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   13758:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1375a:	2101      	movs	r1, #1
   1375c:	a801      	add	r0, sp, #4
   1375e:	f005 ffb4 	bl	196ca <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   13762:	b004      	add	sp, #16
   13764:	bd10      	pop	{r4, pc}
   13766:	bf00      	nop
   13768:	20080000 	.word	0x20080000
   1376c:	20008000 	.word	0x20008000
   13770:	0001b770 	.word	0x0001b770
   13774:	200081a0 	.word	0x200081a0

00013778 <mpu_init>:
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];
#if defined(CONFIG_CPU_CORTEX_M23) || defined(CONFIG_CPU_CORTEX_M33) || \
	defined(CONFIG_CPU_CORTEX_M55)
static inline void mpu_set_mair0(uint32_t mair0)
{
	MPU->MAIR0 = mair0;
   13778:	4b02      	ldr	r3, [pc, #8]	; (13784 <mpu_init+0xc>)
   1377a:	4a03      	ldr	r2, [pc, #12]	; (13788 <mpu_init+0x10>)
   1377c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
	/* Configure the cache-ability attributes for all the
	 * different types of memory regions.
	 */
	mpu_set_mair0(MPU_MAIR_ATTRS);
}
   13780:	4770      	bx	lr
   13782:	bf00      	nop
   13784:	e000ed00 	.word	0xe000ed00
   13788:	0044ffaa 	.word	0x0044ffaa

0001378c <mpu_set_region>:
	MPU->RNR = rnr;
   1378c:	4b03      	ldr	r3, [pc, #12]	; (1379c <mpu_set_region+0x10>)
   1378e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	MPU->RBAR = rbar;
   13792:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	MPU->RLAR = rlar;
   13796:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
static void mpu_set_region(uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
	mpu_set_rnr(rnr);
	mpu_set_rbar(rbar);
	mpu_set_rlar(rlar);
}
   1379a:	4770      	bx	lr
   1379c:	e000ed00 	.word	0xe000ed00

000137a0 <mpu_region_get_conf>:
	MPU->RNR = rnr;
   137a0:	4b0e      	ldr	r3, [pc, #56]	; (137dc <mpu_region_get_conf+0x3c>)
   137a2:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
   137a6:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
   137aa:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
static inline void mpu_region_get_access_attr(const uint32_t index,
	arm_mpu_region_attr_t *attr)
{
	mpu_set_rnr(index);

	attr->rbar = mpu_get_rbar() &
   137ae:	7a0a      	ldrb	r2, [r1, #8]
   137b0:	f360 0204 	bfi	r2, r0, #0, #5
   137b4:	720a      	strb	r2, [r1, #8]
	return MPU->RLAR;
   137b6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   137ba:	f3c2 0242 	ubfx	r2, r2, #1, #3
   137be:	7a08      	ldrb	r0, [r1, #8]
   137c0:	f362 1047 	bfi	r0, r2, #5, #3
   137c4:	7208      	strb	r0, [r1, #8]
	return MPU->RBAR;
   137c6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	 * - Access Permissions
	 */
	mpu_region_get_access_attr(index, &region_conf->attr);

	/* Region base address */
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   137ca:	f022 021f 	bic.w	r2, r2, #31
   137ce:	600a      	str	r2, [r1, #0]
	return MPU->RLAR;
   137d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0

	/* Region limit address */
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   137d4:	f023 031f 	bic.w	r3, r3, #31
   137d8:	60cb      	str	r3, [r1, #12]
}
   137da:	4770      	bx	lr
   137dc:	e000ed00 	.word	0xe000ed00

000137e0 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
   137e0:	b570      	push	{r4, r5, r6, lr}
   137e2:	4605      	mov	r5, r0
   137e4:	460e      	mov	r6, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   137e6:	2400      	movs	r4, #0
   137e8:	e000      	b.n	137ec <mpu_mark_areas_for_dynamic_regions+0xc>
   137ea:	3401      	adds	r4, #1
   137ec:	42a6      	cmp	r6, r4
   137ee:	dd1e      	ble.n	1382e <mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   137f0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   137f4:	009a      	lsls	r2, r3, #2
   137f6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   137fa:	6859      	ldr	r1, [r3, #4]
   137fc:	2900      	cmp	r1, #0
   137fe:	d0f4      	beq.n	137ea <mpu_mark_areas_for_dynamic_regions+0xa>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   13800:	58a8      	ldr	r0, [r5, r2]
   13802:	f005 ff2e 	bl	19662 <get_region_index>
		dyn_reg_info[i].index =
   13806:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1380a:	4a0b      	ldr	r2, [pc, #44]	; (13838 <mpu_mark_areas_for_dynamic_regions+0x58>)
   1380c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   13810:	f110 0f16 	cmn.w	r0, #22
   13814:	d00c      	beq.n	13830 <mpu_mark_areas_for_dynamic_regions+0x50>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   13816:	4b09      	ldr	r3, [pc, #36]	; (1383c <mpu_mark_areas_for_dynamic_regions+0x5c>)
   13818:	781b      	ldrb	r3, [r3, #0]
   1381a:	4298      	cmp	r0, r3
   1381c:	da09      	bge.n	13832 <mpu_mark_areas_for_dynamic_regions+0x52>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
   1381e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   13822:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   13826:	3104      	adds	r1, #4
   13828:	f7ff ffba 	bl	137a0 <mpu_region_get_conf>
   1382c:	e7dd      	b.n	137ea <mpu_mark_areas_for_dynamic_regions+0xa>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
   1382e:	2000      	movs	r0, #0
}
   13830:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   13832:	f06f 0015 	mvn.w	r0, #21
   13836:	e7fb      	b.n	13830 <mpu_mark_areas_for_dynamic_regions+0x50>
   13838:	20008900 	.word	0x20008900
   1383c:	20008d37 	.word	0x20008d37

00013840 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   13840:	b5f0      	push	{r4, r5, r6, r7, lr}
   13842:	b083      	sub	sp, #12
   13844:	af00      	add	r7, sp, #0
   13846:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   13848:	2807      	cmp	r0, #7
   1384a:	d805      	bhi.n	13858 <region_allocate_and_init+0x18>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   1384c:	f005 fee3 	bl	19616 <region_init>

	return index;
   13850:	4620      	mov	r0, r4
}
   13852:	370c      	adds	r7, #12
   13854:	46bd      	mov	sp, r7
   13856:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13858:	466d      	mov	r5, sp
   1385a:	b088      	sub	sp, #32
   1385c:	466b      	mov	r3, sp
   1385e:	f113 0210 	adds.w	r2, r3, #16
   13862:	d031      	beq.n	138c8 <region_allocate_and_init+0x88>
   13864:	210c      	movs	r1, #12
   13866:	b13a      	cbz	r2, 13878 <region_allocate_and_init+0x38>
   13868:	4608      	mov	r0, r1
   1386a:	2904      	cmp	r1, #4
   1386c:	dd01      	ble.n	13872 <region_allocate_and_init+0x32>
   1386e:	4e19      	ldr	r6, [pc, #100]	; (138d4 <region_allocate_and_init+0x94>)
   13870:	615e      	str	r6, [r3, #20]
   13872:	2808      	cmp	r0, #8
   13874:	dd00      	ble.n	13878 <region_allocate_and_init+0x38>
   13876:	619c      	str	r4, [r3, #24]
   13878:	290b      	cmp	r1, #11
   1387a:	dd28      	ble.n	138ce <region_allocate_and_init+0x8e>
   1387c:	240c      	movs	r4, #12
   1387e:	b13a      	cbz	r2, 13890 <region_allocate_and_init+0x50>
   13880:	2103      	movs	r1, #3
   13882:	7139      	strb	r1, [r7, #4]
   13884:	2100      	movs	r1, #0
   13886:	7179      	strb	r1, [r7, #5]
   13888:	71b9      	strb	r1, [r7, #6]
   1388a:	71f9      	strb	r1, [r7, #7]
   1388c:	6878      	ldr	r0, [r7, #4]
   1388e:	6118      	str	r0, [r3, #16]
   13890:	2100      	movs	r1, #0
   13892:	f36f 0100 	bfc	r1, #0, #1
   13896:	f36f 0141 	bfc	r1, #1, #1
   1389a:	f36f 0182 	bfc	r1, #2, #1
   1389e:	f36f 01c5 	bfc	r1, #3, #3
   138a2:	2301      	movs	r3, #1
   138a4:	f363 1188 	bfi	r1, r3, #6, #3
   138a8:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   138ac:	f364 2152 	bfi	r1, r4, #9, #10
   138b0:	f36f 41de 	bfc	r1, #19, #12
   138b4:	f36f 71df 	bfc	r1, #31, #1
   138b8:	2300      	movs	r3, #0
   138ba:	4807      	ldr	r0, [pc, #28]	; (138d8 <region_allocate_and_init+0x98>)
   138bc:	f005 fd53 	bl	19366 <z_impl_z_log_msg_static_create>
   138c0:	46ad      	mov	sp, r5
		return -EINVAL;
   138c2:	f06f 0015 	mvn.w	r0, #21
   138c6:	e7c4      	b.n	13852 <region_allocate_and_init+0x12>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   138c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   138cc:	e7cb      	b.n	13866 <region_allocate_and_init+0x26>
   138ce:	f06f 041b 	mvn.w	r4, #27
   138d2:	e7d4      	b.n	1387e <region_allocate_and_init+0x3e>
   138d4:	0001b780 	.word	0x0001b780
   138d8:	0001afb0 	.word	0x0001afb0

000138dc <mpu_configure_regions_and_partition>:
{
   138dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138e0:	b089      	sub	sp, #36	; 0x24
   138e2:	af00      	add	r7, sp, #0
   138e4:	4682      	mov	sl, r0
   138e6:	60b9      	str	r1, [r7, #8]
   138e8:	607b      	str	r3, [r7, #4]
	int reg_index = start_reg_index;
   138ea:	4614      	mov	r4, r2
	for (i = 0; i < regions_num; i++) {
   138ec:	f04f 0800 	mov.w	r8, #0
   138f0:	e0b5      	b.n	13a5e <mpu_configure_regions_and_partition+0x182>
			LOG_ERR("Partition %u: sanity check failed.", i);
   138f2:	466d      	mov	r5, sp
   138f4:	b088      	sub	sp, #32
   138f6:	466b      	mov	r3, sp
   138f8:	f113 0210 	adds.w	r2, r3, #16
   138fc:	d032      	beq.n	13964 <mpu_configure_regions_and_partition+0x88>
   138fe:	210c      	movs	r1, #12
   13900:	b142      	cbz	r2, 13914 <mpu_configure_regions_and_partition+0x38>
   13902:	4608      	mov	r0, r1
   13904:	2904      	cmp	r1, #4
   13906:	dd01      	ble.n	1390c <mpu_configure_regions_and_partition+0x30>
   13908:	4c94      	ldr	r4, [pc, #592]	; (13b5c <mpu_configure_regions_and_partition+0x280>)
   1390a:	615c      	str	r4, [r3, #20]
   1390c:	2808      	cmp	r0, #8
   1390e:	dd01      	ble.n	13914 <mpu_configure_regions_and_partition+0x38>
   13910:	f8c3 8018 	str.w	r8, [r3, #24]
   13914:	290b      	cmp	r1, #11
   13916:	dd28      	ble.n	1396a <mpu_configure_regions_and_partition+0x8e>
   13918:	240c      	movs	r4, #12
   1391a:	b13a      	cbz	r2, 1392c <mpu_configure_regions_and_partition+0x50>
   1391c:	2103      	movs	r1, #3
   1391e:	7439      	strb	r1, [r7, #16]
   13920:	2100      	movs	r1, #0
   13922:	7479      	strb	r1, [r7, #17]
   13924:	74b9      	strb	r1, [r7, #18]
   13926:	74f9      	strb	r1, [r7, #19]
   13928:	6938      	ldr	r0, [r7, #16]
   1392a:	6118      	str	r0, [r3, #16]
   1392c:	2100      	movs	r1, #0
   1392e:	f36f 0100 	bfc	r1, #0, #1
   13932:	f36f 0141 	bfc	r1, #1, #1
   13936:	f36f 0182 	bfc	r1, #2, #1
   1393a:	f36f 01c5 	bfc	r1, #3, #3
   1393e:	2301      	movs	r3, #1
   13940:	f363 1188 	bfi	r1, r3, #6, #3
   13944:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   13948:	f364 2152 	bfi	r1, r4, #9, #10
   1394c:	f36f 41de 	bfc	r1, #19, #12
   13950:	f36f 71df 	bfc	r1, #31, #1
   13954:	2300      	movs	r3, #0
   13956:	4882      	ldr	r0, [pc, #520]	; (13b60 <mpu_configure_regions_and_partition+0x284>)
   13958:	f005 fd05 	bl	19366 <z_impl_z_log_msg_static_create>
   1395c:	46ad      	mov	sp, r5
			return -EINVAL;
   1395e:	f06f 0415 	mvn.w	r4, #21
   13962:	e03c      	b.n	139de <mpu_configure_regions_and_partition+0x102>
			LOG_ERR("Partition %u: sanity check failed.", i);
   13964:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   13968:	e7ca      	b.n	13900 <mpu_configure_regions_and_partition+0x24>
   1396a:	f06f 041b 	mvn.w	r4, #27
   1396e:	e7d4      	b.n	1391a <mpu_configure_regions_and_partition+0x3e>
			LOG_ERR("Invalid underlying region index %u",
   13970:	466d      	mov	r5, sp
   13972:	b088      	sub	sp, #32
   13974:	466b      	mov	r3, sp
   13976:	f113 0210 	adds.w	r2, r3, #16
   1397a:	d035      	beq.n	139e8 <mpu_configure_regions_and_partition+0x10c>
   1397c:	210c      	movs	r1, #12
   1397e:	b13a      	cbz	r2, 13990 <mpu_configure_regions_and_partition+0xb4>
   13980:	4608      	mov	r0, r1
   13982:	2904      	cmp	r1, #4
   13984:	dd01      	ble.n	1398a <mpu_configure_regions_and_partition+0xae>
   13986:	4c77      	ldr	r4, [pc, #476]	; (13b64 <mpu_configure_regions_and_partition+0x288>)
   13988:	615c      	str	r4, [r3, #20]
   1398a:	2808      	cmp	r0, #8
   1398c:	dd00      	ble.n	13990 <mpu_configure_regions_and_partition+0xb4>
   1398e:	619e      	str	r6, [r3, #24]
   13990:	290b      	cmp	r1, #11
   13992:	dd2c      	ble.n	139ee <mpu_configure_regions_and_partition+0x112>
   13994:	240c      	movs	r4, #12
   13996:	b13a      	cbz	r2, 139a8 <mpu_configure_regions_and_partition+0xcc>
   13998:	2103      	movs	r1, #3
   1399a:	7439      	strb	r1, [r7, #16]
   1399c:	2100      	movs	r1, #0
   1399e:	7479      	strb	r1, [r7, #17]
   139a0:	74b9      	strb	r1, [r7, #18]
   139a2:	74f9      	strb	r1, [r7, #19]
   139a4:	6938      	ldr	r0, [r7, #16]
   139a6:	6118      	str	r0, [r3, #16]
   139a8:	2100      	movs	r1, #0
   139aa:	f36f 0100 	bfc	r1, #0, #1
   139ae:	f36f 0141 	bfc	r1, #1, #1
   139b2:	f36f 0182 	bfc	r1, #2, #1
   139b6:	f36f 01c5 	bfc	r1, #3, #3
   139ba:	2301      	movs	r3, #1
   139bc:	f363 1188 	bfi	r1, r3, #6, #3
   139c0:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   139c4:	f363 2152 	bfi	r1, r3, #9, #10
   139c8:	f36f 41de 	bfc	r1, #19, #12
   139cc:	f36f 71df 	bfc	r1, #31, #1
   139d0:	2300      	movs	r3, #0
   139d2:	4863      	ldr	r0, [pc, #396]	; (13b60 <mpu_configure_regions_and_partition+0x284>)
   139d4:	f005 fcc7 	bl	19366 <z_impl_z_log_msg_static_create>
   139d8:	46ad      	mov	sp, r5
			return -EINVAL;
   139da:	f06f 0415 	mvn.w	r4, #21
}
   139de:	4620      	mov	r0, r4
   139e0:	3724      	adds	r7, #36	; 0x24
   139e2:	46bd      	mov	sp, r7
   139e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("Invalid underlying region index %u",
   139e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   139ec:	e7c7      	b.n	1397e <mpu_configure_regions_and_partition+0xa2>
   139ee:	f06f 041b 	mvn.w	r4, #27
   139f2:	e7d0      	b.n	13996 <mpu_configure_regions_and_partition+0xba>
		if ((regions[i].start == u_reg_base) &&
   139f4:	4581      	cmp	r9, r0
   139f6:	d168      	bne.n	13aca <mpu_configure_regions_and_partition+0x1ee>
			mpu_configure_region(u_reg_index, &regions[i]);
   139f8:	4629      	mov	r1, r5
   139fa:	b2f0      	uxtb	r0, r6
   139fc:	f005 fe42 	bl	19684 <mpu_configure_region>
   13a00:	e02b      	b.n	13a5a <mpu_configure_regions_and_partition+0x17e>
	MPU->RNR = rnr;
   13a02:	4a59      	ldr	r2, [pc, #356]	; (13b68 <mpu_configure_regions_and_partition+0x28c>)
   13a04:	f8c2 6098 	str.w	r6, [r2, #152]	; 0x98
	return MPU->RBAR;
   13a08:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   13a0c:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   13a10:	f021 011f 	bic.w	r1, r1, #31
   13a14:	430b      	orrs	r3, r1
	MPU->RBAR = rbar;
   13a16:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   13a1a:	4629      	mov	r1, r5
   13a1c:	b2e0      	uxtb	r0, r4
   13a1e:	f005 fe31 	bl	19684 <mpu_configure_region>
   13a22:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   13a24:	f110 0f16 	cmn.w	r0, #22
   13a28:	d0d9      	beq.n	139de <mpu_configure_regions_and_partition+0x102>
			reg_index++;
   13a2a:	3401      	adds	r4, #1
   13a2c:	e015      	b.n	13a5a <mpu_configure_regions_and_partition+0x17e>
				regions[i].start - 1);
   13a2e:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
   13a30:	494d      	ldr	r1, [pc, #308]	; (13b68 <mpu_configure_regions_and_partition+0x28c>)
   13a32:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
   13a36:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   13a3a:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   13a3e:	f023 031f 	bic.w	r3, r3, #31
   13a42:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   13a44:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   13a48:	4629      	mov	r1, r5
   13a4a:	b2e0      	uxtb	r0, r4
   13a4c:	f005 fe1a 	bl	19684 <mpu_configure_region>
   13a50:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   13a52:	f110 0f16 	cmn.w	r0, #22
   13a56:	d0c2      	beq.n	139de <mpu_configure_regions_and_partition+0x102>
			reg_index++;
   13a58:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
   13a5a:	f108 0801 	add.w	r8, r8, #1
   13a5e:	68bb      	ldr	r3, [r7, #8]
   13a60:	4598      	cmp	r8, r3
   13a62:	dabc      	bge.n	139de <mpu_configure_regions_and_partition+0x102>
		if (regions[i].size == 0U) {
   13a64:	eb08 0548 	add.w	r5, r8, r8, lsl #1
   13a68:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   13a6c:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
   13a70:	686e      	ldr	r6, [r5, #4]
   13a72:	2e00      	cmp	r6, #0
   13a74:	d0f1      	beq.n	13a5a <mpu_configure_regions_and_partition+0x17e>
		if (do_sanity_check &&
   13a76:	687b      	ldr	r3, [r7, #4]
   13a78:	b12b      	cbz	r3, 13a86 <mpu_configure_regions_and_partition+0x1aa>
			(!mpu_partition_is_valid(&regions[i]))) {
   13a7a:	4628      	mov	r0, r5
   13a7c:	f005 fddf 	bl	1963e <mpu_partition_is_valid>
		if (do_sanity_check &&
   13a80:	2800      	cmp	r0, #0
   13a82:	f43f af36 	beq.w	138f2 <mpu_configure_regions_and_partition+0x16>
			get_region_index(regions[i].start, regions[i].size);
   13a86:	4631      	mov	r1, r6
   13a88:	f85a 000b 	ldr.w	r0, [sl, fp]
   13a8c:	f005 fde9 	bl	19662 <get_region_index>
   13a90:	4606      	mov	r6, r0
		if ((u_reg_index == -EINVAL) ||
   13a92:	f110 0f16 	cmn.w	r0, #22
   13a96:	f43f af6b 	beq.w	13970 <mpu_configure_regions_and_partition+0x94>
   13a9a:	4284      	cmp	r4, r0
   13a9c:	f77f af68 	ble.w	13970 <mpu_configure_regions_and_partition+0x94>
	MPU->RNR = rnr;
   13aa0:	4b31      	ldr	r3, [pc, #196]	; (13b68 <mpu_configure_regions_and_partition+0x28c>)
   13aa2:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
   13aa6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   13aaa:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
   13aae:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RLAR;
   13ab2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   13ab6:	f043 091f 	orr.w	r9, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   13aba:	f85a 300b 	ldr.w	r3, [sl, fp]
   13abe:	6869      	ldr	r1, [r5, #4]
   13ac0:	4419      	add	r1, r3
   13ac2:	1e48      	subs	r0, r1, #1
   13ac4:	60f8      	str	r0, [r7, #12]
		if ((regions[i].start == u_reg_base) &&
   13ac6:	4293      	cmp	r3, r2
   13ac8:	d094      	beq.n	139f4 <mpu_configure_regions_and_partition+0x118>
		} else if (regions[i].start == u_reg_base) {
   13aca:	4293      	cmp	r3, r2
   13acc:	d099      	beq.n	13a02 <mpu_configure_regions_and_partition+0x126>
		} else if (reg_last == u_reg_last) {
   13ace:	68fa      	ldr	r2, [r7, #12]
   13ad0:	4591      	cmp	r9, r2
   13ad2:	d0ac      	beq.n	13a2e <mpu_configure_regions_and_partition+0x152>
				regions[i].start - 1);
   13ad4:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
   13ad6:	4924      	ldr	r1, [pc, #144]	; (13b68 <mpu_configure_regions_and_partition+0x28c>)
   13ad8:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
   13adc:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   13ae0:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   13ae4:	f023 031f 	bic.w	r3, r3, #31
   13ae8:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   13aea:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   13aee:	4629      	mov	r1, r5
   13af0:	b2e0      	uxtb	r0, r4
   13af2:	f005 fdc7 	bl	19684 <mpu_configure_region>
   13af6:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   13af8:	f110 0f16 	cmn.w	r0, #22
   13afc:	f43f af6f 	beq.w	139de <mpu_configure_regions_and_partition+0x102>
			reg_index++;
   13b00:	3001      	adds	r0, #1
	MPU->RNR = rnr;
   13b02:	4b19      	ldr	r3, [pc, #100]	; (13b68 <mpu_configure_regions_and_partition+0x28c>)
   13b04:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR;
   13b08:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   13b0c:	7e3a      	ldrb	r2, [r7, #24]
   13b0e:	f361 0204 	bfi	r2, r1, #0, #5
   13b12:	763a      	strb	r2, [r7, #24]
	return MPU->RLAR;
   13b14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   13b18:	f3c3 0342 	ubfx	r3, r3, #1, #3
   13b1c:	b2d2      	uxtb	r2, r2
   13b1e:	f363 1247 	bfi	r2, r3, #5, #3
   13b22:	763a      	strb	r2, [r7, #24]
			fill_region.base = regions[i].start +
   13b24:	f85a 300b 	ldr.w	r3, [sl, fp]
				regions[i].size;
   13b28:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
   13b2a:	4413      	add	r3, r2
   13b2c:	613b      	str	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   13b2e:	f023 031f 	bic.w	r3, r3, #31
   13b32:	68fa      	ldr	r2, [r7, #12]
   13b34:	eba9 0902 	sub.w	r9, r9, r2
   13b38:	444b      	add	r3, r9
   13b3a:	3b01      	subs	r3, #1
   13b3c:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
   13b40:	61fb      	str	r3, [r7, #28]
				region_allocate_and_init(reg_index,
   13b42:	f107 0110 	add.w	r1, r7, #16
   13b46:	b2c0      	uxtb	r0, r0
   13b48:	f7ff fe7a 	bl	13840 <region_allocate_and_init>
   13b4c:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   13b4e:	f110 0f16 	cmn.w	r0, #22
   13b52:	f43f af44 	beq.w	139de <mpu_configure_regions_and_partition+0x102>
			reg_index++;
   13b56:	3401      	adds	r4, #1
   13b58:	e77f      	b.n	13a5a <mpu_configure_regions_and_partition+0x17e>
   13b5a:	bf00      	nop
   13b5c:	0001b7a8 	.word	0x0001b7a8
   13b60:	0001afb0 	.word	0x0001afb0
   13b64:	0001b7cc 	.word	0x0001b7cc
   13b68:	e000ed00 	.word	0xe000ed00

00013b6c <mpu_configure_static_mpu_regions>:
{
   13b6c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   13b6e:	4c03      	ldr	r4, [pc, #12]	; (13b7c <mpu_configure_static_mpu_regions+0x10>)
	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   13b70:	2301      	movs	r3, #1
   13b72:	7822      	ldrb	r2, [r4, #0]
   13b74:	f7ff feb2 	bl	138dc <mpu_configure_regions_and_partition>
	static_regions_num = mpu_reg_index;
   13b78:	7020      	strb	r0, [r4, #0]
}
   13b7a:	bd10      	pop	{r4, pc}
   13b7c:	20008d37 	.word	0x20008d37

00013b80 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   13b80:	4b04      	ldr	r3, [pc, #16]	; (13b94 <arm_core_mpu_enable+0x14>)
   13b82:	2205      	movs	r2, #5
   13b84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   13b88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13b8c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13b90:	4770      	bx	lr
   13b92:	bf00      	nop
   13b94:	e000ed00 	.word	0xe000ed00

00013b98 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   13b98:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   13b9c:	4b02      	ldr	r3, [pc, #8]	; (13ba8 <arm_core_mpu_disable+0x10>)
   13b9e:	2200      	movs	r2, #0
   13ba0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   13ba4:	4770      	bx	lr
   13ba6:	bf00      	nop
   13ba8:	e000ed00 	.word	0xe000ed00

00013bac <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   13bac:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   13bae:	4b0e      	ldr	r3, [pc, #56]	; (13be8 <z_arm_mpu_init+0x3c>)
   13bb0:	681d      	ldr	r5, [r3, #0]
   13bb2:	2d08      	cmp	r5, #8
   13bb4:	d815      	bhi.n	13be2 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   13bb6:	f7ff ffef 	bl	13b98 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
   13bba:	f7ff fddd 	bl	13778 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13bbe:	2400      	movs	r4, #0
   13bc0:	e007      	b.n	13bd2 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   13bc2:	4b09      	ldr	r3, [pc, #36]	; (13be8 <z_arm_mpu_init+0x3c>)
   13bc4:	6859      	ldr	r1, [r3, #4]
   13bc6:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   13bca:	4620      	mov	r0, r4
   13bcc:	f005 fd23 	bl	19616 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13bd0:	3401      	adds	r4, #1
   13bd2:	42a5      	cmp	r5, r4
   13bd4:	d8f5      	bhi.n	13bc2 <z_arm_mpu_init+0x16>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   13bd6:	4b05      	ldr	r3, [pc, #20]	; (13bec <z_arm_mpu_init+0x40>)
   13bd8:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   13bda:	f7ff ffd1 	bl	13b80 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   13bde:	2000      	movs	r0, #0
}
   13be0:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   13be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13be6:	e7fb      	b.n	13be0 <z_arm_mpu_init+0x34>
   13be8:	0001b7f0 	.word	0x0001b7f0
   13bec:	20008d37 	.word	0x20008d37

00013bf0 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   13bf0:	4b01      	ldr	r3, [pc, #4]	; (13bf8 <__stdout_hook_install+0x8>)
   13bf2:	6018      	str	r0, [r3, #0]
}
   13bf4:	4770      	bx	lr
   13bf6:	bf00      	nop
   13bf8:	2000800c 	.word	0x2000800c

00013bfc <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   13bfc:	4800      	ldr	r0, [pc, #0]	; (13c00 <get_hf_flags+0x4>)
   13bfe:	4770      	bx	lr
   13c00:	200089a0 	.word	0x200089a0

00013c04 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   13c04:	4b03      	ldr	r3, [pc, #12]	; (13c14 <get_subsys+0x10>)
   13c06:	1ac0      	subs	r0, r0, r3
   13c08:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   13c0a:	4b03      	ldr	r3, [pc, #12]	; (13c18 <get_subsys+0x14>)
   13c0c:	fb03 f000 	mul.w	r0, r3, r0
   13c10:	4770      	bx	lr
   13c12:	bf00      	nop
   13c14:	20008928 	.word	0x20008928
   13c18:	b6db6db7 	.word	0xb6db6db7

00013c1c <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   13c1c:	b538      	push	{r3, r4, r5, lr}
   13c1e:	4605      	mov	r5, r0
   13c20:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   13c22:	f7ff ffef 	bl	13c04 <get_subsys>
   13c26:	4601      	mov	r1, r0
   13c28:	2240      	movs	r2, #64	; 0x40
   13c2a:	4803      	ldr	r0, [pc, #12]	; (13c38 <onoff_stop+0x1c>)
   13c2c:	f005 fe7f 	bl	1992e <stop>
   13c30:	4601      	mov	r1, r0
	notify(mgr, res);
   13c32:	4628      	mov	r0, r5
   13c34:	47a0      	blx	r4
}
   13c36:	bd38      	pop	{r3, r4, r5, pc}
   13c38:	0001ac50 	.word	0x0001ac50

00013c3c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   13c3c:	b530      	push	{r4, r5, lr}
   13c3e:	b083      	sub	sp, #12
   13c40:	4605      	mov	r5, r0
   13c42:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13c44:	f7ff ffde 	bl	13c04 <get_subsys>
   13c48:	4601      	mov	r1, r0
   13c4a:	2340      	movs	r3, #64	; 0x40
   13c4c:	9300      	str	r3, [sp, #0]
   13c4e:	4623      	mov	r3, r4
   13c50:	4a05      	ldr	r2, [pc, #20]	; (13c68 <onoff_start+0x2c>)
   13c52:	4806      	ldr	r0, [pc, #24]	; (13c6c <onoff_start+0x30>)
   13c54:	f005 fe85 	bl	19962 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   13c58:	1e01      	subs	r1, r0, #0
   13c5a:	db01      	blt.n	13c60 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   13c5c:	b003      	add	sp, #12
   13c5e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   13c60:	4628      	mov	r0, r5
   13c62:	47a0      	blx	r4
}
   13c64:	e7fa      	b.n	13c5c <onoff_start+0x20>
   13c66:	bf00      	nop
   13c68:	000199ab 	.word	0x000199ab
   13c6c:	0001ac50 	.word	0x0001ac50

00013c70 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   13c70:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   13c72:	2805      	cmp	r0, #5
   13c74:	d815      	bhi.n	13ca2 <clock_event_handler+0x32>
   13c76:	e8df f000 	tbb	[pc, r0]
   13c7a:	1a03      	.short	0x1a03
   13c7c:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   13c80:	2100      	movs	r1, #0
   13c82:	480d      	ldr	r0, [pc, #52]	; (13cb8 <clock_event_handler+0x48>)
   13c84:	f005 fddc 	bl	19840 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   13c88:	6883      	ldr	r3, [r0, #8]
   13c8a:	f013 0f07 	tst.w	r3, #7
   13c8e:	d108      	bne.n	13ca2 <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   13c90:	2100      	movs	r1, #0
   13c92:	4809      	ldr	r0, [pc, #36]	; (13cb8 <clock_event_handler+0x48>)
   13c94:	f005 fe39 	bl	1990a <clkstarted_handle>
   13c98:	e003      	b.n	13ca2 <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   13c9a:	2102      	movs	r1, #2
   13c9c:	4806      	ldr	r0, [pc, #24]	; (13cb8 <clock_event_handler+0x48>)
   13c9e:	f005 fe34 	bl	1990a <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   13ca2:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   13ca4:	2103      	movs	r1, #3
   13ca6:	4804      	ldr	r0, [pc, #16]	; (13cb8 <clock_event_handler+0x48>)
   13ca8:	f005 fe2f 	bl	1990a <clkstarted_handle>
		break;
   13cac:	e7f9      	b.n	13ca2 <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   13cae:	2101      	movs	r1, #1
   13cb0:	4801      	ldr	r0, [pc, #4]	; (13cb8 <clock_event_handler+0x48>)
   13cb2:	f005 fe2a 	bl	1990a <clkstarted_handle>
}
   13cb6:	e7f4      	b.n	13ca2 <clock_event_handler+0x32>
   13cb8:	0001ac50 	.word	0x0001ac50

00013cbc <generic_hfclk_start>:
{
   13cbc:	b510      	push	{r4, lr}
   13cbe:	b082      	sub	sp, #8
	__asm__ volatile(
   13cc0:	f04f 0320 	mov.w	r3, #32
   13cc4:	f3ef 8411 	mrs	r4, BASEPRI
   13cc8:	f383 8812 	msr	BASEPRI_MAX, r3
   13ccc:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   13cd0:	4a14      	ldr	r2, [pc, #80]	; (13d24 <generic_hfclk_start+0x68>)
   13cd2:	6813      	ldr	r3, [r2, #0]
   13cd4:	f043 0102 	orr.w	r1, r3, #2
   13cd8:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   13cda:	f013 0f01 	tst.w	r3, #1
   13cde:	d109      	bne.n	13cf4 <generic_hfclk_start+0x38>
	bool already_started = false;
   13ce0:	2300      	movs	r3, #0
	__asm__ volatile(
   13ce2:	f384 8811 	msr	BASEPRI, r4
   13ce6:	f3bf 8f6f 	isb	sy
	if (already_started) {
   13cea:	b9ab      	cbnz	r3, 13d18 <generic_hfclk_start+0x5c>
	hfclk_start();
   13cec:	f005 fe65 	bl	199ba <hfclk_start>
}
   13cf0:	b002      	add	sp, #8
   13cf2:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   13cf4:	f10d 0207 	add.w	r2, sp, #7
   13cf8:	2101      	movs	r1, #1
   13cfa:	480b      	ldr	r0, [pc, #44]	; (13d28 <generic_hfclk_start+0x6c>)
   13cfc:	f005 fd66 	bl	197cc <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   13d00:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13d04:	2b01      	cmp	r3, #1
   13d06:	d001      	beq.n	13d0c <generic_hfclk_start+0x50>
	bool already_started = false;
   13d08:	2300      	movs	r3, #0
   13d0a:	e7ea      	b.n	13ce2 <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
   13d0c:	f7ff ff76 	bl	13bfc <get_hf_flags>
   13d10:	f005 fde8 	bl	198e4 <set_on_state>
			already_started = true;
   13d14:	2301      	movs	r3, #1
   13d16:	e7e4      	b.n	13ce2 <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
   13d18:	2100      	movs	r1, #0
   13d1a:	4804      	ldr	r0, [pc, #16]	; (13d2c <generic_hfclk_start+0x70>)
   13d1c:	f005 fdf5 	bl	1990a <clkstarted_handle>
		return;
   13d20:	e7e6      	b.n	13cf0 <generic_hfclk_start+0x34>
   13d22:	bf00      	nop
   13d24:	200089c8 	.word	0x200089c8
   13d28:	40005000 	.word	0x40005000
   13d2c:	0001ac50 	.word	0x0001ac50

00013d30 <generic_hfclk_stop>:
{
   13d30:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13d32:	4b08      	ldr	r3, [pc, #32]	; (13d54 <generic_hfclk_stop+0x24>)
   13d34:	e8d3 2fef 	ldaex	r2, [r3]
   13d38:	f022 0102 	bic.w	r1, r2, #2
   13d3c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   13d40:	2800      	cmp	r0, #0
   13d42:	d1f7      	bne.n	13d34 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   13d44:	f012 0f01 	tst.w	r2, #1
   13d48:	d000      	beq.n	13d4c <generic_hfclk_stop+0x1c>
}
   13d4a:	bd08      	pop	{r3, pc}
	hfclk_stop();
   13d4c:	f005 fe49 	bl	199e2 <hfclk_stop>
   13d50:	e7fb      	b.n	13d4a <generic_hfclk_stop+0x1a>
   13d52:	bf00      	nop
   13d54:	200089c8 	.word	0x200089c8

00013d58 <lfclk_spinwait>:
{
   13d58:	b570      	push	{r4, r5, r6, lr}
   13d5a:	b082      	sub	sp, #8
   13d5c:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   13d5e:	2801      	cmp	r0, #1
   13d60:	d106      	bne.n	13d70 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   13d62:	4b2e      	ldr	r3, [pc, #184]	; (13e1c <lfclk_spinwait+0xc4>)
   13d64:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   13d68:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   13d6c:	2b02      	cmp	r3, #2
   13d6e:	d034      	beq.n	13dda <lfclk_spinwait+0x82>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   13d70:	f006 fce5 	bl	1a73e <k_is_in_isr>
   13d74:	4604      	mov	r4, r0
   13d76:	b910      	cbnz	r0, 13d7e <lfclk_spinwait+0x26>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   13d78:	4b29      	ldr	r3, [pc, #164]	; (13e20 <lfclk_spinwait+0xc8>)
   13d7a:	781b      	ldrb	r3, [r3, #0]
   13d7c:	b973      	cbnz	r3, 13d9c <lfclk_spinwait+0x44>
	__asm__ volatile(
   13d7e:	f04f 0320 	mov.w	r3, #32
   13d82:	f3ef 8611 	mrs	r6, BASEPRI
   13d86:	f383 8812 	msr	BASEPRI_MAX, r3
   13d8a:	f3bf 8f6f 	isb	sy
   13d8e:	2401      	movs	r4, #1
	if (!isr_mode) {
   13d90:	b984      	cbnz	r4, 13db4 <lfclk_spinwait+0x5c>
    p_reg->INTENCLR = mask;
   13d92:	4b22      	ldr	r3, [pc, #136]	; (13e1c <lfclk_spinwait+0xc4>)
   13d94:	2202      	movs	r2, #2
   13d96:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   13d9a:	e00b      	b.n	13db4 <lfclk_spinwait+0x5c>
	int key = isr_mode ? irq_lock() : 0;
   13d9c:	2600      	movs	r6, #0
   13d9e:	e7f7      	b.n	13d90 <lfclk_spinwait+0x38>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   13da0:	b1ec      	cbz	r4, 13dde <lfclk_spinwait+0x86>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   13da2:	4630      	mov	r0, r6
   13da4:	f7fe fab4 	bl	12310 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   13da8:	4b1c      	ldr	r3, [pc, #112]	; (13e1c <lfclk_spinwait+0xc4>)
   13daa:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   13dae:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   13db0:	2b01      	cmp	r3, #1
   13db2:	d018      	beq.n	13de6 <lfclk_spinwait+0x8e>
   13db4:	f10d 0207 	add.w	r2, sp, #7
   13db8:	2100      	movs	r1, #0
   13dba:	4818      	ldr	r0, [pc, #96]	; (13e1c <lfclk_spinwait+0xc4>)
   13dbc:	f005 fd06 	bl	197cc <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   13dc0:	2800      	cmp	r0, #0
   13dc2:	d0ed      	beq.n	13da0 <lfclk_spinwait+0x48>
		 && ((type == target_type)
   13dc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	while (!(nrfx_clock_is_running(d, (void *)&type)
   13dc8:	2b02      	cmp	r3, #2
   13dca:	d001      	beq.n	13dd0 <lfclk_spinwait+0x78>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   13dcc:	2d01      	cmp	r5, #1
   13dce:	d1e7      	bne.n	13da0 <lfclk_spinwait+0x48>
	if (isr_mode) {
   13dd0:	b1f4      	cbz	r4, 13e10 <lfclk_spinwait+0xb8>
	__asm__ volatile(
   13dd2:	f386 8811 	msr	BASEPRI, r6
   13dd6:	f3bf 8f6f 	isb	sy
}
   13dda:	b002      	add	sp, #8
   13ddc:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
   13dde:	2001      	movs	r0, #1
   13de0:	f005 fe13 	bl	19a0a <k_msleep>
   13de4:	e7e0      	b.n	13da8 <lfclk_spinwait+0x50>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13de6:	4b0d      	ldr	r3, [pc, #52]	; (13e1c <lfclk_spinwait+0xc4>)
   13de8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   13dec:	2b00      	cmp	r3, #0
   13dee:	d0e1      	beq.n	13db4 <lfclk_spinwait+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13df0:	4b0a      	ldr	r3, [pc, #40]	; (13e1c <lfclk_spinwait+0xc4>)
   13df2:	2200      	movs	r2, #0
   13df4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   13df8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   13dfc:	2202      	movs	r2, #2
   13dfe:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13e02:	4a08      	ldr	r2, [pc, #32]	; (13e24 <lfclk_spinwait+0xcc>)
   13e04:	2120      	movs	r1, #32
   13e06:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13e0a:	2201      	movs	r2, #1
   13e0c:	609a      	str	r2, [r3, #8]
}
   13e0e:	e7d1      	b.n	13db4 <lfclk_spinwait+0x5c>
    p_reg->INTENSET = mask;
   13e10:	4b02      	ldr	r3, [pc, #8]	; (13e1c <lfclk_spinwait+0xc4>)
   13e12:	2202      	movs	r2, #2
   13e14:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   13e18:	e7df      	b.n	13dda <lfclk_spinwait+0x82>
   13e1a:	bf00      	nop
   13e1c:	40005000 	.word	0x40005000
   13e20:	20008d3a 	.word	0x20008d3a
   13e24:	e000e100 	.word	0xe000e100

00013e28 <api_blocking_start>:
{
   13e28:	b500      	push	{lr}
   13e2a:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   13e2c:	f8cd d000 	str.w	sp, [sp]
   13e30:	f8cd d004 	str.w	sp, [sp, #4]
   13e34:	2300      	movs	r3, #0
   13e36:	9302      	str	r3, [sp, #8]
   13e38:	2301      	movs	r3, #1
   13e3a:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   13e3c:	466b      	mov	r3, sp
   13e3e:	4a07      	ldr	r2, [pc, #28]	; (13e5c <api_blocking_start+0x34>)
   13e40:	f005 fdab 	bl	1999a <api_start>
	if (err < 0) {
   13e44:	2800      	cmp	r0, #0
   13e46:	db05      	blt.n	13e54 <api_blocking_start+0x2c>
   13e48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   13e4c:	2300      	movs	r3, #0
   13e4e:	4668      	mov	r0, sp
   13e50:	f003 fc20 	bl	17694 <z_impl_k_sem_take>
}
   13e54:	b005      	add	sp, #20
   13e56:	f85d fb04 	ldr.w	pc, [sp], #4
   13e5a:	bf00      	nop
   13e5c:	00019a37 	.word	0x00019a37

00013e60 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   13e60:	b570      	push	{r4, r5, r6, lr}
   13e62:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13e64:	2200      	movs	r2, #0
   13e66:	2101      	movs	r1, #1
   13e68:	2005      	movs	r0, #5
   13e6a:	f005 fb87 	bl	1957c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   13e6e:	4811      	ldr	r0, [pc, #68]	; (13eb4 <clk_init+0x54>)
   13e70:	f001 ff26 	bl	15cc0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   13e74:	4b10      	ldr	r3, [pc, #64]	; (13eb8 <clk_init+0x58>)
   13e76:	4298      	cmp	r0, r3
   13e78:	d119      	bne.n	13eae <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   13e7a:	f001 ff33 	bl	15ce4 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   13e7e:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   13e80:	2c03      	cmp	r4, #3
   13e82:	d812      	bhi.n	13eaa <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   13e84:	4621      	mov	r1, r4
   13e86:	4630      	mov	r0, r6
   13e88:	f005 fcda 	bl	19840 <get_sub_data>
   13e8c:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   13e8e:	4621      	mov	r1, r4
   13e90:	4630      	mov	r0, r6
   13e92:	f005 fce2 	bl	1985a <get_onoff_manager>
   13e96:	4909      	ldr	r1, [pc, #36]	; (13ebc <clk_init+0x5c>)
   13e98:	f004 fc34 	bl	18704 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   13e9c:	2800      	cmp	r0, #0
   13e9e:	db05      	blt.n	13eac <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13ea0:	2301      	movs	r3, #1
   13ea2:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   13ea4:	441c      	add	r4, r3
   13ea6:	b2e4      	uxtb	r4, r4
   13ea8:	e7ea      	b.n	13e80 <clk_init+0x20>
	}

	return 0;
   13eaa:	2000      	movs	r0, #0
}
   13eac:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   13eae:	f06f 0004 	mvn.w	r0, #4
   13eb2:	e7fb      	b.n	13eac <clk_init+0x4c>
   13eb4:	00013c71 	.word	0x00013c71
   13eb8:	0bad0000 	.word	0x0bad0000
   13ebc:	0001b828 	.word	0x0001b828

00013ec0 <z_nrf_clock_control_lf_on>:
{
   13ec0:	b510      	push	{r4, lr}
   13ec2:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13ec4:	4b0e      	ldr	r3, [pc, #56]	; (13f00 <z_nrf_clock_control_lf_on+0x40>)
   13ec6:	2101      	movs	r1, #1
   13ec8:	e8d3 2fef 	ldaex	r2, [r3]
   13ecc:	e8c3 1fe0 	stlex	r0, r1, [r3]
   13ed0:	2800      	cmp	r0, #0
   13ed2:	d1f9      	bne.n	13ec8 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
   13ed4:	b11a      	cbz	r2, 13ede <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
   13ed6:	1e63      	subs	r3, r4, #1
   13ed8:	2b01      	cmp	r3, #1
   13eda:	d90d      	bls.n	13ef8 <z_nrf_clock_control_lf_on+0x38>
}
   13edc:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   13ede:	4809      	ldr	r0, [pc, #36]	; (13f04 <z_nrf_clock_control_lf_on+0x44>)
   13ee0:	f005 fcbb 	bl	1985a <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   13ee4:	4908      	ldr	r1, [pc, #32]	; (13f08 <z_nrf_clock_control_lf_on+0x48>)
   13ee6:	2300      	movs	r3, #0
   13ee8:	604b      	str	r3, [r1, #4]
   13eea:	608b      	str	r3, [r1, #8]
   13eec:	60cb      	str	r3, [r1, #12]
   13eee:	2301      	movs	r3, #1
   13ef0:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   13ef2:	f004 fc24 	bl	1873e <onoff_request>
   13ef6:	e7ee      	b.n	13ed6 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
   13ef8:	4620      	mov	r0, r4
   13efa:	f7ff ff2d 	bl	13d58 <lfclk_spinwait>
		break;
   13efe:	e7ed      	b.n	13edc <z_nrf_clock_control_lf_on+0x1c>
   13f00:	20008924 	.word	0x20008924
   13f04:	0001ac50 	.word	0x0001ac50
   13f08:	20008914 	.word	0x20008914

00013f0c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   13f0c:	b510      	push	{r4, lr}
   13f0e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   13f10:	280a      	cmp	r0, #10
   13f12:	d006      	beq.n	13f22 <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   13f14:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   13f16:	4806      	ldr	r0, [pc, #24]	; (13f30 <console_out+0x24>)
   13f18:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   13f1a:	685b      	ldr	r3, [r3, #4]
   13f1c:	4798      	blx	r3

	return c;
}
   13f1e:	4620      	mov	r0, r4
   13f20:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
   13f22:	4803      	ldr	r0, [pc, #12]	; (13f30 <console_out+0x24>)
   13f24:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   13f26:	685b      	ldr	r3, [r3, #4]
   13f28:	210d      	movs	r1, #13
   13f2a:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   13f2c:	e7f2      	b.n	13f14 <console_out+0x8>
   13f2e:	bf00      	nop
   13f30:	0001acb0 	.word	0x0001acb0

00013f34 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
   13f34:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   13f36:	4c04      	ldr	r4, [pc, #16]	; (13f48 <uart_console_hook_install+0x14>)
   13f38:	4620      	mov	r0, r4
   13f3a:	f7ff fe59 	bl	13bf0 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   13f3e:	4620      	mov	r0, r4
   13f40:	f7fc fe36 	bl	10bb0 <__printk_hook_install>
#endif
}
   13f44:	bd10      	pop	{r4, pc}
   13f46:	bf00      	nop
   13f48:	00013f0d 	.word	0x00013f0d

00013f4c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   13f4c:	b508      	push	{r3, lr}
   13f4e:	4805      	ldr	r0, [pc, #20]	; (13f64 <uart_console_init+0x18>)
   13f50:	f006 fbd1 	bl	1a6f6 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   13f54:	b118      	cbz	r0, 13f5e <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
   13f56:	f7ff ffed 	bl	13f34 <uart_console_hook_install>

	return 0;
   13f5a:	2000      	movs	r0, #0
}
   13f5c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   13f5e:	f06f 0012 	mvn.w	r0, #18
   13f62:	e7fb      	b.n	13f5c <uart_console_init+0x10>
   13f64:	0001acb0 	.word	0x0001acb0

00013f68 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   13f68:	b128      	cbz	r0, 13f76 <get_dev+0xe>
   13f6a:	2801      	cmp	r0, #1
   13f6c:	d101      	bne.n	13f72 <get_dev+0xa>
   13f6e:	4803      	ldr	r0, [pc, #12]	; (13f7c <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   13f70:	4770      	bx	lr
	const struct device *dev = NULL;
   13f72:	2000      	movs	r0, #0
   13f74:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   13f76:	4802      	ldr	r0, [pc, #8]	; (13f80 <get_dev+0x18>)
   13f78:	4770      	bx	lr
   13f7a:	bf00      	nop
   13f7c:	0001ac68 	.word	0x0001ac68
   13f80:	0001ac80 	.word	0x0001ac80

00013f84 <gpio_nrfx_pin_interrupt_configure>:
{
   13f84:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f86:	b085      	sub	sp, #20
   13f88:	460e      	mov	r6, r1
   13f8a:	4619      	mov	r1, r3
	return port->config;
   13f8c:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   13f8e:	7b1b      	ldrb	r3, [r3, #12]
   13f90:	f006 051f 	and.w	r5, r6, #31
   13f94:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   13f98:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
   13f9c:	d022      	beq.n	13fe4 <gpio_nrfx_pin_interrupt_configure+0x60>
   13f9e:	4607      	mov	r7, r0
   13fa0:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   13fa2:	2300      	movs	r3, #0
   13fa4:	9301      	str	r3, [sp, #4]
   13fa6:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
   13fa8:	4610      	mov	r0, r2
   13faa:	f005 fe1e 	bl	19bea <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   13fae:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
   13fb2:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   13fb4:	6899      	ldr	r1, [r3, #8]
   13fb6:	40f1      	lsrs	r1, r6
   13fb8:	f011 0f01 	tst.w	r1, #1
   13fbc:	d102      	bne.n	13fc4 <gpio_nrfx_pin_interrupt_configure+0x40>
   13fbe:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
   13fc2:	d014      	beq.n	13fee <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   13fc4:	2300      	movs	r3, #0
   13fc6:	aa01      	add	r2, sp, #4
   13fc8:	4619      	mov	r1, r3
   13fca:	4628      	mov	r0, r5
   13fcc:	f002 f9ec 	bl	163a8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   13fd0:	4b1a      	ldr	r3, [pc, #104]	; (1403c <gpio_nrfx_pin_interrupt_configure+0xb8>)
   13fd2:	4298      	cmp	r0, r3
   13fd4:	d12f      	bne.n	14036 <gpio_nrfx_pin_interrupt_configure+0xb2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   13fd6:	2101      	movs	r1, #1
   13fd8:	4628      	mov	r0, r5
   13fda:	f002 fb49 	bl	16670 <nrfx_gpiote_trigger_enable>
	return 0;
   13fde:	2000      	movs	r0, #0
}
   13fe0:	b005      	add	sp, #20
   13fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   13fe4:	4628      	mov	r0, r5
   13fe6:	f002 fb75 	bl	166d4 <nrfx_gpiote_trigger_disable>
		return 0;
   13fea:	2000      	movs	r0, #0
   13fec:	e7f8      	b.n	13fe0 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   13fee:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
   13ff2:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13ff4:	2a01      	cmp	r2, #1
   13ff6:	d012      	beq.n	1401e <gpio_nrfx_pin_interrupt_configure+0x9a>
        case 0: return NRF_P0;
   13ff8:	4a11      	ldr	r2, [pc, #68]	; (14040 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   13ffa:	3380      	adds	r3, #128	; 0x80
   13ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   14000:	f013 0f01 	tst.w	r3, #1
   14004:	d1de      	bne.n	13fc4 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   14006:	f10d 010f 	add.w	r1, sp, #15
   1400a:	4628      	mov	r0, r5
   1400c:	f002 fad4 	bl	165b8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   14010:	4b0c      	ldr	r3, [pc, #48]	; (14044 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   14012:	4298      	cmp	r0, r3
   14014:	d005      	beq.n	14022 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
   14016:	f10d 030f 	add.w	r3, sp, #15
   1401a:	9302      	str	r3, [sp, #8]
   1401c:	e7d2      	b.n	13fc4 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
   1401e:	4a0a      	ldr	r2, [pc, #40]	; (14048 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   14020:	e7eb      	b.n	13ffa <gpio_nrfx_pin_interrupt_configure+0x76>
			err = nrfx_gpiote_channel_alloc(&ch);
   14022:	f10d 000f 	add.w	r0, sp, #15
   14026:	f002 fb1b 	bl	16660 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1402a:	4b04      	ldr	r3, [pc, #16]	; (1403c <gpio_nrfx_pin_interrupt_configure+0xb8>)
   1402c:	4298      	cmp	r0, r3
   1402e:	d0f2      	beq.n	14016 <gpio_nrfx_pin_interrupt_configure+0x92>
				return -ENOMEM;
   14030:	f06f 000b 	mvn.w	r0, #11
   14034:	e7d4      	b.n	13fe0 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
   14036:	f06f 0015 	mvn.w	r0, #21
   1403a:	e7d1      	b.n	13fe0 <gpio_nrfx_pin_interrupt_configure+0x5c>
   1403c:	0bad0000 	.word	0x0bad0000
   14040:	40842500 	.word	0x40842500
   14044:	0bad0004 	.word	0x0bad0004
   14048:	40842800 	.word	0x40842800

0001404c <gpio_nrfx_pin_configure>:
{
   1404c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14050:	b086      	sub	sp, #24
   14052:	460e      	mov	r6, r1
   14054:	4614      	mov	r4, r2
	return port->config;
   14056:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1405a:	f898 300c 	ldrb.w	r3, [r8, #12]
   1405e:	f001 051f 	and.w	r5, r1, #31
   14062:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   14066:	f10d 0117 	add.w	r1, sp, #23
   1406a:	4628      	mov	r0, r5
   1406c:	f002 faa4 	bl	165b8 <nrfx_gpiote_channel_get>
   14070:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   14072:	f414 3f40 	tst.w	r4, #196608	; 0x30000
   14076:	d039      	beq.n	140ec <gpio_nrfx_pin_configure+0xa0>
	nrfx_gpiote_trigger_config_t trigger_config = {
   14078:	2100      	movs	r1, #0
   1407a:	9103      	str	r1, [sp, #12]
   1407c:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1407e:	460b      	mov	r3, r1
   14080:	aa03      	add	r2, sp, #12
   14082:	4628      	mov	r0, r5
   14084:	f002 f990 	bl	163a8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   14088:	4b32      	ldr	r3, [pc, #200]	; (14154 <gpio_nrfx_pin_configure+0x108>)
   1408a:	4298      	cmp	r0, r3
   1408c:	d15f      	bne.n	1414e <gpio_nrfx_pin_configure+0x102>
	if (free_ch) {
   1408e:	429f      	cmp	r7, r3
   14090:	d03c      	beq.n	1410c <gpio_nrfx_pin_configure+0xc0>
	if (flags & GPIO_OUTPUT) {
   14092:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   14096:	d047      	beq.n	14128 <gpio_nrfx_pin_configure+0xdc>
		int rv = get_drive(flags, &drive);
   14098:	f10d 0103 	add.w	r1, sp, #3
   1409c:	4620      	mov	r0, r4
   1409e:	f005 fd31 	bl	19b04 <get_drive>
		if (rv != 0) {
   140a2:	4607      	mov	r7, r0
   140a4:	bb48      	cbnz	r0, 140fa <gpio_nrfx_pin_configure+0xae>
		nrfx_gpiote_output_config_t output_config = {
   140a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
   140aa:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   140ae:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   140b2:	bf0c      	ite	eq
   140b4:	2301      	moveq	r3, #1
   140b6:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   140b8:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   140bc:	4620      	mov	r0, r4
   140be:	f005 fd64 	bl	19b8a <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   140c2:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   140c6:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   140ca:	d024      	beq.n	14116 <gpio_nrfx_pin_configure+0xca>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   140cc:	f8d8 2004 	ldr.w	r2, [r8, #4]
   140d0:	2301      	movs	r3, #1
   140d2:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   140d4:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   140d6:	2200      	movs	r2, #0
   140d8:	a901      	add	r1, sp, #4
   140da:	4628      	mov	r0, r5
   140dc:	f002 f9fa 	bl	164d4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   140e0:	4b1c      	ldr	r3, [pc, #112]	; (14154 <gpio_nrfx_pin_configure+0x108>)
   140e2:	4298      	cmp	r0, r3
   140e4:	d009      	beq.n	140fa <gpio_nrfx_pin_configure+0xae>
   140e6:	f06f 0715 	mvn.w	r7, #21
   140ea:	e006      	b.n	140fa <gpio_nrfx_pin_configure+0xae>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   140ec:	4628      	mov	r0, r5
   140ee:	f002 fb13 	bl	16718 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   140f2:	4b18      	ldr	r3, [pc, #96]	; (14154 <gpio_nrfx_pin_configure+0x108>)
   140f4:	429f      	cmp	r7, r3
   140f6:	d004      	beq.n	14102 <gpio_nrfx_pin_configure+0xb6>
		return 0;
   140f8:	2700      	movs	r7, #0
}
   140fa:	4638      	mov	r0, r7
   140fc:	b006      	add	sp, #24
   140fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
   14102:	f89d 0017 	ldrb.w	r0, [sp, #23]
   14106:	f002 faa3 	bl	16650 <nrfx_gpiote_channel_free>
   1410a:	e7f5      	b.n	140f8 <gpio_nrfx_pin_configure+0xac>
		err = nrfx_gpiote_channel_free(ch);
   1410c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   14110:	f002 fa9e 	bl	16650 <nrfx_gpiote_channel_free>
   14114:	e7bd      	b.n	14092 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   14116:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   1411a:	d0dc      	beq.n	140d6 <gpio_nrfx_pin_configure+0x8a>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1411c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   14120:	2301      	movs	r3, #1
   14122:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
   14124:	60d3      	str	r3, [r2, #12]
}
   14126:	e7d6      	b.n	140d6 <gpio_nrfx_pin_configure+0x8a>
		.pull = get_pull(flags)
   14128:	4620      	mov	r0, r4
   1412a:	f005 fd2e 	bl	19b8a <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   1412e:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   14132:	2300      	movs	r3, #0
   14134:	461a      	mov	r2, r3
   14136:	a902      	add	r1, sp, #8
   14138:	4628      	mov	r0, r5
   1413a:	f002 f935 	bl	163a8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1413e:	4b05      	ldr	r3, [pc, #20]	; (14154 <gpio_nrfx_pin_configure+0x108>)
   14140:	4298      	cmp	r0, r3
   14142:	d101      	bne.n	14148 <gpio_nrfx_pin_configure+0xfc>
   14144:	2700      	movs	r7, #0
   14146:	e7d8      	b.n	140fa <gpio_nrfx_pin_configure+0xae>
   14148:	f06f 0715 	mvn.w	r7, #21
   1414c:	e7d5      	b.n	140fa <gpio_nrfx_pin_configure+0xae>
		return -EINVAL;
   1414e:	f06f 0715 	mvn.w	r7, #21
   14152:	e7d2      	b.n	140fa <gpio_nrfx_pin_configure+0xae>
   14154:	0bad0000 	.word	0x0bad0000

00014158 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   14158:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1415a:	f002 fa6f 	bl	1663c <nrfx_gpiote_is_init>
   1415e:	b108      	cbz	r0, 14164 <gpio_nrfx_init+0xc>
		return 0;
   14160:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   14162:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   14164:	f002 fa40 	bl	165e8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   14168:	4b08      	ldr	r3, [pc, #32]	; (1418c <gpio_nrfx_init+0x34>)
   1416a:	4298      	cmp	r0, r3
   1416c:	d10a      	bne.n	14184 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1416e:	2100      	movs	r1, #0
   14170:	4807      	ldr	r0, [pc, #28]	; (14190 <gpio_nrfx_init+0x38>)
   14172:	f002 fa1b 	bl	165ac <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   14176:	2200      	movs	r2, #0
   14178:	2105      	movs	r1, #5
   1417a:	202f      	movs	r0, #47	; 0x2f
   1417c:	f005 f9fe 	bl	1957c <z_arm_irq_priority_set>
	return 0;
   14180:	2000      	movs	r0, #0
   14182:	e7ee      	b.n	14162 <gpio_nrfx_init+0xa>
		return -EIO;
   14184:	f06f 0004 	mvn.w	r0, #4
   14188:	e7eb      	b.n	14162 <gpio_nrfx_init+0xa>
   1418a:	bf00      	nop
   1418c:	0bad0000 	.word	0x0bad0000
   14190:	00019c23 	.word	0x00019c23

00014194 <ws2812_strip_update_channels>:
}

static int ws2812_strip_update_channels(const struct device *dev,
					uint8_t *channels,
					size_t num_channels)
{
   14194:	b500      	push	{lr}
   14196:	b089      	sub	sp, #36	; 0x24
	LOG_ERR("update_channels not implemented");
   14198:	4b14      	ldr	r3, [pc, #80]	; (141ec <ws2812_strip_update_channels+0x58>)
   1419a:	9307      	str	r3, [sp, #28]
   1419c:	2302      	movs	r3, #2
   1419e:	f88d 3004 	strb.w	r3, [sp, #4]
   141a2:	2300      	movs	r3, #0
   141a4:	f88d 3005 	strb.w	r3, [sp, #5]
   141a8:	f88d 3006 	strb.w	r3, [sp, #6]
   141ac:	f88d 3007 	strb.w	r3, [sp, #7]
   141b0:	9a01      	ldr	r2, [sp, #4]
   141b2:	9206      	str	r2, [sp, #24]
   141b4:	4619      	mov	r1, r3
   141b6:	f363 0100 	bfi	r1, r3, #0, #1
   141ba:	f363 0141 	bfi	r1, r3, #1, #1
   141be:	f363 0182 	bfi	r1, r3, #2, #1
   141c2:	f363 01c5 	bfi	r1, r3, #3, #3
   141c6:	2201      	movs	r2, #1
   141c8:	f362 1188 	bfi	r1, r2, #6, #3
   141cc:	2208      	movs	r2, #8
   141ce:	f362 2152 	bfi	r1, r2, #9, #10
   141d2:	f363 41de 	bfi	r1, r3, #19, #12
   141d6:	f363 71df 	bfi	r1, r3, #31, #1
   141da:	aa06      	add	r2, sp, #24
   141dc:	4804      	ldr	r0, [pc, #16]	; (141f0 <ws2812_strip_update_channels+0x5c>)
   141de:	f005 f8c2 	bl	19366 <z_impl_z_log_msg_static_create>
	return -ENOTSUP;
}
   141e2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   141e6:	b009      	add	sp, #36	; 0x24
   141e8:	f85d fb04 	ldr.w	pc, [sp], #4
   141ec:	0001b920 	.word	0x0001b920
   141f0:	0001afe8 	.word	0x0001afe8

000141f4 <ws2812_strip_update_rgb>:
{
   141f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   141f8:	b084      	sub	sp, #16
   141fa:	460e      	mov	r6, r1
   141fc:	4615      	mov	r5, r2
	const struct ws2812_spi_cfg *cfg = dev_cfg(dev);
   141fe:	f005 fd29 	bl	19c54 <dev_cfg>
   14202:	4604      	mov	r4, r0
	const uint8_t one = cfg->one_frame, zero = cfg->zero_frame;
   14204:	7e00      	ldrb	r0, [r0, #24]
   14206:	7e67      	ldrb	r7, [r4, #25]
		.buf = cfg->px_buf,
   14208:	6922      	ldr	r2, [r4, #16]
	struct spi_buf buf = {
   1420a:	9202      	str	r2, [sp, #8]
		.len = cfg->px_buf_size,
   1420c:	6961      	ldr	r1, [r4, #20]
	struct spi_buf buf = {
   1420e:	9103      	str	r1, [sp, #12]
	const struct spi_buf_set tx = {
   14210:	ab02      	add	r3, sp, #8
   14212:	9300      	str	r3, [sp, #0]
   14214:	2301      	movs	r3, #1
   14216:	9301      	str	r3, [sp, #4]
	overflow = size_mul_overflow(num_pixels, cfg->num_colors * 8, &nbytes);
   14218:	7ea3      	ldrb	r3, [r4, #26]
   1421a:	00db      	lsls	r3, r3, #3
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   1421c:	f04f 0c00 	mov.w	ip, #0
   14220:	fba5 3e03 	umull	r3, lr, r5, r3
   14224:	f1be 0f00 	cmp.w	lr, #0
   14228:	d106      	bne.n	14238 <ws2812_strip_update_rgb+0x44>
	return !overflow && (nbytes <= cfg->px_buf_size);
   1422a:	f1bc 0f00 	cmp.w	ip, #0
   1422e:	d106      	bne.n	1423e <ws2812_strip_update_rgb+0x4a>
   14230:	4299      	cmp	r1, r3
   14232:	d20c      	bcs.n	1424e <ws2812_strip_update_rgb+0x5a>
   14234:	2300      	movs	r3, #0
   14236:	e003      	b.n	14240 <ws2812_strip_update_rgb+0x4c>
   14238:	f04f 0c01 	mov.w	ip, #1
   1423c:	e7f5      	b.n	1422a <ws2812_strip_update_rgb+0x36>
   1423e:	2300      	movs	r3, #0
	if (!num_pixels_ok(cfg, num_pixels)) {
   14240:	b13b      	cbz	r3, 14252 <ws2812_strip_update_rgb+0x5e>
	for (i = 0; i < num_pixels; i++) {
   14242:	f04f 0800 	mov.w	r8, #0
   14246:	45a8      	cmp	r8, r5
   14248:	d23f      	bcs.n	142ca <ws2812_strip_update_rgb+0xd6>
		for (j = 0; j < cfg->num_colors; j++) {
   1424a:	2100      	movs	r1, #0
   1424c:	e026      	b.n	1429c <ws2812_strip_update_rgb+0xa8>
	return !overflow && (nbytes <= cfg->px_buf_size);
   1424e:	2301      	movs	r3, #1
   14250:	e7f6      	b.n	14240 <ws2812_strip_update_rgb+0x4c>
		return -ENOMEM;
   14252:	f06f 050b 	mvn.w	r5, #11
   14256:	e040      	b.n	142da <ws2812_strip_update_rgb+0xe6>
				pixel = pixels[i].r;
   14258:	eb06 0388 	add.w	r3, r6, r8, lsl #2
   1425c:	f893 e001 	ldrb.w	lr, [r3, #1]
	for (i = 0; i < 8; i++) {
   14260:	2300      	movs	r3, #0
   14262:	e00d      	b.n	14280 <ws2812_strip_update_rgb+0x8c>
				pixel = pixels[i].g;
   14264:	eb06 0388 	add.w	r3, r6, r8, lsl #2
   14268:	f893 e002 	ldrb.w	lr, [r3, #2]
				break;
   1426c:	e7f8      	b.n	14260 <ws2812_strip_update_rgb+0x6c>
				pixel = pixels[i].b;
   1426e:	eb06 0388 	add.w	r3, r6, r8, lsl #2
   14272:	f893 e003 	ldrb.w	lr, [r3, #3]
				break;
   14276:	e7f3      	b.n	14260 <ws2812_strip_update_rgb+0x6c>
		buf[i] = color & BIT(7 - i) ? one_frame : zero_frame;
   14278:	46bc      	mov	ip, r7
   1427a:	f802 c003 	strb.w	ip, [r2, r3]
	for (i = 0; i < 8; i++) {
   1427e:	3301      	adds	r3, #1
   14280:	2b07      	cmp	r3, #7
   14282:	dc08      	bgt.n	14296 <ws2812_strip_update_rgb+0xa2>
		buf[i] = color & BIT(7 - i) ? one_frame : zero_frame;
   14284:	f1c3 0c07 	rsb	ip, r3, #7
   14288:	fa2e fc0c 	lsr.w	ip, lr, ip
   1428c:	f01c 0f01 	tst.w	ip, #1
   14290:	d0f2      	beq.n	14278 <ws2812_strip_update_rgb+0x84>
   14292:	4684      	mov	ip, r0
   14294:	e7f1      	b.n	1427a <ws2812_strip_update_rgb+0x86>
			px_buf += 8;
   14296:	3208      	adds	r2, #8
		for (j = 0; j < cfg->num_colors; j++) {
   14298:	3101      	adds	r1, #1
   1429a:	b2c9      	uxtb	r1, r1
   1429c:	7ea3      	ldrb	r3, [r4, #26]
   1429e:	428b      	cmp	r3, r1
   142a0:	d910      	bls.n	142c4 <ws2812_strip_update_rgb+0xd0>
			switch (cfg->color_mapping[j]) {
   142a2:	69e3      	ldr	r3, [r4, #28]
   142a4:	f813 e001 	ldrb.w	lr, [r3, r1]
   142a8:	f1be 0f03 	cmp.w	lr, #3
   142ac:	d819      	bhi.n	142e2 <ws2812_strip_update_rgb+0xee>
   142ae:	a301      	add	r3, pc, #4	; (adr r3, 142b4 <ws2812_strip_update_rgb+0xc0>)
   142b0:	f853 f02e 	ldr.w	pc, [r3, lr, lsl #2]
   142b4:	00014261 	.word	0x00014261
   142b8:	00014259 	.word	0x00014259
   142bc:	00014265 	.word	0x00014265
   142c0:	0001426f 	.word	0x0001426f
	for (i = 0; i < num_pixels; i++) {
   142c4:	f108 0801 	add.w	r8, r8, #1
   142c8:	e7bd      	b.n	14246 <ws2812_strip_update_rgb+0x52>
	rc = spi_write_dt(&cfg->bus, &tx);
   142ca:	4669      	mov	r1, sp
   142cc:	4620      	mov	r0, r4
   142ce:	f005 fcb7 	bl	19c40 <spi_write_dt>
   142d2:	4605      	mov	r5, r0
	ws2812_reset_delay(cfg->reset_delay);
   142d4:	8c20      	ldrh	r0, [r4, #32]
	return z_impl_k_usleep(us);
   142d6:	f003 fdb3 	bl	17e40 <z_impl_k_usleep>
}
   142da:	4628      	mov	r0, r5
   142dc:	b004      	add	sp, #16
   142de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			switch (cfg->color_mapping[j]) {
   142e2:	f06f 0515 	mvn.w	r5, #21
   142e6:	e7f8      	b.n	142da <ws2812_strip_update_rgb+0xe6>

000142e8 <ws2812_spi_init>:

static int ws2812_spi_init(const struct device *dev)
{
   142e8:	b5b0      	push	{r4, r5, r7, lr}
   142ea:	b082      	sub	sp, #8
   142ec:	af00      	add	r7, sp, #0
   142ee:	4605      	mov	r5, r0
	const struct ws2812_spi_cfg *cfg = dev_cfg(dev);
   142f0:	f005 fcb0 	bl	19c54 <dev_cfg>
   142f4:	4604      	mov	r4, r0
	uint8_t i;

	if (!spi_is_ready(&cfg->bus)) {
   142f6:	f005 fcaf 	bl	19c58 <spi_is_ready>
   142fa:	b108      	cbz	r0, 14300 <ws2812_spi_init+0x18>
		LOG_ERR("SPI device %s not ready", cfg->bus.bus->name);
		return -ENODEV;
	}

	for (i = 0; i < cfg->num_colors; i++) {
   142fc:	2300      	movs	r3, #0
   142fe:	e091      	b.n	14424 <ws2812_spi_init+0x13c>
		LOG_ERR("SPI device %s not ready", cfg->bus.bus->name);
   14300:	6823      	ldr	r3, [r4, #0]
   14302:	6819      	ldr	r1, [r3, #0]
   14304:	466c      	mov	r4, sp
   14306:	2300      	movs	r3, #0
   14308:	713b      	strb	r3, [r7, #4]
   1430a:	2302      	movs	r3, #2
   1430c:	717b      	strb	r3, [r7, #5]
   1430e:	b088      	sub	sp, #32
   14310:	466b      	mov	r3, sp
   14312:	f113 0210 	adds.w	r2, r3, #16
   14316:	d011      	beq.n	1433c <ws2812_spi_init+0x54>
   14318:	250e      	movs	r5, #14
   1431a:	b11a      	cbz	r2, 14324 <ws2812_spi_init+0x3c>
   1431c:	2d04      	cmp	r5, #4
   1431e:	dd01      	ble.n	14324 <ws2812_spi_init+0x3c>
   14320:	4855      	ldr	r0, [pc, #340]	; (14478 <ws2812_spi_init+0x190>)
   14322:	6158      	str	r0, [r3, #20]
   14324:	2000      	movs	r0, #0
   14326:	7038      	strb	r0, [r7, #0]
   14328:	2002      	movs	r0, #2
   1432a:	7078      	strb	r0, [r7, #1]
   1432c:	b19a      	cbz	r2, 14356 <ws2812_spi_init+0x6e>
   1432e:	2d08      	cmp	r5, #8
   14330:	dd00      	ble.n	14334 <ws2812_spi_init+0x4c>
   14332:	6199      	str	r1, [r3, #24]
   14334:	f103 011c 	add.w	r1, r3, #28
   14338:	2000      	movs	r0, #0
   1433a:	e00a      	b.n	14352 <ws2812_spi_init+0x6a>
   1433c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   14340:	e7eb      	b.n	1431a <ws2812_spi_init+0x32>
   14342:	f100 0c08 	add.w	ip, r0, #8
   14346:	44bc      	add	ip, r7
   14348:	f81c cc08 	ldrb.w	ip, [ip, #-8]
   1434c:	f801 cb01 	strb.w	ip, [r1], #1
   14350:	3001      	adds	r0, #1
   14352:	2801      	cmp	r0, #1
   14354:	d9f5      	bls.n	14342 <ws2812_spi_init+0x5a>
   14356:	2d0d      	cmp	r5, #13
   14358:	dd26      	ble.n	143a8 <ws2812_spi_init+0xc0>
   1435a:	250e      	movs	r5, #14
   1435c:	b142      	cbz	r2, 14370 <ws2812_spi_init+0x88>
   1435e:	2103      	movs	r1, #3
   14360:	7139      	strb	r1, [r7, #4]
   14362:	2100      	movs	r1, #0
   14364:	7179      	strb	r1, [r7, #5]
   14366:	71b9      	strb	r1, [r7, #6]
   14368:	2101      	movs	r1, #1
   1436a:	71f9      	strb	r1, [r7, #7]
   1436c:	6878      	ldr	r0, [r7, #4]
   1436e:	6118      	str	r0, [r3, #16]
   14370:	2100      	movs	r1, #0
   14372:	f36f 0100 	bfc	r1, #0, #1
   14376:	f36f 0141 	bfc	r1, #1, #1
   1437a:	f36f 0182 	bfc	r1, #2, #1
   1437e:	f36f 01c5 	bfc	r1, #3, #3
   14382:	2301      	movs	r3, #1
   14384:	f363 1188 	bfi	r1, r3, #6, #3
   14388:	f3c5 0509 	ubfx	r5, r5, #0, #10
   1438c:	f365 2152 	bfi	r1, r5, #9, #10
   14390:	f36f 41de 	bfc	r1, #19, #12
   14394:	f36f 71df 	bfc	r1, #31, #1
   14398:	2300      	movs	r3, #0
   1439a:	4838      	ldr	r0, [pc, #224]	; (1447c <ws2812_spi_init+0x194>)
   1439c:	f004 ffe3 	bl	19366 <z_impl_z_log_msg_static_create>
   143a0:	46a5      	mov	sp, r4
		return -ENODEV;
   143a2:	f06f 0012 	mvn.w	r0, #18
   143a6:	e063      	b.n	14470 <ws2812_spi_init+0x188>
		LOG_ERR("SPI device %s not ready", cfg->bus.bus->name);
   143a8:	f06f 051b 	mvn.w	r5, #27
   143ac:	e7d6      	b.n	1435c <ws2812_spi_init+0x74>
		case LED_COLOR_ID_RED:
		case LED_COLOR_ID_GREEN:
		case LED_COLOR_ID_BLUE:
			break;
		default:
			LOG_ERR("%s: invalid channel to color mapping."
   143ae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   143b2:	e04a      	b.n	1444a <ws2812_spi_init+0x162>
   143b4:	f101 0c08 	add.w	ip, r1, #8
   143b8:	44bc      	add	ip, r7
   143ba:	f81c cc08 	ldrb.w	ip, [ip, #-8]
   143be:	f803 cb01 	strb.w	ip, [r3], #1
   143c2:	3101      	adds	r1, #1
   143c4:	2901      	cmp	r1, #1
   143c6:	d9f5      	bls.n	143b4 <ws2812_spi_init+0xcc>
   143c8:	280d      	cmp	r0, #13
   143ca:	dd26      	ble.n	1441a <ws2812_spi_init+0x132>
   143cc:	230e      	movs	r3, #14
   143ce:	b142      	cbz	r2, 143e2 <ws2812_spi_init+0xfa>
   143d0:	2103      	movs	r1, #3
   143d2:	7139      	strb	r1, [r7, #4]
   143d4:	2100      	movs	r1, #0
   143d6:	7179      	strb	r1, [r7, #5]
   143d8:	71b9      	strb	r1, [r7, #6]
   143da:	2101      	movs	r1, #1
   143dc:	71f9      	strb	r1, [r7, #7]
   143de:	6878      	ldr	r0, [r7, #4]
   143e0:	6120      	str	r0, [r4, #16]
   143e2:	2100      	movs	r1, #0
   143e4:	f36f 0100 	bfc	r1, #0, #1
   143e8:	f36f 0141 	bfc	r1, #1, #1
   143ec:	f36f 0182 	bfc	r1, #2, #1
   143f0:	f36f 01c5 	bfc	r1, #3, #3
   143f4:	2001      	movs	r0, #1
   143f6:	f360 1188 	bfi	r1, r0, #6, #3
   143fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
   143fe:	f363 2152 	bfi	r1, r3, #9, #10
   14402:	f36f 41de 	bfc	r1, #19, #12
   14406:	f36f 71df 	bfc	r1, #31, #1
   1440a:	2300      	movs	r3, #0
   1440c:	481b      	ldr	r0, [pc, #108]	; (1447c <ws2812_spi_init+0x194>)
   1440e:	f004 ffaa 	bl	19366 <z_impl_z_log_msg_static_create>
   14412:	46ad      	mov	sp, r5
				"Check the color-mapping DT property",
				dev->name);
			return -EINVAL;
   14414:	f06f 0015 	mvn.w	r0, #21
   14418:	e02a      	b.n	14470 <ws2812_spi_init+0x188>
			LOG_ERR("%s: invalid channel to color mapping."
   1441a:	f06f 031b 	mvn.w	r3, #27
   1441e:	e7d6      	b.n	143ce <ws2812_spi_init+0xe6>
	for (i = 0; i < cfg->num_colors; i++) {
   14420:	3301      	adds	r3, #1
   14422:	b2db      	uxtb	r3, r3
   14424:	7ea2      	ldrb	r2, [r4, #26]
   14426:	4293      	cmp	r3, r2
   14428:	d221      	bcs.n	1446e <ws2812_spi_init+0x186>
		switch (cfg->color_mapping[i]) {
   1442a:	69e2      	ldr	r2, [r4, #28]
   1442c:	5cd2      	ldrb	r2, [r2, r3]
   1442e:	2a03      	cmp	r2, #3
   14430:	d9f6      	bls.n	14420 <ws2812_spi_init+0x138>
			LOG_ERR("%s: invalid channel to color mapping."
   14432:	6829      	ldr	r1, [r5, #0]
   14434:	466d      	mov	r5, sp
   14436:	2300      	movs	r3, #0
   14438:	713b      	strb	r3, [r7, #4]
   1443a:	2302      	movs	r3, #2
   1443c:	717b      	strb	r3, [r7, #5]
   1443e:	b088      	sub	sp, #32
   14440:	466c      	mov	r4, sp
   14442:	f114 0210 	adds.w	r2, r4, #16
   14446:	d0b2      	beq.n	143ae <ws2812_spi_init+0xc6>
   14448:	200e      	movs	r0, #14
   1444a:	b11a      	cbz	r2, 14454 <ws2812_spi_init+0x16c>
   1444c:	2804      	cmp	r0, #4
   1444e:	dd01      	ble.n	14454 <ws2812_spi_init+0x16c>
   14450:	4b0b      	ldr	r3, [pc, #44]	; (14480 <ws2812_spi_init+0x198>)
   14452:	6163      	str	r3, [r4, #20]
   14454:	2300      	movs	r3, #0
   14456:	703b      	strb	r3, [r7, #0]
   14458:	2302      	movs	r3, #2
   1445a:	707b      	strb	r3, [r7, #1]
   1445c:	2a00      	cmp	r2, #0
   1445e:	d0b3      	beq.n	143c8 <ws2812_spi_init+0xe0>
   14460:	2808      	cmp	r0, #8
   14462:	dd00      	ble.n	14466 <ws2812_spi_init+0x17e>
   14464:	61a1      	str	r1, [r4, #24]
   14466:	f104 031c 	add.w	r3, r4, #28
   1446a:	2100      	movs	r1, #0
   1446c:	e7aa      	b.n	143c4 <ws2812_spi_init+0xdc>
		}
	}

	return 0;
   1446e:	2000      	movs	r0, #0
}
   14470:	3708      	adds	r7, #8
   14472:	46bd      	mov	sp, r7
   14474:	bdb0      	pop	{r4, r5, r7, pc}
   14476:	bf00      	nop
   14478:	0001b940 	.word	0x0001b940
   1447c:	0001afe8 	.word	0x0001afe8
   14480:	0001b958 	.word	0x0001b958

00014484 <get_nrf_spim_frequency>:

static inline nrf_spim_frequency_t get_nrf_spim_frequency(uint32_t frequency)
{
	/* Get the highest supported frequency not exceeding the requested one.
	 */
	if (frequency < 250000) {
   14484:	4b19      	ldr	r3, [pc, #100]	; (144ec <get_nrf_spim_frequency+0x68>)
   14486:	4298      	cmp	r0, r3
   14488:	d917      	bls.n	144ba <get_nrf_spim_frequency+0x36>
		return NRF_SPIM_FREQ_125K;
	} else if (frequency < 500000) {
   1448a:	4b19      	ldr	r3, [pc, #100]	; (144f0 <get_nrf_spim_frequency+0x6c>)
   1448c:	4298      	cmp	r0, r3
   1448e:	d917      	bls.n	144c0 <get_nrf_spim_frequency+0x3c>
		return NRF_SPIM_FREQ_250K;
	} else if (frequency < 1000000) {
   14490:	4b18      	ldr	r3, [pc, #96]	; (144f4 <get_nrf_spim_frequency+0x70>)
   14492:	4298      	cmp	r0, r3
   14494:	d917      	bls.n	144c6 <get_nrf_spim_frequency+0x42>
		return NRF_SPIM_FREQ_500K;
	} else if (frequency < 2000000) {
   14496:	4b18      	ldr	r3, [pc, #96]	; (144f8 <get_nrf_spim_frequency+0x74>)
   14498:	4298      	cmp	r0, r3
   1449a:	d917      	bls.n	144cc <get_nrf_spim_frequency+0x48>
		return NRF_SPIM_FREQ_1M;
	} else if (frequency < 4000000) {
   1449c:	4b17      	ldr	r3, [pc, #92]	; (144fc <get_nrf_spim_frequency+0x78>)
   1449e:	4298      	cmp	r0, r3
   144a0:	d917      	bls.n	144d2 <get_nrf_spim_frequency+0x4e>
		return NRF_SPIM_FREQ_2M;
	} else if (frequency < 8000000) {
   144a2:	4b17      	ldr	r3, [pc, #92]	; (14500 <get_nrf_spim_frequency+0x7c>)
   144a4:	4298      	cmp	r0, r3
   144a6:	d317      	bcc.n	144d8 <get_nrf_spim_frequency+0x54>
		return NRF_SPIM_FREQ_4M;
/* Only the devices with HS-SPI can use SPI clock higher than 8 MHz and
 * have SPIM_FREQUENCY_FREQUENCY_M32 defined in their own bitfields.h
 */
#if defined(SPIM_FREQUENCY_FREQUENCY_M32)
	} else if (frequency < 16000000) {
   144a8:	4b16      	ldr	r3, [pc, #88]	; (14504 <get_nrf_spim_frequency+0x80>)
   144aa:	4298      	cmp	r0, r3
   144ac:	d317      	bcc.n	144de <get_nrf_spim_frequency+0x5a>
		return NRF_SPIM_FREQ_8M;
	} else if (frequency < 32000000) {
   144ae:	4b16      	ldr	r3, [pc, #88]	; (14508 <get_nrf_spim_frequency+0x84>)
   144b0:	4298      	cmp	r0, r3
   144b2:	d217      	bcs.n	144e4 <get_nrf_spim_frequency+0x60>
		return NRF_SPIM_FREQ_16M;
   144b4:	f04f 6020 	mov.w	r0, #167772160	; 0xa000000
   144b8:	4770      	bx	lr
		return NRF_SPIM_FREQ_125K;
   144ba:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   144be:	4770      	bx	lr
		return NRF_SPIM_FREQ_250K;
   144c0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   144c4:	4770      	bx	lr
		return NRF_SPIM_FREQ_500K;
   144c6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   144ca:	4770      	bx	lr
		return NRF_SPIM_FREQ_1M;
   144cc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   144d0:	4770      	bx	lr
		return NRF_SPIM_FREQ_2M;
   144d2:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   144d6:	4770      	bx	lr
		return NRF_SPIM_FREQ_4M;
   144d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   144dc:	4770      	bx	lr
		return NRF_SPIM_FREQ_8M;
   144de:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   144e2:	4770      	bx	lr
	} else {
		return NRF_SPIM_FREQ_32M;
   144e4:	f04f 50a0 	mov.w	r0, #335544320	; 0x14000000
#else
	} else {
		return NRF_SPIM_FREQ_8M;
#endif
	}
}
   144e8:	4770      	bx	lr
   144ea:	bf00      	nop
   144ec:	0003d08f 	.word	0x0003d08f
   144f0:	0007a11f 	.word	0x0007a11f
   144f4:	000f423f 	.word	0x000f423f
   144f8:	001e847f 	.word	0x001e847f
   144fc:	003d08ff 	.word	0x003d08ff
   14500:	007a1200 	.word	0x007a1200
   14504:	00f42400 	.word	0x00f42400
   14508:	01e84800 	.word	0x01e84800

0001450c <configure>:
	}
}

static int configure(const struct device *dev,
		     const struct spi_config *spi_cfg)
{
   1450c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14510:	b0a1      	sub	sp, #132	; 0x84
   14512:	af00      	add	r7, sp, #0
   14514:	460c      	mov	r4, r1
	struct spi_nrfx_data *dev_data = dev->data;
   14516:	6905      	ldr	r5, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   14518:	6846      	ldr	r6, [r0, #4]
	struct spi_context *ctx = &dev_data->ctx;
	uint32_t max_freq = dev_config->max_freq;
   1451a:	f8d6 9008 	ldr.w	r9, [r6, #8]
	nrfx_spim_config_t config;
	nrfx_err_t result;

	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1451e:	f895 805d 	ldrb.w	r8, [r5, #93]	; 0x5d
   14522:	f1b8 0f00 	cmp.w	r8, #0
   14526:	d003      	beq.n	14530 <configure+0x24>
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
   14528:	682b      	ldr	r3, [r5, #0]
   1452a:	428b      	cmp	r3, r1
   1452c:	f000 819a 	beq.w	14864 <configure+0x358>
		/* Already configured. No need to do it again. */
		return 0;
	}

	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   14530:	88a3      	ldrh	r3, [r4, #4]
   14532:	f413 6f00 	tst.w	r3, #2048	; 0x800
   14536:	d158      	bne.n	145ea <configure+0xde>
		LOG_ERR("Half-duplex not supported");
		return -ENOTSUP;
	}

	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   14538:	f013 0f01 	tst.w	r3, #1
   1453c:	d17a      	bne.n	14634 <configure+0x128>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
		return -EINVAL;
	}

	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1453e:	f013 0f08 	tst.w	r3, #8
   14542:	f040 80cd 	bne.w	146e0 <configure+0x1d4>
	    (spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
		LOG_ERR("Only single line mode is supported");
		return -EINVAL;
	}

	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   14546:	f3c3 1345 	ubfx	r3, r3, #5, #6
   1454a:	2b08      	cmp	r3, #8
   1454c:	f040 80ed 	bne.w	1472a <configure+0x21e>
		LOG_ERR("Word sizes other than 8 bits are not supported");
		return -EINVAL;
	}

	if (spi_cfg->frequency < 125000) {
   14550:	6822      	ldr	r2, [r4, #0]
   14552:	4bc5      	ldr	r3, [pc, #788]	; (14868 <configure+0x35c>)
   14554:	429a      	cmp	r2, r3
   14556:	f240 810d 	bls.w	14774 <configure+0x268>
#if defined(CONFIG_SOC_NRF5340_CPUAPP)
	/* On nRF5340, the 32 Mbps speed is supported by the application core
	 * when it is running at 128 MHz (see the Timing specifications section
	 * in the nRF5340 PS).
	 */
	if (max_freq > 16000000 &&
   1455a:	4bc4      	ldr	r3, [pc, #784]	; (1486c <configure+0x360>)
   1455c:	4599      	cmp	r9, r3
   1455e:	d907      	bls.n	14570 <configure+0x64>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
   14560:	4bc3      	ldr	r3, [pc, #780]	; (14870 <configure+0x364>)
   14562:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
   14566:	f013 0f03 	tst.w	r3, #3
   1456a:	d001      	beq.n	14570 <configure+0x64>
	    nrf_clock_hfclk_div_get(NRF_CLOCK) != NRF_CLOCK_HFCLK_DIV_1) {
		max_freq = 16000000;
   1456c:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 1486c <configure+0x360>
	}
#endif

	config = dev_config->def_config;
   14570:	f107 0c08 	add.w	ip, r7, #8
   14574:	f106 0e0c 	add.w	lr, r6, #12
   14578:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1457c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   14580:	e89e 0003 	ldmia.w	lr, {r0, r1}
   14584:	e88c 0003 	stmia.w	ip, {r0, r1}

	/* Limit the frequency to that supported by the SPIM instance. */
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   14588:	6820      	ldr	r0, [r4, #0]
   1458a:	4548      	cmp	r0, r9
   1458c:	bf28      	it	cs
   1458e:	4648      	movcs	r0, r9
   14590:	f7ff ff78 	bl	14484 <get_nrf_spim_frequency>
   14594:	6138      	str	r0, [r7, #16]
						      max_freq));
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   14596:	88a3      	ldrh	r3, [r4, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   14598:	f013 0f02 	tst.w	r3, #2
   1459c:	f000 810f 	beq.w	147be <configure+0x2b2>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   145a0:	f013 0f04 	tst.w	r3, #4
   145a4:	f000 8110 	beq.w	147c8 <configure+0x2bc>
			return NRF_SPIM_MODE_3;
   145a8:	2303      	movs	r3, #3
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   145aa:	753b      	strb	r3, [r7, #20]
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   145ac:	88a3      	ldrh	r3, [r4, #4]
	if (operation & SPI_TRANSFER_LSB) {
   145ae:	f013 0f10 	tst.w	r3, #16
   145b2:	f000 810d 	beq.w	147d0 <configure+0x2c4>
		return NRF_SPIM_BIT_ORDER_LSB_FIRST;
   145b6:	2301      	movs	r3, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   145b8:	757b      	strb	r3, [r7, #21]

	if (dev_data->initialized) {
   145ba:	f1b8 0f00 	cmp.w	r8, #0
   145be:	f040 8109 	bne.w	147d4 <configure+0x2c8>
		nrfx_spim_uninit(&dev_config->spim);
		dev_data->initialized = false;
	}

	result = nrfx_spim_init(&dev_config->spim, &config,
   145c2:	462b      	mov	r3, r5
   145c4:	4aab      	ldr	r2, [pc, #684]	; (14874 <configure+0x368>)
   145c6:	f107 0108 	add.w	r1, r7, #8
   145ca:	4630      	mov	r0, r6
   145cc:	f002 fada 	bl	16b84 <nrfx_spim_init>
				event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
   145d0:	4ba9      	ldr	r3, [pc, #676]	; (14878 <configure+0x36c>)
   145d2:	4298      	cmp	r0, r3
   145d4:	f040 8105 	bne.w	147e2 <configure+0x2d6>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
		return -EIO;
	}

	dev_data->initialized = true;
   145d8:	2301      	movs	r3, #1
   145da:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

	ctx->config = spi_cfg;
   145de:	602c      	str	r4, [r5, #0]

	return 0;
   145e0:	2000      	movs	r0, #0
}
   145e2:	3784      	adds	r7, #132	; 0x84
   145e4:	46bd      	mov	sp, r7
   145e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Half-duplex not supported");
   145ea:	4ba4      	ldr	r3, [pc, #656]	; (1487c <configure+0x370>)
   145ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   145ee:	2302      	movs	r3, #2
   145f0:	713b      	strb	r3, [r7, #4]
   145f2:	2300      	movs	r3, #0
   145f4:	717b      	strb	r3, [r7, #5]
   145f6:	71bb      	strb	r3, [r7, #6]
   145f8:	71fb      	strb	r3, [r7, #7]
   145fa:	687a      	ldr	r2, [r7, #4]
   145fc:	67ba      	str	r2, [r7, #120]	; 0x78
   145fe:	4619      	mov	r1, r3
   14600:	f363 0100 	bfi	r1, r3, #0, #1
   14604:	f363 0141 	bfi	r1, r3, #1, #1
   14608:	f363 0182 	bfi	r1, r3, #2, #1
   1460c:	f363 01c5 	bfi	r1, r3, #3, #3
   14610:	2201      	movs	r2, #1
   14612:	f362 1188 	bfi	r1, r2, #6, #3
   14616:	2208      	movs	r2, #8
   14618:	f362 2152 	bfi	r1, r2, #9, #10
   1461c:	f363 41de 	bfi	r1, r3, #19, #12
   14620:	f363 71df 	bfi	r1, r3, #31, #1
   14624:	f107 0278 	add.w	r2, r7, #120	; 0x78
   14628:	4895      	ldr	r0, [pc, #596]	; (14880 <configure+0x374>)
   1462a:	f004 fe9c 	bl	19366 <z_impl_z_log_msg_static_create>
		return -ENOTSUP;
   1462e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14632:	e7d6      	b.n	145e2 <configure+0xd6>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   14634:	6801      	ldr	r1, [r0, #0]
   14636:	466d      	mov	r5, sp
   14638:	2300      	movs	r3, #0
   1463a:	713b      	strb	r3, [r7, #4]
   1463c:	2302      	movs	r3, #2
   1463e:	717b      	strb	r3, [r7, #5]
   14640:	b088      	sub	sp, #32
   14642:	466c      	mov	r4, sp
   14644:	f114 0210 	adds.w	r2, r4, #16
   14648:	d011      	beq.n	1466e <configure+0x162>
   1464a:	200e      	movs	r0, #14
   1464c:	b11a      	cbz	r2, 14656 <configure+0x14a>
   1464e:	2804      	cmp	r0, #4
   14650:	dd01      	ble.n	14656 <configure+0x14a>
   14652:	4b8c      	ldr	r3, [pc, #560]	; (14884 <configure+0x378>)
   14654:	6163      	str	r3, [r4, #20]
   14656:	2300      	movs	r3, #0
   14658:	703b      	strb	r3, [r7, #0]
   1465a:	2302      	movs	r3, #2
   1465c:	707b      	strb	r3, [r7, #1]
   1465e:	b19a      	cbz	r2, 14688 <configure+0x17c>
   14660:	2808      	cmp	r0, #8
   14662:	dd00      	ble.n	14666 <configure+0x15a>
   14664:	61a1      	str	r1, [r4, #24]
   14666:	f104 031c 	add.w	r3, r4, #28
   1466a:	2100      	movs	r1, #0
   1466c:	e00a      	b.n	14684 <configure+0x178>
   1466e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   14672:	e7eb      	b.n	1464c <configure+0x140>
   14674:	f101 0680 	add.w	r6, r1, #128	; 0x80
   14678:	443e      	add	r6, r7
   1467a:	f816 6c80 	ldrb.w	r6, [r6, #-128]
   1467e:	f803 6b01 	strb.w	r6, [r3], #1
   14682:	3101      	adds	r1, #1
   14684:	2901      	cmp	r1, #1
   14686:	d9f5      	bls.n	14674 <configure+0x168>
   14688:	280d      	cmp	r0, #13
   1468a:	dd26      	ble.n	146da <configure+0x1ce>
   1468c:	230e      	movs	r3, #14
   1468e:	b142      	cbz	r2, 146a2 <configure+0x196>
   14690:	2103      	movs	r1, #3
   14692:	7139      	strb	r1, [r7, #4]
   14694:	2100      	movs	r1, #0
   14696:	7179      	strb	r1, [r7, #5]
   14698:	71b9      	strb	r1, [r7, #6]
   1469a:	2101      	movs	r1, #1
   1469c:	71f9      	strb	r1, [r7, #7]
   1469e:	6878      	ldr	r0, [r7, #4]
   146a0:	6120      	str	r0, [r4, #16]
   146a2:	2100      	movs	r1, #0
   146a4:	f36f 0100 	bfc	r1, #0, #1
   146a8:	f36f 0141 	bfc	r1, #1, #1
   146ac:	f36f 0182 	bfc	r1, #2, #1
   146b0:	f36f 01c5 	bfc	r1, #3, #3
   146b4:	2001      	movs	r0, #1
   146b6:	f360 1188 	bfi	r1, r0, #6, #3
   146ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
   146be:	f363 2152 	bfi	r1, r3, #9, #10
   146c2:	f36f 41de 	bfc	r1, #19, #12
   146c6:	f36f 71df 	bfc	r1, #31, #1
   146ca:	2300      	movs	r3, #0
   146cc:	486c      	ldr	r0, [pc, #432]	; (14880 <configure+0x374>)
   146ce:	f004 fe4a 	bl	19366 <z_impl_z_log_msg_static_create>
   146d2:	46ad      	mov	sp, r5
		return -EINVAL;
   146d4:	f06f 0015 	mvn.w	r0, #21
   146d8:	e783      	b.n	145e2 <configure+0xd6>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   146da:	f06f 031b 	mvn.w	r3, #27
   146de:	e7d6      	b.n	1468e <configure+0x182>
		LOG_ERR("Loopback mode is not supported");
   146e0:	4b69      	ldr	r3, [pc, #420]	; (14888 <configure+0x37c>)
   146e2:	667b      	str	r3, [r7, #100]	; 0x64
   146e4:	2302      	movs	r3, #2
   146e6:	713b      	strb	r3, [r7, #4]
   146e8:	2300      	movs	r3, #0
   146ea:	717b      	strb	r3, [r7, #5]
   146ec:	71bb      	strb	r3, [r7, #6]
   146ee:	71fb      	strb	r3, [r7, #7]
   146f0:	687a      	ldr	r2, [r7, #4]
   146f2:	663a      	str	r2, [r7, #96]	; 0x60
   146f4:	4619      	mov	r1, r3
   146f6:	f363 0100 	bfi	r1, r3, #0, #1
   146fa:	f363 0141 	bfi	r1, r3, #1, #1
   146fe:	f363 0182 	bfi	r1, r3, #2, #1
   14702:	f363 01c5 	bfi	r1, r3, #3, #3
   14706:	2201      	movs	r2, #1
   14708:	f362 1188 	bfi	r1, r2, #6, #3
   1470c:	2208      	movs	r2, #8
   1470e:	f362 2152 	bfi	r1, r2, #9, #10
   14712:	f363 41de 	bfi	r1, r3, #19, #12
   14716:	f363 71df 	bfi	r1, r3, #31, #1
   1471a:	f107 0260 	add.w	r2, r7, #96	; 0x60
   1471e:	4858      	ldr	r0, [pc, #352]	; (14880 <configure+0x374>)
   14720:	f004 fe21 	bl	19366 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   14724:	f06f 0015 	mvn.w	r0, #21
   14728:	e75b      	b.n	145e2 <configure+0xd6>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1472a:	4b58      	ldr	r3, [pc, #352]	; (1488c <configure+0x380>)
   1472c:	64fb      	str	r3, [r7, #76]	; 0x4c
   1472e:	2302      	movs	r3, #2
   14730:	713b      	strb	r3, [r7, #4]
   14732:	2300      	movs	r3, #0
   14734:	717b      	strb	r3, [r7, #5]
   14736:	71bb      	strb	r3, [r7, #6]
   14738:	71fb      	strb	r3, [r7, #7]
   1473a:	687a      	ldr	r2, [r7, #4]
   1473c:	64ba      	str	r2, [r7, #72]	; 0x48
   1473e:	4619      	mov	r1, r3
   14740:	f363 0100 	bfi	r1, r3, #0, #1
   14744:	f363 0141 	bfi	r1, r3, #1, #1
   14748:	f363 0182 	bfi	r1, r3, #2, #1
   1474c:	f363 01c5 	bfi	r1, r3, #3, #3
   14750:	2201      	movs	r2, #1
   14752:	f362 1188 	bfi	r1, r2, #6, #3
   14756:	2208      	movs	r2, #8
   14758:	f362 2152 	bfi	r1, r2, #9, #10
   1475c:	f363 41de 	bfi	r1, r3, #19, #12
   14760:	f363 71df 	bfi	r1, r3, #31, #1
   14764:	f107 0248 	add.w	r2, r7, #72	; 0x48
   14768:	4845      	ldr	r0, [pc, #276]	; (14880 <configure+0x374>)
   1476a:	f004 fdfc 	bl	19366 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1476e:	f06f 0015 	mvn.w	r0, #21
   14772:	e736      	b.n	145e2 <configure+0xd6>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   14774:	4b46      	ldr	r3, [pc, #280]	; (14890 <configure+0x384>)
   14776:	637b      	str	r3, [r7, #52]	; 0x34
   14778:	2302      	movs	r3, #2
   1477a:	713b      	strb	r3, [r7, #4]
   1477c:	2300      	movs	r3, #0
   1477e:	717b      	strb	r3, [r7, #5]
   14780:	71bb      	strb	r3, [r7, #6]
   14782:	71fb      	strb	r3, [r7, #7]
   14784:	687a      	ldr	r2, [r7, #4]
   14786:	633a      	str	r2, [r7, #48]	; 0x30
   14788:	4619      	mov	r1, r3
   1478a:	f363 0100 	bfi	r1, r3, #0, #1
   1478e:	f363 0141 	bfi	r1, r3, #1, #1
   14792:	f363 0182 	bfi	r1, r3, #2, #1
   14796:	f363 01c5 	bfi	r1, r3, #3, #3
   1479a:	2201      	movs	r2, #1
   1479c:	f362 1188 	bfi	r1, r2, #6, #3
   147a0:	2208      	movs	r2, #8
   147a2:	f362 2152 	bfi	r1, r2, #9, #10
   147a6:	f363 41de 	bfi	r1, r3, #19, #12
   147aa:	f363 71df 	bfi	r1, r3, #31, #1
   147ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
   147b2:	4833      	ldr	r0, [pc, #204]	; (14880 <configure+0x374>)
   147b4:	f004 fdd7 	bl	19366 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   147b8:	f06f 0015 	mvn.w	r0, #21
   147bc:	e711      	b.n	145e2 <configure+0xd6>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   147be:	f013 0f04 	tst.w	r3, #4
   147c2:	d003      	beq.n	147cc <configure+0x2c0>
			return NRF_SPIM_MODE_1;
   147c4:	2301      	movs	r3, #1
   147c6:	e6f0      	b.n	145aa <configure+0x9e>
			return NRF_SPIM_MODE_2;
   147c8:	2302      	movs	r3, #2
   147ca:	e6ee      	b.n	145aa <configure+0x9e>
			return NRF_SPIM_MODE_0;
   147cc:	2300      	movs	r3, #0
   147ce:	e6ec      	b.n	145aa <configure+0x9e>
		return NRF_SPIM_BIT_ORDER_MSB_FIRST;
   147d0:	2300      	movs	r3, #0
   147d2:	e6f1      	b.n	145b8 <configure+0xac>
		nrfx_spim_uninit(&dev_config->spim);
   147d4:	4630      	mov	r0, r6
   147d6:	f002 fa73 	bl	16cc0 <nrfx_spim_uninit>
		dev_data->initialized = false;
   147da:	2300      	movs	r3, #0
   147dc:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
   147e0:	e6ef      	b.n	145c2 <configure+0xb6>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   147e2:	466d      	mov	r5, sp
   147e4:	b088      	sub	sp, #32
   147e6:	466b      	mov	r3, sp
   147e8:	f113 0210 	adds.w	r2, r3, #16
   147ec:	d00d      	beq.n	1480a <configure+0x2fe>
   147ee:	210c      	movs	r1, #12
   147f0:	b13a      	cbz	r2, 14802 <configure+0x2f6>
   147f2:	460c      	mov	r4, r1
   147f4:	2904      	cmp	r1, #4
   147f6:	dd01      	ble.n	147fc <configure+0x2f0>
   147f8:	4e26      	ldr	r6, [pc, #152]	; (14894 <configure+0x388>)
   147fa:	615e      	str	r6, [r3, #20]
   147fc:	2c08      	cmp	r4, #8
   147fe:	dd07      	ble.n	14810 <configure+0x304>
   14800:	6198      	str	r0, [r3, #24]
   14802:	290b      	cmp	r1, #11
   14804:	dd2b      	ble.n	1485e <configure+0x352>
   14806:	240c      	movs	r4, #12
   14808:	e004      	b.n	14814 <configure+0x308>
   1480a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1480e:	e7ef      	b.n	147f0 <configure+0x2e4>
   14810:	f06f 041b 	mvn.w	r4, #27
   14814:	b13a      	cbz	r2, 14826 <configure+0x31a>
   14816:	2103      	movs	r1, #3
   14818:	7139      	strb	r1, [r7, #4]
   1481a:	2100      	movs	r1, #0
   1481c:	7179      	strb	r1, [r7, #5]
   1481e:	71b9      	strb	r1, [r7, #6]
   14820:	71f9      	strb	r1, [r7, #7]
   14822:	6878      	ldr	r0, [r7, #4]
   14824:	6118      	str	r0, [r3, #16]
   14826:	2100      	movs	r1, #0
   14828:	f36f 0100 	bfc	r1, #0, #1
   1482c:	f36f 0141 	bfc	r1, #1, #1
   14830:	f36f 0182 	bfc	r1, #2, #1
   14834:	f36f 01c5 	bfc	r1, #3, #3
   14838:	2301      	movs	r3, #1
   1483a:	f363 1188 	bfi	r1, r3, #6, #3
   1483e:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   14842:	f363 2152 	bfi	r1, r3, #9, #10
   14846:	f36f 41de 	bfc	r1, #19, #12
   1484a:	f36f 71df 	bfc	r1, #31, #1
   1484e:	2300      	movs	r3, #0
   14850:	480b      	ldr	r0, [pc, #44]	; (14880 <configure+0x374>)
   14852:	f004 fd88 	bl	19366 <z_impl_z_log_msg_static_create>
   14856:	46ad      	mov	sp, r5
		return -EIO;
   14858:	f06f 0004 	mvn.w	r0, #4
   1485c:	e6c1      	b.n	145e2 <configure+0xd6>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1485e:	f06f 041b 	mvn.w	r4, #27
   14862:	e7d7      	b.n	14814 <configure+0x308>
		return 0;
   14864:	2000      	movs	r0, #0
   14866:	e6bc      	b.n	145e2 <configure+0xd6>
   14868:	0001e847 	.word	0x0001e847
   1486c:	00f42400 	.word	0x00f42400
   14870:	40005000 	.word	0x40005000
   14874:	000149f9 	.word	0x000149f9
   14878:	0bad0000 	.word	0x0bad0000
   1487c:	0001b9ec 	.word	0x0001b9ec
   14880:	0001afd0 	.word	0x0001afd0
   14884:	0001ba08 	.word	0x0001ba08
   14888:	0001ba2c 	.word	0x0001ba2c
   1488c:	0001ba4c 	.word	0x0001ba4c
   14890:	0001ba7c 	.word	0x0001ba7c
   14894:	0001bab0 	.word	0x0001bab0

00014898 <spi_context_wait_for_completion>:
	}
#endif /* CONFIG_SPI_ASYNC */
}

static inline int spi_context_wait_for_completion(struct spi_context *ctx)
{
   14898:	b530      	push	{r4, r5, lr}
   1489a:	b089      	sub	sp, #36	; 0x24
   1489c:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SPI_SLAVE) && spi_context_is_slave(ctx)) {
		timeout = K_FOREVER;
	} else {
		uint32_t timeout_ms;

		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1489e:	6d03      	ldr	r3, [r0, #80]	; 0x50
   148a0:	6c82      	ldr	r2, [r0, #72]	; 0x48
   148a2:	4293      	cmp	r3, r2
   148a4:	bf38      	it	cc
   148a6:	4613      	movcc	r3, r2
   148a8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
   148ac:	fb02 f303 	mul.w	r3, r2, r3
			     ctx->config->frequency;
   148b0:	4605      	mov	r5, r0
   148b2:	f855 2b20 	ldr.w	r2, [r5], #32
   148b6:	6812      	ldr	r2, [r2, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   148b8:	fbb3 f3f2 	udiv	r3, r3, r2
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   148bc:	33c8      	adds	r3, #200	; 0xc8
			return ((t * to_hz + off) / from_hz);
   148be:	0c59      	lsrs	r1, r3, #17
   148c0:	03db      	lsls	r3, r3, #15
   148c2:	f240 32e7 	movw	r2, #999	; 0x3e7
   148c6:	1898      	adds	r0, r3, r2
   148c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   148cc:	f04f 0300 	mov.w	r3, #0
   148d0:	f141 0100 	adc.w	r1, r1, #0
   148d4:	f7fb fc3e 	bl	10154 <__aeabi_uldivmod>
   148d8:	4602      	mov	r2, r0
   148da:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   148dc:	4628      	mov	r0, r5
   148de:	f002 fed9 	bl	17694 <z_impl_k_sem_take>
			return -ETIMEDOUT;
		}
		status = ctx->sync_status;
	}
#else
	if (k_sem_take(&ctx->sync, timeout)) {
   148e2:	b910      	cbnz	r0, 148ea <spi_context_wait_for_completion+0x52>
		LOG_ERR("Timeout waiting for transfer complete");
		return -ETIMEDOUT;
	}
	status = ctx->sync_status;
   148e4:	6b20      	ldr	r0, [r4, #48]	; 0x30
		return ctx->recv_frames;
	}
#endif /* CONFIG_SPI_SLAVE */

	return status;
}
   148e6:	b009      	add	sp, #36	; 0x24
   148e8:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Timeout waiting for transfer complete");
   148ea:	4b14      	ldr	r3, [pc, #80]	; (1493c <spi_context_wait_for_completion+0xa4>)
   148ec:	9307      	str	r3, [sp, #28]
   148ee:	2302      	movs	r3, #2
   148f0:	f88d 3004 	strb.w	r3, [sp, #4]
   148f4:	2300      	movs	r3, #0
   148f6:	f88d 3005 	strb.w	r3, [sp, #5]
   148fa:	f88d 3006 	strb.w	r3, [sp, #6]
   148fe:	f88d 3007 	strb.w	r3, [sp, #7]
   14902:	9a01      	ldr	r2, [sp, #4]
   14904:	9206      	str	r2, [sp, #24]
   14906:	4619      	mov	r1, r3
   14908:	f363 0100 	bfi	r1, r3, #0, #1
   1490c:	f363 0141 	bfi	r1, r3, #1, #1
   14910:	f363 0182 	bfi	r1, r3, #2, #1
   14914:	f363 01c5 	bfi	r1, r3, #3, #3
   14918:	2201      	movs	r2, #1
   1491a:	f362 1188 	bfi	r1, r2, #6, #3
   1491e:	2208      	movs	r2, #8
   14920:	f362 2152 	bfi	r1, r2, #9, #10
   14924:	f363 41de 	bfi	r1, r3, #19, #12
   14928:	f363 71df 	bfi	r1, r3, #31, #1
   1492c:	aa06      	add	r2, sp, #24
   1492e:	4804      	ldr	r0, [pc, #16]	; (14940 <spi_context_wait_for_completion+0xa8>)
   14930:	f004 fd19 	bl	19366 <z_impl_z_log_msg_static_create>
		return -ETIMEDOUT;
   14934:	f06f 0073 	mvn.w	r0, #115	; 0x73
   14938:	e7d5      	b.n	148e6 <spi_context_wait_for_completion+0x4e>
   1493a:	bf00      	nop
   1493c:	0001bad8 	.word	0x0001bad8
   14940:	0001afd0 	.word	0x0001afd0

00014944 <transfer_next_chunk>:
	return 0;
}
#endif

static void transfer_next_chunk(const struct device *dev)
{
   14944:	b570      	push	{r4, r5, r6, lr}
   14946:	b084      	sub	sp, #16
	struct spi_nrfx_data *dev_data = dev->data;
   14948:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1494a:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1494c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1494e:	2b00      	cmp	r3, #0
   14950:	d043      	beq.n	149da <transfer_next_chunk+0x96>
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   14952:	6d25      	ldr	r5, [r4, #80]	; 0x50
   14954:	2d00      	cmp	r5, #0
   14956:	d042      	beq.n	149de <transfer_next_chunk+0x9a>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   14958:	429d      	cmp	r5, r3
   1495a:	bf28      	it	cs
   1495c:	461d      	movcs	r5, r3
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
   1495e:	2d00      	cmp	r5, #0
   14960:	d045      	beq.n	149ee <transfer_next_chunk+0xaa>
		nrfx_spim_xfer_desc_t xfer;
		nrfx_err_t result;
		const uint8_t *tx_buf = ctx->tx_buf;
   14962:	6c61      	ldr	r1, [r4, #68]	; 0x44
	return !!(ctx->tx_buf && ctx->tx_len);
   14964:	b169      	cbz	r1, 14982 <transfer_next_chunk+0x3e>
   14966:	b163      	cbz	r3, 14982 <transfer_next_chunk+0x3e>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   14968:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
#if (CONFIG_SPI_NRFX_RAM_BUFFER_SIZE > 0)
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1496c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   14970:	d007      	beq.n	14982 <transfer_next_chunk+0x3e>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   14972:	2d08      	cmp	r5, #8
   14974:	d900      	bls.n	14978 <transfer_next_chunk+0x34>
				chunk_len = CONFIG_SPI_NRFX_RAM_BUFFER_SIZE;
   14976:	2508      	movs	r5, #8
			}

			memcpy(dev_data->buffer, tx_buf, chunk_len);
   14978:	462a      	mov	r2, r5
   1497a:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1497c:	f004 fed6 	bl	1972c <memcpy>
			tx_buf = dev_data->buffer;
   14980:	6e21      	ldr	r1, [r4, #96]	; 0x60
		}
#endif
		if (chunk_len > MAX_CHUNK_LEN) {
   14982:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   14986:	d301      	bcc.n	1498c <transfer_next_chunk+0x48>
			chunk_len = MAX_CHUNK_LEN;
   14988:	f64f 75ff 	movw	r5, #65535	; 0xffff
		}

		dev_data->chunk_len = chunk_len;
   1498c:	65a5      	str	r5, [r4, #88]	; 0x58

		xfer.p_tx_buffer = tx_buf;
   1498e:	9100      	str	r1, [sp, #0]
   14990:	6c63      	ldr	r3, [r4, #68]	; 0x44
   14992:	b333      	cbz	r3, 149e2 <transfer_next_chunk+0x9e>
   14994:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   14996:	bb33      	cbnz	r3, 149e6 <transfer_next_chunk+0xa2>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   14998:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1499a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1499c:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1499e:	b323      	cbz	r3, 149ea <transfer_next_chunk+0xa6>
   149a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   149a2:	b903      	cbnz	r3, 149a6 <transfer_next_chunk+0x62>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   149a4:	461d      	mov	r5, r3
   149a6:	9503      	str	r5, [sp, #12]
				error = -EIO;
			}
		}
#endif
		if (error == 0) {
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   149a8:	2200      	movs	r2, #0
   149aa:	4669      	mov	r1, sp
   149ac:	4630      	mov	r0, r6
   149ae:	f002 f9cf 	bl	16d50 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   149b2:	4b10      	ldr	r3, [pc, #64]	; (149f4 <transfer_next_chunk+0xb0>)
   149b4:	4298      	cmp	r0, r3
   149b6:	d00e      	beq.n	149d6 <transfer_next_chunk+0x92>
				return;
			}
			error = -EIO;
   149b8:	f06f 0504 	mvn.w	r5, #4
	_spi_context_cs_control(ctx, on, false);
   149bc:	2200      	movs	r2, #0
   149be:	4611      	mov	r1, r2
   149c0:	4620      	mov	r0, r4
   149c2:	f005 f9ec 	bl	19d9e <_spi_context_cs_control>
	ctx->sync_status = status;
   149c6:	6325      	str	r5, [r4, #48]	; 0x30
	k_sem_give(&ctx->sync);
   149c8:	f104 0020 	add.w	r0, r4, #32
	z_impl_k_sem_give(sem);
   149cc:	f002 fe3e 	bl	1764c <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, dev, error);
	dev_data->busy = false;
   149d0:	2300      	movs	r3, #0
   149d2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
   149d6:	b004      	add	sp, #16
   149d8:	bd70      	pop	{r4, r5, r6, pc}
		return ctx->rx_len;
   149da:	6d25      	ldr	r5, [r4, #80]	; 0x50
   149dc:	e7bf      	b.n	1495e <transfer_next_chunk+0x1a>
		return ctx->tx_len;
   149de:	461d      	mov	r5, r3
   149e0:	e7bd      	b.n	1495e <transfer_next_chunk+0x1a>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   149e2:	2300      	movs	r3, #0
   149e4:	e7d8      	b.n	14998 <transfer_next_chunk+0x54>
   149e6:	462b      	mov	r3, r5
   149e8:	e7d6      	b.n	14998 <transfer_next_chunk+0x54>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   149ea:	2500      	movs	r5, #0
   149ec:	e7db      	b.n	149a6 <transfer_next_chunk+0x62>
	int error = 0;
   149ee:	2500      	movs	r5, #0
   149f0:	e7e4      	b.n	149bc <transfer_next_chunk+0x78>
   149f2:	bf00      	nop
   149f4:	0bad0000 	.word	0x0bad0000

000149f8 <event_handler>:

static void event_handler(const nrfx_spim_evt_t *p_event, void *p_context)
{
	struct spi_nrfx_data *dev_data = p_context;

	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   149f8:	7803      	ldrb	r3, [r0, #0]
   149fa:	2b00      	cmp	r3, #0
   149fc:	f040 808f 	bne.w	14b1e <event_handler+0x126>
{
   14a00:	b510      	push	{r4, lr}
   14a02:	b08e      	sub	sp, #56	; 0x38
   14a04:	460c      	mov	r4, r1
#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
		anomaly_58_workaround_clear(dev_data);
#endif
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   14a06:	6d8a      	ldr	r2, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   14a08:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   14a0a:	b14b      	cbz	r3, 14a20 <event_handler+0x28>
	if (len > ctx->tx_len) {
   14a0c:	429a      	cmp	r2, r3
   14a0e:	d819      	bhi.n	14a44 <event_handler+0x4c>
	ctx->tx_len -= len;
   14a10:	1a9b      	subs	r3, r3, r2
   14a12:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
   14a14:	2b00      	cmp	r3, #0
   14a16:	d03b      	beq.n	14a90 <event_handler+0x98>
	} else if (ctx->tx_buf) {
   14a18:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   14a1a:	b10b      	cbz	r3, 14a20 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   14a1c:	4413      	add	r3, r2
   14a1e:	644b      	str	r3, [r1, #68]	; 0x44
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   14a20:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
   14a22:	6d23      	ldr	r3, [r4, #80]	; 0x50
   14a24:	b14b      	cbz	r3, 14a3a <event_handler+0x42>
	if (len > ctx->rx_len) {
   14a26:	429a      	cmp	r2, r3
   14a28:	d842      	bhi.n	14ab0 <event_handler+0xb8>
	ctx->rx_len -= len;
   14a2a:	1a9b      	subs	r3, r3, r2
   14a2c:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
   14a2e:	2b00      	cmp	r3, #0
   14a30:	d064      	beq.n	14afc <event_handler+0x104>
	} else if (ctx->rx_buf) {
   14a32:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14a34:	b10b      	cbz	r3, 14a3a <event_handler+0x42>
		ctx->rx_buf += dfs * len;
   14a36:	4413      	add	r3, r2
   14a38:	64e3      	str	r3, [r4, #76]	; 0x4c

		transfer_next_chunk(dev_data->dev);
   14a3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
   14a3c:	f7ff ff82 	bl	14944 <transfer_next_chunk>
	}
}
   14a40:	b00e      	add	sp, #56	; 0x38
   14a42:	bd10      	pop	{r4, pc}
		LOG_ERR("Update exceeds current buffer");
   14a44:	4b36      	ldr	r3, [pc, #216]	; (14b20 <event_handler+0x128>)
   14a46:	930d      	str	r3, [sp, #52]	; 0x34
   14a48:	2302      	movs	r3, #2
   14a4a:	f88d 3004 	strb.w	r3, [sp, #4]
   14a4e:	2300      	movs	r3, #0
   14a50:	f88d 3005 	strb.w	r3, [sp, #5]
   14a54:	f88d 3006 	strb.w	r3, [sp, #6]
   14a58:	f88d 3007 	strb.w	r3, [sp, #7]
   14a5c:	9a01      	ldr	r2, [sp, #4]
   14a5e:	920c      	str	r2, [sp, #48]	; 0x30
   14a60:	4619      	mov	r1, r3
   14a62:	f363 0100 	bfi	r1, r3, #0, #1
   14a66:	f363 0141 	bfi	r1, r3, #1, #1
   14a6a:	f363 0182 	bfi	r1, r3, #2, #1
   14a6e:	f363 01c5 	bfi	r1, r3, #3, #3
   14a72:	2201      	movs	r2, #1
   14a74:	f362 1188 	bfi	r1, r2, #6, #3
   14a78:	2208      	movs	r2, #8
   14a7a:	f362 2152 	bfi	r1, r2, #9, #10
   14a7e:	f363 41de 	bfi	r1, r3, #19, #12
   14a82:	f363 71df 	bfi	r1, r3, #31, #1
   14a86:	aa0c      	add	r2, sp, #48	; 0x30
   14a88:	4826      	ldr	r0, [pc, #152]	; (14b24 <event_handler+0x12c>)
   14a8a:	f004 fc6c 	bl	19366 <z_impl_z_log_msg_static_create>
		return;
   14a8e:	e7c7      	b.n	14a20 <event_handler+0x28>
		++ctx->current_tx;
   14a90:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   14a92:	3308      	adds	r3, #8
   14a94:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
   14a96:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   14a98:	3b01      	subs	r3, #1
   14a9a:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
   14a9c:	2301      	movs	r3, #1
   14a9e:	f101 0248 	add.w	r2, r1, #72	; 0x48
   14aa2:	3138      	adds	r1, #56	; 0x38
   14aa4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   14aa8:	f005 f932 	bl	19d10 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
   14aac:	6460      	str	r0, [r4, #68]	; 0x44
   14aae:	e7b7      	b.n	14a20 <event_handler+0x28>
		LOG_ERR("Update exceeds current buffer");
   14ab0:	4b1b      	ldr	r3, [pc, #108]	; (14b20 <event_handler+0x128>)
   14ab2:	9307      	str	r3, [sp, #28]
   14ab4:	2302      	movs	r3, #2
   14ab6:	f88d 3004 	strb.w	r3, [sp, #4]
   14aba:	2300      	movs	r3, #0
   14abc:	f88d 3005 	strb.w	r3, [sp, #5]
   14ac0:	f88d 3006 	strb.w	r3, [sp, #6]
   14ac4:	f88d 3007 	strb.w	r3, [sp, #7]
   14ac8:	9a01      	ldr	r2, [sp, #4]
   14aca:	9206      	str	r2, [sp, #24]
   14acc:	4619      	mov	r1, r3
   14ace:	f363 0100 	bfi	r1, r3, #0, #1
   14ad2:	f363 0141 	bfi	r1, r3, #1, #1
   14ad6:	f363 0182 	bfi	r1, r3, #2, #1
   14ada:	f363 01c5 	bfi	r1, r3, #3, #3
   14ade:	2201      	movs	r2, #1
   14ae0:	f362 1188 	bfi	r1, r2, #6, #3
   14ae4:	2208      	movs	r2, #8
   14ae6:	f362 2152 	bfi	r1, r2, #9, #10
   14aea:	f363 41de 	bfi	r1, r3, #19, #12
   14aee:	f363 71df 	bfi	r1, r3, #31, #1
   14af2:	aa06      	add	r2, sp, #24
   14af4:	480b      	ldr	r0, [pc, #44]	; (14b24 <event_handler+0x12c>)
   14af6:	f004 fc36 	bl	19366 <z_impl_z_log_msg_static_create>
		return;
   14afa:	e79e      	b.n	14a3a <event_handler+0x42>
		++ctx->current_rx;
   14afc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14afe:	3308      	adds	r3, #8
   14b00:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
   14b02:	6c23      	ldr	r3, [r4, #64]	; 0x40
   14b04:	3b01      	subs	r3, #1
   14b06:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
   14b08:	2301      	movs	r3, #1
   14b0a:	f104 0250 	add.w	r2, r4, #80	; 0x50
   14b0e:	f104 0140 	add.w	r1, r4, #64	; 0x40
   14b12:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   14b16:	f005 f8fb 	bl	19d10 <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
   14b1a:	64e0      	str	r0, [r4, #76]	; 0x4c
   14b1c:	e78d      	b.n	14a3a <event_handler+0x42>
   14b1e:	4770      	bx	lr
   14b20:	0001bb00 	.word	0x0001bb00
   14b24:	0001afd0 	.word	0x0001afd0

00014b28 <spi_context_cs_configure_all>:
{
   14b28:	b5f0      	push	{r4, r5, r6, r7, lr}
   14b2a:	b083      	sub	sp, #12
   14b2c:	af00      	add	r7, sp, #0
   14b2e:	4605      	mov	r5, r0
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   14b30:	6884      	ldr	r4, [r0, #8]
   14b32:	e05d      	b.n	14bf0 <spi_context_cs_configure_all+0xc8>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   14b34:	6823      	ldr	r3, [r4, #0]
   14b36:	681e      	ldr	r6, [r3, #0]
   14b38:	7921      	ldrb	r1, [r4, #4]
   14b3a:	466d      	mov	r5, sp
   14b3c:	2300      	movs	r3, #0
   14b3e:	713b      	strb	r3, [r7, #4]
   14b40:	2302      	movs	r3, #2
   14b42:	717b      	strb	r3, [r7, #5]
   14b44:	b08a      	sub	sp, #40	; 0x28
   14b46:	466c      	mov	r4, sp
   14b48:	f114 0210 	adds.w	r2, r4, #16
   14b4c:	d015      	beq.n	14b7a <spi_context_cs_configure_all+0x52>
   14b4e:	2012      	movs	r0, #18
   14b50:	b11a      	cbz	r2, 14b5a <spi_context_cs_configure_all+0x32>
   14b52:	2804      	cmp	r0, #4
   14b54:	dd01      	ble.n	14b5a <spi_context_cs_configure_all+0x32>
   14b56:	4b32      	ldr	r3, [pc, #200]	; (14c20 <spi_context_cs_configure_all+0xf8>)
   14b58:	6163      	str	r3, [r4, #20]
   14b5a:	2300      	movs	r3, #0
   14b5c:	703b      	strb	r3, [r7, #0]
   14b5e:	2302      	movs	r3, #2
   14b60:	707b      	strb	r3, [r7, #1]
   14b62:	b1c2      	cbz	r2, 14b96 <spi_context_cs_configure_all+0x6e>
   14b64:	4603      	mov	r3, r0
   14b66:	2808      	cmp	r0, #8
   14b68:	dd00      	ble.n	14b6c <spi_context_cs_configure_all+0x44>
   14b6a:	61a6      	str	r6, [r4, #24]
   14b6c:	2b0c      	cmp	r3, #12
   14b6e:	dd00      	ble.n	14b72 <spi_context_cs_configure_all+0x4a>
   14b70:	61e1      	str	r1, [r4, #28]
   14b72:	f104 0320 	add.w	r3, r4, #32
   14b76:	2100      	movs	r1, #0
   14b78:	e00b      	b.n	14b92 <spi_context_cs_configure_all+0x6a>
   14b7a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   14b7e:	e7e7      	b.n	14b50 <spi_context_cs_configure_all+0x28>
   14b80:	f101 0608 	add.w	r6, r1, #8
   14b84:	eb06 0c07 	add.w	ip, r6, r7
   14b88:	f81c cc08 	ldrb.w	ip, [ip, #-8]
   14b8c:	f803 cb01 	strb.w	ip, [r3], #1
   14b90:	3101      	adds	r1, #1
   14b92:	2901      	cmp	r1, #1
   14b94:	d9f4      	bls.n	14b80 <spi_context_cs_configure_all+0x58>
   14b96:	2811      	cmp	r0, #17
   14b98:	dd26      	ble.n	14be8 <spi_context_cs_configure_all+0xc0>
   14b9a:	2312      	movs	r3, #18
   14b9c:	b142      	cbz	r2, 14bb0 <spi_context_cs_configure_all+0x88>
   14b9e:	2104      	movs	r1, #4
   14ba0:	7139      	strb	r1, [r7, #4]
   14ba2:	2100      	movs	r1, #0
   14ba4:	7179      	strb	r1, [r7, #5]
   14ba6:	71b9      	strb	r1, [r7, #6]
   14ba8:	2101      	movs	r1, #1
   14baa:	71f9      	strb	r1, [r7, #7]
   14bac:	6878      	ldr	r0, [r7, #4]
   14bae:	6120      	str	r0, [r4, #16]
   14bb0:	2100      	movs	r1, #0
   14bb2:	f36f 0100 	bfc	r1, #0, #1
   14bb6:	f36f 0141 	bfc	r1, #1, #1
   14bba:	f36f 0182 	bfc	r1, #2, #1
   14bbe:	f36f 01c5 	bfc	r1, #3, #3
   14bc2:	2001      	movs	r0, #1
   14bc4:	f360 1188 	bfi	r1, r0, #6, #3
   14bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
   14bcc:	f363 2152 	bfi	r1, r3, #9, #10
   14bd0:	f36f 41de 	bfc	r1, #19, #12
   14bd4:	f36f 71df 	bfc	r1, #31, #1
   14bd8:	2300      	movs	r3, #0
   14bda:	4812      	ldr	r0, [pc, #72]	; (14c24 <spi_context_cs_configure_all+0xfc>)
   14bdc:	f004 fbc3 	bl	19366 <z_impl_z_log_msg_static_create>
   14be0:	46ad      	mov	sp, r5
			return -ENODEV;
   14be2:	f06f 0012 	mvn.w	r0, #18
   14be6:	e017      	b.n	14c18 <spi_context_cs_configure_all+0xf0>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   14be8:	f06f 031b 	mvn.w	r3, #27
   14bec:	e7d6      	b.n	14b9c <spi_context_cs_configure_all+0x74>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   14bee:	3408      	adds	r4, #8
   14bf0:	68ab      	ldr	r3, [r5, #8]
   14bf2:	68ea      	ldr	r2, [r5, #12]
   14bf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   14bf8:	429c      	cmp	r4, r3
   14bfa:	d20c      	bcs.n	14c16 <spi_context_cs_configure_all+0xee>
		if (!device_is_ready(cs_gpio->port)) {
   14bfc:	6820      	ldr	r0, [r4, #0]
   14bfe:	f005 fd7a 	bl	1a6f6 <z_device_is_ready>
   14c02:	2800      	cmp	r0, #0
   14c04:	d096      	beq.n	14b34 <spi_context_cs_configure_all+0xc>
		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
   14c06:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
   14c0a:	4620      	mov	r0, r4
   14c0c:	f005 f858 	bl	19cc0 <gpio_pin_configure_dt>
		if (ret < 0) {
   14c10:	2800      	cmp	r0, #0
   14c12:	daec      	bge.n	14bee <spi_context_cs_configure_all+0xc6>
   14c14:	e000      	b.n	14c18 <spi_context_cs_configure_all+0xf0>
	return 0;
   14c16:	2000      	movs	r0, #0
}
   14c18:	370c      	adds	r7, #12
   14c1a:	46bd      	mov	sp, r7
   14c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14c1e:	bf00      	nop
   14c20:	0001bb20 	.word	0x0001bb20
   14c24:	0001afd0 	.word	0x0001afd0

00014c28 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
   14c28:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
   14c2a:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   14c2c:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   14c30:	d06f      	beq.n	14d12 <baudrate_set+0xea>
   14c32:	d83a      	bhi.n	14caa <baudrate_set+0x82>
   14c34:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   14c38:	d06e      	beq.n	14d18 <baudrate_set+0xf0>
   14c3a:	d90a      	bls.n	14c52 <baudrate_set+0x2a>
   14c3c:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   14c40:	d075      	beq.n	14d2e <baudrate_set+0x106>
   14c42:	d924      	bls.n	14c8e <baudrate_set+0x66>
   14c44:	f647 2312 	movw	r3, #31250	; 0x7a12
   14c48:	4299      	cmp	r1, r3
   14c4a:	d12b      	bne.n	14ca4 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   14c4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   14c50:	e013      	b.n	14c7a <baudrate_set+0x52>
	switch (baudrate) {
   14c52:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   14c56:	d061      	beq.n	14d1c <baudrate_set+0xf4>
   14c58:	d907      	bls.n	14c6a <baudrate_set+0x42>
   14c5a:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   14c5e:	d063      	beq.n	14d28 <baudrate_set+0x100>
   14c60:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   14c64:	d110      	bne.n	14c88 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   14c66:	4b3c      	ldr	r3, [pc, #240]	; (14d58 <baudrate_set+0x130>)
   14c68:	e007      	b.n	14c7a <baudrate_set+0x52>
	switch (baudrate) {
   14c6a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   14c6e:	d058      	beq.n	14d22 <baudrate_set+0xfa>
   14c70:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   14c74:	d105      	bne.n	14c82 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   14c76:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   14c7a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   14c7e:	2000      	movs	r0, #0
   14c80:	4770      	bx	lr
	switch (baudrate) {
   14c82:	f06f 0015 	mvn.w	r0, #21
   14c86:	4770      	bx	lr
   14c88:	f06f 0015 	mvn.w	r0, #21
   14c8c:	4770      	bx	lr
   14c8e:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   14c92:	d04e      	beq.n	14d32 <baudrate_set+0x10a>
   14c94:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   14c98:	d101      	bne.n	14c9e <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   14c9a:	4b30      	ldr	r3, [pc, #192]	; (14d5c <baudrate_set+0x134>)
   14c9c:	e7ed      	b.n	14c7a <baudrate_set+0x52>
	switch (baudrate) {
   14c9e:	f06f 0015 	mvn.w	r0, #21
   14ca2:	4770      	bx	lr
   14ca4:	f06f 0015 	mvn.w	r0, #21
   14ca8:	4770      	bx	lr
   14caa:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   14cae:	d042      	beq.n	14d36 <baudrate_set+0x10e>
   14cb0:	d909      	bls.n	14cc6 <baudrate_set+0x9e>
   14cb2:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   14cb6:	d046      	beq.n	14d46 <baudrate_set+0x11e>
   14cb8:	d91f      	bls.n	14cfa <baudrate_set+0xd2>
   14cba:	4b29      	ldr	r3, [pc, #164]	; (14d60 <baudrate_set+0x138>)
   14cbc:	4299      	cmp	r1, r3
   14cbe:	d148      	bne.n	14d52 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   14cc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14cc4:	e7d9      	b.n	14c7a <baudrate_set+0x52>
	switch (baudrate) {
   14cc6:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   14cca:	d037      	beq.n	14d3c <baudrate_set+0x114>
   14ccc:	d905      	bls.n	14cda <baudrate_set+0xb2>
   14cce:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   14cd2:	d10f      	bne.n	14cf4 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   14cd4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   14cd8:	e7cf      	b.n	14c7a <baudrate_set+0x52>
	switch (baudrate) {
   14cda:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   14cde:	4299      	cmp	r1, r3
   14ce0:	d02e      	beq.n	14d40 <baudrate_set+0x118>
   14ce2:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   14ce6:	d102      	bne.n	14cee <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   14ce8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   14cec:	e7c5      	b.n	14c7a <baudrate_set+0x52>
	switch (baudrate) {
   14cee:	f06f 0015 	mvn.w	r0, #21
   14cf2:	4770      	bx	lr
   14cf4:	f06f 0015 	mvn.w	r0, #21
   14cf8:	4770      	bx	lr
   14cfa:	4b1a      	ldr	r3, [pc, #104]	; (14d64 <baudrate_set+0x13c>)
   14cfc:	4299      	cmp	r1, r3
   14cfe:	d025      	beq.n	14d4c <baudrate_set+0x124>
   14d00:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   14d04:	d102      	bne.n	14d0c <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   14d06:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   14d0a:	e7b6      	b.n	14c7a <baudrate_set+0x52>
	switch (baudrate) {
   14d0c:	f06f 0015 	mvn.w	r0, #21
   14d10:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   14d12:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   14d16:	e7b0      	b.n	14c7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   14d18:	4b13      	ldr	r3, [pc, #76]	; (14d68 <baudrate_set+0x140>)
   14d1a:	e7ae      	b.n	14c7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   14d1c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   14d20:	e7ab      	b.n	14c7a <baudrate_set+0x52>
	switch (baudrate) {
   14d22:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   14d26:	e7a8      	b.n	14c7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   14d28:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   14d2c:	e7a5      	b.n	14c7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   14d2e:	4b0f      	ldr	r3, [pc, #60]	; (14d6c <baudrate_set+0x144>)
   14d30:	e7a3      	b.n	14c7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   14d32:	4b0f      	ldr	r3, [pc, #60]	; (14d70 <baudrate_set+0x148>)
   14d34:	e7a1      	b.n	14c7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   14d36:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   14d3a:	e79e      	b.n	14c7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   14d3c:	4b0d      	ldr	r3, [pc, #52]	; (14d74 <baudrate_set+0x14c>)
   14d3e:	e79c      	b.n	14c7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   14d40:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   14d44:	e799      	b.n	14c7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   14d46:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   14d4a:	e796      	b.n	14c7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   14d4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   14d50:	e793      	b.n	14c7a <baudrate_set+0x52>
	switch (baudrate) {
   14d52:	f06f 0015 	mvn.w	r0, #21
}
   14d56:	4770      	bx	lr
   14d58:	0013b000 	.word	0x0013b000
   14d5c:	004ea000 	.word	0x004ea000
   14d60:	000f4240 	.word	0x000f4240
   14d64:	0003d090 	.word	0x0003d090
   14d68:	00275000 	.word	0x00275000
   14d6c:	0075c000 	.word	0x0075c000
   14d70:	003af000 	.word	0x003af000
   14d74:	013a9000 	.word	0x013a9000

00014d78 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   14d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d7a:	4605      	mov	r5, r0
   14d7c:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   14d7e:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14d80:	f005 fcdd 	bl	1a73e <k_is_in_isr>
   14d84:	b910      	cbnz	r0, 14d8c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   14d86:	4b12      	ldr	r3, [pc, #72]	; (14dd0 <uarte_nrfx_poll_out+0x58>)
   14d88:	781b      	ldrb	r3, [r3, #0]
   14d8a:	b983      	cbnz	r3, 14dae <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   14d8c:	f04f 0320 	mov.w	r3, #32
   14d90:	f3ef 8411 	mrs	r4, BASEPRI
   14d94:	f383 8812 	msr	BASEPRI_MAX, r3
   14d98:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   14d9c:	4628      	mov	r0, r5
   14d9e:	f005 f983 	bl	1a0a8 <is_tx_ready>
   14da2:	b940      	cbnz	r0, 14db6 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
   14da4:	f384 8811 	msr	BASEPRI, r4
   14da8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   14dac:	e7ee      	b.n	14d8c <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   14dae:	4628      	mov	r0, r5
   14db0:	f005 f9df 	bl	1a172 <wait_tx_ready>
   14db4:	4604      	mov	r4, r0
	}

	*data->char_out = c;
   14db6:	693b      	ldr	r3, [r7, #16]
   14db8:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   14dba:	2201      	movs	r2, #1
   14dbc:	6939      	ldr	r1, [r7, #16]
   14dbe:	4628      	mov	r0, r5
   14dc0:	f005 f98c 	bl	1a0dc <tx_start>
	__asm__ volatile(
   14dc4:	f384 8811 	msr	BASEPRI, r4
   14dc8:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   14dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14dce:	bf00      	nop
   14dd0:	20008d3a 	.word	0x20008d3a

00014dd4 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   14dd4:	b530      	push	{r4, r5, lr}
   14dd6:	b089      	sub	sp, #36	; 0x24
   14dd8:	4605      	mov	r5, r0
   14dda:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   14ddc:	f101 0018 	add.w	r0, r1, #24
   14de0:	f001 f85c 	bl	15e9c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   14de4:	4b1d      	ldr	r3, [pc, #116]	; (14e5c <endtx_stoptx_ppi_init+0x88>)
   14de6:	4298      	cmp	r0, r3
   14de8:	d10f      	bne.n	14e0a <endtx_stoptx_ppi_init+0x36>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   14dea:	7e23      	ldrb	r3, [r4, #24]
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   14dec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   14df0:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   14df4:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   14df8:	7e22      	ldrb	r2, [r4, #24]
   14dfa:	2301      	movs	r3, #1
   14dfc:	4093      	lsls	r3, r2
   14dfe:	4a18      	ldr	r2, [pc, #96]	; (14e60 <endtx_stoptx_ppi_init+0x8c>)
   14e00:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   14e04:	2000      	movs	r0, #0
}
   14e06:	b009      	add	sp, #36	; 0x24
   14e08:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
   14e0a:	4b16      	ldr	r3, [pc, #88]	; (14e64 <endtx_stoptx_ppi_init+0x90>)
   14e0c:	9307      	str	r3, [sp, #28]
   14e0e:	2302      	movs	r3, #2
   14e10:	f88d 3004 	strb.w	r3, [sp, #4]
   14e14:	2300      	movs	r3, #0
   14e16:	f88d 3005 	strb.w	r3, [sp, #5]
   14e1a:	f88d 3006 	strb.w	r3, [sp, #6]
   14e1e:	f88d 3007 	strb.w	r3, [sp, #7]
   14e22:	9a01      	ldr	r2, [sp, #4]
   14e24:	9206      	str	r2, [sp, #24]
   14e26:	4619      	mov	r1, r3
   14e28:	f363 0100 	bfi	r1, r3, #0, #1
   14e2c:	f363 0141 	bfi	r1, r3, #1, #1
   14e30:	f363 0182 	bfi	r1, r3, #2, #1
   14e34:	f363 01c5 	bfi	r1, r3, #3, #3
   14e38:	2201      	movs	r2, #1
   14e3a:	f362 1188 	bfi	r1, r2, #6, #3
   14e3e:	2208      	movs	r2, #8
   14e40:	f362 2152 	bfi	r1, r2, #9, #10
   14e44:	f363 41de 	bfi	r1, r3, #19, #12
   14e48:	f363 71df 	bfi	r1, r3, #31, #1
   14e4c:	aa06      	add	r2, sp, #24
   14e4e:	4806      	ldr	r0, [pc, #24]	; (14e68 <endtx_stoptx_ppi_init+0x94>)
   14e50:	f004 fa89 	bl	19366 <z_impl_z_log_msg_static_create>
		return -EIO;
   14e54:	f06f 0004 	mvn.w	r0, #4
   14e58:	e7d5      	b.n	14e06 <endtx_stoptx_ppi_init+0x32>
   14e5a:	bf00      	nop
   14e5c:	0bad0000 	.word	0x0bad0000
   14e60:	40017000 	.word	0x40017000
   14e64:	0001bbbc 	.word	0x0001bbbc
   14e68:	0001afe0 	.word	0x0001afe0

00014e6c <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   14e6c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   14e70:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   14e74:	4b01      	ldr	r3, [pc, #4]	; (14e7c <set_comparator+0x10>)
   14e76:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   14e7a:	4770      	bx	lr
   14e7c:	40015000 	.word	0x40015000

00014e80 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   14e80:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   14e84:	4b01      	ldr	r3, [pc, #4]	; (14e8c <get_comparator+0xc>)
   14e86:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   14e8a:	4770      	bx	lr
   14e8c:	40015000 	.word	0x40015000

00014e90 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14e90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   14e94:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   14e96:	4a02      	ldr	r2, [pc, #8]	; (14ea0 <event_enable+0x10>)
   14e98:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   14e9c:	4770      	bx	lr
   14e9e:	bf00      	nop
   14ea0:	40015000 	.word	0x40015000

00014ea4 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14ea4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   14ea8:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   14eaa:	4a02      	ldr	r2, [pc, #8]	; (14eb4 <event_disable+0x10>)
   14eac:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   14eb0:	4770      	bx	lr
   14eb2:	bf00      	nop
   14eb4:	40015000 	.word	0x40015000

00014eb8 <counter>:
     return p_reg->COUNTER;
   14eb8:	4b01      	ldr	r3, [pc, #4]	; (14ec0 <counter+0x8>)
   14eba:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   14ebe:	4770      	bx	lr
   14ec0:	40015000 	.word	0x40015000

00014ec4 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   14ec4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   14ec6:	2301      	movs	r3, #1
   14ec8:	4083      	lsls	r3, r0
   14eca:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14ece:	4a0c      	ldr	r2, [pc, #48]	; (14f00 <compare_int_lock+0x3c>)
   14ed0:	e8d2 1fef 	ldaex	r1, [r2]
   14ed4:	ea01 0e0c 	and.w	lr, r1, ip
   14ed8:	e8c2 efe4 	stlex	r4, lr, [r2]
   14edc:	2c00      	cmp	r4, #0
   14ede:	d1f7      	bne.n	14ed0 <compare_int_lock+0xc>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14ee0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14ee4:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   14ee6:	4807      	ldr	r0, [pc, #28]	; (14f04 <compare_int_lock+0x40>)
   14ee8:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   14eec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14ef0:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   14ef4:	420b      	tst	r3, r1
}
   14ef6:	bf14      	ite	ne
   14ef8:	2001      	movne	r0, #1
   14efa:	2000      	moveq	r0, #0
   14efc:	bd10      	pop	{r4, pc}
   14efe:	bf00      	nop
   14f00:	20008c34 	.word	0x20008c34
   14f04:	40015000 	.word	0x40015000

00014f08 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   14f08:	b538      	push	{r3, r4, r5, lr}
   14f0a:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   14f0c:	f005 f9ed 	bl	1a2ea <full_int_lock>
   14f10:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   14f12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   14f16:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   14f18:	4a14      	ldr	r2, [pc, #80]	; (14f6c <channel_processing_check_and_clear+0x64>)
   14f1a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   14f1e:	4213      	tst	r3, r2
   14f20:	d105      	bne.n	14f2e <channel_processing_check_and_clear+0x26>
	bool result = false;
   14f22:	2400      	movs	r4, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   14f24:	4628      	mov	r0, r5
   14f26:	f005 f9e9 	bl	1a2fc <full_int_unlock>

	return result;
}
   14f2a:	4620      	mov	r0, r4
   14f2c:	bd38      	pop	{r3, r4, r5, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   14f2e:	2301      	movs	r3, #1
   14f30:	40a3      	lsls	r3, r4
   14f32:	43db      	mvns	r3, r3
   14f34:	4a0e      	ldr	r2, [pc, #56]	; (14f70 <channel_processing_check_and_clear+0x68>)
   14f36:	e8d2 1fef 	ldaex	r1, [r2]
   14f3a:	ea01 0003 	and.w	r0, r1, r3
   14f3e:	e8c2 0fec 	stlex	ip, r0, [r2]
   14f42:	f1bc 0f00 	cmp.w	ip, #0
   14f46:	d1f6      	bne.n	14f36 <channel_processing_check_and_clear+0x2e>
   14f48:	b949      	cbnz	r1, 14f5e <channel_processing_check_and_clear+0x56>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   14f4a:	f104 0350 	add.w	r3, r4, #80	; 0x50
   14f4e:	009b      	lsls	r3, r3, #2
   14f50:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14f52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14f56:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   14f5a:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   14f5c:	b123      	cbz	r3, 14f68 <channel_processing_check_and_clear+0x60>
			event_clear(chan);
   14f5e:	4620      	mov	r0, r4
   14f60:	f005 f9b4 	bl	1a2cc <event_clear>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   14f64:	2401      	movs	r4, #1
   14f66:	e7dd      	b.n	14f24 <channel_processing_check_and_clear+0x1c>
   14f68:	2400      	movs	r4, #0
   14f6a:	e7db      	b.n	14f24 <channel_processing_check_and_clear+0x1c>
   14f6c:	40015000 	.word	0x40015000
   14f70:	20008c2c 	.word	0x20008c2c

00014f74 <compare_int_unlock>:
	if (key) {
   14f74:	b901      	cbnz	r1, 14f78 <compare_int_unlock+0x4>
}
   14f76:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   14f78:	2301      	movs	r3, #1
   14f7a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14f7c:	4a0d      	ldr	r2, [pc, #52]	; (14fb4 <compare_int_unlock+0x40>)
   14f7e:	e8d2 cfef 	ldaex	ip, [r2]
   14f82:	ea4c 0c03 	orr.w	ip, ip, r3
   14f86:	e8c2 cfe1 	stlex	r1, ip, [r2]
   14f8a:	2900      	cmp	r1, #0
   14f8c:	d1f7      	bne.n	14f7e <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14f8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   14f92:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   14f94:	4a08      	ldr	r2, [pc, #32]	; (14fb8 <compare_int_unlock+0x44>)
   14f96:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14f9a:	4b08      	ldr	r3, [pc, #32]	; (14fbc <compare_int_unlock+0x48>)
   14f9c:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   14fa0:	40c3      	lsrs	r3, r0
   14fa2:	f013 0f01 	tst.w	r3, #1
   14fa6:	d0e6      	beq.n	14f76 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14fa8:	4b05      	ldr	r3, [pc, #20]	; (14fc0 <compare_int_unlock+0x4c>)
   14faa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   14fae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   14fb2:	e7e0      	b.n	14f76 <compare_int_unlock+0x2>
   14fb4:	20008c34 	.word	0x20008c34
   14fb8:	40015000 	.word	0x40015000
   14fbc:	20008c2c 	.word	0x20008c2c
   14fc0:	e000e100 	.word	0xe000e100

00014fc4 <sys_clock_timeout_handler>:
{
   14fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14fc8:	4607      	mov	r7, r0
   14fca:	4614      	mov	r4, r2
   14fcc:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   14fce:	4610      	mov	r0, r2
   14fd0:	4619      	mov	r1, r3
   14fd2:	f005 f987 	bl	1a2e4 <absolute_time_to_cc>
   14fd6:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   14fd8:	4b15      	ldr	r3, [pc, #84]	; (15030 <sys_clock_timeout_handler+0x6c>)
   14fda:	681a      	ldr	r2, [r3, #0]
   14fdc:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   14fde:	601c      	str	r4, [r3, #0]
   14fe0:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   14fe2:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   14fe6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   14fea:	d309      	bcc.n	15000 <sys_clock_timeout_handler+0x3c>
	return false;
   14fec:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   14fee:	f003 f887 	bl	18100 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   14ff2:	4638      	mov	r0, r7
   14ff4:	f7ff ff44 	bl	14e80 <get_comparator>
   14ff8:	42a8      	cmp	r0, r5
   14ffa:	d00e      	beq.n	1501a <sys_clock_timeout_handler+0x56>
}
   14ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   15000:	4b0c      	ldr	r3, [pc, #48]	; (15034 <sys_clock_timeout_handler+0x70>)
   15002:	681b      	ldr	r3, [r3, #0]
   15004:	0a1a      	lsrs	r2, r3, #8
   15006:	061b      	lsls	r3, r3, #24
   15008:	eb15 0803 	adds.w	r8, r5, r3
   1500c:	f142 0900 	adc.w	r9, r2, #0
   15010:	4b09      	ldr	r3, [pc, #36]	; (15038 <sys_clock_timeout_handler+0x74>)
   15012:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
   15016:	2401      	movs	r4, #1
   15018:	e7e9      	b.n	14fee <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
   1501a:	b11c      	cbz	r4, 15024 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
   1501c:	4638      	mov	r0, r7
   1501e:	f7ff ff37 	bl	14e90 <event_enable>
}
   15022:	e7eb      	b.n	14ffc <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
   15024:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   15028:	4638      	mov	r0, r7
   1502a:	f7ff ff1f 	bl	14e6c <set_comparator>
   1502e:	e7f5      	b.n	1501c <sys_clock_timeout_handler+0x58>
   15030:	200086b8 	.word	0x200086b8
   15034:	20008c38 	.word	0x20008c38
   15038:	200086c0 	.word	0x200086c0

0001503c <z_nrf_rtc_timer_compare_evt_address_get>:
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   1503c:	b2c3      	uxtb	r3, r0
   1503e:	009b      	lsls	r3, r3, #2
}
   15040:	4801      	ldr	r0, [pc, #4]	; (15048 <z_nrf_rtc_timer_compare_evt_address_get+0xc>)
   15042:	4418      	add	r0, r3
   15044:	4770      	bx	lr
   15046:	bf00      	nop
   15048:	40015140 	.word	0x40015140

0001504c <z_nrf_rtc_timer_compare_read>:
    return p_reg->CC[ch];
   1504c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   15050:	4b01      	ldr	r3, [pc, #4]	; (15058 <z_nrf_rtc_timer_compare_read+0xc>)
   15052:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   15056:	4770      	bx	lr
   15058:	40015000 	.word	0x40015000

0001505c <z_nrf_rtc_timer_read>:
{
   1505c:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1505e:	4b0d      	ldr	r3, [pc, #52]	; (15094 <z_nrf_rtc_timer_read+0x38>)
   15060:	681c      	ldr	r4, [r3, #0]
   15062:	0a25      	lsrs	r5, r4, #8
   15064:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   15066:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   1506a:	f7ff ff25 	bl	14eb8 <counter>
   1506e:	4603      	mov	r3, r0
	val += cntr;
   15070:	1900      	adds	r0, r0, r4
   15072:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   15076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1507a:	d20a      	bcs.n	15092 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   1507c:	4b06      	ldr	r3, [pc, #24]	; (15098 <z_nrf_rtc_timer_read+0x3c>)
   1507e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15082:	4290      	cmp	r0, r2
   15084:	eb71 0303 	sbcs.w	r3, r1, r3
   15088:	d203      	bcs.n	15092 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   1508a:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1508e:	f141 0100 	adc.w	r1, r1, #0
}
   15092:	bd38      	pop	{r3, r4, r5, pc}
   15094:	20008c38 	.word	0x20008c38
   15098:	200086c0 	.word	0x200086c0

0001509c <compare_set_nolocks>:
{
   1509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1509e:	4606      	mov	r6, r0
   150a0:	4614      	mov	r4, r2
   150a2:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   150a4:	4610      	mov	r0, r2
   150a6:	4619      	mov	r1, r3
   150a8:	f005 f91c 	bl	1a2e4 <absolute_time_to_cc>
   150ac:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   150ae:	f7ff ffd5 	bl	1505c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   150b2:	42a0      	cmp	r0, r4
   150b4:	eb71 0305 	sbcs.w	r3, r1, r5
   150b8:	d21d      	bcs.n	150f6 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
   150ba:	1a20      	subs	r0, r4, r0
   150bc:	eb65 0101 	sbc.w	r1, r5, r1
   150c0:	4b19      	ldr	r3, [pc, #100]	; (15128 <compare_set_nolocks+0x8c>)
   150c2:	4298      	cmp	r0, r3
   150c4:	f171 0100 	sbcs.w	r1, r1, #0
   150c8:	d22b      	bcs.n	15122 <compare_set_nolocks+0x86>
		if (target_time != cc_data[chan].target_time) {
   150ca:	4b18      	ldr	r3, [pc, #96]	; (1512c <compare_set_nolocks+0x90>)
   150cc:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   150d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   150d4:	42ab      	cmp	r3, r5
   150d6:	bf08      	it	eq
   150d8:	42a2      	cmpeq	r2, r4
   150da:	d016      	beq.n	1510a <compare_set_nolocks+0x6e>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   150dc:	4639      	mov	r1, r7
   150de:	4630      	mov	r0, r6
   150e0:	f005 f911 	bl	1a306 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   150e4:	4639      	mov	r1, r7
   150e6:	f005 f8ed 	bl	1a2c4 <counter_sub>
   150ea:	1900      	adds	r0, r0, r4
   150ec:	f145 0300 	adc.w	r3, r5, #0
   150f0:	4604      	mov	r4, r0
   150f2:	461d      	mov	r5, r3
   150f4:	e009      	b.n	1510a <compare_set_nolocks+0x6e>
		atomic_or(&force_isr_mask, BIT(chan));
   150f6:	2301      	movs	r3, #1
   150f8:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   150fa:	4a0d      	ldr	r2, [pc, #52]	; (15130 <compare_set_nolocks+0x94>)
   150fc:	e8d2 0fef 	ldaex	r0, [r2]
   15100:	4318      	orrs	r0, r3
   15102:	e8c2 0fe1 	stlex	r1, r0, [r2]
   15106:	2900      	cmp	r1, #0
   15108:	d1f8      	bne.n	150fc <compare_set_nolocks+0x60>
	cc_data[chan].target_time = target_time;
   1510a:	4b08      	ldr	r3, [pc, #32]	; (1512c <compare_set_nolocks+0x90>)
   1510c:	0132      	lsls	r2, r6, #4
   1510e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   15112:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   15116:	9906      	ldr	r1, [sp, #24]
   15118:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   1511a:	9b07      	ldr	r3, [sp, #28]
   1511c:	6073      	str	r3, [r6, #4]
	return ret;
   1511e:	2000      	movs	r0, #0
}
   15120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   15122:	f06f 0015 	mvn.w	r0, #21
   15126:	e7fb      	b.n	15120 <compare_set_nolocks+0x84>
   15128:	01000001 	.word	0x01000001
   1512c:	20008698 	.word	0x20008698
   15130:	20008c2c 	.word	0x20008c2c

00015134 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   15134:	b530      	push	{r4, r5, lr}
   15136:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   15138:	2300      	movs	r3, #0
   1513a:	4a1f      	ldr	r2, [pc, #124]	; (151b8 <sys_clock_driver_init+0x84>)
   1513c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   15140:	e00f      	b.n	15162 <sys_clock_driver_init+0x2e>
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   15142:	4a1e      	ldr	r2, [pc, #120]	; (151bc <sys_clock_driver_init+0x88>)
   15144:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   15148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1514c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15150:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   15154:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   15158:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   1515a:	4917      	ldr	r1, [pc, #92]	; (151b8 <sys_clock_driver_init+0x84>)
   1515c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   15160:	3301      	adds	r3, #1
   15162:	2b01      	cmp	r3, #1
   15164:	dded      	ble.n	15142 <sys_clock_driver_init+0xe>
   15166:	4c14      	ldr	r4, [pc, #80]	; (151b8 <sys_clock_driver_init+0x84>)
   15168:	2502      	movs	r5, #2
   1516a:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1516e:	4b14      	ldr	r3, [pc, #80]	; (151c0 <sys_clock_driver_init+0x8c>)
   15170:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   15174:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   15178:	2200      	movs	r2, #0
   1517a:	2101      	movs	r1, #1
   1517c:	2015      	movs	r0, #21
   1517e:	f004 f9fd 	bl	1957c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   15182:	2015      	movs	r0, #21
   15184:	f004 f9f0 	bl	19568 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   15188:	2301      	movs	r3, #1
   1518a:	60a3      	str	r3, [r4, #8]
   1518c:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1518e:	4b0d      	ldr	r3, [pc, #52]	; (151c4 <sys_clock_driver_init+0x90>)
   15190:	2203      	movs	r2, #3
   15192:	601a      	str	r2, [r3, #0]
	if (CONFIG_NRF_RTC_TIMER_USER_CHAN_COUNT) {
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   15194:	4b0c      	ldr	r3, [pc, #48]	; (151c8 <sys_clock_driver_init+0x94>)
   15196:	601d      	str	r5, [r3, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   15198:	2400      	movs	r4, #0
   1519a:	9401      	str	r4, [sp, #4]
   1519c:	4b0b      	ldr	r3, [pc, #44]	; (151cc <sys_clock_driver_init+0x98>)
   1519e:	9300      	str	r3, [sp, #0]
   151a0:	4a0b      	ldr	r2, [pc, #44]	; (151d0 <sys_clock_driver_init+0x9c>)
   151a2:	2300      	movs	r3, #0
   151a4:	4620      	mov	r0, r4
   151a6:	f005 f8f4 	bl	1a392 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   151aa:	4628      	mov	r0, r5
   151ac:	f7fe fe88 	bl	13ec0 <z_nrf_clock_control_lf_on>

	return 0;
}
   151b0:	4620      	mov	r0, r4
   151b2:	b003      	add	sp, #12
   151b4:	bd30      	pop	{r4, r5, pc}
   151b6:	bf00      	nop
   151b8:	40015000 	.word	0x40015000
   151bc:	20008698 	.word	0x20008698
   151c0:	e000e100 	.word	0xe000e100
   151c4:	20008c34 	.word	0x20008c34
   151c8:	20008c30 	.word	0x20008c30
   151cc:	00014fc5 	.word	0x00014fc5
   151d0:	007fffff 	.word	0x007fffff

000151d4 <process_channel>:
{
   151d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   151d8:	b082      	sub	sp, #8
   151da:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   151dc:	f7ff fe94 	bl	14f08 <channel_processing_check_and_clear>
   151e0:	b910      	cbnz	r0, 151e8 <process_channel+0x14>
}
   151e2:	b002      	add	sp, #8
   151e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   151e8:	f7ff ff38 	bl	1505c <z_nrf_rtc_timer_read>
   151ec:	4682      	mov	sl, r0
   151ee:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
   151f0:	f005 f87b 	bl	1a2ea <full_int_lock>
   151f4:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
   151f6:	4b13      	ldr	r3, [pc, #76]	; (15244 <process_channel+0x70>)
   151f8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   151fc:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   15200:	45c2      	cmp	sl, r8
   15202:	eb75 0509 	sbcs.w	r5, r5, r9
   15206:	d20b      	bcs.n	15220 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   15208:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
   1520a:	4630      	mov	r0, r6
   1520c:	f005 f876 	bl	1a2fc <full_int_unlock>
		if (handler) {
   15210:	2d00      	cmp	r5, #0
   15212:	d0e6      	beq.n	151e2 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   15214:	9700      	str	r7, [sp, #0]
   15216:	4642      	mov	r2, r8
   15218:	464b      	mov	r3, r9
   1521a:	4620      	mov	r0, r4
   1521c:	47a8      	blx	r5
}
   1521e:	e7e0      	b.n	151e2 <process_channel+0xe>
			handler = cc_data[chan].callback;
   15220:	4a08      	ldr	r2, [pc, #32]	; (15244 <process_channel+0x70>)
   15222:	0123      	lsls	r3, r4, #4
   15224:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   15228:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
   1522a:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   1522c:	2000      	movs	r0, #0
   1522e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   15230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15238:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   1523c:	4620      	mov	r0, r4
   1523e:	f7ff fe31 	bl	14ea4 <event_disable>
   15242:	e7e2      	b.n	1520a <process_channel+0x36>
   15244:	20008698 	.word	0x20008698

00015248 <rtc_nrf_isr>:
{
   15248:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   1524a:	4b0e      	ldr	r3, [pc, #56]	; (15284 <rtc_nrf_isr+0x3c>)
   1524c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   15250:	f013 0f02 	tst.w	r3, #2
   15254:	d00d      	beq.n	15272 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15256:	4b0b      	ldr	r3, [pc, #44]	; (15284 <rtc_nrf_isr+0x3c>)
   15258:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1525c:	b14b      	cbz	r3, 15272 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1525e:	4b09      	ldr	r3, [pc, #36]	; (15284 <rtc_nrf_isr+0x3c>)
   15260:	2200      	movs	r2, #0
   15262:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15266:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   1526a:	4a07      	ldr	r2, [pc, #28]	; (15288 <rtc_nrf_isr+0x40>)
   1526c:	6813      	ldr	r3, [r2, #0]
   1526e:	3301      	adds	r3, #1
   15270:	6013      	str	r3, [r2, #0]
{
   15272:	2400      	movs	r4, #0
   15274:	e003      	b.n	1527e <rtc_nrf_isr+0x36>
		process_channel(chan);
   15276:	4620      	mov	r0, r4
   15278:	f7ff ffac 	bl	151d4 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1527c:	3401      	adds	r4, #1
   1527e:	2c01      	cmp	r4, #1
   15280:	ddf9      	ble.n	15276 <rtc_nrf_isr+0x2e>
}
   15282:	bd10      	pop	{r4, pc}
   15284:	40015000 	.word	0x40015000
   15288:	20008c38 	.word	0x20008c38

0001528c <z_nrf_rtc_timer_chan_alloc>:
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   1528c:	4b12      	ldr	r3, [pc, #72]	; (152d8 <z_nrf_rtc_timer_chan_alloc+0x4c>)
   1528e:	6818      	ldr	r0, [r3, #0]
   15290:	b1f0      	cbz	r0, 152d0 <z_nrf_rtc_timer_chan_alloc+0x44>
{
   15292:	b500      	push	{lr}
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   15294:	fab0 f080 	clz	r0, r0
   15298:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1529c:	2301      	movs	r3, #1
   1529e:	4083      	lsls	r3, r0
   152a0:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   152a2:	490d      	ldr	r1, [pc, #52]	; (152d8 <z_nrf_rtc_timer_chan_alloc+0x4c>)
   152a4:	e8d1 2fef 	ldaex	r2, [r1]
   152a8:	ea02 0c03 	and.w	ip, r2, r3
   152ac:	e8c1 cfee 	stlex	lr, ip, [r1]
   152b0:	f1be 0f00 	cmp.w	lr, #0
   152b4:	d1f6      	bne.n	152a4 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   152b6:	fa22 f300 	lsr.w	r3, r2, r0
   152ba:	f013 0f01 	tst.w	r3, #1
   152be:	d105      	bne.n	152cc <z_nrf_rtc_timer_chan_alloc+0x40>
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   152c0:	4b05      	ldr	r3, [pc, #20]	; (152d8 <z_nrf_rtc_timer_chan_alloc+0x4c>)
   152c2:	6818      	ldr	r0, [r3, #0]
   152c4:	2800      	cmp	r0, #0
   152c6:	d1e5      	bne.n	15294 <z_nrf_rtc_timer_chan_alloc+0x8>
			return -ENOMEM;
   152c8:	f06f 000b 	mvn.w	r0, #11
}
   152cc:	f85d fb04 	ldr.w	pc, [sp], #4
			return -ENOMEM;
   152d0:	f06f 000b 	mvn.w	r0, #11
}
   152d4:	4770      	bx	lr
   152d6:	bf00      	nop
   152d8:	20008c30 	.word	0x20008c30

000152dc <z_nrf_rtc_timer_chan_free>:
	atomic_or(&alloc_mask, BIT(chan));
   152dc:	2301      	movs	r3, #1
   152de:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   152e0:	4a04      	ldr	r2, [pc, #16]	; (152f4 <z_nrf_rtc_timer_chan_free+0x18>)
   152e2:	e8d2 0fef 	ldaex	r0, [r2]
   152e6:	4318      	orrs	r0, r3
   152e8:	e8c2 0fe1 	stlex	r1, r0, [r2]
   152ec:	2900      	cmp	r1, #0
   152ee:	d1f8      	bne.n	152e2 <z_nrf_rtc_timer_chan_free+0x6>
}
   152f0:	4770      	bx	lr
   152f2:	bf00      	nop
   152f4:	20008c30 	.word	0x20008c30

000152f8 <sys_clock_set_timeout>:
{
   152f8:	b510      	push	{r4, lr}
   152fa:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   152fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15300:	d006      	beq.n	15310 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   15302:	2801      	cmp	r0, #1
   15304:	dd06      	ble.n	15314 <sys_clock_set_timeout+0x1c>
   15306:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1530a:	da05      	bge.n	15318 <sys_clock_set_timeout+0x20>
   1530c:	1e44      	subs	r4, r0, #1
   1530e:	e004      	b.n	1531a <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   15310:	480f      	ldr	r0, [pc, #60]	; (15350 <sys_clock_set_timeout+0x58>)
   15312:	e7f8      	b.n	15306 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   15314:	2400      	movs	r4, #0
   15316:	e000      	b.n	1531a <sys_clock_set_timeout+0x22>
   15318:	4c0d      	ldr	r4, [pc, #52]	; (15350 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1531a:	f7ff fe9f 	bl	1505c <z_nrf_rtc_timer_read>
   1531e:	4b0d      	ldr	r3, [pc, #52]	; (15354 <sys_clock_set_timeout+0x5c>)
   15320:	681a      	ldr	r2, [r3, #0]
   15322:	685b      	ldr	r3, [r3, #4]
   15324:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   15326:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1532a:	d300      	bcc.n	1532e <sys_clock_set_timeout+0x36>
		ticks = 0;
   1532c:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1532e:	4420      	add	r0, r4
   15330:	1c41      	adds	r1, r0, #1
	if (cyc > MAX_CYCLES) {
   15332:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   15336:	d300      	bcc.n	1533a <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   15338:	4905      	ldr	r1, [pc, #20]	; (15350 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
   1533a:	2000      	movs	r0, #0
   1533c:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1533e:	9001      	str	r0, [sp, #4]
   15340:	4905      	ldr	r1, [pc, #20]	; (15358 <sys_clock_set_timeout+0x60>)
   15342:	9100      	str	r1, [sp, #0]
   15344:	f143 0300 	adc.w	r3, r3, #0
   15348:	f005 f823 	bl	1a392 <compare_set>
}
   1534c:	b002      	add	sp, #8
   1534e:	bd10      	pop	{r4, pc}
   15350:	007fffff 	.word	0x007fffff
   15354:	200086b8 	.word	0x200086b8
   15358:	00014fc5 	.word	0x00014fc5

0001535c <sys_clock_elapsed>:
{
   1535c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1535e:	f7ff fe7d 	bl	1505c <z_nrf_rtc_timer_read>
   15362:	4b02      	ldr	r3, [pc, #8]	; (1536c <sys_clock_elapsed+0x10>)
   15364:	681b      	ldr	r3, [r3, #0]
}
   15366:	1ac0      	subs	r0, r0, r3
   15368:	bd08      	pop	{r3, pc}
   1536a:	bf00      	nop
   1536c:	200086b8 	.word	0x200086b8

00015370 <nrf_gpio_cfg>:
{
   15370:	b430      	push	{r4, r5}
    *p_pin = pin_number & 0x1F;
   15372:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
   15376:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15378:	2801      	cmp	r0, #1
   1537a:	d018      	beq.n	153ae <nrf_gpio_cfg+0x3e>
        case 0: return NRF_P0;
   1537c:	4d0d      	ldr	r5, [pc, #52]	; (153b4 <nrf_gpio_cfg+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1537e:	f10c 0080 	add.w	r0, ip, #128	; 0x80
   15382:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
   15386:	f004 4ce0 	and.w	ip, r4, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1538a:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   1538e:	ea41 0383 	orr.w	r3, r1, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15392:	f89d 2008 	ldrb.w	r2, [sp, #8]
   15396:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1539a:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1539e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   153a2:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
   153a6:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
}
   153aa:	bc30      	pop	{r4, r5}
   153ac:	4770      	bx	lr
        case 1: return NRF_P1;
   153ae:	4d02      	ldr	r5, [pc, #8]	; (153b8 <nrf_gpio_cfg+0x48>)
   153b0:	e7e5      	b.n	1537e <nrf_gpio_cfg+0xe>
   153b2:	bf00      	nop
   153b4:	40842500 	.word	0x40842500
   153b8:	40842800 	.word	0x40842800

000153bc <nrf_gpio_pin_write>:
    if (value == 0)
   153bc:	b959      	cbnz	r1, 153d6 <nrf_gpio_pin_write+0x1a>
    *p_pin = pin_number & 0x1F;
   153be:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   153c2:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   153c4:	2801      	cmp	r0, #1
   153c6:	d004      	beq.n	153d2 <nrf_gpio_pin_write+0x16>
        case 0: return NRF_P0;
   153c8:	4a09      	ldr	r2, [pc, #36]	; (153f0 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   153ca:	2301      	movs	r3, #1
   153cc:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   153ce:	60d3      	str	r3, [r2, #12]
}
   153d0:	4770      	bx	lr
        case 1: return NRF_P1;
   153d2:	4a08      	ldr	r2, [pc, #32]	; (153f4 <nrf_gpio_pin_write+0x38>)
   153d4:	e7f9      	b.n	153ca <nrf_gpio_pin_write+0xe>
    *p_pin = pin_number & 0x1F;
   153d6:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   153da:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   153dc:	2801      	cmp	r0, #1
   153de:	d004      	beq.n	153ea <nrf_gpio_pin_write+0x2e>
        case 0: return NRF_P0;
   153e0:	4a03      	ldr	r2, [pc, #12]	; (153f0 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   153e2:	2301      	movs	r3, #1
   153e4:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   153e6:	6093      	str	r3, [r2, #8]
}
   153e8:	4770      	bx	lr
        case 1: return NRF_P1;
   153ea:	4a02      	ldr	r2, [pc, #8]	; (153f4 <nrf_gpio_pin_write+0x38>)
   153ec:	e7f9      	b.n	153e2 <nrf_gpio_pin_write+0x26>
   153ee:	bf00      	nop
   153f0:	40842500 	.word	0x40842500
   153f4:	40842800 	.word	0x40842800

000153f8 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   153f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153fc:	b085      	sub	sp, #20
   153fe:	4607      	mov	r7, r0
   15400:	468b      	mov	fp, r1
   15402:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   15404:	2400      	movs	r4, #0
   15406:	e022      	b.n	1544e <pinctrl_configure_pins+0x56>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
   15408:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1540c:	e02c      	b.n	15468 <pinctrl_configure_pins+0x70>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
   1540e:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   15412:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   15414:	9603      	str	r6, [sp, #12]
			write = 1U;
   15416:	4631      	mov	r1, r6
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
   15418:	2d7f      	cmp	r5, #127	; 0x7f
   1541a:	d016      	beq.n	1544a <pinctrl_configure_pins+0x52>
			if (write != NO_WRITE) {
   1541c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   15420:	f040 810e 	bne.w	15640 <pinctrl_configure_pins+0x248>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   15424:	f857 300a 	ldr.w	r3, [r7, sl]
   15428:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1542c:	d002      	beq.n	15434 <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1542e:	2601      	movs	r6, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
   15430:	2200      	movs	r2, #0
   15432:	9203      	str	r2, [sp, #12]
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   15434:	2200      	movs	r2, #0
   15436:	9201      	str	r2, [sp, #4]
   15438:	f8cd 9000 	str.w	r9, [sp]
   1543c:	f3c3 13c1 	ubfx	r3, r3, #7, #2
   15440:	4632      	mov	r2, r6
   15442:	9903      	ldr	r1, [sp, #12]
   15444:	4628      	mov	r0, r5
   15446:	f7ff ff93 	bl	15370 <nrf_gpio_cfg>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1544a:	3401      	adds	r4, #1
   1544c:	b2e4      	uxtb	r4, r4
   1544e:	455c      	cmp	r4, fp
   15450:	f080 80fa 	bcs.w	15648 <pinctrl_configure_pins+0x250>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   15454:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   15458:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1545c:	f3c3 2943 	ubfx	r9, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
   15460:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
   15464:	2d7f      	cmp	r5, #127	; 0x7f
   15466:	d0cf      	beq.n	15408 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
   15468:	0c1b      	lsrs	r3, r3, #16
   1546a:	2b22      	cmp	r3, #34	; 0x22
   1546c:	f200 80ee 	bhi.w	1564c <pinctrl_configure_pins+0x254>
   15470:	a201      	add	r2, pc, #4	; (adr r2, 15478 <pinctrl_configure_pins+0x80>)
   15472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15476:	bf00      	nop
   15478:	0001540f 	.word	0x0001540f
   1547c:	00015505 	.word	0x00015505
   15480:	00015513 	.word	0x00015513
   15484:	0001551f 	.word	0x0001551f
   15488:	0001552d 	.word	0x0001552d
   1548c:	0001553b 	.word	0x0001553b
   15490:	00015547 	.word	0x00015547
   15494:	0001564d 	.word	0x0001564d
   15498:	0001564d 	.word	0x0001564d
   1549c:	0001564d 	.word	0x0001564d
   154a0:	0001564d 	.word	0x0001564d
   154a4:	00015555 	.word	0x00015555
   154a8:	00015569 	.word	0x00015569
   154ac:	0001564d 	.word	0x0001564d
   154b0:	0001564d 	.word	0x0001564d
   154b4:	0001564d 	.word	0x0001564d
   154b8:	0001564d 	.word	0x0001564d
   154bc:	0001564d 	.word	0x0001564d
   154c0:	0001564d 	.word	0x0001564d
   154c4:	0001564d 	.word	0x0001564d
   154c8:	0001564d 	.word	0x0001564d
   154cc:	0001564d 	.word	0x0001564d
   154d0:	0001557d 	.word	0x0001557d
   154d4:	0001558f 	.word	0x0001558f
   154d8:	000155a1 	.word	0x000155a1
   154dc:	000155b3 	.word	0x000155b3
   154e0:	0001564d 	.word	0x0001564d
   154e4:	0001564d 	.word	0x0001564d
   154e8:	0001564d 	.word	0x0001564d
   154ec:	000155c5 	.word	0x000155c5
   154f0:	000155d5 	.word	0x000155d5
   154f4:	000155e1 	.word	0x000155e1
   154f8:	000155f1 	.word	0x000155f1
   154fc:	00015601 	.word	0x00015601
   15500:	00015611 	.word	0x00015611
			NRF_PSEL_UART(reg, RXD) = pin;
   15504:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   15508:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1550a:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   1550c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   15510:	e782      	b.n	15418 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, RTS) = pin;
   15512:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   15516:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   15518:	9603      	str	r6, [sp, #12]
			write = 1U;
   1551a:	4631      	mov	r1, r6
			break;
   1551c:	e77c      	b.n	15418 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, CTS) = pin;
   1551e:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   15522:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   15524:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   15526:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   1552a:	e775      	b.n	15418 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   1552c:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   15530:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   15532:	2301      	movs	r3, #1
   15534:	9303      	str	r3, [sp, #12]
			write = 0U;
   15536:	4631      	mov	r1, r6
			break;
   15538:	e76e      	b.n	15418 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   1553a:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1553e:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   15540:	9603      	str	r6, [sp, #12]
			write = 0U;
   15542:	2100      	movs	r1, #0
			break;
   15544:	e768      	b.n	15418 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   15546:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1554a:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1554c:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   1554e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   15552:	e761      	b.n	15418 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   15554:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   15558:	f1b9 0f00 	cmp.w	r9, #0
   1555c:	d060      	beq.n	15620 <pinctrl_configure_pins+0x228>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1555e:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   15560:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   15562:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15566:	e757      	b.n	15418 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   15568:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1556c:	f1b9 0f00 	cmp.w	r9, #0
   15570:	d05e      	beq.n	15630 <pinctrl_configure_pins+0x238>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   15572:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   15574:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   15576:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1557a:	e74d      	b.n	15418 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   1557c:	f8c8 5560 	str.w	r5, [r8, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   15580:	f857 100a 	ldr.w	r1, [r7, sl]
   15584:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   15588:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1558a:	9603      	str	r6, [sp, #12]
			break;
   1558c:	e744      	b.n	15418 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   1558e:	f8c8 5564 	str.w	r5, [r8, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   15592:	f857 100a 	ldr.w	r1, [r7, sl]
   15596:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1559a:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1559c:	9603      	str	r6, [sp, #12]
			break;
   1559e:	e73b      	b.n	15418 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   155a0:	f8c8 5568 	str.w	r5, [r8, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   155a4:	f857 100a 	ldr.w	r1, [r7, sl]
   155a8:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   155ac:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   155ae:	9603      	str	r6, [sp, #12]
			break;
   155b0:	e732      	b.n	15418 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   155b2:	f8c8 556c 	str.w	r5, [r8, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
   155b6:	f857 100a 	ldr.w	r1, [r7, sl]
   155ba:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   155be:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   155c0:	9603      	str	r6, [sp, #12]
			break;
   155c2:	e729      	b.n	15418 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   155c4:	f8c8 5524 	str.w	r5, [r8, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   155c8:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   155ca:	2300      	movs	r3, #0
   155cc:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   155ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   155d2:	e721      	b.n	15418 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   155d4:	f8c8 5528 	str.w	r5, [r8, #1320]	; 0x528
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   155d8:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   155da:	9603      	str	r6, [sp, #12]
			write = 1U;
   155dc:	4631      	mov	r1, r6
			break;
   155de:	e71b      	b.n	15418 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   155e0:	f8c8 5530 	str.w	r5, [r8, #1328]	; 0x530
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   155e4:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   155e6:	2300      	movs	r3, #0
   155e8:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   155ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   155ee:	e713      	b.n	15418 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   155f0:	f8c8 5534 	str.w	r5, [r8, #1332]	; 0x534
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   155f4:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   155f6:	2300      	movs	r3, #0
   155f8:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   155fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   155fe:	e70b      	b.n	15418 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   15600:	f8c8 5538 	str.w	r5, [r8, #1336]	; 0x538
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   15604:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   15606:	2300      	movs	r3, #0
   15608:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   1560a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   1560e:	e703      	b.n	15418 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   15610:	f8c8 553c 	str.w	r5, [r8, #1340]	; 0x53c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   15614:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   15616:	2300      	movs	r3, #0
   15618:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   1561a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   1561e:	e6fb      	b.n	15418 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   15620:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
   15622:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
   15626:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
				drive = NRF_DRIVE_S0D1;
   1562a:	f04f 0906 	mov.w	r9, #6
   1562e:	e6f3      	b.n	15418 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   15630:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
   15632:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
   15636:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
				drive = NRF_DRIVE_S0D1;
   1563a:	f04f 0906 	mov.w	r9, #6
   1563e:	e6eb      	b.n	15418 <pinctrl_configure_pins+0x20>
				nrf_gpio_pin_write(pin, write);
   15640:	4628      	mov	r0, r5
   15642:	f7ff febb 	bl	153bc <nrf_gpio_pin_write>
   15646:	e6ed      	b.n	15424 <pinctrl_configure_pins+0x2c>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   15648:	2000      	movs	r0, #0
   1564a:	e001      	b.n	15650 <pinctrl_configure_pins+0x258>
		switch (NRF_GET_FUN(pins[i])) {
   1564c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   15650:	b005      	add	sp, #20
   15652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15656:	bf00      	nop

00015658 <mbox_nrf_set_enabled>:
{
	return IPC_CONF_NUM;
}

static int mbox_nrf_set_enabled(const struct device *dev, uint32_t channel, bool enable)
{
   15658:	b530      	push	{r4, r5, lr}
   1565a:	b089      	sub	sp, #36	; 0x24
   1565c:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   1565e:	6905      	ldr	r5, [r0, #16]
	const struct mbox_nrf_conf *conf = dev->config;
   15660:	6843      	ldr	r3, [r0, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   15662:	290f      	cmp	r1, #15
   15664:	d806      	bhi.n	15674 <mbox_nrf_set_enabled+0x1c>
   15666:	681b      	ldr	r3, [r3, #0]
   15668:	40cb      	lsrs	r3, r1
   1566a:	f013 0f01 	tst.w	r3, #1
   1566e:	d11d      	bne.n	156ac <mbox_nrf_set_enabled+0x54>
   15670:	2300      	movs	r3, #0
   15672:	e000      	b.n	15676 <mbox_nrf_set_enabled+0x1e>
   15674:	2300      	movs	r3, #0

	if (!is_rx_channel_valid(dev, channel)) {
   15676:	2b00      	cmp	r3, #0
   15678:	d061      	beq.n	1573e <mbox_nrf_set_enabled+0xe6>
		return -EINVAL;
	}

	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   1567a:	b9ca      	cbnz	r2, 156b0 <mbox_nrf_set_enabled+0x58>
   1567c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   15680:	40e3      	lsrs	r3, r4
   15682:	f013 0f01 	tst.w	r3, #1
   15686:	d05d      	beq.n	15744 <mbox_nrf_set_enabled+0xec>
	if (enable) {
		data->enabled_mask |= BIT(channel);
		compiler_barrier();
		nrfx_ipc_receive_event_enable(channel);
	} else {
		nrfx_ipc_receive_event_disable(channel);
   15688:	b2e0      	uxtb	r0, r4
   1568a:	f001 f8d1 	bl	16830 <nrfx_ipc_receive_event_disable>
		compiler_barrier();
		data->enabled_mask &= ~BIT(channel);
   1568e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   15692:	2201      	movs	r2, #1
   15694:	40a2      	lsls	r2, r4
   15696:	ea23 0302 	bic.w	r3, r3, r2
   1569a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	}

	if (data->enabled_mask == 0) {
   1569e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   156a2:	2b00      	cmp	r3, #0
   156a4:	d046      	beq.n	15734 <mbox_nrf_set_enabled+0xdc>
		irq_disable(DT_INST_IRQN(0));
	}

	return 0;
   156a6:	2000      	movs	r0, #0
}
   156a8:	b009      	add	sp, #36	; 0x24
   156aa:	bd30      	pop	{r4, r5, pc}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   156ac:	2301      	movs	r3, #1
   156ae:	e7e2      	b.n	15676 <mbox_nrf_set_enabled+0x1e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   156b0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   156b4:	40e3      	lsrs	r3, r4
   156b6:	f013 0f01 	tst.w	r3, #1
   156ba:	d146      	bne.n	1574a <mbox_nrf_set_enabled+0xf2>
	if (enable && (data->cb[channel] == NULL)) {
   156bc:	2a00      	cmp	r2, #0
   156be:	d0e3      	beq.n	15688 <mbox_nrf_set_enabled+0x30>
   156c0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   156c4:	b16b      	cbz	r3, 156e2 <mbox_nrf_set_enabled+0x8a>
	if (enable && data->enabled_mask == 0) {
   156c6:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   156ca:	b37b      	cbz	r3, 1572c <mbox_nrf_set_enabled+0xd4>
		data->enabled_mask |= BIT(channel);
   156cc:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   156d0:	2201      	movs	r2, #1
   156d2:	40a2      	lsls	r2, r4
   156d4:	4313      	orrs	r3, r2
   156d6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   156da:	b2e0      	uxtb	r0, r4
   156dc:	f001 f8a0 	bl	16820 <nrfx_ipc_receive_event_enable>
   156e0:	e7dd      	b.n	1569e <mbox_nrf_set_enabled+0x46>
		LOG_WRN("Enabling channel without a registered callback\n");
   156e2:	4b1b      	ldr	r3, [pc, #108]	; (15750 <mbox_nrf_set_enabled+0xf8>)
   156e4:	9307      	str	r3, [sp, #28]
   156e6:	2202      	movs	r2, #2
   156e8:	f88d 2004 	strb.w	r2, [sp, #4]
   156ec:	2300      	movs	r3, #0
   156ee:	f88d 3005 	strb.w	r3, [sp, #5]
   156f2:	f88d 3006 	strb.w	r3, [sp, #6]
   156f6:	f88d 3007 	strb.w	r3, [sp, #7]
   156fa:	9901      	ldr	r1, [sp, #4]
   156fc:	9106      	str	r1, [sp, #24]
   156fe:	4619      	mov	r1, r3
   15700:	f363 0100 	bfi	r1, r3, #0, #1
   15704:	f363 0141 	bfi	r1, r3, #1, #1
   15708:	f363 0182 	bfi	r1, r3, #2, #1
   1570c:	f363 01c5 	bfi	r1, r3, #3, #3
   15710:	f362 1188 	bfi	r1, r2, #6, #3
   15714:	2208      	movs	r2, #8
   15716:	f362 2152 	bfi	r1, r2, #9, #10
   1571a:	f363 41de 	bfi	r1, r3, #19, #12
   1571e:	f363 71df 	bfi	r1, r3, #31, #1
   15722:	aa06      	add	r2, sp, #24
   15724:	480b      	ldr	r0, [pc, #44]	; (15754 <mbox_nrf_set_enabled+0xfc>)
   15726:	f003 fe1e 	bl	19366 <z_impl_z_log_msg_static_create>
   1572a:	e7cc      	b.n	156c6 <mbox_nrf_set_enabled+0x6e>
		irq_enable(DT_INST_IRQN(0));
   1572c:	202a      	movs	r0, #42	; 0x2a
   1572e:	f003 ff1b 	bl	19568 <arch_irq_enable>
   15732:	e7cb      	b.n	156cc <mbox_nrf_set_enabled+0x74>
		irq_disable(DT_INST_IRQN(0));
   15734:	202a      	movs	r0, #42	; 0x2a
   15736:	f003 ff1c 	bl	19572 <arch_irq_disable>
	return 0;
   1573a:	2000      	movs	r0, #0
   1573c:	e7b4      	b.n	156a8 <mbox_nrf_set_enabled+0x50>
		return -EINVAL;
   1573e:	f06f 0015 	mvn.w	r0, #21
   15742:	e7b1      	b.n	156a8 <mbox_nrf_set_enabled+0x50>
		return -EALREADY;
   15744:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15748:	e7ae      	b.n	156a8 <mbox_nrf_set_enabled+0x50>
   1574a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1574e:	e7ab      	b.n	156a8 <mbox_nrf_set_enabled+0x50>
   15750:	0001bc58 	.word	0x0001bc58
   15754:	0001afa8 	.word	0x0001afa8

00015758 <mbox_nrf_send>:
{
   15758:	b530      	push	{r4, r5, lr}
   1575a:	b089      	sub	sp, #36	; 0x24
   1575c:	4605      	mov	r5, r0
   1575e:	460c      	mov	r4, r1
	if (msg) {
   15760:	b31a      	cbz	r2, 157aa <mbox_nrf_send+0x52>
		LOG_WRN("Sending data not supported");
   15762:	4b20      	ldr	r3, [pc, #128]	; (157e4 <mbox_nrf_send+0x8c>)
   15764:	9307      	str	r3, [sp, #28]
   15766:	2202      	movs	r2, #2
   15768:	f88d 2004 	strb.w	r2, [sp, #4]
   1576c:	2300      	movs	r3, #0
   1576e:	f88d 3005 	strb.w	r3, [sp, #5]
   15772:	f88d 3006 	strb.w	r3, [sp, #6]
   15776:	f88d 3007 	strb.w	r3, [sp, #7]
   1577a:	9901      	ldr	r1, [sp, #4]
   1577c:	9106      	str	r1, [sp, #24]
   1577e:	4619      	mov	r1, r3
   15780:	f363 0100 	bfi	r1, r3, #0, #1
   15784:	f363 0141 	bfi	r1, r3, #1, #1
   15788:	f363 0182 	bfi	r1, r3, #2, #1
   1578c:	f363 01c5 	bfi	r1, r3, #3, #3
   15790:	f362 1188 	bfi	r1, r2, #6, #3
   15794:	2208      	movs	r2, #8
   15796:	f362 2152 	bfi	r1, r2, #9, #10
   1579a:	f363 41de 	bfi	r1, r3, #19, #12
   1579e:	f363 71df 	bfi	r1, r3, #31, #1
   157a2:	aa06      	add	r2, sp, #24
   157a4:	4810      	ldr	r0, [pc, #64]	; (157e8 <mbox_nrf_send+0x90>)
   157a6:	f003 fdde 	bl	19366 <z_impl_z_log_msg_static_create>
	const struct mbox_nrf_conf *conf = dev->config;
   157aa:	686b      	ldr	r3, [r5, #4]
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   157ac:	2c0f      	cmp	r4, #15
   157ae:	d806      	bhi.n	157be <mbox_nrf_send+0x66>
   157b0:	685b      	ldr	r3, [r3, #4]
   157b2:	40e3      	lsrs	r3, r4
   157b4:	f013 0f01 	tst.w	r3, #1
   157b8:	d10f      	bne.n	157da <mbox_nrf_send+0x82>
   157ba:	2300      	movs	r3, #0
   157bc:	e000      	b.n	157c0 <mbox_nrf_send+0x68>
   157be:	2300      	movs	r3, #0
	if (!is_tx_channel_valid(dev, channel)) {
   157c0:	b16b      	cbz	r3, 157de <mbox_nrf_send+0x86>
	nrfx_ipc_signal(channel);
   157c2:	b2e1      	uxtb	r1, r4
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   157c4:	0089      	lsls	r1, r1, #2
   157c6:	b2c9      	uxtb	r1, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   157c8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   157cc:	f501 3128 	add.w	r1, r1, #172032	; 0x2a000
   157d0:	2301      	movs	r3, #1
   157d2:	600b      	str	r3, [r1, #0]
	return 0;
   157d4:	2000      	movs	r0, #0
}
   157d6:	b009      	add	sp, #36	; 0x24
   157d8:	bd30      	pop	{r4, r5, pc}
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   157da:	2301      	movs	r3, #1
   157dc:	e7f0      	b.n	157c0 <mbox_nrf_send+0x68>
		return -EINVAL;
   157de:	f06f 0015 	mvn.w	r0, #21
   157e2:	e7f8      	b.n	157d6 <mbox_nrf_send+0x7e>
   157e4:	0001bc88 	.word	0x0001bc88
   157e8:	0001afa8 	.word	0x0001afa8

000157ec <mbox_dispatcher>:
{
   157ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   157ee:	b08f      	sub	sp, #60	; 0x3c
   157f0:	4604      	mov	r4, r0
   157f2:	460d      	mov	r5, r1
	const struct device *dev = data->dev;
   157f4:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	const struct mbox_nrf_conf *conf = dev->config;
   157f8:	6873      	ldr	r3, [r6, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   157fa:	280f      	cmp	r0, #15
   157fc:	d806      	bhi.n	1580c <mbox_dispatcher+0x20>
   157fe:	681b      	ldr	r3, [r3, #0]
   15800:	40c3      	lsrs	r3, r0
   15802:	f013 0f01 	tst.w	r3, #1
   15806:	d116      	bne.n	15836 <mbox_dispatcher+0x4a>
   15808:	2300      	movs	r3, #0
   1580a:	e000      	b.n	1580e <mbox_dispatcher+0x22>
   1580c:	2300      	movs	r3, #0
	if (!is_rx_channel_valid(dev, channel)) {
   1580e:	b1a3      	cbz	r3, 1583a <mbox_dispatcher+0x4e>
	if (!(data->enabled_mask & BIT(channel))) {
   15810:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   15814:	40e3      	lsrs	r3, r4
   15816:	f013 0f01 	tst.w	r3, #1
   1581a:	d033      	beq.n	15884 <mbox_dispatcher+0x98>
	if (data->cb[channel] != NULL) {
   1581c:	f855 7024 	ldr.w	r7, [r5, r4, lsl #2]
   15820:	b13f      	cbz	r7, 15832 <mbox_dispatcher+0x46>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   15822:	f104 0210 	add.w	r2, r4, #16
   15826:	2300      	movs	r3, #0
   15828:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   1582c:	4621      	mov	r1, r4
   1582e:	4630      	mov	r0, r6
   15830:	47b8      	blx	r7
}
   15832:	b00f      	add	sp, #60	; 0x3c
   15834:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   15836:	2301      	movs	r3, #1
   15838:	e7e9      	b.n	1580e <mbox_dispatcher+0x22>
		LOG_WRN("RX event on illegal channel");
   1583a:	4b25      	ldr	r3, [pc, #148]	; (158d0 <mbox_dispatcher+0xe4>)
   1583c:	9307      	str	r3, [sp, #28]
   1583e:	2202      	movs	r2, #2
   15840:	f88d 2004 	strb.w	r2, [sp, #4]
   15844:	2300      	movs	r3, #0
   15846:	f88d 3005 	strb.w	r3, [sp, #5]
   1584a:	f88d 3006 	strb.w	r3, [sp, #6]
   1584e:	f88d 3007 	strb.w	r3, [sp, #7]
   15852:	9901      	ldr	r1, [sp, #4]
   15854:	9106      	str	r1, [sp, #24]
   15856:	4619      	mov	r1, r3
   15858:	f363 0100 	bfi	r1, r3, #0, #1
   1585c:	f363 0141 	bfi	r1, r3, #1, #1
   15860:	f363 0182 	bfi	r1, r3, #2, #1
   15864:	f363 01c5 	bfi	r1, r3, #3, #3
   15868:	f362 1188 	bfi	r1, r2, #6, #3
   1586c:	2208      	movs	r2, #8
   1586e:	f362 2152 	bfi	r1, r2, #9, #10
   15872:	f363 41de 	bfi	r1, r3, #19, #12
   15876:	f363 71df 	bfi	r1, r3, #31, #1
   1587a:	aa06      	add	r2, sp, #24
   1587c:	4815      	ldr	r0, [pc, #84]	; (158d4 <mbox_dispatcher+0xe8>)
   1587e:	f003 fd72 	bl	19366 <z_impl_z_log_msg_static_create>
   15882:	e7c5      	b.n	15810 <mbox_dispatcher+0x24>
		LOG_WRN("RX event on disabled channel");
   15884:	4b14      	ldr	r3, [pc, #80]	; (158d8 <mbox_dispatcher+0xec>)
   15886:	930d      	str	r3, [sp, #52]	; 0x34
   15888:	2202      	movs	r2, #2
   1588a:	f88d 2004 	strb.w	r2, [sp, #4]
   1588e:	2300      	movs	r3, #0
   15890:	f88d 3005 	strb.w	r3, [sp, #5]
   15894:	f88d 3006 	strb.w	r3, [sp, #6]
   15898:	f88d 3007 	strb.w	r3, [sp, #7]
   1589c:	9901      	ldr	r1, [sp, #4]
   1589e:	910c      	str	r1, [sp, #48]	; 0x30
   158a0:	4619      	mov	r1, r3
   158a2:	f363 0100 	bfi	r1, r3, #0, #1
   158a6:	f363 0141 	bfi	r1, r3, #1, #1
   158aa:	f363 0182 	bfi	r1, r3, #2, #1
   158ae:	f363 01c5 	bfi	r1, r3, #3, #3
   158b2:	f362 1188 	bfi	r1, r2, #6, #3
   158b6:	2208      	movs	r2, #8
   158b8:	f362 2152 	bfi	r1, r2, #9, #10
   158bc:	f363 41de 	bfi	r1, r3, #19, #12
   158c0:	f363 71df 	bfi	r1, r3, #31, #1
   158c4:	aa0c      	add	r2, sp, #48	; 0x30
   158c6:	4803      	ldr	r0, [pc, #12]	; (158d4 <mbox_dispatcher+0xe8>)
   158c8:	f003 fd4d 	bl	19366 <z_impl_z_log_msg_static_create>
   158cc:	e7a6      	b.n	1581c <mbox_dispatcher+0x30>
   158ce:	bf00      	nop
   158d0:	0001bca4 	.word	0x0001bca4
   158d4:	0001afa8 	.word	0x0001afa8
   158d8:	0001bcc0 	.word	0x0001bcc0

000158dc <enable_dt_channels>:

static void enable_dt_channels(const struct device *dev)
{
   158dc:	b510      	push	{r4, lr}
   158de:	b0ae      	sub	sp, #184	; 0xb8
	const struct mbox_nrf_conf *conf = dev->config;
   158e0:	6844      	ldr	r4, [r0, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   158e2:	2284      	movs	r2, #132	; 0x84
   158e4:	2100      	movs	r1, #0
   158e6:	a801      	add	r0, sp, #4
   158e8:	f003 ff4f 	bl	1978a <memset>

	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   158ec:	6863      	ldr	r3, [r4, #4]
   158ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   158f2:	d206      	bcs.n	15902 <enable_dt_channels+0x26>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
	}

	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   158f4:	6823      	ldr	r3, [r4, #0]
   158f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   158fa:	d227      	bcs.n	1594c <enable_dt_channels+0x70>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
	}

	/* Enable the interrupts on .set_enabled() only */
	ch_config.receive_events_enabled = 0;
   158fc:	2300      	movs	r3, #0
   158fe:	9321      	str	r3, [sp, #132]	; 0x84

	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   15900:	e04a      	b.n	15998 <enable_dt_channels+0xbc>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   15902:	4b36      	ldr	r3, [pc, #216]	; (159dc <enable_dt_channels+0x100>)
   15904:	9327      	str	r3, [sp, #156]	; 0x9c
   15906:	2202      	movs	r2, #2
   15908:	f88d 2000 	strb.w	r2, [sp]
   1590c:	2300      	movs	r3, #0
   1590e:	f88d 3001 	strb.w	r3, [sp, #1]
   15912:	f88d 3002 	strb.w	r3, [sp, #2]
   15916:	f88d 3003 	strb.w	r3, [sp, #3]
   1591a:	9900      	ldr	r1, [sp, #0]
   1591c:	9126      	str	r1, [sp, #152]	; 0x98
   1591e:	4619      	mov	r1, r3
   15920:	f363 0100 	bfi	r1, r3, #0, #1
   15924:	f363 0141 	bfi	r1, r3, #1, #1
   15928:	f363 0182 	bfi	r1, r3, #2, #1
   1592c:	f363 01c5 	bfi	r1, r3, #3, #3
   15930:	f362 1188 	bfi	r1, r2, #6, #3
   15934:	2208      	movs	r2, #8
   15936:	f362 2152 	bfi	r1, r2, #9, #10
   1593a:	f363 41de 	bfi	r1, r3, #19, #12
   1593e:	f363 71df 	bfi	r1, r3, #31, #1
   15942:	aa26      	add	r2, sp, #152	; 0x98
   15944:	4826      	ldr	r0, [pc, #152]	; (159e0 <enable_dt_channels+0x104>)
   15946:	f003 fd0e 	bl	19366 <z_impl_z_log_msg_static_create>
   1594a:	e7d3      	b.n	158f4 <enable_dt_channels+0x18>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   1594c:	4b25      	ldr	r3, [pc, #148]	; (159e4 <enable_dt_channels+0x108>)
   1594e:	932d      	str	r3, [sp, #180]	; 0xb4
   15950:	2202      	movs	r2, #2
   15952:	f88d 2000 	strb.w	r2, [sp]
   15956:	2300      	movs	r3, #0
   15958:	f88d 3001 	strb.w	r3, [sp, #1]
   1595c:	f88d 3002 	strb.w	r3, [sp, #2]
   15960:	f88d 3003 	strb.w	r3, [sp, #3]
   15964:	9900      	ldr	r1, [sp, #0]
   15966:	912c      	str	r1, [sp, #176]	; 0xb0
   15968:	4619      	mov	r1, r3
   1596a:	f363 0100 	bfi	r1, r3, #0, #1
   1596e:	f363 0141 	bfi	r1, r3, #1, #1
   15972:	f363 0182 	bfi	r1, r3, #2, #1
   15976:	f363 01c5 	bfi	r1, r3, #3, #3
   1597a:	f362 1188 	bfi	r1, r2, #6, #3
   1597e:	2208      	movs	r2, #8
   15980:	f362 2152 	bfi	r1, r2, #9, #10
   15984:	f363 41de 	bfi	r1, r3, #19, #12
   15988:	f363 71df 	bfi	r1, r3, #31, #1
   1598c:	aa2c      	add	r2, sp, #176	; 0xb0
   1598e:	4814      	ldr	r0, [pc, #80]	; (159e0 <enable_dt_channels+0x104>)
   15990:	f003 fce9 	bl	19366 <z_impl_z_log_msg_static_create>
   15994:	e7b2      	b.n	158fc <enable_dt_channels+0x20>
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   15996:	3301      	adds	r3, #1
   15998:	2b0f      	cmp	r3, #15
   1599a:	d81a      	bhi.n	159d2 <enable_dt_channels+0xf6>
		if (conf->tx_mask & BIT(ch)) {
   1599c:	6862      	ldr	r2, [r4, #4]
   1599e:	40da      	lsrs	r2, r3
   159a0:	f012 0f01 	tst.w	r2, #1
   159a4:	d006      	beq.n	159b4 <enable_dt_channels+0xd8>
			ch_config.send_task_config[ch] = BIT(ch);
   159a6:	2201      	movs	r2, #1
   159a8:	409a      	lsls	r2, r3
   159aa:	a92e      	add	r1, sp, #184	; 0xb8
   159ac:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   159b0:	f841 2cb4 	str.w	r2, [r1, #-180]
		}

		if (conf->rx_mask & BIT(ch)) {
   159b4:	6822      	ldr	r2, [r4, #0]
   159b6:	40da      	lsrs	r2, r3
   159b8:	f012 0f01 	tst.w	r2, #1
   159bc:	d0eb      	beq.n	15996 <enable_dt_channels+0xba>
			ch_config.receive_event_config[ch] = BIT(ch);
   159be:	2101      	movs	r1, #1
   159c0:	4099      	lsls	r1, r3
   159c2:	f103 0210 	add.w	r2, r3, #16
   159c6:	a82e      	add	r0, sp, #184	; 0xb8
   159c8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   159cc:	f842 1cb4 	str.w	r1, [r2, #-180]
   159d0:	e7e1      	b.n	15996 <enable_dt_channels+0xba>
		}
	}

	nrfx_ipc_config_load(&ch_config);
   159d2:	a801      	add	r0, sp, #4
   159d4:	f000 fefe 	bl	167d4 <nrfx_ipc_config_load>
}
   159d8:	b02e      	add	sp, #184	; 0xb8
   159da:	bd10      	pop	{r4, pc}
   159dc:	0001bce0 	.word	0x0001bce0
   159e0:	0001afa8 	.word	0x0001afa8
   159e4:	0001bd0c 	.word	0x0001bd0c

000159e8 <mbox_nrf_init>:

static int mbox_nrf_init(const struct device *dev)
{
   159e8:	b510      	push	{r4, lr}
   159ea:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   159ec:	6902      	ldr	r2, [r0, #16]

	data->dev = dev;
   159ee:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   159f2:	4907      	ldr	r1, [pc, #28]	; (15a10 <mbox_nrf_init+0x28>)
   159f4:	2000      	movs	r0, #0
   159f6:	f000 fed5 	bl	167a4 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   159fa:	2200      	movs	r2, #0
   159fc:	2101      	movs	r1, #1
   159fe:	202a      	movs	r0, #42	; 0x2a
   15a00:	f003 fdbc 	bl	1957c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   15a04:	4620      	mov	r0, r4
   15a06:	f7ff ff69 	bl	158dc <enable_dt_channels>

	return 0;
}
   15a0a:	2000      	movs	r0, #0
   15a0c:	bd10      	pop	{r4, pc}
   15a0e:	bf00      	nop
   15a10:	000157ed 	.word	0x000157ed

00015a14 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   15a14:	b510      	push	{r4, lr}
   15a16:	b088      	sub	sp, #32
	z_impl_log_panic();
   15a18:	f7fb fff4 	bl	11a04 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   15a1c:	4b14      	ldr	r3, [pc, #80]	; (15a70 <k_sys_fatal_error_handler+0x5c>)
   15a1e:	9307      	str	r3, [sp, #28]
   15a20:	2302      	movs	r3, #2
   15a22:	f88d 3004 	strb.w	r3, [sp, #4]
   15a26:	2400      	movs	r4, #0
   15a28:	f88d 4005 	strb.w	r4, [sp, #5]
   15a2c:	f88d 4006 	strb.w	r4, [sp, #6]
   15a30:	f88d 4007 	strb.w	r4, [sp, #7]
   15a34:	9b01      	ldr	r3, [sp, #4]
   15a36:	9306      	str	r3, [sp, #24]
   15a38:	4621      	mov	r1, r4
   15a3a:	f364 0100 	bfi	r1, r4, #0, #1
   15a3e:	f364 0141 	bfi	r1, r4, #1, #1
   15a42:	f364 0182 	bfi	r1, r4, #2, #1
   15a46:	f364 01c5 	bfi	r1, r4, #3, #3
   15a4a:	2301      	movs	r3, #1
   15a4c:	f363 1188 	bfi	r1, r3, #6, #3
   15a50:	2308      	movs	r3, #8
   15a52:	f363 2152 	bfi	r1, r3, #9, #10
   15a56:	f364 41de 	bfi	r1, r4, #19, #12
   15a5a:	f364 71df 	bfi	r1, r4, #31, #1
   15a5e:	4623      	mov	r3, r4
   15a60:	aa06      	add	r2, sp, #24
   15a62:	4804      	ldr	r0, [pc, #16]	; (15a74 <k_sys_fatal_error_handler+0x60>)
   15a64:	f003 fc7f 	bl	19366 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   15a68:	4620      	mov	r0, r4
   15a6a:	f003 fdc7 	bl	195fc <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   15a6e:	bf00      	nop
   15a70:	0001bd68 	.word	0x0001bd68
   15a74:	0001af80 	.word	0x0001af80

00015a78 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   15a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15a7c:	b0a2      	sub	sp, #136	; 0x88
   15a7e:	4604      	mov	r4, r0
   15a80:	4688      	mov	r8, r1
   15a82:	4615      	mov	r5, r2
   15a84:	461e      	mov	r6, r3
   15a86:	4b11      	ldr	r3, [pc, #68]	; (15acc <tfm_ns_interface_dispatch+0x54>)
   15a88:	781f      	ldrb	r7, [r3, #0]
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   15a8a:	b13f      	cbz	r7, 15a9c <tfm_ns_interface_dispatch+0x24>
	return z_impl_k_mutex_lock(mutex, timeout);
   15a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15a94:	480e      	ldr	r0, [pc, #56]	; (15ad0 <tfm_ns_interface_dispatch+0x58>)
   15a96:	f001 fd17 	bl	174c8 <z_impl_k_mutex_lock>
		/* TF-M request protected by NS lock */
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   15a9a:	b980      	cbnz	r0, 15abe <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   15a9c:	4668      	mov	r0, sp
   15a9e:	f003 fdab 	bl	195f8 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   15aa2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   15aa4:	4632      	mov	r2, r6
   15aa6:	4629      	mov	r1, r5
   15aa8:	4640      	mov	r0, r8
   15aaa:	47a0      	blx	r4
   15aac:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   15aae:	4668      	mov	r0, sp
   15ab0:	f003 fda3 	bl	195fa <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   15ab4:	b92f      	cbnz	r7, 15ac2 <tfm_ns_interface_dispatch+0x4a>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   15ab6:	4620      	mov	r0, r4
   15ab8:	b022      	add	sp, #136	; 0x88
   15aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return (int32_t)TFM_ERROR_GENERIC;
   15abe:	241f      	movs	r4, #31
   15ac0:	e7f9      	b.n	15ab6 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   15ac2:	4803      	ldr	r0, [pc, #12]	; (15ad0 <tfm_ns_interface_dispatch+0x58>)
   15ac4:	f001 fd84 	bl	175d0 <z_impl_k_mutex_unlock>
   15ac8:	e7f5      	b.n	15ab6 <tfm_ns_interface_dispatch+0x3e>
   15aca:	bf00      	nop
   15acc:	20008d3a 	.word	0x20008d3a
   15ad0:	2000817c 	.word	0x2000817c

00015ad4 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   15ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
   15ad6:	b095      	sub	sp, #84	; 0x54
   15ad8:	4605      	mov	r5, r0
   15ada:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   15adc:	af07      	add	r7, sp, #28
   15ade:	2634      	movs	r6, #52	; 0x34
   15ae0:	4632      	mov	r2, r6
   15ae2:	2100      	movs	r1, #0
   15ae4:	4638      	mov	r0, r7
   15ae6:	f003 fe50 	bl	1978a <memset>
   15aea:	233f      	movs	r3, #63	; 0x3f
   15aec:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   15aee:	9705      	str	r7, [sp, #20]
   15af0:	9606      	str	r6, [sp, #24]
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   15af2:	9503      	str	r5, [sp, #12]
   15af4:	9404      	str	r4, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   15af6:	b914      	cbnz	r4, 15afe <psa_generate_random+0x2a>
        return PSA_SUCCESS;
   15af8:	2000      	movs	r0, #0

    status = API_DISPATCH(tfm_crypto_generate_random,
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   15afa:	b015      	add	sp, #84	; 0x54
   15afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = API_DISPATCH(tfm_crypto_generate_random,
   15afe:	2301      	movs	r3, #1
   15b00:	9301      	str	r3, [sp, #4]
   15b02:	aa03      	add	r2, sp, #12
   15b04:	9200      	str	r2, [sp, #0]
   15b06:	aa05      	add	r2, sp, #20
   15b08:	2100      	movs	r1, #0
   15b0a:	4802      	ldr	r0, [pc, #8]	; (15b14 <psa_generate_random+0x40>)
   15b0c:	f000 f804 	bl	15b18 <psa_call>
    return status;
   15b10:	e7f3      	b.n	15afa <psa_generate_random+0x26>
   15b12:	bf00      	nop
   15b14:	40000100 	.word	0x40000100

00015b18 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   15b18:	b510      	push	{r4, lr}
   15b1a:	b082      	sub	sp, #8
   15b1c:	9c05      	ldr	r4, [sp, #20]
    if ((type > INT16_MAX) ||
   15b1e:	f501 4c00 	add.w	ip, r1, #32768	; 0x8000
   15b22:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   15b26:	d214      	bcs.n	15b52 <psa_call+0x3a>
        (type < INT16_MIN) ||
   15b28:	2bff      	cmp	r3, #255	; 0xff
   15b2a:	d815      	bhi.n	15b58 <psa_call+0x40>
        (in_len > UINT8_MAX) ||
   15b2c:	2cff      	cmp	r4, #255	; 0xff
   15b2e:	d816      	bhi.n	15b5e <psa_call+0x46>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   15b30:	021b      	lsls	r3, r3, #8
   15b32:	fa1f fc83 	uxth.w	ip, r3
   15b36:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   15b3a:	b2e4      	uxtb	r4, r4
    return tfm_ns_interface_dispatch(
   15b3c:	9b04      	ldr	r3, [sp, #16]
   15b3e:	9300      	str	r3, [sp, #0]
   15b40:	4613      	mov	r3, r2
   15b42:	ea41 0204 	orr.w	r2, r1, r4
   15b46:	4601      	mov	r1, r0
   15b48:	4806      	ldr	r0, [pc, #24]	; (15b64 <psa_call+0x4c>)
   15b4a:	f7ff ff95 	bl	15a78 <tfm_ns_interface_dispatch>
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   15b4e:	b002      	add	sp, #8
   15b50:	bd10      	pop	{r4, pc}
        return PSA_ERROR_PROGRAMMER_ERROR;
   15b52:	f06f 0080 	mvn.w	r0, #128	; 0x80
   15b56:	e7fa      	b.n	15b4e <psa_call+0x36>
   15b58:	f06f 0080 	mvn.w	r0, #128	; 0x80
   15b5c:	e7f7      	b.n	15b4e <psa_call+0x36>
   15b5e:	f06f 0080 	mvn.w	r0, #128	; 0x80
   15b62:	e7f4      	b.n	15b4e <psa_call+0x36>
   15b64:	0000bc21 	.word	0x0000bc21

00015b68 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   15b68:	4b04      	ldr	r3, [pc, #16]	; (15b7c <SystemCoreClockUpdate+0x14>)
   15b6a:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   15b6e:	f002 0203 	and.w	r2, r2, #3
   15b72:	4b03      	ldr	r3, [pc, #12]	; (15b80 <SystemCoreClockUpdate+0x18>)
   15b74:	40d3      	lsrs	r3, r2
   15b76:	4a03      	ldr	r2, [pc, #12]	; (15b84 <SystemCoreClockUpdate+0x1c>)
   15b78:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   15b7a:	4770      	bx	lr
   15b7c:	40005000 	.word	0x40005000
   15b80:	07a12000 	.word	0x07a12000
   15b84:	200080a4 	.word	0x200080a4

00015b88 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   15b88:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   15b8a:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   15b8c:	fab4 f384 	clz	r3, r4
   15b90:	f1c3 031f 	rsb	r3, r3, #31
   15b94:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   15b98:	2b00      	cmp	r3, #0
   15b9a:	db12      	blt.n	15bc2 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   15b9c:	2201      	movs	r2, #1
   15b9e:	fa02 f303 	lsl.w	r3, r2, r3
   15ba2:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15ba6:	e8d0 2fef 	ldaex	r2, [r0]
   15baa:	42a2      	cmp	r2, r4
   15bac:	d104      	bne.n	15bb8 <nrfx_flag32_alloc+0x30>
   15bae:	e8c0 3fee 	stlex	lr, r3, [r0]
   15bb2:	f1be 0f00 	cmp.w	lr, #0
   15bb6:	d1f6      	bne.n	15ba6 <nrfx_flag32_alloc+0x1e>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   15bb8:	d1e7      	bne.n	15b8a <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   15bba:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   15bbe:	4802      	ldr	r0, [pc, #8]	; (15bc8 <nrfx_flag32_alloc+0x40>)
}
   15bc0:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   15bc2:	4802      	ldr	r0, [pc, #8]	; (15bcc <nrfx_flag32_alloc+0x44>)
   15bc4:	e7fc      	b.n	15bc0 <nrfx_flag32_alloc+0x38>
   15bc6:	bf00      	nop
   15bc8:	0bad0000 	.word	0x0bad0000
   15bcc:	0bad0002 	.word	0x0bad0002

00015bd0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   15bd0:	6803      	ldr	r3, [r0, #0]
   15bd2:	40cb      	lsrs	r3, r1
   15bd4:	f013 0f01 	tst.w	r3, #1
   15bd8:	d111      	bne.n	15bfe <nrfx_flag32_free+0x2e>
{
   15bda:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   15bdc:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   15bde:	2301      	movs	r3, #1
   15be0:	408b      	lsls	r3, r1
   15be2:	4313      	orrs	r3, r2
   15be4:	e8d0 cfef 	ldaex	ip, [r0]
   15be8:	4594      	cmp	ip, r2
   15bea:	d104      	bne.n	15bf6 <nrfx_flag32_free+0x26>
   15bec:	e8c0 3fee 	stlex	lr, r3, [r0]
   15bf0:	f1be 0f00 	cmp.w	lr, #0
   15bf4:	d1f6      	bne.n	15be4 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   15bf6:	d1f1      	bne.n	15bdc <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   15bf8:	4802      	ldr	r0, [pc, #8]	; (15c04 <nrfx_flag32_free+0x34>)
}
   15bfa:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   15bfe:	4802      	ldr	r0, [pc, #8]	; (15c08 <nrfx_flag32_free+0x38>)
}
   15c00:	4770      	bx	lr
   15c02:	bf00      	nop
   15c04:	0bad0000 	.word	0x0bad0000
   15c08:	0bad0004 	.word	0x0bad0004

00015c0c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   15c0c:	b570      	push	{r4, r5, r6, lr}
   15c0e:	b082      	sub	sp, #8
   15c10:	4606      	mov	r6, r0
    switch (domain)
   15c12:	2803      	cmp	r0, #3
   15c14:	d850      	bhi.n	15cb8 <clock_stop+0xac>
   15c16:	e8df f000 	tbb	[pc, r0]
   15c1a:	1602      	.short	0x1602
   15c1c:	2e21      	.short	0x2e21
    p_reg->INTENCLR = mask;
   15c1e:	4b27      	ldr	r3, [pc, #156]	; (15cbc <clock_stop+0xb0>)
   15c20:	2202      	movs	r2, #2
   15c22:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15c26:	2200      	movs	r2, #0
   15c28:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15c2c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15c30:	2201      	movs	r2, #1
   15c32:	60da      	str	r2, [r3, #12]
            NRFX_ASSERT(0);
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   15c34:	2301      	movs	r3, #1
   15c36:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   15c3a:	429e      	cmp	r6, r3
   15c3c:	d028      	beq.n	15c90 <clock_stop+0x84>
   15c3e:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   15c40:	f242 7410 	movw	r4, #10000	; 0x2710
   15c44:	e02c      	b.n	15ca0 <clock_stop+0x94>
    p_reg->INTENCLR = mask;
   15c46:	4b1d      	ldr	r3, [pc, #116]	; (15cbc <clock_stop+0xb0>)
   15c48:	2201      	movs	r2, #1
   15c4a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15c4e:	2100      	movs	r1, #0
   15c50:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   15c54:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15c58:	605a      	str	r2, [r3, #4]
}
   15c5a:	e7eb      	b.n	15c34 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
   15c5c:	4b17      	ldr	r3, [pc, #92]	; (15cbc <clock_stop+0xb0>)
   15c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
   15c62:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15c66:	2200      	movs	r2, #0
   15c68:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15c6c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15c70:	2201      	movs	r2, #1
   15c72:	625a      	str	r2, [r3, #36]	; 0x24
}
   15c74:	e7de      	b.n	15c34 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
   15c76:	4b11      	ldr	r3, [pc, #68]	; (15cbc <clock_stop+0xb0>)
   15c78:	f44f 7280 	mov.w	r2, #256	; 0x100
   15c7c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15c80:	2200      	movs	r2, #0
   15c82:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15c86:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15c8a:	2201      	movs	r2, #1
   15c8c:	61da      	str	r2, [r3, #28]
}
   15c8e:	e7d1      	b.n	15c34 <clock_stop+0x28>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   15c90:	f10d 0507 	add.w	r5, sp, #7
   15c94:	e7d4      	b.n	15c40 <clock_stop+0x34>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   15c96:	2001      	movs	r0, #1
   15c98:	f004 fbd9 	bl	1a44e <nrfx_busy_wait>
   15c9c:	3c01      	subs	r4, #1
   15c9e:	d00b      	beq.n	15cb8 <clock_stop+0xac>
   15ca0:	462a      	mov	r2, r5
   15ca2:	4631      	mov	r1, r6
   15ca4:	4805      	ldr	r0, [pc, #20]	; (15cbc <clock_stop+0xb0>)
   15ca6:	f004 fbd6 	bl	1a456 <nrf_clock_is_running>
   15caa:	b128      	cbz	r0, 15cb8 <clock_stop+0xac>
   15cac:	2d00      	cmp	r5, #0
   15cae:	d0f2      	beq.n	15c96 <clock_stop+0x8a>
   15cb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15cb4:	2b01      	cmp	r3, #1
   15cb6:	d0ee      	beq.n	15c96 <clock_stop+0x8a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   15cb8:	b002      	add	sp, #8
   15cba:	bd70      	pop	{r4, r5, r6, pc}
   15cbc:	40005000 	.word	0x40005000

00015cc0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   15cc0:	4b05      	ldr	r3, [pc, #20]	; (15cd8 <nrfx_clock_init+0x18>)
   15cc2:	791b      	ldrb	r3, [r3, #4]
   15cc4:	b92b      	cbnz	r3, 15cd2 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
   15cc6:	4b04      	ldr	r3, [pc, #16]	; (15cd8 <nrfx_clock_init+0x18>)
   15cc8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   15cca:	2201      	movs	r2, #1
   15ccc:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   15cce:	4803      	ldr	r0, [pc, #12]	; (15cdc <nrfx_clock_init+0x1c>)
   15cd0:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   15cd2:	4803      	ldr	r0, [pc, #12]	; (15ce0 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   15cd4:	4770      	bx	lr
   15cd6:	bf00      	nop
   15cd8:	20008cc4 	.word	0x20008cc4
   15cdc:	0bad0000 	.word	0x0bad0000
   15ce0:	0bad000c 	.word	0x0bad000c

00015ce4 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   15ce4:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    nrfx_power_clock_irq_init();
   15ce6:	f004 fbf2 	bl	1a4ce <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
   15cea:	f004 fbee 	bl	1a4ca <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
   15cee:	4b04      	ldr	r3, [pc, #16]	; (15d00 <nrfx_clock_enable+0x1c>)
   15cf0:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   15cf4:	2201      	movs	r2, #1
   15cf6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   15cfa:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   15cfe:	bd08      	pop	{r3, pc}
   15d00:	40005000 	.word	0x40005000

00015d04 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   15d04:	2803      	cmp	r0, #3
   15d06:	d869      	bhi.n	15ddc <nrfx_clock_start+0xd8>
   15d08:	e8df f000 	tbb	[pc, r0]
   15d0c:	5b4e4302 	.word	0x5b4e4302
{
   15d10:	b500      	push	{lr}
   15d12:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15d14:	4a32      	ldr	r2, [pc, #200]	; (15de0 <nrfx_clock_start+0xdc>)
   15d16:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   15d1a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   15d1e:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15d22:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   15d26:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   15d2a:	d11b      	bne.n	15d64 <nrfx_clock_start+0x60>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   15d2c:	4b2c      	ldr	r3, [pc, #176]	; (15de0 <nrfx_clock_start+0xdc>)
   15d2e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   15d32:	f013 0f01 	tst.w	r3, #1
   15d36:	d11a      	bne.n	15d6e <nrfx_clock_start+0x6a>
                    // LF clock was stopped and modified. Now it will be restarted.
                }
                else
                {
                    // LF clock not active and not started.
                    lfclksrc = clock_initial_lfclksrc_get();
   15d38:	f004 fbc7 	bl	1a4ca <clock_initial_lfclksrc_get>
   15d3c:	f88d 0007 	strb.w	r0, [sp, #7]
                }
                nrf_clock_lf_src_set(NRF_CLOCK, lfclksrc);
   15d40:	f89d 2007 	ldrb.w	r2, [sp, #7]
    p_reg->LFCLKSRC = (uint32_t)(source);
   15d44:	4b26      	ldr	r3, [pc, #152]	; (15de0 <nrfx_clock_start+0xdc>)
   15d46:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15d4a:	2200      	movs	r2, #0
   15d4c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15d50:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   15d54:	2202      	movs	r2, #2
   15d56:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15d5a:	2201      	movs	r2, #1
   15d5c:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   15d5e:	b003      	add	sp, #12
   15d60:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
   15d64:	f10d 0007 	add.w	r0, sp, #7
   15d68:	f004 fbbb 	bl	1a4e2 <clock_lfclksrc_tweak>
   15d6c:	e7e8      	b.n	15d40 <nrfx_clock_start+0x3c>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   15d6e:	4b1c      	ldr	r3, [pc, #112]	; (15de0 <nrfx_clock_start+0xdc>)
   15d70:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   15d74:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
   15d78:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (clock_lfclksrc_tweak(&lfclksrc))
   15d7c:	f10d 0007 	add.w	r0, sp, #7
   15d80:	f004 fbaf 	bl	1a4e2 <clock_lfclksrc_tweak>
   15d84:	2800      	cmp	r0, #0
   15d86:	d0db      	beq.n	15d40 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
   15d88:	4b15      	ldr	r3, [pc, #84]	; (15de0 <nrfx_clock_start+0xdc>)
   15d8a:	2202      	movs	r2, #2
   15d8c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
   15d90:	e7e5      	b.n	15d5e <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15d92:	4b13      	ldr	r3, [pc, #76]	; (15de0 <nrfx_clock_start+0xdc>)
   15d94:	2200      	movs	r2, #0
   15d96:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   15d9a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   15d9e:	2201      	movs	r2, #1
   15da0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15da4:	601a      	str	r2, [r3, #0]
}
   15da6:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15da8:	4b0d      	ldr	r3, [pc, #52]	; (15de0 <nrfx_clock_start+0xdc>)
   15daa:	2200      	movs	r2, #0
   15dac:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15db0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   15db4:	f44f 7200 	mov.w	r2, #512	; 0x200
   15db8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15dbc:	2201      	movs	r2, #1
   15dbe:	621a      	str	r2, [r3, #32]
}
   15dc0:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15dc2:	4b07      	ldr	r3, [pc, #28]	; (15de0 <nrfx_clock_start+0xdc>)
   15dc4:	2200      	movs	r2, #0
   15dc6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15dca:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   15dce:	f44f 7280 	mov.w	r2, #256	; 0x100
   15dd2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15dd6:	2201      	movs	r2, #1
   15dd8:	619a      	str	r2, [r3, #24]
}
   15dda:	4770      	bx	lr
   15ddc:	4770      	bx	lr
   15dde:	bf00      	nop
   15de0:	40005000 	.word	0x40005000

00015de4 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   15de4:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15de6:	4b2b      	ldr	r3, [pc, #172]	; (15e94 <nrfx_power_clock_irq_handler+0xb0>)
   15de8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   15dec:	b15b      	cbz	r3, 15e06 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15dee:	4b29      	ldr	r3, [pc, #164]	; (15e94 <nrfx_power_clock_irq_handler+0xb0>)
   15df0:	2000      	movs	r0, #0
   15df2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   15df6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   15dfa:	2201      	movs	r2, #1
   15dfc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   15e00:	4b25      	ldr	r3, [pc, #148]	; (15e98 <nrfx_power_clock_irq_handler+0xb4>)
   15e02:	681b      	ldr	r3, [r3, #0]
   15e04:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15e06:	4b23      	ldr	r3, [pc, #140]	; (15e94 <nrfx_power_clock_irq_handler+0xb0>)
   15e08:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   15e0c:	b1ab      	cbz	r3, 15e3a <nrfx_power_clock_irq_handler+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e0e:	4b21      	ldr	r3, [pc, #132]	; (15e94 <nrfx_power_clock_irq_handler+0xb0>)
   15e10:	2200      	movs	r2, #0
   15e12:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15e16:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15e1a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
   15e1e:	f002 0203 	and.w	r2, r2, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15e22:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   15e26:	2a01      	cmp	r2, #1
   15e28:	d02c      	beq.n	15e84 <nrfx_power_clock_irq_handler+0xa0>
    p_reg->INTENCLR = mask;
   15e2a:	4b1a      	ldr	r3, [pc, #104]	; (15e94 <nrfx_power_clock_irq_handler+0xb0>)
   15e2c:	2202      	movs	r2, #2
   15e2e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   15e32:	4b19      	ldr	r3, [pc, #100]	; (15e98 <nrfx_power_clock_irq_handler+0xb4>)
   15e34:	681b      	ldr	r3, [r3, #0]
   15e36:	2001      	movs	r0, #1
   15e38:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15e3a:	4b16      	ldr	r3, [pc, #88]	; (15e94 <nrfx_power_clock_irq_handler+0xb0>)
   15e3c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   15e40:	b16b      	cbz	r3, 15e5e <nrfx_power_clock_irq_handler+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e42:	4b14      	ldr	r3, [pc, #80]	; (15e94 <nrfx_power_clock_irq_handler+0xb0>)
   15e44:	2200      	movs	r2, #0
   15e46:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15e4a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   15e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
   15e52:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   15e56:	4b10      	ldr	r3, [pc, #64]	; (15e98 <nrfx_power_clock_irq_handler+0xb4>)
   15e58:	681b      	ldr	r3, [r3, #0]
   15e5a:	2004      	movs	r0, #4
   15e5c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15e5e:	4b0d      	ldr	r3, [pc, #52]	; (15e94 <nrfx_power_clock_irq_handler+0xb0>)
   15e60:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   15e64:	b16b      	cbz	r3, 15e82 <nrfx_power_clock_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e66:	4b0b      	ldr	r3, [pc, #44]	; (15e94 <nrfx_power_clock_irq_handler+0xb0>)
   15e68:	2200      	movs	r2, #0
   15e6a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15e6e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   15e72:	f44f 7200 	mov.w	r2, #512	; 0x200
   15e76:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   15e7a:	4b07      	ldr	r3, [pc, #28]	; (15e98 <nrfx_power_clock_irq_handler+0xb4>)
   15e7c:	681b      	ldr	r3, [r3, #0]
   15e7e:	2005      	movs	r0, #5
   15e80:	4798      	blx	r3
    }
#endif
}
   15e82:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   15e84:	4b03      	ldr	r3, [pc, #12]	; (15e94 <nrfx_power_clock_irq_handler+0xb0>)
   15e86:	2202      	movs	r2, #2
   15e88:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e8c:	2201      	movs	r2, #1
   15e8e:	609a      	str	r2, [r3, #8]
}
   15e90:	e7d3      	b.n	15e3a <nrfx_power_clock_irq_handler+0x56>
   15e92:	bf00      	nop
   15e94:	40005000 	.word	0x40005000
   15e98:	20008cc4 	.word	0x20008cc4

00015e9c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   15e9c:	b508      	push	{r3, lr}
   15e9e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   15ea0:	4801      	ldr	r0, [pc, #4]	; (15ea8 <nrfx_dppi_channel_alloc+0xc>)
   15ea2:	f7ff fe71 	bl	15b88 <nrfx_flag32_alloc>
}
   15ea6:	bd08      	pop	{r3, pc}
   15ea8:	200080a8 	.word	0x200080a8

00015eac <nrfx_dppi_channel_free>:

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
   15eac:	b508      	push	{r3, lr}
   15eae:	4601      	mov	r1, r0
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   15eb0:	2301      	movs	r3, #1
   15eb2:	4083      	lsls	r3, r0
    p_reg->CHENCLR = mask;
   15eb4:	4a03      	ldr	r2, [pc, #12]	; (15ec4 <nrfx_dppi_channel_free+0x18>)
   15eb6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   15eba:	4803      	ldr	r0, [pc, #12]	; (15ec8 <nrfx_dppi_channel_free+0x1c>)
   15ebc:	f7ff fe88 	bl	15bd0 <nrfx_flag32_free>
}
   15ec0:	bd08      	pop	{r3, pc}
   15ec2:	bf00      	nop
   15ec4:	40017000 	.word	0x40017000
   15ec8:	200080a8 	.word	0x200080a8

00015ecc <nrf_gpio_reconfigure>:
{
   15ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
   15ece:	461c      	mov	r4, r3
   15ed0:	9f05      	ldr	r7, [sp, #20]
   15ed2:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
   15ed4:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
   15ed8:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15eda:	2801      	cmp	r0, #1
   15edc:	d034      	beq.n	15f48 <nrf_gpio_reconfigure+0x7c>
        case 0: return NRF_P0;
   15ede:	4d27      	ldr	r5, [pc, #156]	; (15f7c <nrf_gpio_reconfigure+0xb0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   15ee0:	f10c 0380 	add.w	r3, ip, #128	; 0x80
   15ee4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   15ee8:	b381      	cbz	r1, 15f4c <nrf_gpio_reconfigure+0x80>
   15eea:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   15eec:	b382      	cbz	r2, 15f50 <nrf_gpio_reconfigure+0x84>
   15eee:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   15ef2:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   15ef6:	b374      	cbz	r4, 15f56 <nrf_gpio_reconfigure+0x8a>
   15ef8:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   15efc:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   15f00:	b367      	cbz	r7, 15f5c <nrf_gpio_reconfigure+0x90>
   15f02:	f44f 6e70 	mov.w	lr, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   15f06:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   15f0a:	b356      	cbz	r6, 15f62 <nrf_gpio_reconfigure+0x96>
   15f0c:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   15f10:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
   15f14:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   15f18:	b331      	cbz	r1, 15f68 <nrf_gpio_reconfigure+0x9c>
   15f1a:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   15f1c:	b332      	cbz	r2, 15f6c <nrf_gpio_reconfigure+0xa0>
   15f1e:	7812      	ldrb	r2, [r2, #0]
   15f20:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   15f22:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   15f24:	b324      	cbz	r4, 15f70 <nrf_gpio_reconfigure+0xa4>
   15f26:	7822      	ldrb	r2, [r4, #0]
   15f28:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   15f2a:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   15f2c:	b317      	cbz	r7, 15f74 <nrf_gpio_reconfigure+0xa8>
   15f2e:	783a      	ldrb	r2, [r7, #0]
   15f30:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   15f32:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   15f34:	b306      	cbz	r6, 15f78 <nrf_gpio_reconfigure+0xac>
   15f36:	7832      	ldrb	r2, [r6, #0]
   15f38:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   15f3a:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   15f3c:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   15f3e:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
   15f42:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
   15f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
   15f48:	4d0d      	ldr	r5, [pc, #52]	; (15f80 <nrf_gpio_reconfigure+0xb4>)
   15f4a:	e7c9      	b.n	15ee0 <nrf_gpio_reconfigure+0x14>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   15f4c:	2000      	movs	r0, #0
   15f4e:	e7cd      	b.n	15eec <nrf_gpio_reconfigure+0x20>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   15f50:	f04f 0e00 	mov.w	lr, #0
   15f54:	e7cd      	b.n	15ef2 <nrf_gpio_reconfigure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   15f56:	f04f 0e00 	mov.w	lr, #0
   15f5a:	e7cf      	b.n	15efc <nrf_gpio_reconfigure+0x30>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   15f5c:	f04f 0e00 	mov.w	lr, #0
   15f60:	e7d1      	b.n	15f06 <nrf_gpio_reconfigure+0x3a>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   15f62:	f04f 0e00 	mov.w	lr, #0
   15f66:	e7d3      	b.n	15f10 <nrf_gpio_reconfigure+0x44>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   15f68:	2300      	movs	r3, #0
   15f6a:	e7d7      	b.n	15f1c <nrf_gpio_reconfigure+0x50>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   15f6c:	2200      	movs	r2, #0
   15f6e:	e7d8      	b.n	15f22 <nrf_gpio_reconfigure+0x56>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   15f70:	2200      	movs	r2, #0
   15f72:	e7da      	b.n	15f2a <nrf_gpio_reconfigure+0x5e>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   15f74:	2200      	movs	r2, #0
   15f76:	e7dc      	b.n	15f32 <nrf_gpio_reconfigure+0x66>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   15f78:	2200      	movs	r2, #0
   15f7a:	e7de      	b.n	15f3a <nrf_gpio_reconfigure+0x6e>
   15f7c:	40842500 	.word	0x40842500
   15f80:	40842800 	.word	0x40842800

00015f84 <nrf_gpio_cfg_default>:
    *p_pin = pin_number & 0x1F;
   15f84:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   15f88:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15f8a:	2801      	cmp	r0, #1
   15f8c:	d00a      	beq.n	15fa4 <nrf_gpio_cfg_default+0x20>
        case 0: return NRF_P0;
   15f8e:	4906      	ldr	r1, [pc, #24]	; (15fa8 <nrf_gpio_cfg_default+0x24>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   15f90:	3280      	adds	r2, #128	; 0x80
   15f92:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   15f96:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   15f9a:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   15f9e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   15fa2:	4770      	bx	lr
        case 1: return NRF_P1;
   15fa4:	4901      	ldr	r1, [pc, #4]	; (15fac <nrf_gpio_cfg_default+0x28>)
   15fa6:	e7f3      	b.n	15f90 <nrf_gpio_cfg_default+0xc>
   15fa8:	40842500 	.word	0x40842500
   15fac:	40842800 	.word	0x40842800

00015fb0 <nrf_gpio_latches_read_and_clear>:
{
   15fb0:	b500      	push	{lr}
   15fb2:	b083      	sub	sp, #12
   15fb4:	4684      	mov	ip, r0
   15fb6:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   15fb8:	4b0c      	ldr	r3, [pc, #48]	; (15fec <nrf_gpio_latches_read_and_clear+0x3c>)
   15fba:	e893 0003 	ldmia.w	r3, {r0, r1}
   15fbe:	ab02      	add	r3, sp, #8
   15fc0:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   15fc4:	4663      	mov	r3, ip
   15fc6:	e009      	b.n	15fdc <nrf_gpio_latches_read_and_clear+0x2c>
        *p_masks = gpio_regs[i]->LATCH;
   15fc8:	a902      	add	r1, sp, #8
   15fca:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   15fce:	f851 1c08 	ldr.w	r1, [r1, #-8]
   15fd2:	6a08      	ldr	r0, [r1, #32]
   15fd4:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
   15fd8:	6208      	str	r0, [r1, #32]
    for (i = start_port; i < (start_port + length); i++)
   15fda:	3301      	adds	r3, #1
   15fdc:	eb0c 000e 	add.w	r0, ip, lr
   15fe0:	4298      	cmp	r0, r3
   15fe2:	d8f1      	bhi.n	15fc8 <nrf_gpio_latches_read_and_clear+0x18>
}
   15fe4:	b003      	add	sp, #12
   15fe6:	f85d fb04 	ldr.w	pc, [sp], #4
   15fea:	bf00      	nop
   15fec:	0001b040 	.word	0x0001b040

00015ff0 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   15ff0:	3008      	adds	r0, #8
   15ff2:	4b03      	ldr	r3, [pc, #12]	; (16000 <pin_in_use+0x10>)
   15ff4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   15ff8:	f000 0001 	and.w	r0, r0, #1
   15ffc:	4770      	bx	lr
   15ffe:	bf00      	nop
   16000:	200080ac 	.word	0x200080ac

00016004 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   16004:	3008      	adds	r0, #8
   16006:	4b03      	ldr	r3, [pc, #12]	; (16014 <pin_in_use_by_te+0x10>)
   16008:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1600c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   16010:	4770      	bx	lr
   16012:	bf00      	nop
   16014:	200080ac 	.word	0x200080ac

00016018 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   16018:	3008      	adds	r0, #8
   1601a:	4b04      	ldr	r3, [pc, #16]	; (1602c <pin_has_trigger+0x14>)
   1601c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   16020:	f010 001c 	ands.w	r0, r0, #28
   16024:	bf18      	it	ne
   16026:	2001      	movne	r0, #1
   16028:	4770      	bx	lr
   1602a:	bf00      	nop
   1602c:	200080ac 	.word	0x200080ac

00016030 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   16030:	3008      	adds	r0, #8
   16032:	4b03      	ldr	r3, [pc, #12]	; (16040 <pin_is_output+0x10>)
   16034:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   16038:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1603c:	4770      	bx	lr
   1603e:	bf00      	nop
   16040:	200080ac 	.word	0x200080ac

00016044 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   16044:	3008      	adds	r0, #8
   16046:	4b02      	ldr	r3, [pc, #8]	; (16050 <pin_te_get+0xc>)
   16048:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1604c:	0b40      	lsrs	r0, r0, #13
   1604e:	4770      	bx	lr
   16050:	200080ac 	.word	0x200080ac

00016054 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   16054:	2200      	movs	r2, #0
   16056:	e004      	b.n	16062 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   16058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1605c:	4283      	cmp	r3, r0
   1605e:	d00f      	beq.n	16080 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   16060:	3201      	adds	r2, #1
   16062:	2a2f      	cmp	r2, #47	; 0x2f
   16064:	d80a      	bhi.n	1607c <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   16066:	f102 0308 	add.w	r3, r2, #8
   1606a:	4906      	ldr	r1, [pc, #24]	; (16084 <handler_in_use+0x30>)
   1606c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   16070:	f413 7f80 	tst.w	r3, #256	; 0x100
   16074:	d0f0      	beq.n	16058 <handler_in_use+0x4>
   16076:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1607a:	e7ef      	b.n	1605c <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   1607c:	2000      	movs	r0, #0
   1607e:	4770      	bx	lr
            return true;
   16080:	2001      	movs	r0, #1
}
   16082:	4770      	bx	lr
   16084:	200080ac 	.word	0x200080ac

00016088 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   16088:	2300      	movs	r3, #0
   1608a:	b113      	cbz	r3, 16092 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   1608c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   16090:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   16092:	4a07      	ldr	r2, [pc, #28]	; (160b0 <find_handler+0x28>)
   16094:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   16098:	4282      	cmp	r2, r0
   1609a:	d001      	beq.n	160a0 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   1609c:	3301      	adds	r3, #1
   1609e:	e7f4      	b.n	1608a <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   160a0:	4a03      	ldr	r2, [pc, #12]	; (160b0 <find_handler+0x28>)
   160a2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   160a6:	6852      	ldr	r2, [r2, #4]
   160a8:	428a      	cmp	r2, r1
   160aa:	d1f7      	bne.n	1609c <find_handler+0x14>
            return i;
   160ac:	4618      	mov	r0, r3
   160ae:	4770      	bx	lr
   160b0:	200080ac 	.word	0x200080ac

000160b4 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   160b4:	f100 0208 	add.w	r2, r0, #8
   160b8:	4b0e      	ldr	r3, [pc, #56]	; (160f4 <get_initial_sense+0x40>)
   160ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   160be:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   160c2:	2b04      	cmp	r3, #4
   160c4:	d010      	beq.n	160e8 <get_initial_sense+0x34>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   160c6:	2b05      	cmp	r3, #5
   160c8:	d010      	beq.n	160ec <get_initial_sense+0x38>
    *p_pin = pin_number & 0x1F;
   160ca:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   160ce:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   160d0:	2801      	cmp	r0, #1
   160d2:	d007      	beq.n	160e4 <get_initial_sense+0x30>
        case 0: return NRF_P0;
   160d4:	4b08      	ldr	r3, [pc, #32]	; (160f8 <get_initial_sense+0x44>)
    return p_reg->IN;
   160d6:	691b      	ldr	r3, [r3, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   160d8:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   160da:	f013 0f01 	tst.w	r3, #1
   160de:	d007      	beq.n	160f0 <get_initial_sense+0x3c>
   160e0:	2003      	movs	r0, #3
   160e2:	4770      	bx	lr
        case 1: return NRF_P1;
   160e4:	4b05      	ldr	r3, [pc, #20]	; (160fc <get_initial_sense+0x48>)
   160e6:	e7f6      	b.n	160d6 <get_initial_sense+0x22>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   160e8:	2003      	movs	r0, #3
   160ea:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   160ec:	2002      	movs	r0, #2
   160ee:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   160f0:	2002      	movs	r0, #2
    }

    return sense;
}
   160f2:	4770      	bx	lr
   160f4:	200080ac 	.word	0x200080ac
   160f8:	40842500 	.word	0x40842500
   160fc:	40842800 	.word	0x40842800

00016100 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   16100:	3008      	adds	r0, #8
   16102:	4b06      	ldr	r3, [pc, #24]	; (1611c <channel_handler_get+0x1c>)
   16104:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   16108:	f410 7f80 	tst.w	r0, #256	; 0x100
   1610c:	d004      	beq.n	16118 <channel_handler_get+0x18>
   1610e:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   16112:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   16116:	4770      	bx	lr
        return NULL;
   16118:	2000      	movs	r0, #0
}
   1611a:	4770      	bx	lr
   1611c:	200080ac 	.word	0x200080ac

00016120 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   16120:	b570      	push	{r4, r5, r6, lr}
   16122:	4604      	mov	r4, r0
   16124:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   16126:	f7ff ffeb 	bl	16100 <channel_handler_get>

    if (handler)
   1612a:	b120      	cbz	r0, 16136 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   1612c:	6806      	ldr	r6, [r0, #0]
   1612e:	6842      	ldr	r2, [r0, #4]
   16130:	4629      	mov	r1, r5
   16132:	4620      	mov	r0, r4
   16134:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   16136:	4b04      	ldr	r3, [pc, #16]	; (16148 <call_handler+0x28>)
   16138:	689b      	ldr	r3, [r3, #8]
   1613a:	b123      	cbz	r3, 16146 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1613c:	4a02      	ldr	r2, [pc, #8]	; (16148 <call_handler+0x28>)
   1613e:	68d2      	ldr	r2, [r2, #12]
   16140:	4629      	mov	r1, r5
   16142:	4620      	mov	r0, r4
   16144:	4798      	blx	r3
    }
}
   16146:	bd70      	pop	{r4, r5, r6, pc}
   16148:	200080ac 	.word	0x200080ac

0001614c <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
   1614c:	b570      	push	{r4, r5, r6, lr}
   1614e:	4606      	mov	r6, r0
   16150:	460c      	mov	r4, r1
   16152:	4615      	mov	r5, r2
    if (is_level(trigger))
   16154:	4608      	mov	r0, r1
   16156:	f004 fa3d 	bl	1a5d4 <is_level>
   1615a:	b960      	cbnz	r0, 16176 <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1615c:	2d02      	cmp	r5, #2
   1615e:	d026      	beq.n	161ae <next_sense_cond_call_handler+0x62>
   16160:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
   16162:	4630      	mov	r0, r6
   16164:	f004 fa0e 	bl	1a584 <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   16168:	2c03      	cmp	r4, #3
   1616a:	d024      	beq.n	161b6 <next_sense_cond_call_handler+0x6a>
   1616c:	2d02      	cmp	r5, #2
   1616e:	d020      	beq.n	161b2 <next_sense_cond_call_handler+0x66>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   16170:	2d03      	cmp	r5, #3
   16172:	d025      	beq.n	161c0 <next_sense_cond_call_handler+0x74>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
   16174:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   16176:	4621      	mov	r1, r4
   16178:	4630      	mov	r0, r6
   1617a:	f7ff ffd1 	bl	16120 <call_handler>
    *p_pin = pin_number & 0x1F;
   1617e:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
   16182:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16184:	2a01      	cmp	r2, #1
   16186:	d010      	beq.n	161aa <next_sense_cond_call_handler+0x5e>
        case 0: return NRF_P0;
   16188:	4a0f      	ldr	r2, [pc, #60]	; (161c8 <next_sense_cond_call_handler+0x7c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1618a:	3380      	adds	r3, #128	; 0x80
   1618c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16190:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   16194:	429d      	cmp	r5, r3
   16196:	d1ed      	bne.n	16174 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   16198:	2100      	movs	r1, #0
   1619a:	4630      	mov	r0, r6
   1619c:	f004 f9f2 	bl	1a584 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   161a0:	4629      	mov	r1, r5
   161a2:	4630      	mov	r0, r6
   161a4:	f004 f9ee 	bl	1a584 <nrf_gpio_cfg_sense_set>
   161a8:	e7e4      	b.n	16174 <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
   161aa:	4a08      	ldr	r2, [pc, #32]	; (161cc <next_sense_cond_call_handler+0x80>)
   161ac:	e7ed      	b.n	1618a <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   161ae:	2103      	movs	r1, #3
   161b0:	e7d7      	b.n	16162 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   161b2:	2c01      	cmp	r4, #1
   161b4:	d1dc      	bne.n	16170 <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
   161b6:	4621      	mov	r1, r4
   161b8:	4630      	mov	r0, r6
   161ba:	f7ff ffb1 	bl	16120 <call_handler>
}
   161be:	e7d9      	b.n	16174 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   161c0:	2c02      	cmp	r4, #2
   161c2:	d1d7      	bne.n	16174 <next_sense_cond_call_handler+0x28>
   161c4:	e7f7      	b.n	161b6 <next_sense_cond_call_handler+0x6a>
   161c6:	bf00      	nop
   161c8:	40842500 	.word	0x40842500
   161cc:	40842800 	.word	0x40842800

000161d0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   161d0:	f100 0208 	add.w	r2, r0, #8
   161d4:	4b0e      	ldr	r3, [pc, #56]	; (16210 <release_handler+0x40>)
   161d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   161da:	f413 7f80 	tst.w	r3, #256	; 0x100
   161de:	d016      	beq.n	1620e <release_handler+0x3e>
{
   161e0:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   161e2:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   161e6:	4610      	mov	r0, r2
   161e8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   161ec:	4a08      	ldr	r2, [pc, #32]	; (16210 <release_handler+0x40>)
   161ee:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   161f2:	4620      	mov	r0, r4
   161f4:	f7ff ff2e 	bl	16054 <handler_in_use>
   161f8:	b100      	cbz	r0, 161fc <release_handler+0x2c>
}
   161fa:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   161fc:	4804      	ldr	r0, [pc, #16]	; (16210 <release_handler+0x40>)
   161fe:	2300      	movs	r3, #0
   16200:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   16204:	4621      	mov	r1, r4
   16206:	3074      	adds	r0, #116	; 0x74
   16208:	f7ff fce2 	bl	15bd0 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1620c:	e7f5      	b.n	161fa <release_handler+0x2a>
   1620e:	4770      	bx	lr
   16210:	200080ac 	.word	0x200080ac

00016214 <pin_handler_trigger_uninit>:
{
   16214:	b510      	push	{r4, lr}
   16216:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   16218:	f7ff fef4 	bl	16004 <pin_in_use_by_te>
   1621c:	b150      	cbz	r0, 16234 <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1621e:	4620      	mov	r0, r4
   16220:	f7ff ff10 	bl	16044 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   16224:	4b08      	ldr	r3, [pc, #32]	; (16248 <pin_handler_trigger_uninit+0x34>)
   16226:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   1622a:	2200      	movs	r2, #0
   1622c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   16230:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   16234:	4620      	mov	r0, r4
   16236:	f7ff ffcb 	bl	161d0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1623a:	3408      	adds	r4, #8
   1623c:	4b03      	ldr	r3, [pc, #12]	; (1624c <pin_handler_trigger_uninit+0x38>)
   1623e:	2200      	movs	r2, #0
   16240:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   16244:	bd10      	pop	{r4, pc}
   16246:	bf00      	nop
   16248:	4002f000 	.word	0x4002f000
   1624c:	200080ac 	.word	0x200080ac

00016250 <pin_handler_set>:
{
   16250:	b570      	push	{r4, r5, r6, lr}
   16252:	b082      	sub	sp, #8
   16254:	4605      	mov	r5, r0
   16256:	460e      	mov	r6, r1
   16258:	4614      	mov	r4, r2
    release_handler(pin);
   1625a:	f7ff ffb9 	bl	161d0 <release_handler>
    if (!handler)
   1625e:	b326      	cbz	r6, 162aa <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   16260:	4621      	mov	r1, r4
   16262:	4630      	mov	r0, r6
   16264:	f7ff ff10 	bl	16088 <find_handler>
    if (handler_id < 0)
   16268:	1e03      	subs	r3, r0, #0
   1626a:	db13      	blt.n	16294 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   1626c:	4910      	ldr	r1, [pc, #64]	; (162b0 <pin_handler_set+0x60>)
   1626e:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   16272:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   16276:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   16278:	f105 0008 	add.w	r0, r5, #8
   1627c:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   16280:	025b      	lsls	r3, r3, #9
   16282:	b29b      	uxth	r3, r3
   16284:	4313      	orrs	r3, r2
   16286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1628a:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
   1628e:	4809      	ldr	r0, [pc, #36]	; (162b4 <pin_handler_set+0x64>)
}
   16290:	b002      	add	sp, #8
   16292:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   16294:	f10d 0107 	add.w	r1, sp, #7
   16298:	4807      	ldr	r0, [pc, #28]	; (162b8 <pin_handler_set+0x68>)
   1629a:	f7ff fc75 	bl	15b88 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1629e:	4b05      	ldr	r3, [pc, #20]	; (162b4 <pin_handler_set+0x64>)
   162a0:	4298      	cmp	r0, r3
   162a2:	d1f5      	bne.n	16290 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   162a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   162a8:	e7e0      	b.n	1626c <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   162aa:	4802      	ldr	r0, [pc, #8]	; (162b4 <pin_handler_set+0x64>)
   162ac:	e7f0      	b.n	16290 <pin_handler_set+0x40>
   162ae:	bf00      	nop
   162b0:	200080ac 	.word	0x200080ac
   162b4:	0bad0000 	.word	0x0bad0000
   162b8:	20008120 	.word	0x20008120

000162bc <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
   162bc:	b570      	push	{r4, r5, r6, lr}
   162be:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   162c0:	466a      	mov	r2, sp
   162c2:	2102      	movs	r1, #2
   162c4:	2000      	movs	r0, #0
   162c6:	f7ff fe73 	bl	15fb0 <nrf_gpio_latches_read_and_clear>
   162ca:	e03e      	b.n	1634a <port_event_handle+0x8e>
   162cc:	4e21      	ldr	r6, [pc, #132]	; (16354 <port_event_handle+0x98>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   162ce:	f105 0380 	add.w	r3, r5, #128	; 0x80
   162d2:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
   162d6:	f3c2 4201 	ubfx	r2, r2, #16, #2
   162da:	f7ff ff37 	bl	1614c <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   162de:	2301      	movs	r3, #1
   162e0:	40ab      	lsls	r3, r5
   162e2:	6233      	str	r3, [r6, #32]
            while (latch[i])
   162e4:	ab02      	add	r3, sp, #8
   162e6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   162ea:	f853 0c08 	ldr.w	r0, [r3, #-8]
   162ee:	b1f8      	cbz	r0, 16330 <port_event_handle+0x74>
                uint32_t pin = NRF_CTZ(latch[i]);
   162f0:	fa90 f0a0 	rbit	r0, r0
   162f4:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   162f8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   162fc:	f100 0208 	add.w	r2, r0, #8
   16300:	4b15      	ldr	r3, [pc, #84]	; (16358 <port_event_handle+0x9c>)
   16302:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   16306:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1630a:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   1630c:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   16310:	f81d 2005 	ldrb.w	r2, [sp, r5]
   16314:	2301      	movs	r3, #1
   16316:	40b3      	lsls	r3, r6
   16318:	43db      	mvns	r3, r3
   1631a:	b25b      	sxtb	r3, r3
   1631c:	4013      	ands	r3, r2
   1631e:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
   16322:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   16326:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16328:	2b01      	cmp	r3, #1
   1632a:	d0cf      	beq.n	162cc <port_event_handle+0x10>
        case 0: return NRF_P0;
   1632c:	4e0b      	ldr	r6, [pc, #44]	; (1635c <port_event_handle+0xa0>)
   1632e:	e7ce      	b.n	162ce <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   16330:	3401      	adds	r4, #1
   16332:	2c01      	cmp	r4, #1
   16334:	d9d6      	bls.n	162e4 <port_event_handle+0x28>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16336:	4b0a      	ldr	r3, [pc, #40]	; (16360 <port_event_handle+0xa4>)
   16338:	2200      	movs	r2, #0
   1633a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   1633e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   16342:	4668      	mov	r0, sp
   16344:	f004 f94b 	bl	1a5de <latch_pending_read_and_check>
   16348:	b108      	cbz	r0, 1634e <port_event_handle+0x92>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1634a:	2400      	movs	r4, #0
   1634c:	e7f1      	b.n	16332 <port_event_handle+0x76>
}
   1634e:	b002      	add	sp, #8
   16350:	bd70      	pop	{r4, r5, r6, pc}
   16352:	bf00      	nop
   16354:	40842800 	.word	0x40842800
   16358:	200080ac 	.word	0x200080ac
   1635c:	40842500 	.word	0x40842500
   16360:	4002f000 	.word	0x4002f000

00016364 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   16364:	b538      	push	{r3, r4, r5, lr}
   16366:	4604      	mov	r4, r0
    while (mask)
   16368:	e018      	b.n	1639c <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   1636a:	fa94 f3a4 	rbit	r3, r4
   1636e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   16372:	2201      	movs	r2, #1
   16374:	409a      	lsls	r2, r3
   16376:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1637a:	4a0a      	ldr	r2, [pc, #40]	; (163a4 <gpiote_evt_handle+0x40>)
   1637c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   16380:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   16384:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   16388:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1638c:	f3c0 4001 	ubfx	r0, r0, #16, #2
   16390:	f004 f91e 	bl	1a5d0 <gpiote_polarity_to_trigger>
   16394:	4601      	mov	r1, r0
   16396:	4628      	mov	r0, r5
   16398:	f7ff fec2 	bl	16120 <call_handler>
    while (mask)
   1639c:	2c00      	cmp	r4, #0
   1639e:	d1e4      	bne.n	1636a <gpiote_evt_handle+0x6>
    }
}
   163a0:	bd38      	pop	{r3, r4, r5, pc}
   163a2:	bf00      	nop
   163a4:	4002f000 	.word	0x4002f000

000163a8 <nrfx_gpiote_input_configure>:
{
   163a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   163ac:	b084      	sub	sp, #16
   163ae:	4604      	mov	r4, r0
   163b0:	4615      	mov	r5, r2
   163b2:	461e      	mov	r6, r3
    if (p_input_config)
   163b4:	b309      	cbz	r1, 163fa <nrfx_gpiote_input_configure+0x52>
   163b6:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   163b8:	f004 f8f4 	bl	1a5a4 <pin_is_task_output>
   163bc:	2800      	cmp	r0, #0
   163be:	d13f      	bne.n	16440 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   163c0:	2300      	movs	r3, #0
   163c2:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   163c6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   163ca:	9301      	str	r3, [sp, #4]
   163cc:	9300      	str	r3, [sp, #0]
   163ce:	463b      	mov	r3, r7
   163d0:	f10d 020f 	add.w	r2, sp, #15
   163d4:	f10d 010e 	add.w	r1, sp, #14
   163d8:	4620      	mov	r0, r4
   163da:	f7ff fd77 	bl	15ecc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   163de:	4a39      	ldr	r2, [pc, #228]	; (164c4 <nrfx_gpiote_input_configure+0x11c>)
   163e0:	f104 0108 	add.w	r1, r4, #8
   163e4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   163e8:	f023 0302 	bic.w	r3, r3, #2
   163ec:	b29b      	uxth	r3, r3
   163ee:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   163f2:	f043 0301 	orr.w	r3, r3, #1
   163f6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   163fa:	b1bd      	cbz	r5, 1642c <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   163fc:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   163fe:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   16402:	4620      	mov	r0, r4
   16404:	f7ff fe14 	bl	16030 <pin_is_output>
   16408:	b1e0      	cbz	r0, 16444 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
   1640a:	f1b8 0f00 	cmp.w	r8, #0
   1640e:	d153      	bne.n	164b8 <nrfx_gpiote_input_configure+0x110>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   16410:	4a2c      	ldr	r2, [pc, #176]	; (164c4 <nrfx_gpiote_input_configure+0x11c>)
   16412:	f104 0108 	add.w	r1, r4, #8
   16416:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1641a:	f023 031c 	bic.w	r3, r3, #28
   1641e:	b29b      	uxth	r3, r3
   16420:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   16424:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   16428:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1642c:	2e00      	cmp	r6, #0
   1642e:	d047      	beq.n	164c0 <nrfx_gpiote_input_configure+0x118>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   16430:	6872      	ldr	r2, [r6, #4]
   16432:	6831      	ldr	r1, [r6, #0]
   16434:	4620      	mov	r0, r4
   16436:	f7ff ff0b 	bl	16250 <pin_handler_set>
}
   1643a:	b004      	add	sp, #16
   1643c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
   16440:	4821      	ldr	r0, [pc, #132]	; (164c8 <nrfx_gpiote_input_configure+0x120>)
   16442:	e7fa      	b.n	1643a <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   16444:	4a1f      	ldr	r2, [pc, #124]	; (164c4 <nrfx_gpiote_input_configure+0x11c>)
   16446:	f104 0108 	add.w	r1, r4, #8
   1644a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1644e:	f023 0320 	bic.w	r3, r3, #32
   16452:	04db      	lsls	r3, r3, #19
   16454:	0cdb      	lsrs	r3, r3, #19
   16456:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   1645a:	f1b8 0f00 	cmp.w	r8, #0
   1645e:	d0d7      	beq.n	16410 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   16460:	2f03      	cmp	r7, #3
   16462:	d82b      	bhi.n	164bc <nrfx_gpiote_input_configure+0x114>
                uint8_t ch = *p_trigger_config->p_in_channel;
   16464:	686b      	ldr	r3, [r5, #4]
   16466:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   16468:	b947      	cbnz	r7, 1647c <nrfx_gpiote_input_configure+0xd4>
    p_reg->CONFIG[idx] = 0;
   1646a:	4b18      	ldr	r3, [pc, #96]	; (164cc <nrfx_gpiote_input_configure+0x124>)
   1646c:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   16470:	2200      	movs	r2, #0
   16472:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
   16476:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
   1647a:	e7c9      	b.n	16410 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   1647c:	4638      	mov	r0, r7
   1647e:	f004 f8a8 	bl	1a5d2 <gpiote_trigger_to_polarity>
   16482:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   16484:	4811      	ldr	r0, [pc, #68]	; (164cc <nrfx_gpiote_input_configure+0x124>)
   16486:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   1648a:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   1648e:	f022 0203 	bic.w	r2, r2, #3
   16492:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
   16496:	4622      	mov	r2, r4
   16498:	4629      	mov	r1, r5
   1649a:	f004 f83b 	bl	1a514 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1649e:	4a09      	ldr	r2, [pc, #36]	; (164c4 <nrfx_gpiote_input_configure+0x11c>)
   164a0:	f104 0108 	add.w	r1, r4, #8
   164a4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   164a8:	036d      	lsls	r5, r5, #13
   164aa:	b2ad      	uxth	r5, r5
   164ac:	432b      	orrs	r3, r5
   164ae:	f043 0320 	orr.w	r3, r3, #32
   164b2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   164b6:	e7ab      	b.n	16410 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
   164b8:	4803      	ldr	r0, [pc, #12]	; (164c8 <nrfx_gpiote_input_configure+0x120>)
   164ba:	e7be      	b.n	1643a <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
   164bc:	4802      	ldr	r0, [pc, #8]	; (164c8 <nrfx_gpiote_input_configure+0x120>)
   164be:	e7bc      	b.n	1643a <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
   164c0:	4803      	ldr	r0, [pc, #12]	; (164d0 <nrfx_gpiote_input_configure+0x128>)
   164c2:	e7ba      	b.n	1643a <nrfx_gpiote_input_configure+0x92>
   164c4:	200080ac 	.word	0x200080ac
   164c8:	0bad0004 	.word	0x0bad0004
   164cc:	4002f000 	.word	0x4002f000
   164d0:	0bad0000 	.word	0x0bad0000

000164d4 <nrfx_gpiote_output_configure>:
{
   164d4:	b570      	push	{r4, r5, r6, lr}
   164d6:	b084      	sub	sp, #16
   164d8:	4604      	mov	r4, r0
   164da:	4615      	mov	r5, r2
    if (p_config)
   164dc:	b329      	cbz	r1, 1652a <nrfx_gpiote_output_configure+0x56>
   164de:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   164e0:	f004 f86f 	bl	1a5c2 <pin_is_input>
   164e4:	b120      	cbz	r0, 164f0 <nrfx_gpiote_output_configure+0x1c>
   164e6:	4620      	mov	r0, r4
   164e8:	f7ff fd8c 	bl	16004 <pin_in_use_by_te>
   164ec:	2800      	cmp	r0, #0
   164ee:	d13a      	bne.n	16566 <nrfx_gpiote_output_configure+0x92>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   164f0:	4620      	mov	r0, r4
   164f2:	f7ff fd91 	bl	16018 <pin_has_trigger>
   164f6:	b110      	cbz	r0, 164fe <nrfx_gpiote_output_configure+0x2a>
   164f8:	7873      	ldrb	r3, [r6, #1]
   164fa:	2b01      	cmp	r3, #1
   164fc:	d033      	beq.n	16566 <nrfx_gpiote_output_configure+0x92>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   164fe:	2301      	movs	r3, #1
   16500:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   16504:	2300      	movs	r3, #0
   16506:	9301      	str	r3, [sp, #4]
   16508:	9600      	str	r6, [sp, #0]
   1650a:	1cb3      	adds	r3, r6, #2
   1650c:	1c72      	adds	r2, r6, #1
   1650e:	f10d 010f 	add.w	r1, sp, #15
   16512:	4620      	mov	r0, r4
   16514:	f7ff fcda 	bl	15ecc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   16518:	4a20      	ldr	r2, [pc, #128]	; (1659c <nrfx_gpiote_output_configure+0xc8>)
   1651a:	f104 0108 	add.w	r1, r4, #8
   1651e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   16522:	f043 0303 	orr.w	r3, r3, #3
   16526:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1652a:	b395      	cbz	r5, 16592 <nrfx_gpiote_output_configure+0xbe>
        if (pin_is_input(pin))
   1652c:	4620      	mov	r0, r4
   1652e:	f004 f848 	bl	1a5c2 <pin_is_input>
   16532:	bb80      	cbnz	r0, 16596 <nrfx_gpiote_output_configure+0xc2>
        uint32_t ch = p_task_config->task_ch;
   16534:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   16536:	4b1a      	ldr	r3, [pc, #104]	; (165a0 <nrfx_gpiote_output_configure+0xcc>)
   16538:	f506 72a2 	add.w	r2, r6, #324	; 0x144
   1653c:	2100      	movs	r1, #0
   1653e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_reg->CONFIG[idx] = 0;
   16542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   16546:	4a15      	ldr	r2, [pc, #84]	; (1659c <nrfx_gpiote_output_configure+0xc8>)
   16548:	f104 0108 	add.w	r1, r4, #8
   1654c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   16550:	f023 0320 	bic.w	r3, r3, #32
   16554:	04db      	lsls	r3, r3, #19
   16556:	0cdb      	lsrs	r3, r3, #19
   16558:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1655c:	786b      	ldrb	r3, [r5, #1]
   1655e:	b923      	cbnz	r3, 1656a <nrfx_gpiote_output_configure+0x96>
    return NRFX_SUCCESS;
   16560:	4810      	ldr	r0, [pc, #64]	; (165a4 <nrfx_gpiote_output_configure+0xd0>)
}
   16562:	b004      	add	sp, #16
   16564:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
   16566:	4810      	ldr	r0, [pc, #64]	; (165a8 <nrfx_gpiote_output_configure+0xd4>)
   16568:	e7fb      	b.n	16562 <nrfx_gpiote_output_configure+0x8e>
                                      p_task_config->init_val);
   1656a:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1656c:	9200      	str	r2, [sp, #0]
   1656e:	4622      	mov	r2, r4
   16570:	4631      	mov	r1, r6
   16572:	480b      	ldr	r0, [pc, #44]	; (165a0 <nrfx_gpiote_output_configure+0xcc>)
   16574:	f003 ffe7 	bl	1a546 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   16578:	4a08      	ldr	r2, [pc, #32]	; (1659c <nrfx_gpiote_output_configure+0xc8>)
   1657a:	3408      	adds	r4, #8
   1657c:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
   16580:	0376      	lsls	r6, r6, #13
   16582:	b2b6      	uxth	r6, r6
   16584:	4333      	orrs	r3, r6
   16586:	f043 0320 	orr.w	r3, r3, #32
   1658a:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   1658e:	4805      	ldr	r0, [pc, #20]	; (165a4 <nrfx_gpiote_output_configure+0xd0>)
   16590:	e7e7      	b.n	16562 <nrfx_gpiote_output_configure+0x8e>
   16592:	4804      	ldr	r0, [pc, #16]	; (165a4 <nrfx_gpiote_output_configure+0xd0>)
   16594:	e7e5      	b.n	16562 <nrfx_gpiote_output_configure+0x8e>
            return NRFX_ERROR_INVALID_PARAM;
   16596:	4804      	ldr	r0, [pc, #16]	; (165a8 <nrfx_gpiote_output_configure+0xd4>)
   16598:	e7e3      	b.n	16562 <nrfx_gpiote_output_configure+0x8e>
   1659a:	bf00      	nop
   1659c:	200080ac 	.word	0x200080ac
   165a0:	4002f000 	.word	0x4002f000
   165a4:	0bad0000 	.word	0x0bad0000
   165a8:	0bad0004 	.word	0x0bad0004

000165ac <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   165ac:	4b01      	ldr	r3, [pc, #4]	; (165b4 <nrfx_gpiote_global_callback_set+0x8>)
   165ae:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   165b0:	60d9      	str	r1, [r3, #12]
}
   165b2:	4770      	bx	lr
   165b4:	200080ac 	.word	0x200080ac

000165b8 <nrfx_gpiote_channel_get>:
{
   165b8:	b538      	push	{r3, r4, r5, lr}
   165ba:	4604      	mov	r4, r0
   165bc:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   165be:	f7ff fd21 	bl	16004 <pin_in_use_by_te>
   165c2:	b140      	cbz	r0, 165d6 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   165c4:	f104 0008 	add.w	r0, r4, #8
   165c8:	4b04      	ldr	r3, [pc, #16]	; (165dc <nrfx_gpiote_channel_get+0x24>)
   165ca:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   165ce:	0b5b      	lsrs	r3, r3, #13
   165d0:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   165d2:	4803      	ldr	r0, [pc, #12]	; (165e0 <nrfx_gpiote_channel_get+0x28>)
}
   165d4:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   165d6:	4803      	ldr	r0, [pc, #12]	; (165e4 <nrfx_gpiote_channel_get+0x2c>)
   165d8:	e7fc      	b.n	165d4 <nrfx_gpiote_channel_get+0x1c>
   165da:	bf00      	nop
   165dc:	200080ac 	.word	0x200080ac
   165e0:	0bad0000 	.word	0x0bad0000
   165e4:	0bad0004 	.word	0x0bad0004

000165e8 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   165e8:	4b0f      	ldr	r3, [pc, #60]	; (16628 <nrfx_gpiote_init+0x40>)
   165ea:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   165ee:	b10b      	cbz	r3, 165f4 <nrfx_gpiote_init+0xc>
        return err_code;
   165f0:	480e      	ldr	r0, [pc, #56]	; (1662c <nrfx_gpiote_init+0x44>)
}
   165f2:	4770      	bx	lr
{
   165f4:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   165f6:	4c0e      	ldr	r4, [pc, #56]	; (16630 <nrfx_gpiote_init+0x48>)
   165f8:	2260      	movs	r2, #96	; 0x60
   165fa:	2100      	movs	r1, #0
   165fc:	4620      	mov	r0, r4
   165fe:	f003 f8c4 	bl	1978a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   16602:	202f      	movs	r0, #47	; 0x2f
   16604:	f002 ffb0 	bl	19568 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16608:	4b0a      	ldr	r3, [pc, #40]	; (16634 <nrfx_gpiote_init+0x4c>)
   1660a:	2200      	movs	r2, #0
   1660c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   16610:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   16614:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   16618:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1661c:	2301      	movs	r3, #1
   1661e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   16622:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
   16624:	4804      	ldr	r0, [pc, #16]	; (16638 <nrfx_gpiote_init+0x50>)
}
   16626:	bd10      	pop	{r4, pc}
   16628:	200080ac 	.word	0x200080ac
   1662c:	0bad0005 	.word	0x0bad0005
   16630:	200080bc 	.word	0x200080bc
   16634:	4002f000 	.word	0x4002f000
   16638:	0bad0000 	.word	0x0bad0000

0001663c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1663c:	4b03      	ldr	r3, [pc, #12]	; (1664c <nrfx_gpiote_is_init+0x10>)
   1663e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   16642:	3800      	subs	r0, #0
   16644:	bf18      	it	ne
   16646:	2001      	movne	r0, #1
   16648:	4770      	bx	lr
   1664a:	bf00      	nop
   1664c:	200080ac 	.word	0x200080ac

00016650 <nrfx_gpiote_channel_free>:
{
   16650:	b508      	push	{r3, lr}
   16652:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   16654:	4801      	ldr	r0, [pc, #4]	; (1665c <nrfx_gpiote_channel_free+0xc>)
   16656:	f7ff fabb 	bl	15bd0 <nrfx_flag32_free>
}
   1665a:	bd08      	pop	{r3, pc}
   1665c:	2000811c 	.word	0x2000811c

00016660 <nrfx_gpiote_channel_alloc>:
{
   16660:	b508      	push	{r3, lr}
   16662:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   16664:	4801      	ldr	r0, [pc, #4]	; (1666c <nrfx_gpiote_channel_alloc+0xc>)
   16666:	f7ff fa8f 	bl	15b88 <nrfx_flag32_alloc>
}
   1666a:	bd08      	pop	{r3, pc}
   1666c:	2000811c 	.word	0x2000811c

00016670 <nrfx_gpiote_trigger_enable>:
{
   16670:	b538      	push	{r3, r4, r5, lr}
   16672:	4604      	mov	r4, r0
   16674:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   16676:	f7ff fcc5 	bl	16004 <pin_in_use_by_te>
   1667a:	b300      	cbz	r0, 166be <nrfx_gpiote_trigger_enable+0x4e>
   1667c:	4620      	mov	r0, r4
   1667e:	f003 ffa0 	bl	1a5c2 <pin_is_input>
   16682:	b1e0      	cbz	r0, 166be <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
   16684:	4620      	mov	r0, r4
   16686:	f7ff fcdd 	bl	16044 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1668a:	0083      	lsls	r3, r0, #2
   1668c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   16690:	b29b      	uxth	r3, r3
   16692:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16696:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1669a:	2200      	movs	r2, #0
   1669c:	601a      	str	r2, [r3, #0]
   1669e:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   166a0:	4a0b      	ldr	r2, [pc, #44]	; (166d0 <nrfx_gpiote_trigger_enable+0x60>)
   166a2:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   166a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   166aa:	f043 0301 	orr.w	r3, r3, #1
   166ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   166b2:	b15d      	cbz	r5, 166cc <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   166b4:	2301      	movs	r3, #1
   166b6:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   166b8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   166bc:	e006      	b.n	166cc <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   166be:	4620      	mov	r0, r4
   166c0:	f7ff fcf8 	bl	160b4 <get_initial_sense>
   166c4:	4601      	mov	r1, r0
   166c6:	4620      	mov	r0, r4
   166c8:	f003 ff5c 	bl	1a584 <nrf_gpio_cfg_sense_set>
}
   166cc:	bd38      	pop	{r3, r4, r5, pc}
   166ce:	bf00      	nop
   166d0:	4002f000 	.word	0x4002f000

000166d4 <nrfx_gpiote_trigger_disable>:
{
   166d4:	b510      	push	{r4, lr}
   166d6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   166d8:	f7ff fc94 	bl	16004 <pin_in_use_by_te>
   166dc:	b1a0      	cbz	r0, 16708 <nrfx_gpiote_trigger_disable+0x34>
   166de:	4620      	mov	r0, r4
   166e0:	f003 ff6f 	bl	1a5c2 <pin_is_input>
   166e4:	b180      	cbz	r0, 16708 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   166e6:	4620      	mov	r0, r4
   166e8:	f7ff fcac 	bl	16044 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   166ec:	2201      	movs	r2, #1
   166ee:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   166f0:	4b08      	ldr	r3, [pc, #32]	; (16714 <nrfx_gpiote_trigger_disable+0x40>)
   166f2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   166f6:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   166fa:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   166fe:	f022 0203 	bic.w	r2, r2, #3
   16702:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   16706:	e003      	b.n	16710 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   16708:	2100      	movs	r1, #0
   1670a:	4620      	mov	r0, r4
   1670c:	f003 ff3a 	bl	1a584 <nrf_gpio_cfg_sense_set>
}
   16710:	bd10      	pop	{r4, pc}
   16712:	bf00      	nop
   16714:	4002f000 	.word	0x4002f000

00016718 <nrfx_gpiote_pin_uninit>:
{
   16718:	b510      	push	{r4, lr}
   1671a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1671c:	f7ff fc68 	bl	15ff0 <pin_in_use>
   16720:	b908      	cbnz	r0, 16726 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   16722:	4806      	ldr	r0, [pc, #24]	; (1673c <nrfx_gpiote_pin_uninit+0x24>)
}
   16724:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   16726:	4620      	mov	r0, r4
   16728:	f7ff ffd4 	bl	166d4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1672c:	4620      	mov	r0, r4
   1672e:	f7ff fd71 	bl	16214 <pin_handler_trigger_uninit>
    nrf_gpio_cfg_default(pin);
   16732:	4620      	mov	r0, r4
   16734:	f7ff fc26 	bl	15f84 <nrf_gpio_cfg_default>
    return NRFX_SUCCESS;
   16738:	4801      	ldr	r0, [pc, #4]	; (16740 <nrfx_gpiote_pin_uninit+0x28>)
   1673a:	e7f3      	b.n	16724 <nrfx_gpiote_pin_uninit+0xc>
   1673c:	0bad0004 	.word	0x0bad0004
   16740:	0bad0000 	.word	0x0bad0000

00016744 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   16744:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   16746:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   16748:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1674c:	2100      	movs	r1, #0
    uint32_t status = 0;
   1674e:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   16750:	e003      	b.n	1675a <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   16752:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   16754:	3304      	adds	r3, #4
   16756:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   16758:	3101      	adds	r1, #1
   1675a:	2907      	cmp	r1, #7
   1675c:	d814      	bhi.n	16788 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1675e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   16762:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   16766:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   16768:	2a00      	cmp	r2, #0
   1676a:	d0f2      	beq.n	16752 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   1676c:	4a0c      	ldr	r2, [pc, #48]	; (167a0 <nrfx_gpiote_irq_handler+0x5c>)
   1676e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   16772:	4210      	tst	r0, r2
   16774:	d0ed      	beq.n	16752 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   16776:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1677a:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1677e:	2500      	movs	r5, #0
   16780:	6015      	str	r5, [r2, #0]
   16782:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   16784:	4304      	orrs	r4, r0
   16786:	e7e4      	b.n	16752 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16788:	4b05      	ldr	r3, [pc, #20]	; (167a0 <nrfx_gpiote_irq_handler+0x5c>)
   1678a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1678e:	b91b      	cbnz	r3, 16798 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   16790:	4620      	mov	r0, r4
   16792:	f7ff fde7 	bl	16364 <gpiote_evt_handle>
}
   16796:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   16798:	f7ff fd90 	bl	162bc <port_event_handle>
   1679c:	e7f8      	b.n	16790 <nrfx_gpiote_irq_handler+0x4c>
   1679e:	bf00      	nop
   167a0:	4002f000 	.word	0x4002f000

000167a4 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   167a4:	b538      	push	{r3, r4, r5, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   167a6:	4b08      	ldr	r3, [pc, #32]	; (167c8 <nrfx_ipc_init+0x24>)
   167a8:	791b      	ldrb	r3, [r3, #4]
   167aa:	b10b      	cbz	r3, 167b0 <nrfx_ipc_init+0xc>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
   167ac:	4807      	ldr	r0, [pc, #28]	; (167cc <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
}
   167ae:	bd38      	pop	{r3, r4, r5, pc}
   167b0:	460d      	mov	r5, r1
   167b2:	4614      	mov	r4, r2
    NRFX_IRQ_ENABLE(IPC_IRQn);
   167b4:	202a      	movs	r0, #42	; 0x2a
   167b6:	f002 fed7 	bl	19568 <arch_irq_enable>
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   167ba:	4b03      	ldr	r3, [pc, #12]	; (167c8 <nrfx_ipc_init+0x24>)
   167bc:	2201      	movs	r2, #1
   167be:	711a      	strb	r2, [r3, #4]
    m_ipc_cb.handler = handler;
   167c0:	601d      	str	r5, [r3, #0]
    m_ipc_cb.p_context = p_context;
   167c2:	609c      	str	r4, [r3, #8]
    return NRFX_SUCCESS;
   167c4:	4802      	ldr	r0, [pc, #8]	; (167d0 <nrfx_ipc_init+0x2c>)
   167c6:	e7f2      	b.n	167ae <nrfx_ipc_init+0xa>
   167c8:	20008ccc 	.word	0x20008ccc
   167cc:	0bad000c 	.word	0x0bad000c
   167d0:	0bad0000 	.word	0x0bad0000

000167d4 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   167d4:	b410      	push	{r4}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   167d6:	2300      	movs	r3, #0
   167d8:	e008      	b.n	167ec <nrfx_ipc_config_load+0x18>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   167da:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    p_reg->SEND_CNF[index] = channels_mask;
   167de:	b2da      	uxtb	r2, r3
   167e0:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   167e4:	490d      	ldr	r1, [pc, #52]	; (1681c <nrfx_ipc_config_load+0x48>)
   167e6:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   167ea:	3301      	adds	r3, #1
   167ec:	2b0f      	cmp	r3, #15
   167ee:	d9f4      	bls.n	167da <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   167f0:	2300      	movs	r3, #0
   167f2:	e00a      	b.n	1680a <nrfx_ipc_config_load+0x36>
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   167f4:	f103 0210 	add.w	r2, r3, #16
   167f8:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    p_reg->RECEIVE_CNF[index] = channels_mask;
   167fc:	b2da      	uxtb	r2, r3
   167fe:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   16802:	4906      	ldr	r1, [pc, #24]	; (1681c <nrfx_ipc_config_load+0x48>)
   16804:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   16808:	3301      	adds	r3, #1
   1680a:	2b0f      	cmp	r3, #15
   1680c:	d9f2      	bls.n	167f4 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   1680e:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   16812:	4b02      	ldr	r3, [pc, #8]	; (1681c <nrfx_ipc_config_load+0x48>)
   16814:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   16818:	bc10      	pop	{r4}
   1681a:	4770      	bx	lr
   1681c:	4002a000 	.word	0x4002a000

00016820 <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   16820:	2301      	movs	r3, #1
   16822:	4083      	lsls	r3, r0
   16824:	4a01      	ldr	r2, [pc, #4]	; (1682c <nrfx_ipc_receive_event_enable+0xc>)
   16826:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1682a:	4770      	bx	lr
   1682c:	4002a000 	.word	0x4002a000

00016830 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   16830:	2301      	movs	r3, #1
   16832:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   16834:	4a01      	ldr	r2, [pc, #4]	; (1683c <nrfx_ipc_receive_event_disable+0xc>)
   16836:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1683a:	4770      	bx	lr
   1683c:	4002a000 	.word	0x4002a000

00016840 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   16840:	b510      	push	{r4, lr}
    return p_reg->INTPEND;
   16842:	4b0d      	ldr	r3, [pc, #52]	; (16878 <nrfx_ipc_irq_handler+0x38>)
   16844:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);
    // Clear these events
    uint32_t bitmask = events_map;

    while (bitmask)
   16848:	e002      	b.n	16850 <nrfx_ipc_irq_handler+0x10>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
        {
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   1684a:	4a0c      	ldr	r2, [pc, #48]	; (1687c <nrfx_ipc_irq_handler+0x3c>)
   1684c:	6891      	ldr	r1, [r2, #8]
   1684e:	4798      	blx	r3
    while (bitmask)
   16850:	b18c      	cbz	r4, 16876 <nrfx_ipc_irq_handler+0x36>
        uint8_t event_idx = NRF_CTZ(bitmask);
   16852:	fa94 f0a4 	rbit	r0, r4
   16856:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   1685a:	2301      	movs	r3, #1
   1685c:	4083      	lsls	r3, r0
   1685e:	ea24 0403 	bic.w	r4, r4, r3
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   16862:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16864:	4b06      	ldr	r3, [pc, #24]	; (16880 <nrfx_ipc_irq_handler+0x40>)
   16866:	4413      	add	r3, r2
   16868:	2200      	movs	r2, #0
   1686a:	601a      	str	r2, [r3, #0]
        if (m_ipc_cb.handler)
   1686c:	4b03      	ldr	r3, [pc, #12]	; (1687c <nrfx_ipc_irq_handler+0x3c>)
   1686e:	681b      	ldr	r3, [r3, #0]
   16870:	2b00      	cmp	r3, #0
   16872:	d1ea      	bne.n	1684a <nrfx_ipc_irq_handler+0xa>
   16874:	e7ec      	b.n	16850 <nrfx_ipc_irq_handler+0x10>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   16876:	bd10      	pop	{r4, pc}
   16878:	4002a000 	.word	0x4002a000
   1687c:	20008ccc 	.word	0x20008ccc
   16880:	4002a100 	.word	0x4002a100

00016884 <nrf_gpio_cfg>:
{
   16884:	b430      	push	{r4, r5}
    *p_pin = pin_number & 0x1F;
   16886:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
   1688a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1688c:	2801      	cmp	r0, #1
   1688e:	d018      	beq.n	168c2 <nrf_gpio_cfg+0x3e>
        case 0: return NRF_P0;
   16890:	4d0d      	ldr	r5, [pc, #52]	; (168c8 <nrf_gpio_cfg+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   16892:	f10c 0080 	add.w	r0, ip, #128	; 0x80
   16896:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
   1689a:	f004 4ce0 	and.w	ip, r4, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1689e:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   168a2:	ea41 0383 	orr.w	r3, r1, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   168a6:	f89d 2008 	ldrb.w	r2, [sp, #8]
   168aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   168ae:	f89d 200c 	ldrb.w	r2, [sp, #12]
   168b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   168b6:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
   168ba:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
}
   168be:	bc30      	pop	{r4, r5}
   168c0:	4770      	bx	lr
        case 1: return NRF_P1;
   168c2:	4d02      	ldr	r5, [pc, #8]	; (168cc <nrf_gpio_cfg+0x48>)
   168c4:	e7e5      	b.n	16892 <nrf_gpio_cfg+0xe>
   168c6:	bf00      	nop
   168c8:	40842500 	.word	0x40842500
   168cc:	40842800 	.word	0x40842800

000168d0 <nrf_gpio_cfg_default>:
    *p_pin = pin_number & 0x1F;
   168d0:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   168d4:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   168d6:	2801      	cmp	r0, #1
   168d8:	d00a      	beq.n	168f0 <nrf_gpio_cfg_default+0x20>
        case 0: return NRF_P0;
   168da:	4906      	ldr	r1, [pc, #24]	; (168f4 <nrf_gpio_cfg_default+0x24>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   168dc:	3280      	adds	r2, #128	; 0x80
   168de:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   168e2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   168e6:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   168ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   168ee:	4770      	bx	lr
        case 1: return NRF_P1;
   168f0:	4901      	ldr	r1, [pc, #4]	; (168f8 <nrf_gpio_cfg_default+0x28>)
   168f2:	e7f3      	b.n	168dc <nrf_gpio_cfg_default+0xc>
   168f4:	40842500 	.word	0x40842500
   168f8:	40842800 	.word	0x40842800

000168fc <nrf_gpio_pin_write>:
    if (value == 0)
   168fc:	b959      	cbnz	r1, 16916 <nrf_gpio_pin_write+0x1a>
    *p_pin = pin_number & 0x1F;
   168fe:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   16902:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16904:	2801      	cmp	r0, #1
   16906:	d004      	beq.n	16912 <nrf_gpio_pin_write+0x16>
        case 0: return NRF_P0;
   16908:	4a09      	ldr	r2, [pc, #36]	; (16930 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1690a:	2301      	movs	r3, #1
   1690c:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   1690e:	60d3      	str	r3, [r2, #12]
}
   16910:	4770      	bx	lr
        case 1: return NRF_P1;
   16912:	4a08      	ldr	r2, [pc, #32]	; (16934 <nrf_gpio_pin_write+0x38>)
   16914:	e7f9      	b.n	1690a <nrf_gpio_pin_write+0xe>
    *p_pin = pin_number & 0x1F;
   16916:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   1691a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1691c:	2801      	cmp	r0, #1
   1691e:	d004      	beq.n	1692a <nrf_gpio_pin_write+0x2e>
        case 0: return NRF_P0;
   16920:	4a03      	ldr	r2, [pc, #12]	; (16930 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16922:	2301      	movs	r3, #1
   16924:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   16926:	6093      	str	r3, [r2, #8]
}
   16928:	4770      	bx	lr
        case 1: return NRF_P1;
   1692a:	4a02      	ldr	r2, [pc, #8]	; (16934 <nrf_gpio_pin_write+0x38>)
   1692c:	e7f9      	b.n	16922 <nrf_gpio_pin_write+0x26>
   1692e:	bf00      	nop
   16930:	40842500 	.word	0x40842500
   16934:	40842800 	.word	0x40842800

00016938 <configure_pins>:
    p_cb->transfer_in_progress = false;
}

static void configure_pins(nrfx_spim_t const *        p_instance,
                           nrfx_spim_config_t const * p_config)
{
   16938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1693c:	b082      	sub	sp, #8
   1693e:	4605      	mov	r5, r0
   16940:	460c      	mov	r4, r1
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   16942:	6806      	ldr	r6, [r0, #0]

    if (!p_config->skip_gpio_cfg)
   16944:	7ccb      	ldrb	r3, [r1, #19]
   16946:	2b00      	cmp	r3, #0
   16948:	d160      	bne.n	16a0c <configure_pins+0xd4>
    {
        // Configure pin drive - high drive for 32 MHz clock frequency.
        nrf_gpio_pin_drive_t pin_drive;
#if NRF_SPIM_HAS_32_MHZ_FREQ
        pin_drive = (p_config->frequency == NRF_SPIM_FREQ_32M)
   1694a:	688b      	ldr	r3, [r1, #8]
                    ? NRF_GPIO_PIN_H0H1
                    : NRF_GPIO_PIN_S0S1;
   1694c:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
   16950:	d07f      	beq.n	16a52 <configure_pins+0x11a>
   16952:	f04f 0800 	mov.w	r8, #0
        //   used: 0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3
        //   (CPOL = 1);
        //   according to the reference manual guidelines, this pin and its
        //   input buffer must always be connected for the SPI to work
        nrf_gpio_pin_write(p_config->sck_pin,
                           p_config->mode <= NRF_SPIM_MODE_1 ? 0 : 1);
   16956:	7b21      	ldrb	r1, [r4, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
   16958:	2901      	cmp	r1, #1
   1695a:	bf94      	ite	ls
   1695c:	2100      	movls	r1, #0
   1695e:	2101      	movhi	r1, #1
   16960:	7820      	ldrb	r0, [r4, #0]
   16962:	f7ff ffcb 	bl	168fc <nrf_gpio_pin_write>
        nrf_gpio_cfg(p_config->sck_pin,
   16966:	7823      	ldrb	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   16968:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1696c:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1696e:	2b01      	cmp	r3, #1
   16970:	d072      	beq.n	16a58 <configure_pins+0x120>
        case 0: return NRF_P0;
   16972:	495d      	ldr	r1, [pc, #372]	; (16ae8 <configure_pins+0x1b0>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   16974:	3280      	adds	r2, #128	; 0x80
   16976:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   1697a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1697e:	ea4f 2708 	mov.w	r7, r8, lsl #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16982:	f047 0001 	orr.w	r0, r7, #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   16986:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   16988:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
                     NRF_GPIO_PIN_INPUT_CONNECT,
                     NRF_GPIO_PIN_NOPULL,
                     pin_drive,
                     NRF_GPIO_PIN_NOSENSE);
        // - MOSI (optional) - output with initial value 0
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1698c:	7863      	ldrb	r3, [r4, #1]
   1698e:	2bff      	cmp	r3, #255	; 0xff
   16990:	d019      	beq.n	169c6 <configure_pins+0x8e>
    *p_pin = pin_number & 0x1F;
   16992:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   16996:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16998:	2b01      	cmp	r3, #1
   1699a:	d05f      	beq.n	16a5c <configure_pins+0x124>
        case 0: return NRF_P0;
   1699c:	4952      	ldr	r1, [pc, #328]	; (16ae8 <configure_pins+0x1b0>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1699e:	2301      	movs	r3, #1
   169a0:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   169a2:	60cb      	str	r3, [r1, #12]
        {
            nrf_gpio_pin_write(p_config->mosi_pin, 0);
            nrf_gpio_cfg(p_config->mosi_pin,
   169a4:	7863      	ldrb	r3, [r4, #1]
    *p_pin = pin_number & 0x1F;
   169a6:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   169aa:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   169ac:	2b01      	cmp	r3, #1
   169ae:	d057      	beq.n	16a60 <configure_pins+0x128>
        case 0: return NRF_P0;
   169b0:	494d      	ldr	r1, [pc, #308]	; (16ae8 <configure_pins+0x1b0>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   169b2:	3280      	adds	r2, #128	; 0x80
   169b4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   169b8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   169bc:	f047 0003 	orr.w	r0, r7, #3
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   169c0:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   169c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
                         NRF_GPIO_PIN_NOPULL,
                         pin_drive,
                         NRF_GPIO_PIN_NOSENSE);
        }
        // - MISO (optional) - input
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   169c6:	78a0      	ldrb	r0, [r4, #2]
   169c8:	28ff      	cmp	r0, #255	; 0xff
   169ca:	d14b      	bne.n	16a64 <configure_pins+0x12c>
                         p_config->miso_pull,
                         pin_drive,
                         NRF_GPIO_PIN_NOSENSE);
        }
        // - Slave Select (optional) - output, initially inactive
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   169cc:	78e0      	ldrb	r0, [r4, #3]
   169ce:	28ff      	cmp	r0, #255	; 0xff
   169d0:	d151      	bne.n	16a76 <configure_pins+0x13e>
                         pin_drive,
                         NRF_GPIO_PIN_NOSENSE);
        }
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        // - DCX (optional) - output.
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   169d2:	7be3      	ldrb	r3, [r4, #15]
   169d4:	2bff      	cmp	r3, #255	; 0xff
   169d6:	d019      	beq.n	16a0c <configure_pins+0xd4>
    *p_pin = pin_number & 0x1F;
   169d8:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   169dc:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   169de:	2b01      	cmp	r3, #1
   169e0:	d062      	beq.n	16aa8 <configure_pins+0x170>
        case 0: return NRF_P0;
   169e2:	4941      	ldr	r1, [pc, #260]	; (16ae8 <configure_pins+0x1b0>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   169e4:	2301      	movs	r3, #1
   169e6:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   169e8:	608b      	str	r3, [r1, #8]
        {
            nrf_gpio_pin_write(p_config->dcx_pin, 1);
            nrf_gpio_cfg(p_config->dcx_pin,
   169ea:	7be3      	ldrb	r3, [r4, #15]
    *p_pin = pin_number & 0x1F;
   169ec:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   169f0:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   169f2:	2b01      	cmp	r3, #1
   169f4:	d05a      	beq.n	16aac <configure_pins+0x174>
        case 0: return NRF_P0;
   169f6:	493c      	ldr	r1, [pc, #240]	; (16ae8 <configure_pins+0x1b0>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   169f8:	3280      	adds	r2, #128	; 0x80
   169fa:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   169fe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16a02:	f047 0703 	orr.w	r7, r7, #3
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   16a06:	433b      	orrs	r3, r7
    reg->PIN_CNF[pin_number] = cnf;
   16a08:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
                         NRF_GPIO_PIN_NOSENSE);
        }
#endif
    }

    if (!p_config->skip_psel_cfg)
   16a0c:	7d23      	ldrb	r3, [r4, #20]
   16a0e:	2b00      	cmp	r3, #0
   16a10:	d164      	bne.n	16adc <configure_pins+0x1a4>
    {
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   16a12:	7863      	ldrb	r3, [r4, #1]
                            ? p_config->mosi_pin
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   16a14:	2bff      	cmp	r3, #255	; 0xff
   16a16:	d04b      	beq.n	16ab0 <configure_pins+0x178>
   16a18:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   16a1a:	78a3      	ldrb	r3, [r4, #2]
                            ? p_config->miso_pin
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   16a1c:	2bff      	cmp	r3, #255	; 0xff
   16a1e:	d04a      	beq.n	16ab6 <configure_pins+0x17e>

        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   16a20:	7821      	ldrb	r1, [r4, #0]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   16a22:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   16a26:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   16a2a:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   16a2e:	792b      	ldrb	r3, [r5, #4]
   16a30:	2b00      	cmp	r3, #0
   16a32:	d14c      	bne.n	16ace <configure_pins+0x196>
        {
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   16a34:	78e3      	ldrb	r3, [r4, #3]
   16a36:	2bff      	cmp	r3, #255	; 0xff
   16a38:	d040      	beq.n	16abc <configure_pins+0x184>
                p_config->use_hw_ss)
   16a3a:	7c62      	ldrb	r2, [r4, #17]
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   16a3c:	2a00      	cmp	r2, #0
   16a3e:	d03d      	beq.n	16abc <configure_pins+0x184>
            {
                nrf_spim_csn_configure(p_spim,
                                    p_config->ss_pin,
                                    (p_config->ss_active_high == true
   16a40:	7921      	ldrb	r1, [r4, #4]
                                        ? NRF_SPIM_CSN_POL_HIGH
                                        : NRF_SPIM_CSN_POL_LOW),
                                    p_config->ss_duration);
   16a42:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
   16a44:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   16a48:	f8c6 1568 	str.w	r1, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   16a4c:	f8c6 2564 	str.w	r2, [r6, #1380]	; 0x564
}
   16a50:	e03d      	b.n	16ace <configure_pins+0x196>
                    : NRF_GPIO_PIN_S0S1;
   16a52:	f04f 0803 	mov.w	r8, #3
   16a56:	e77e      	b.n	16956 <configure_pins+0x1e>
        case 1: return NRF_P1;
   16a58:	4924      	ldr	r1, [pc, #144]	; (16aec <configure_pins+0x1b4>)
   16a5a:	e78b      	b.n	16974 <configure_pins+0x3c>
   16a5c:	4923      	ldr	r1, [pc, #140]	; (16aec <configure_pins+0x1b4>)
   16a5e:	e79e      	b.n	1699e <configure_pins+0x66>
   16a60:	4922      	ldr	r1, [pc, #136]	; (16aec <configure_pins+0x1b4>)
   16a62:	e7a6      	b.n	169b2 <configure_pins+0x7a>
            nrf_gpio_cfg(p_config->miso_pin,
   16a64:	2100      	movs	r1, #0
   16a66:	9101      	str	r1, [sp, #4]
   16a68:	f8cd 8000 	str.w	r8, [sp]
   16a6c:	7ba3      	ldrb	r3, [r4, #14]
   16a6e:	460a      	mov	r2, r1
   16a70:	f7ff ff08 	bl	16884 <nrf_gpio_cfg>
   16a74:	e7aa      	b.n	169cc <configure_pins+0x94>
                               p_config->ss_active_high ? 0 : 1);
   16a76:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
   16a78:	f081 0101 	eor.w	r1, r1, #1
   16a7c:	f7ff ff3e 	bl	168fc <nrf_gpio_pin_write>
            nrf_gpio_cfg(p_config->ss_pin,
   16a80:	78e3      	ldrb	r3, [r4, #3]
    *p_pin = pin_number & 0x1F;
   16a82:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   16a86:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16a88:	2b01      	cmp	r3, #1
   16a8a:	d00b      	beq.n	16aa4 <configure_pins+0x16c>
        case 0: return NRF_P0;
   16a8c:	4916      	ldr	r1, [pc, #88]	; (16ae8 <configure_pins+0x1b0>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   16a8e:	3280      	adds	r2, #128	; 0x80
   16a90:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   16a94:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16a98:	f047 0003 	orr.w	r0, r7, #3
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   16a9c:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   16a9e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   16aa2:	e796      	b.n	169d2 <configure_pins+0x9a>
        case 1: return NRF_P1;
   16aa4:	4911      	ldr	r1, [pc, #68]	; (16aec <configure_pins+0x1b4>)
   16aa6:	e7f2      	b.n	16a8e <configure_pins+0x156>
   16aa8:	4910      	ldr	r1, [pc, #64]	; (16aec <configure_pins+0x1b4>)
   16aaa:	e79b      	b.n	169e4 <configure_pins+0xac>
   16aac:	490f      	ldr	r1, [pc, #60]	; (16aec <configure_pins+0x1b4>)
   16aae:	e7a3      	b.n	169f8 <configure_pins+0xc0>
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   16ab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16ab4:	e7b1      	b.n	16a1a <configure_pins+0xe2>
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   16ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16aba:	e7b1      	b.n	16a20 <configure_pins+0xe8>
    p_reg->PSEL.CSN = pin;
   16abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16ac0:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   16ac4:	2300      	movs	r3, #0
   16ac6:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   16aca:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
                                       NRF_SPIM_CSN_POL_LOW,
                                       0);
            }
        }

        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   16ace:	792b      	ldrb	r3, [r5, #4]
   16ad0:	b923      	cbnz	r3, 16adc <configure_pins+0x1a4>
        {
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   16ad2:	7be3      	ldrb	r3, [r4, #15]
                               ? p_config->dcx_pin
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   16ad4:	2bff      	cmp	r3, #255	; 0xff
   16ad6:	d004      	beq.n	16ae2 <configure_pins+0x1aa>

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
   16ad8:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c
            nrf_spim_dcx_pin_set(p_spim, dcx_pin);
        }
#endif
    }
}
   16adc:	b002      	add	sp, #8
   16ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   16ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16ae6:	e7f7      	b.n	16ad8 <configure_pins+0x1a0>
   16ae8:	40842500 	.word	0x40842500
   16aec:	40842800 	.word	0x40842800

00016af0 <spim_xfer>:

static nrfx_err_t spim_xfer(NRF_SPIM_Type               * p_spim,
                            spim_control_block_t        * p_cb,
                            nrfx_spim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
   16af0:	b570      	push	{r4, r5, r6, lr}
   16af2:	4604      	mov	r4, r0
   16af4:	460e      	mov	r6, r1
   16af6:	461d      	mov	r5, r3
    nrfx_err_t err_code;
    // EasyDMA requires that transfer buffers are placed in Data RAM region;
    // signal error if they are not.
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   16af8:	6813      	ldr	r3, [r2, #0]
   16afa:	b123      	cbz	r3, 16b06 <spim_xfer+0x16>
   16afc:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
   16b00:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   16b04:	d106      	bne.n	16b14 <spim_xfer+0x24>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   16b06:	6891      	ldr	r1, [r2, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   16b08:	b141      	cbz	r1, 16b1c <spim_xfer+0x2c>
   16b0a:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   16b0e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   16b12:	d003      	beq.n	16b1c <spim_xfer+0x2c>
    {
        p_cb->transfer_in_progress = false;
   16b14:	2300      	movs	r3, #0
   16b16:	7773      	strb	r3, [r6, #29]
        err_code = NRFX_ERROR_INVALID_ADDR;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
   16b18:	4818      	ldr	r0, [pc, #96]	; (16b7c <spim_xfer+0x8c>)
        spim_int_enable(p_spim, !(flags & NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER));
    }
    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16b1a:	bd70      	pop	{r4, r5, r6, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   16b1c:	6851      	ldr	r1, [r2, #4]

NRF_STATIC_INLINE void nrf_spim_tx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t const * p_buffer,
                                              size_t          length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16b1e:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   16b22:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   16b26:	6891      	ldr	r1, [r2, #8]
   16b28:	68d3      	ldr	r3, [r2, #12]

NRF_STATIC_INLINE void nrf_spim_rx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t * p_buffer,
                                              size_t    length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   16b2a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   16b2e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16b32:	2300      	movs	r3, #0
   16b34:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   16b38:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    spim_list_enable_handle(p_spim, flags);
   16b3c:	4629      	mov	r1, r5
   16b3e:	4620      	mov	r0, r4
   16b40:	f003 fda4 	bl	1a68c <spim_list_enable_handle>
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   16b44:	f015 0208 	ands.w	r2, r5, #8
   16b48:	d101      	bne.n	16b4e <spim_xfer+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16b4a:	2301      	movs	r3, #1
   16b4c:	6123      	str	r3, [r4, #16]
    if (!p_cb->handler)
   16b4e:	6833      	ldr	r3, [r6, #0]
   16b50:	b14b      	cbz	r3, 16b66 <spim_xfer+0x76>
        spim_int_enable(p_spim, !(flags & NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER));
   16b52:	f015 0f04 	tst.w	r5, #4
   16b56:	bf0c      	ite	eq
   16b58:	2101      	moveq	r1, #1
   16b5a:	2100      	movne	r1, #0
   16b5c:	4620      	mov	r0, r4
   16b5e:	f003 fd8c 	bl	1a67a <spim_int_enable>
    return err_code;
   16b62:	4807      	ldr	r0, [pc, #28]	; (16b80 <spim_xfer+0x90>)
   16b64:	e7d9      	b.n	16b1a <spim_xfer+0x2a>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   16b66:	b91a      	cbnz	r2, 16b70 <spim_xfer+0x80>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16b68:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   16b6c:	2b00      	cmp	r3, #0
   16b6e:	d0fb      	beq.n	16b68 <spim_xfer+0x78>
        set_ss_pin_state(p_cb, false);
   16b70:	2100      	movs	r1, #0
   16b72:	4630      	mov	r0, r6
   16b74:	f003 fd63 	bl	1a63e <set_ss_pin_state>
    return err_code;
   16b78:	4801      	ldr	r0, [pc, #4]	; (16b80 <spim_xfer+0x90>)
   16b7a:	e7ce      	b.n	16b1a <spim_xfer+0x2a>
   16b7c:	0bad000a 	.word	0x0bad000a
   16b80:	0bad0000 	.word	0x0bad0000

00016b84 <nrfx_spim_init>:
{
   16b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16b88:	460c      	mov	r4, r1
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   16b8a:	7906      	ldrb	r6, [r0, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   16b8c:	6807      	ldr	r7, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   16b8e:	4946      	ldr	r1, [pc, #280]	; (16ca8 <nrfx_spim_init+0x124>)
   16b90:	eb01 1146 	add.w	r1, r1, r6, lsl #5
   16b94:	7f09      	ldrb	r1, [r1, #28]
   16b96:	2900      	cmp	r1, #0
   16b98:	d179      	bne.n	16c8e <nrfx_spim_init+0x10a>
   16b9a:	4605      	mov	r5, r0
    if (
   16b9c:	2e00      	cmp	r6, #0
   16b9e:	d179      	bne.n	16c94 <nrfx_spim_init+0x110>
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   16ba0:	68a1      	ldr	r1, [r4, #8]
   16ba2:	f1b1 6f20 	cmp.w	r1, #167772160	; 0xa000000
   16ba6:	d04b      	beq.n	16c40 <nrfx_spim_init+0xbc>
   16ba8:	f1b1 5fa0 	cmp.w	r1, #335544320	; 0x14000000
   16bac:	d048      	beq.n	16c40 <nrfx_spim_init+0xbc>
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
   16bae:	f894 c00f 	ldrb.w	ip, [r4, #15]
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   16bb2:	7ce0      	ldrb	r0, [r4, #19]
   16bb4:	b108      	cbz	r0, 16bba <nrfx_spim_init+0x36>
   16bb6:	7d20      	ldrb	r0, [r4, #20]
   16bb8:	b910      	cbnz	r0, 16bc0 <nrfx_spim_init+0x3c>
   16bba:	483c      	ldr	r0, [pc, #240]	; (16cac <nrfx_spim_init+0x128>)
   16bbc:	4287      	cmp	r7, r0
   16bbe:	d047      	beq.n	16c50 <nrfx_spim_init+0xcc>
    p_cb->handler = handler;
   16bc0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 16ca8 <nrfx_spim_init+0x124>
   16bc4:	ea4f 1846 	mov.w	r8, r6, lsl #5
   16bc8:	eb09 1146 	add.w	r1, r9, r6, lsl #5
   16bcc:	f849 2008 	str.w	r2, [r9, r8]
    p_cb->p_context = p_context;
   16bd0:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   16bd2:	7ce0      	ldrb	r0, [r4, #19]
   16bd4:	7f8a      	ldrb	r2, [r1, #30]
   16bd6:	f360 0200 	bfi	r2, r0, #0, #1
   16bda:	778a      	strb	r2, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   16bdc:	7920      	ldrb	r0, [r4, #4]
   16bde:	b2d2      	uxtb	r2, r2
   16be0:	f360 0241 	bfi	r2, r0, #1, #1
   16be4:	778a      	strb	r2, [r1, #30]
    p_cb->use_hw_ss = p_config->use_hw_ss;
   16be6:	7c60      	ldrb	r0, [r4, #17]
   16be8:	b2d2      	uxtb	r2, r2
   16bea:	f360 0282 	bfi	r2, r0, #2, #1
   16bee:	778a      	strb	r2, [r1, #30]
    p_cb->ss_pin = p_config->ss_pin;
   16bf0:	78e3      	ldrb	r3, [r4, #3]
   16bf2:	77cb      	strb	r3, [r1, #31]
    configure_pins(p_instance, p_config);
   16bf4:	4621      	mov	r1, r4
   16bf6:	4628      	mov	r0, r5
   16bf8:	f7ff fe9e 	bl	16938 <configure_pins>
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   16bfc:	7c23      	ldrb	r3, [r4, #16]
    p_reg->IFTIMING.RXDELAY = rxdelay;
   16bfe:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
    nrf_spim_frequency_set(p_spim, p_config->frequency);
   16c02:	68a3      	ldr	r3, [r4, #8]
    p_reg->FREQUENCY = (uint32_t)frequency;
   16c04:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   16c08:	7b62      	ldrb	r2, [r4, #13]
   16c0a:	7b21      	ldrb	r1, [r4, #12]
   16c0c:	4638      	mov	r0, r7
   16c0e:	f003 fcf9 	bl	1a604 <nrf_spim_configure>
    nrf_spim_orc_set(p_spim, p_config->orc);
   16c12:	79a3      	ldrb	r3, [r4, #6]
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   16c14:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   16c18:	2307      	movs	r3, #7
   16c1a:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    if (p_cb->handler)
   16c1e:	f859 3008 	ldr.w	r3, [r9, r8]
   16c22:	b123      	cbz	r3, 16c2e <nrfx_spim_init+0xaa>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   16c24:	6828      	ldr	r0, [r5, #0]
   16c26:	f340 3007 	sbfx	r0, r0, #12, #8
   16c2a:	f002 fc9d 	bl	19568 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   16c2e:	4b1e      	ldr	r3, [pc, #120]	; (16ca8 <nrfx_spim_init+0x124>)
   16c30:	eb03 1346 	add.w	r3, r3, r6, lsl #5
   16c34:	2200      	movs	r2, #0
   16c36:	775a      	strb	r2, [r3, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   16c38:	2201      	movs	r2, #1
   16c3a:	771a      	strb	r2, [r3, #28]
    return err_code;
   16c3c:	481c      	ldr	r0, [pc, #112]	; (16cb0 <nrfx_spim_init+0x12c>)
   16c3e:	e027      	b.n	16c90 <nrfx_spim_init+0x10c>
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   16c40:	f1b1 6f20 	cmp.w	r1, #167772160	; 0xa000000
   16c44:	d0b3      	beq.n	16bae <nrfx_spim_init+0x2a>
   16c46:	f1b1 5fa0 	cmp.w	r1, #335544320	; 0x14000000
   16c4a:	d0b0      	beq.n	16bae <nrfx_spim_init+0x2a>
        return err_code;
   16c4c:	4819      	ldr	r0, [pc, #100]	; (16cb4 <nrfx_spim_init+0x130>)
   16c4e:	e01f      	b.n	16c90 <nrfx_spim_init+0x10c>
        (p_spim == NRF_SPIM4) && (p_config->frequency == NRF_SPIM_FREQ_32M))
   16c50:	f1b1 5fa0 	cmp.w	r1, #335544320	; 0x14000000
   16c54:	d1b4      	bne.n	16bc0 <nrfx_spim_init+0x3c>
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   16c56:	7821      	ldrb	r1, [r4, #0]
   16c58:	29ff      	cmp	r1, #255	; 0xff
   16c5a:	d001      	beq.n	16c60 <nrfx_spim_init+0xdc>
   16c5c:	2908      	cmp	r1, #8
   16c5e:	d11b      	bne.n	16c98 <nrfx_spim_init+0x114>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   16c60:	78e1      	ldrb	r1, [r4, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   16c62:	29ff      	cmp	r1, #255	; 0xff
   16c64:	d001      	beq.n	16c6a <nrfx_spim_init+0xe6>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   16c66:	290b      	cmp	r1, #11
   16c68:	d118      	bne.n	16c9c <nrfx_spim_init+0x118>
   16c6a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   16c6e:	d002      	beq.n	16c76 <nrfx_spim_init+0xf2>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   16c70:	f1bc 0f0c 	cmp.w	ip, #12
   16c74:	d114      	bne.n	16ca0 <nrfx_spim_init+0x11c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   16c76:	7861      	ldrb	r1, [r4, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   16c78:	29ff      	cmp	r1, #255	; 0xff
   16c7a:	d001      	beq.n	16c80 <nrfx_spim_init+0xfc>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   16c7c:	2909      	cmp	r1, #9
   16c7e:	d111      	bne.n	16ca4 <nrfx_spim_init+0x120>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   16c80:	78a1      	ldrb	r1, [r4, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   16c82:	29ff      	cmp	r1, #255	; 0xff
   16c84:	d09c      	beq.n	16bc0 <nrfx_spim_init+0x3c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   16c86:	290a      	cmp	r1, #10
   16c88:	d09a      	beq.n	16bc0 <nrfx_spim_init+0x3c>
            return err_code;
   16c8a:	480b      	ldr	r0, [pc, #44]	; (16cb8 <nrfx_spim_init+0x134>)
   16c8c:	e000      	b.n	16c90 <nrfx_spim_init+0x10c>
        return err_code;
   16c8e:	480b      	ldr	r0, [pc, #44]	; (16cbc <nrfx_spim_init+0x138>)
}
   16c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return err_code;
   16c94:	4807      	ldr	r0, [pc, #28]	; (16cb4 <nrfx_spim_init+0x130>)
   16c96:	e7fb      	b.n	16c90 <nrfx_spim_init+0x10c>
            return err_code;
   16c98:	4807      	ldr	r0, [pc, #28]	; (16cb8 <nrfx_spim_init+0x134>)
   16c9a:	e7f9      	b.n	16c90 <nrfx_spim_init+0x10c>
   16c9c:	4806      	ldr	r0, [pc, #24]	; (16cb8 <nrfx_spim_init+0x134>)
   16c9e:	e7f7      	b.n	16c90 <nrfx_spim_init+0x10c>
   16ca0:	4805      	ldr	r0, [pc, #20]	; (16cb8 <nrfx_spim_init+0x134>)
   16ca2:	e7f5      	b.n	16c90 <nrfx_spim_init+0x10c>
   16ca4:	4804      	ldr	r0, [pc, #16]	; (16cb8 <nrfx_spim_init+0x134>)
   16ca6:	e7f3      	b.n	16c90 <nrfx_spim_init+0x10c>
   16ca8:	20008cd8 	.word	0x20008cd8
   16cac:	4000a000 	.word	0x4000a000
   16cb0:	0bad0000 	.word	0x0bad0000
   16cb4:	0bad0003 	.word	0x0bad0003
   16cb8:	0bad0004 	.word	0x0bad0004
   16cbc:	0bad0005 	.word	0x0bad0005

00016cc0 <nrfx_spim_uninit>:
{
   16cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16cc2:	4605      	mov	r5, r0
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   16cc4:	7904      	ldrb	r4, [r0, #4]
   16cc6:	0162      	lsls	r2, r4, #5
   16cc8:	4b1f      	ldr	r3, [pc, #124]	; (16d48 <nrfx_spim_uninit+0x88>)
   16cca:	eb03 1744 	add.w	r7, r3, r4, lsl #5
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   16cce:	6806      	ldr	r6, [r0, #0]
    if (p_cb->handler)
   16cd0:	589b      	ldr	r3, [r3, r2]
   16cd2:	b143      	cbz	r3, 16ce6 <nrfx_spim_uninit+0x26>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   16cd4:	f346 3007 	sbfx	r0, r6, #12, #8
   16cd8:	f002 fc4b 	bl	19572 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   16cdc:	4b1b      	ldr	r3, [pc, #108]	; (16d4c <nrfx_spim_uninit+0x8c>)
   16cde:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
        if (p_cb->transfer_in_progress)
   16ce2:	7f7b      	ldrb	r3, [r7, #29]
   16ce4:	b97b      	cbnz	r3, 16d06 <nrfx_spim_uninit+0x46>
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   16ce6:	2300      	movs	r3, #0
   16ce8:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
    if (!p_cb->skip_gpio_cfg)
   16cec:	4b16      	ldr	r3, [pc, #88]	; (16d48 <nrfx_spim_uninit+0x88>)
   16cee:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   16cf2:	7f9b      	ldrb	r3, [r3, #30]
   16cf4:	f013 0f01 	tst.w	r3, #1
   16cf8:	d00a      	beq.n	16d10 <nrfx_spim_uninit+0x50>
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   16cfa:	4b13      	ldr	r3, [pc, #76]	; (16d48 <nrfx_spim_uninit+0x88>)
   16cfc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   16d00:	2200      	movs	r2, #0
   16d02:	771a      	strb	r2, [r3, #28]
}
   16d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            spim_abort(p_spim, p_cb);
   16d06:	4639      	mov	r1, r7
   16d08:	4630      	mov	r0, r6
   16d0a:	f003 fce3 	bl	1a6d4 <spim_abort>
   16d0e:	e7ea      	b.n	16ce6 <nrfx_spim_uninit+0x26>
    return p_reg->PSEL.SCK;
   16d10:	f8d6 0508 	ldr.w	r0, [r6, #1288]	; 0x508
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   16d14:	f003 fc8b 	bl	1a62e <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   16d18:	f8d6 0510 	ldr.w	r0, [r6, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   16d1c:	f003 fc87 	bl	1a62e <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   16d20:	f8d6 050c 	ldr.w	r0, [r6, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   16d24:	f003 fc83 	bl	1a62e <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   16d28:	792b      	ldrb	r3, [r5, #4]
   16d2a:	b143      	cbz	r3, 16d3e <nrfx_spim_uninit+0x7e>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   16d2c:	4b06      	ldr	r3, [pc, #24]	; (16d48 <nrfx_spim_uninit+0x88>)
   16d2e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   16d32:	7fd8      	ldrb	r0, [r3, #31]
   16d34:	28ff      	cmp	r0, #255	; 0xff
   16d36:	d0e0      	beq.n	16cfa <nrfx_spim_uninit+0x3a>
            nrf_gpio_cfg_default(p_cb->ss_pin);
   16d38:	f7ff fdca 	bl	168d0 <nrf_gpio_cfg_default>
   16d3c:	e7dd      	b.n	16cfa <nrfx_spim_uninit+0x3a>
    return p_reg->PSELDCX;
   16d3e:	f8d6 056c 	ldr.w	r0, [r6, #1388]	; 0x56c
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   16d42:	f003 fc74 	bl	1a62e <spim_pin_uninit>
   16d46:	e7f1      	b.n	16d2c <nrfx_spim_uninit+0x6c>
   16d48:	20008cd8 	.word	0x20008cd8
   16d4c:	00080152 	.word	0x00080152

00016d50 <nrfx_spim_xfer>:

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   16d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16d54:	4690      	mov	r8, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   16d56:	7903      	ldrb	r3, [r0, #4]
   16d58:	4e13      	ldr	r6, [pc, #76]	; (16da8 <nrfx_spim_xfer+0x58>)
   16d5a:	eb06 1643 	add.w	r6, r6, r3, lsl #5
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   16d5e:	7f72      	ldrb	r2, [r6, #29]
   16d60:	b9fa      	cbnz	r2, 16da2 <nrfx_spim_xfer+0x52>
   16d62:	4607      	mov	r7, r0
   16d64:	460d      	mov	r5, r1
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   16d66:	015a      	lsls	r2, r3, #5
   16d68:	490f      	ldr	r1, [pc, #60]	; (16da8 <nrfx_spim_xfer+0x58>)
   16d6a:	588a      	ldr	r2, [r1, r2]
   16d6c:	b122      	cbz	r2, 16d78 <nrfx_spim_xfer+0x28>
   16d6e:	f018 0f14 	tst.w	r8, #20
   16d72:	d101      	bne.n	16d78 <nrfx_spim_xfer+0x28>
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   16d74:	2101      	movs	r1, #1
   16d76:	7771      	strb	r1, [r6, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   16d78:	4c0b      	ldr	r4, [pc, #44]	; (16da8 <nrfx_spim_xfer+0x58>)
   16d7a:	eb04 1c43 	add.w	ip, r4, r3, lsl #5
   16d7e:	f10c 0c0c 	add.w	ip, ip, #12
   16d82:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   16d86:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   16d8a:	2101      	movs	r1, #1
   16d8c:	4630      	mov	r0, r6
   16d8e:	f003 fc56 	bl	1a63e <set_ss_pin_state>

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   16d92:	4643      	mov	r3, r8
   16d94:	462a      	mov	r2, r5
   16d96:	4631      	mov	r1, r6
   16d98:	6838      	ldr	r0, [r7, #0]
   16d9a:	f7ff fea9 	bl	16af0 <spim_xfer>
}
   16d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   16da2:	4802      	ldr	r0, [pc, #8]	; (16dac <nrfx_spim_xfer+0x5c>)
   16da4:	e7fb      	b.n	16d9e <nrfx_spim_xfer+0x4e>
   16da6:	bf00      	nop
   16da8:	20008cd8 	.word	0x20008cd8
   16dac:	0bad000b 	.word	0x0bad000b

00016db0 <nrfx_spim_4_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
   16db0:	b508      	push	{r3, lr}
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
   16db2:	4902      	ldr	r1, [pc, #8]	; (16dbc <nrfx_spim_4_irq_handler+0xc>)
   16db4:	4802      	ldr	r0, [pc, #8]	; (16dc0 <nrfx_spim_4_irq_handler+0x10>)
   16db6:	f003 fc7e 	bl	1a6b6 <irq_handler>
}
   16dba:	bd08      	pop	{r3, pc}
   16dbc:	20008cd8 	.word	0x20008cd8
   16dc0:	4000a000 	.word	0x4000a000

00016dc4 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   16dc4:	4b03      	ldr	r3, [pc, #12]	; (16dd4 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   16dc6:	e000      	b.n	16dca <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   16dc8:	3318      	adds	r3, #24
	while (dev < __device_end) {
   16dca:	4a03      	ldr	r2, [pc, #12]	; (16dd8 <z_device_state_init+0x14>)
   16dcc:	4293      	cmp	r3, r2
   16dce:	d3fb      	bcc.n	16dc8 <z_device_state_init+0x4>
	}
}
   16dd0:	4770      	bx	lr
   16dd2:	bf00      	nop
   16dd4:	0001ac50 	.word	0x0001ac50
   16dd8:	0001ad10 	.word	0x0001ad10

00016ddc <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   16ddc:	2804      	cmp	r0, #4
   16dde:	d80c      	bhi.n	16dfa <reason_to_str+0x1e>
   16de0:	e8df f000 	tbb	[pc, r0]
   16de4:	07050d03 	.word	0x07050d03
   16de8:	09          	.byte	0x09
   16de9:	00          	.byte	0x00
   16dea:	4806      	ldr	r0, [pc, #24]	; (16e04 <reason_to_str+0x28>)
   16dec:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
   16dee:	4806      	ldr	r0, [pc, #24]	; (16e08 <reason_to_str+0x2c>)
   16df0:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
   16df2:	4806      	ldr	r0, [pc, #24]	; (16e0c <reason_to_str+0x30>)
   16df4:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   16df6:	4806      	ldr	r0, [pc, #24]	; (16e10 <reason_to_str+0x34>)
   16df8:	4770      	bx	lr
	default:
		return "Unknown error";
   16dfa:	4806      	ldr	r0, [pc, #24]	; (16e14 <reason_to_str+0x38>)
   16dfc:	4770      	bx	lr
		return "Unhandled interrupt";
   16dfe:	4806      	ldr	r0, [pc, #24]	; (16e18 <reason_to_str+0x3c>)
	}
}
   16e00:	4770      	bx	lr
   16e02:	bf00      	nop
   16e04:	0001bd8c 	.word	0x0001bd8c
   16e08:	0001bdb0 	.word	0x0001bdb0
   16e0c:	0001bdc0 	.word	0x0001bdc0
   16e10:	0001bdcc 	.word	0x0001bdcc
   16e14:	0001bddc 	.word	0x0001bddc
   16e18:	0001bd9c 	.word	0x0001bd9c

00016e1c <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   16e1c:	b130      	cbz	r0, 16e2c <thread_name_get+0x10>
{
   16e1e:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   16e20:	f003 fc93 	bl	1a74a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   16e24:	b120      	cbz	r0, 16e30 <thread_name_get+0x14>
   16e26:	7803      	ldrb	r3, [r0, #0]
   16e28:	b123      	cbz	r3, 16e34 <thread_name_get+0x18>
}
   16e2a:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   16e2c:	4802      	ldr	r0, [pc, #8]	; (16e38 <thread_name_get+0x1c>)
}
   16e2e:	4770      	bx	lr
		thread_name = "unknown";
   16e30:	4801      	ldr	r0, [pc, #4]	; (16e38 <thread_name_get+0x1c>)
   16e32:	e7fa      	b.n	16e2a <thread_name_get+0xe>
   16e34:	4800      	ldr	r0, [pc, #0]	; (16e38 <thread_name_get+0x1c>)
	return thread_name;
   16e36:	e7f8      	b.n	16e2a <thread_name_get+0xe>
   16e38:	0001bdec 	.word	0x0001bdec

00016e3c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   16e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16e40:	b089      	sub	sp, #36	; 0x24
   16e42:	af00      	add	r7, sp, #0
   16e44:	4606      	mov	r6, r0
   16e46:	460c      	mov	r4, r1
	__asm__ volatile(
   16e48:	f04f 0320 	mov.w	r3, #32
   16e4c:	f3ef 8811 	mrs	r8, BASEPRI
   16e50:	f383 8812 	msr	BASEPRI_MAX, r3
   16e54:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   16e58:	f001 f828 	bl	17eac <z_impl_z_current_get>
   16e5c:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   16e5e:	4630      	mov	r0, r6
   16e60:	f7ff ffbc 	bl	16ddc <reason_to_str>
   16e64:	46e9      	mov	r9, sp
   16e66:	2301      	movs	r3, #1
   16e68:	713b      	strb	r3, [r7, #4]
   16e6a:	2303      	movs	r3, #3
   16e6c:	717b      	strb	r3, [r7, #5]
   16e6e:	b08a      	sub	sp, #40	; 0x28
   16e70:	46ec      	mov	ip, sp
   16e72:	f11c 0210 	adds.w	r2, ip, #16
   16e76:	d021      	beq.n	16ebc <z_fatal_error+0x80>
   16e78:	f04f 0e16 	mov.w	lr, #22
   16e7c:	b152      	cbz	r2, 16e94 <z_fatal_error+0x58>
   16e7e:	4673      	mov	r3, lr
   16e80:	f1be 0f04 	cmp.w	lr, #4
   16e84:	dd02      	ble.n	16e8c <z_fatal_error+0x50>
   16e86:	4976      	ldr	r1, [pc, #472]	; (17060 <z_fatal_error+0x224>)
   16e88:	f8cc 1014 	str.w	r1, [ip, #20]
   16e8c:	2b08      	cmp	r3, #8
   16e8e:	dd01      	ble.n	16e94 <z_fatal_error+0x58>
   16e90:	f8cc 6018 	str.w	r6, [ip, #24]
   16e94:	2301      	movs	r3, #1
   16e96:	703b      	strb	r3, [r7, #0]
   16e98:	2303      	movs	r3, #3
   16e9a:	707b      	strb	r3, [r7, #1]
   16e9c:	b1da      	cbz	r2, 16ed6 <z_fatal_error+0x9a>
   16e9e:	4673      	mov	r3, lr
   16ea0:	f1be 0f0c 	cmp.w	lr, #12
   16ea4:	dd01      	ble.n	16eaa <z_fatal_error+0x6e>
   16ea6:	f8cc 001c 	str.w	r0, [ip, #28]
   16eaa:	2b10      	cmp	r3, #16
   16eac:	dd02      	ble.n	16eb4 <z_fatal_error+0x78>
   16eae:	2300      	movs	r3, #0
   16eb0:	f8cc 3020 	str.w	r3, [ip, #32]
   16eb4:	f10c 0324 	add.w	r3, ip, #36	; 0x24
   16eb8:	2100      	movs	r1, #0
   16eba:	e00a      	b.n	16ed2 <z_fatal_error+0x96>
   16ebc:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   16ec0:	e7dc      	b.n	16e7c <z_fatal_error+0x40>
   16ec2:	f101 0020 	add.w	r0, r1, #32
   16ec6:	4438      	add	r0, r7
   16ec8:	f810 0c20 	ldrb.w	r0, [r0, #-32]
   16ecc:	f803 0b01 	strb.w	r0, [r3], #1
   16ed0:	3101      	adds	r1, #1
   16ed2:	2901      	cmp	r1, #1
   16ed4:	d9f5      	bls.n	16ec2 <z_fatal_error+0x86>
   16ed6:	f1be 0f15 	cmp.w	lr, #21
   16eda:	dd53      	ble.n	16f84 <z_fatal_error+0x148>
   16edc:	2316      	movs	r3, #22
   16ede:	b14a      	cbz	r2, 16ef4 <z_fatal_error+0xb8>
   16ee0:	2105      	movs	r1, #5
   16ee2:	7139      	strb	r1, [r7, #4]
   16ee4:	2100      	movs	r1, #0
   16ee6:	7179      	strb	r1, [r7, #5]
   16ee8:	71b9      	strb	r1, [r7, #6]
   16eea:	2101      	movs	r1, #1
   16eec:	71f9      	strb	r1, [r7, #7]
   16eee:	6878      	ldr	r0, [r7, #4]
   16ef0:	f8cc 0010 	str.w	r0, [ip, #16]
   16ef4:	2100      	movs	r1, #0
   16ef6:	f36f 0100 	bfc	r1, #0, #1
   16efa:	f36f 0141 	bfc	r1, #1, #1
   16efe:	f36f 0182 	bfc	r1, #2, #1
   16f02:	f36f 01c5 	bfc	r1, #3, #3
   16f06:	2001      	movs	r0, #1
   16f08:	f360 1188 	bfi	r1, r0, #6, #3
   16f0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16f10:	f363 2152 	bfi	r1, r3, #9, #10
   16f14:	f36f 41de 	bfc	r1, #19, #12
   16f18:	f36f 71df 	bfc	r1, #31, #1
   16f1c:	2300      	movs	r3, #0
   16f1e:	4851      	ldr	r0, [pc, #324]	; (17064 <z_fatal_error+0x228>)
   16f20:	f002 fa21 	bl	19366 <z_impl_z_log_msg_static_create>
   16f24:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   16f26:	b11c      	cbz	r4, 16f30 <z_fatal_error+0xf4>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   16f28:	69e3      	ldr	r3, [r4, #28]
   16f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   16f2e:	bb63      	cbnz	r3, 16f8a <z_fatal_error+0x14e>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   16f30:	4628      	mov	r0, r5
   16f32:	f7ff ff73 	bl	16e1c <thread_name_get>
   16f36:	46e9      	mov	r9, sp
   16f38:	2301      	movs	r3, #1
   16f3a:	713b      	strb	r3, [r7, #4]
   16f3c:	2303      	movs	r3, #3
   16f3e:	717b      	strb	r3, [r7, #5]
   16f40:	b08a      	sub	sp, #40	; 0x28
   16f42:	46ec      	mov	ip, sp
   16f44:	f11c 0210 	adds.w	r2, ip, #16
   16f48:	d042      	beq.n	16fd0 <z_fatal_error+0x194>
   16f4a:	f04f 0e12 	mov.w	lr, #18
   16f4e:	b152      	cbz	r2, 16f66 <z_fatal_error+0x12a>
   16f50:	4673      	mov	r3, lr
   16f52:	f1be 0f04 	cmp.w	lr, #4
   16f56:	dd02      	ble.n	16f5e <z_fatal_error+0x122>
   16f58:	4943      	ldr	r1, [pc, #268]	; (17068 <z_fatal_error+0x22c>)
   16f5a:	f8cc 1014 	str.w	r1, [ip, #20]
   16f5e:	2b08      	cmp	r3, #8
   16f60:	dd01      	ble.n	16f66 <z_fatal_error+0x12a>
   16f62:	f8cc 5018 	str.w	r5, [ip, #24]
   16f66:	2301      	movs	r3, #1
   16f68:	703b      	strb	r3, [r7, #0]
   16f6a:	2303      	movs	r3, #3
   16f6c:	707b      	strb	r3, [r7, #1]
   16f6e:	2a00      	cmp	r2, #0
   16f70:	d03b      	beq.n	16fea <z_fatal_error+0x1ae>
   16f72:	f1be 0f0c 	cmp.w	lr, #12
   16f76:	dd01      	ble.n	16f7c <z_fatal_error+0x140>
   16f78:	f8cc 001c 	str.w	r0, [ip, #28]
   16f7c:	f10c 0320 	add.w	r3, ip, #32
   16f80:	2100      	movs	r1, #0
   16f82:	e030      	b.n	16fe6 <z_fatal_error+0x1aa>
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   16f84:	f06f 031b 	mvn.w	r3, #27
   16f88:	e7a9      	b.n	16ede <z_fatal_error+0xa2>
		LOG_ERR("Fault during interrupt handling\n");
   16f8a:	4b38      	ldr	r3, [pc, #224]	; (1706c <z_fatal_error+0x230>)
   16f8c:	61fb      	str	r3, [r7, #28]
   16f8e:	2302      	movs	r3, #2
   16f90:	713b      	strb	r3, [r7, #4]
   16f92:	2300      	movs	r3, #0
   16f94:	717b      	strb	r3, [r7, #5]
   16f96:	71bb      	strb	r3, [r7, #6]
   16f98:	71fb      	strb	r3, [r7, #7]
   16f9a:	687a      	ldr	r2, [r7, #4]
   16f9c:	61ba      	str	r2, [r7, #24]
   16f9e:	4619      	mov	r1, r3
   16fa0:	f363 0100 	bfi	r1, r3, #0, #1
   16fa4:	f363 0141 	bfi	r1, r3, #1, #1
   16fa8:	f363 0182 	bfi	r1, r3, #2, #1
   16fac:	f363 01c5 	bfi	r1, r3, #3, #3
   16fb0:	2201      	movs	r2, #1
   16fb2:	f362 1188 	bfi	r1, r2, #6, #3
   16fb6:	2208      	movs	r2, #8
   16fb8:	f362 2152 	bfi	r1, r2, #9, #10
   16fbc:	f363 41de 	bfi	r1, r3, #19, #12
   16fc0:	f363 71df 	bfi	r1, r3, #31, #1
   16fc4:	f107 0218 	add.w	r2, r7, #24
   16fc8:	4826      	ldr	r0, [pc, #152]	; (17064 <z_fatal_error+0x228>)
   16fca:	f002 f9cc 	bl	19366 <z_impl_z_log_msg_static_create>
   16fce:	e7af      	b.n	16f30 <z_fatal_error+0xf4>
	LOG_ERR("Current thread: %p (%s)", thread,
   16fd0:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   16fd4:	e7bb      	b.n	16f4e <z_fatal_error+0x112>
   16fd6:	f101 0020 	add.w	r0, r1, #32
   16fda:	4438      	add	r0, r7
   16fdc:	f810 0c20 	ldrb.w	r0, [r0, #-32]
   16fe0:	f803 0b01 	strb.w	r0, [r3], #1
   16fe4:	3101      	adds	r1, #1
   16fe6:	2901      	cmp	r1, #1
   16fe8:	d9f5      	bls.n	16fd6 <z_fatal_error+0x19a>
   16fea:	f1be 0f11 	cmp.w	lr, #17
   16fee:	dd33      	ble.n	17058 <z_fatal_error+0x21c>
   16ff0:	2312      	movs	r3, #18
   16ff2:	b14a      	cbz	r2, 17008 <z_fatal_error+0x1cc>
   16ff4:	2104      	movs	r1, #4
   16ff6:	7139      	strb	r1, [r7, #4]
   16ff8:	2100      	movs	r1, #0
   16ffa:	7179      	strb	r1, [r7, #5]
   16ffc:	71b9      	strb	r1, [r7, #6]
   16ffe:	2101      	movs	r1, #1
   17000:	71f9      	strb	r1, [r7, #7]
   17002:	6878      	ldr	r0, [r7, #4]
   17004:	f8cc 0010 	str.w	r0, [ip, #16]
   17008:	2100      	movs	r1, #0
   1700a:	f36f 0100 	bfc	r1, #0, #1
   1700e:	f36f 0141 	bfc	r1, #1, #1
   17012:	f36f 0182 	bfc	r1, #2, #1
   17016:	f36f 01c5 	bfc	r1, #3, #3
   1701a:	2001      	movs	r0, #1
   1701c:	f360 1188 	bfi	r1, r0, #6, #3
   17020:	f3c3 0309 	ubfx	r3, r3, #0, #10
   17024:	f363 2152 	bfi	r1, r3, #9, #10
   17028:	f36f 41de 	bfc	r1, #19, #12
   1702c:	f36f 71df 	bfc	r1, #31, #1
   17030:	2300      	movs	r3, #0
   17032:	480c      	ldr	r0, [pc, #48]	; (17064 <z_fatal_error+0x228>)
   17034:	f002 f997 	bl	19366 <z_impl_z_log_msg_static_create>
   17038:	46cd      	mov	sp, r9

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1703a:	4621      	mov	r1, r4
   1703c:	4630      	mov	r0, r6
   1703e:	f7fe fce9 	bl	15a14 <k_sys_fatal_error_handler>
	__asm__ volatile(
   17042:	f388 8811 	msr	BASEPRI, r8
   17046:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1704a:	4628      	mov	r0, r5
   1704c:	f7fc fb5a 	bl	13704 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   17050:	3724      	adds	r7, #36	; 0x24
   17052:	46bd      	mov	sp, r7
   17054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR("Current thread: %p (%s)", thread,
   17058:	f06f 031b 	mvn.w	r3, #27
   1705c:	e7c9      	b.n	16ff2 <z_fatal_error+0x1b6>
   1705e:	bf00      	nop
   17060:	0001bdf4 	.word	0x0001bdf4
   17064:	0001afb8 	.word	0x0001afb8
   17068:	0001be40 	.word	0x0001be40
   1706c:	0001be1c 	.word	0x0001be1c

00017070 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
   17070:	b570      	push	{r4, r5, r6, lr}
   17072:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17074:	4b11      	ldr	r3, [pc, #68]	; (170bc <z_sys_init_run_level+0x4c>)
   17076:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1707a:	e009      	b.n	17090 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   1707c:	4240      	negs	r0, r0
   1707e:	e017      	b.n	170b0 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   17080:	68eb      	ldr	r3, [r5, #12]
   17082:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   17084:	68ea      	ldr	r2, [r5, #12]
   17086:	7853      	ldrb	r3, [r2, #1]
   17088:	f043 0301 	orr.w	r3, r3, #1
   1708c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1708e:	3408      	adds	r4, #8
   17090:	1c73      	adds	r3, r6, #1
   17092:	4a0a      	ldr	r2, [pc, #40]	; (170bc <z_sys_init_run_level+0x4c>)
   17094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17098:	42a3      	cmp	r3, r4
   1709a:	d90d      	bls.n	170b8 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   1709c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   1709e:	6823      	ldr	r3, [r4, #0]
   170a0:	4628      	mov	r0, r5
   170a2:	4798      	blx	r3
		if (dev != NULL) {
   170a4:	2d00      	cmp	r5, #0
   170a6:	d0f2      	beq.n	1708e <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   170a8:	2800      	cmp	r0, #0
   170aa:	d0eb      	beq.n	17084 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   170ac:	2800      	cmp	r0, #0
   170ae:	dbe5      	blt.n	1707c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   170b0:	28ff      	cmp	r0, #255	; 0xff
   170b2:	dde5      	ble.n	17080 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   170b4:	20ff      	movs	r0, #255	; 0xff
   170b6:	e7e3      	b.n	17080 <z_sys_init_run_level+0x10>
		}
	}
}
   170b8:	bd70      	pop	{r4, r5, r6, pc}
   170ba:	bf00      	nop
   170bc:	0001be60 	.word	0x0001be60

000170c0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   170c0:	b510      	push	{r4, lr}
   170c2:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   170c4:	23b8      	movs	r3, #184	; 0xb8
   170c6:	4c11      	ldr	r4, [pc, #68]	; (1710c <init_idle_thread+0x4c>)
   170c8:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
   170cc:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   170d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   170d4:	4b0e      	ldr	r3, [pc, #56]	; (17110 <init_idle_thread+0x50>)
   170d6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
   170da:	4a0e      	ldr	r2, [pc, #56]	; (17114 <init_idle_thread+0x54>)
   170dc:	9205      	str	r2, [sp, #20]
   170de:	2201      	movs	r2, #1
   170e0:	9204      	str	r2, [sp, #16]
   170e2:	220f      	movs	r2, #15
   170e4:	9203      	str	r2, [sp, #12]
   170e6:	2200      	movs	r2, #0
   170e8:	9202      	str	r2, [sp, #8]
   170ea:	9201      	str	r2, [sp, #4]
   170ec:	9300      	str	r3, [sp, #0]
   170ee:	4b0a      	ldr	r3, [pc, #40]	; (17118 <init_idle_thread+0x58>)
   170f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   170f4:	4909      	ldr	r1, [pc, #36]	; (1711c <init_idle_thread+0x5c>)
   170f6:	eb01 118c 	add.w	r1, r1, ip, lsl #6
   170fa:	4620      	mov	r0, r4
   170fc:	f000 f918 	bl	17330 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17100:	7b63      	ldrb	r3, [r4, #13]
   17102:	f023 0304 	bic.w	r3, r3, #4
   17106:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   17108:	b006      	add	sp, #24
   1710a:	bd10      	pop	{r4, pc}
   1710c:	200086c8 	.word	0x200086c8
   17110:	20008cf8 	.word	0x20008cf8
   17114:	0001be58 	.word	0x0001be58
   17118:	0001748d 	.word	0x0001748d
   1711c:	20009840 	.word	0x20009840

00017120 <bg_thread_main>:
{
   17120:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   17122:	4b0a      	ldr	r3, [pc, #40]	; (1714c <bg_thread_main+0x2c>)
   17124:	2201      	movs	r2, #1
   17126:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   17128:	2003      	movs	r0, #3
   1712a:	f7ff ffa1 	bl	17070 <z_sys_init_run_level>
	boot_banner();
   1712e:	f001 f92f 	bl	18390 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   17132:	2004      	movs	r0, #4
   17134:	f7ff ff9c 	bl	17070 <z_sys_init_run_level>
	z_init_static_threads();
   17138:	f000 f95e 	bl	173f8 <z_init_static_threads>
	main();
   1713c:	f7f9 f972 	bl	10424 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   17140:	4a03      	ldr	r2, [pc, #12]	; (17150 <bg_thread_main+0x30>)
   17142:	7b13      	ldrb	r3, [r2, #12]
   17144:	f023 0301 	bic.w	r3, r3, #1
   17148:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1714a:	bd08      	pop	{r3, pc}
   1714c:	20008d3a 	.word	0x20008d3a
   17150:	20008780 	.word	0x20008780

00017154 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   17154:	b508      	push	{r3, lr}
   17156:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   17158:	4a01      	ldr	r2, [pc, #4]	; (17160 <switch_to_main_thread+0xc>)
   1715a:	4802      	ldr	r0, [pc, #8]	; (17164 <switch_to_main_thread+0x10>)
   1715c:	f7fb faee 	bl	1273c <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   17160:	00017121 	.word	0x00017121
   17164:	20008780 	.word	0x20008780

00017168 <z_bss_zero>:
{
   17168:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1716a:	4803      	ldr	r0, [pc, #12]	; (17178 <z_bss_zero+0x10>)
   1716c:	4a03      	ldr	r2, [pc, #12]	; (1717c <z_bss_zero+0x14>)
   1716e:	1a12      	subs	r2, r2, r0
   17170:	2100      	movs	r1, #0
   17172:	f003 fad0 	bl	1a716 <z_early_memset>
}
   17176:	bd08      	pop	{r3, pc}
   17178:	200081a0 	.word	0x200081a0
   1717c:	20008d3c 	.word	0x20008d3c

00017180 <z_init_cpu>:
{
   17180:	b510      	push	{r4, lr}
   17182:	4604      	mov	r4, r0
	init_idle_thread(id);
   17184:	f7ff ff9c 	bl	170c0 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   17188:	23b8      	movs	r3, #184	; 0xb8
   1718a:	490a      	ldr	r1, [pc, #40]	; (171b4 <z_init_cpu+0x34>)
   1718c:	fb03 1104 	mla	r1, r3, r4, r1
   17190:	4a09      	ldr	r2, [pc, #36]	; (171b8 <z_init_cpu+0x38>)
   17192:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   17196:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1719a:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   1719c:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1719e:	4b07      	ldr	r3, [pc, #28]	; (171bc <z_init_cpu+0x3c>)
   171a0:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
   171a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
   171a8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   171ac:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   171b0:	6053      	str	r3, [r2, #4]
}
   171b2:	bd10      	pop	{r4, pc}
   171b4:	200086c8 	.word	0x200086c8
   171b8:	20008cf8 	.word	0x20008cf8
   171bc:	20009040 	.word	0x20009040

000171c0 <prepare_multithreading>:
{
   171c0:	b570      	push	{r4, r5, r6, lr}
   171c2:	b086      	sub	sp, #24
	z_sched_init();
   171c4:	f000 fd74 	bl	17cb0 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   171c8:	4d10      	ldr	r5, [pc, #64]	; (1720c <prepare_multithreading+0x4c>)
   171ca:	4b11      	ldr	r3, [pc, #68]	; (17210 <prepare_multithreading+0x50>)
   171cc:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   171ce:	4b11      	ldr	r3, [pc, #68]	; (17214 <prepare_multithreading+0x54>)
   171d0:	9305      	str	r3, [sp, #20]
   171d2:	2301      	movs	r3, #1
   171d4:	9304      	str	r3, [sp, #16]
   171d6:	2400      	movs	r4, #0
   171d8:	9403      	str	r4, [sp, #12]
   171da:	9402      	str	r4, [sp, #8]
   171dc:	9401      	str	r4, [sp, #4]
   171de:	9400      	str	r4, [sp, #0]
   171e0:	4b0d      	ldr	r3, [pc, #52]	; (17218 <prepare_multithreading+0x58>)
   171e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   171e6:	490d      	ldr	r1, [pc, #52]	; (1721c <prepare_multithreading+0x5c>)
   171e8:	4628      	mov	r0, r5
   171ea:	f000 f8a1 	bl	17330 <z_setup_new_thread>
   171ee:	4606      	mov	r6, r0
   171f0:	7b6b      	ldrb	r3, [r5, #13]
   171f2:	f023 0304 	bic.w	r3, r3, #4
   171f6:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   171f8:	4628      	mov	r0, r5
   171fa:	f003 fb60 	bl	1a8be <z_ready_thread>
	z_init_cpu(0);
   171fe:	4620      	mov	r0, r4
   17200:	f7ff ffbe 	bl	17180 <z_init_cpu>
}
   17204:	4630      	mov	r0, r6
   17206:	b006      	add	sp, #24
   17208:	bd70      	pop	{r4, r5, r6, pc}
   1720a:	bf00      	nop
   1720c:	20008780 	.word	0x20008780
   17210:	20008cf8 	.word	0x20008cf8
   17214:	0001b0dc 	.word	0x0001b0dc
   17218:	00017121 	.word	0x00017121
   1721c:	20009980 	.word	0x20009980

00017220 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   17220:	b500      	push	{lr}
   17222:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   17224:	2000      	movs	r0, #0
   17226:	f7ff ff23 	bl	17070 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1722a:	4b1e      	ldr	r3, [pc, #120]	; (172a4 <z_cstart+0x84>)
	uint32_t msp =
   1722c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   17230:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   17234:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17238:	4c1b      	ldr	r4, [pc, #108]	; (172a8 <z_cstart+0x88>)
   1723a:	23e0      	movs	r3, #224	; 0xe0
   1723c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   17240:	2500      	movs	r5, #0
   17242:	77e5      	strb	r5, [r4, #31]
   17244:	7625      	strb	r5, [r4, #24]
   17246:	7665      	strb	r5, [r4, #25]
   17248:	76a5      	strb	r5, [r4, #26]
   1724a:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1724e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17250:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   17254:	6263      	str	r3, [r4, #36]	; 0x24
   17256:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1725a:	f7fc f99f 	bl	1359c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1725e:	f7fb f843 	bl	122e8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   17262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17266:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   17268:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1726a:	f7fc fc9f 	bl	13bac <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1726e:	f7fc fa63 	bl	13738 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   17272:	f7fa fb37 	bl	118e4 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   17276:	2401      	movs	r4, #1
   17278:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1727c:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   17280:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
   17282:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
   17284:	9529      	str	r5, [sp, #164]	; 0xa4

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   17286:	4b09      	ldr	r3, [pc, #36]	; (172ac <z_cstart+0x8c>)
   17288:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1728c:	f7ff fd9a 	bl	16dc4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   17290:	4620      	mov	r0, r4
   17292:	f7ff feed 	bl	17070 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   17296:	2002      	movs	r0, #2
   17298:	f7ff feea 	bl	17070 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   1729c:	f7ff ff90 	bl	171c0 <prepare_multithreading>
   172a0:	f7ff ff58 	bl	17154 <switch_to_main_thread>
   172a4:	20009040 	.word	0x20009040
   172a8:	e000ed00 	.word	0xe000ed00
   172ac:	20008cf8 	.word	0x20008cf8

000172b0 <z_thread_monitor_exit>:
	__asm__ volatile(
   172b0:	f04f 0320 	mov.w	r3, #32
   172b4:	f3ef 8111 	mrs	r1, BASEPRI
   172b8:	f383 8812 	msr	BASEPRI_MAX, r3
   172bc:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   172c0:	4b0a      	ldr	r3, [pc, #40]	; (172ec <z_thread_monitor_exit+0x3c>)
   172c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   172c4:	4283      	cmp	r3, r0
   172c6:	d104      	bne.n	172d2 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   172c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   172ca:	4b08      	ldr	r3, [pc, #32]	; (172ec <z_thread_monitor_exit+0x3c>)
   172cc:	629a      	str	r2, [r3, #40]	; 0x28
   172ce:	e007      	b.n	172e0 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   172d0:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   172d2:	b113      	cbz	r3, 172da <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   172d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
   172d6:	4282      	cmp	r2, r0
   172d8:	d1fa      	bne.n	172d0 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   172da:	b10b      	cbz	r3, 172e0 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   172dc:	6f02      	ldr	r2, [r0, #112]	; 0x70
   172de:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
   172e0:	f381 8811 	msr	BASEPRI, r1
   172e4:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   172e8:	4770      	bx	lr
   172ea:	bf00      	nop
   172ec:	20008cf8 	.word	0x20008cf8

000172f0 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   172f0:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   172f2:	4604      	mov	r4, r0
   172f4:	b140      	cbz	r0, 17308 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
   172f6:	221f      	movs	r2, #31
   172f8:	f104 0074 	add.w	r0, r4, #116	; 0x74
   172fc:	f002 f9e9 	bl	196d2 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   17300:	2000      	movs	r0, #0
   17302:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   17306:	bd10      	pop	{r4, pc}
		thread = _current;
   17308:	4b01      	ldr	r3, [pc, #4]	; (17310 <z_impl_k_thread_name_set+0x20>)
   1730a:	689c      	ldr	r4, [r3, #8]
   1730c:	e7f3      	b.n	172f6 <z_impl_k_thread_name_set+0x6>
   1730e:	bf00      	nop
   17310:	20008cf8 	.word	0x20008cf8

00017314 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   17314:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17316:	ea53 0102 	orrs.w	r1, r3, r2
   1731a:	d102      	bne.n	17322 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   1731c:	f003 fa17 	bl	1a74e <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   17320:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   17322:	4902      	ldr	r1, [pc, #8]	; (1732c <schedule_new_thread+0x18>)
   17324:	3018      	adds	r0, #24
   17326:	f000 fe61 	bl	17fec <z_add_timeout>
   1732a:	e7f9      	b.n	17320 <schedule_new_thread+0xc>
   1732c:	0001a8f7 	.word	0x0001a8f7

00017330 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   17330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17334:	b085      	sub	sp, #20
   17336:	4604      	mov	r4, r0
   17338:	460f      	mov	r7, r1
   1733a:	4615      	mov	r5, r2
   1733c:	461e      	mov	r6, r3
   1733e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   17342:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   17346:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   1734a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1734e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   17352:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   17354:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   17356:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17358:	2204      	movs	r2, #4
   1735a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1735c:	f003 f9fb 	bl	1a756 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   17360:	462a      	mov	r2, r5
   17362:	4639      	mov	r1, r7
   17364:	4620      	mov	r0, r4
   17366:	f003 f9de 	bl	1a726 <setup_thread_stack>
   1736a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1736c:	f8cd 8008 	str.w	r8, [sp, #8]
   17370:	f8cd 9004 	str.w	r9, [sp, #4]
   17374:	f8cd a000 	str.w	sl, [sp]
   17378:	4633      	mov	r3, r6
   1737a:	4602      	mov	r2, r0
   1737c:	4639      	mov	r1, r7
   1737e:	4620      	mov	r0, r4
   17380:	f7fb f9b6 	bl	126f0 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   17384:	2300      	movs	r3, #0
   17386:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   17388:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
   1738a:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
   1738e:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
   17392:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
   17396:	f04f 0320 	mov.w	r3, #32
   1739a:	f3ef 8211 	mrs	r2, BASEPRI
   1739e:	f383 8812 	msr	BASEPRI_MAX, r3
   173a2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   173a6:	4b13      	ldr	r3, [pc, #76]	; (173f4 <z_setup_new_thread+0xc4>)
   173a8:	6a99      	ldr	r1, [r3, #40]	; 0x28
   173aa:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
   173ac:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   173ae:	f382 8811 	msr	BASEPRI, r2
   173b2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   173b6:	f1bb 0f00 	cmp.w	fp, #0
   173ba:	d013      	beq.n	173e4 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   173bc:	221f      	movs	r2, #31
   173be:	4659      	mov	r1, fp
   173c0:	f104 0074 	add.w	r0, r4, #116	; 0x74
   173c4:	f002 f985 	bl	196d2 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   173c8:	2300      	movs	r3, #0
   173ca:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   173ce:	4b09      	ldr	r3, [pc, #36]	; (173f4 <z_setup_new_thread+0xc4>)
   173d0:	689b      	ldr	r3, [r3, #8]
   173d2:	b15b      	cbz	r3, 173ec <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   173d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   173d8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   173dc:	4628      	mov	r0, r5
   173de:	b005      	add	sp, #20
   173e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   173e4:	2300      	movs	r3, #0
   173e6:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   173ea:	e7f0      	b.n	173ce <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   173ec:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
   173f0:	e7f4      	b.n	173dc <z_setup_new_thread+0xac>
   173f2:	bf00      	nop
   173f4:	20008cf8 	.word	0x20008cf8

000173f8 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   173f8:	b530      	push	{r4, r5, lr}
   173fa:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   173fc:	4c21      	ldr	r4, [pc, #132]	; (17484 <z_init_static_threads+0x8c>)
   173fe:	e014      	b.n	1742a <z_init_static_threads+0x32>
		z_setup_new_thread(
   17400:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17402:	9305      	str	r3, [sp, #20]
   17404:	6a23      	ldr	r3, [r4, #32]
   17406:	9304      	str	r3, [sp, #16]
   17408:	69e3      	ldr	r3, [r4, #28]
   1740a:	9303      	str	r3, [sp, #12]
   1740c:	69a3      	ldr	r3, [r4, #24]
   1740e:	9302      	str	r3, [sp, #8]
   17410:	6963      	ldr	r3, [r4, #20]
   17412:	9301      	str	r3, [sp, #4]
   17414:	6923      	ldr	r3, [r4, #16]
   17416:	9300      	str	r3, [sp, #0]
   17418:	68e3      	ldr	r3, [r4, #12]
   1741a:	68a2      	ldr	r2, [r4, #8]
   1741c:	6861      	ldr	r1, [r4, #4]
   1741e:	6820      	ldr	r0, [r4, #0]
   17420:	f7ff ff86 	bl	17330 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   17424:	6823      	ldr	r3, [r4, #0]
   17426:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   17428:	3430      	adds	r4, #48	; 0x30
   1742a:	4b17      	ldr	r3, [pc, #92]	; (17488 <z_init_static_threads+0x90>)
   1742c:	429c      	cmp	r4, r3
   1742e:	d3e7      	bcc.n	17400 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   17430:	f000 f9ea 	bl	17808 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   17434:	4c13      	ldr	r4, [pc, #76]	; (17484 <z_init_static_threads+0x8c>)
   17436:	e000      	b.n	1743a <z_init_static_threads+0x42>
   17438:	3430      	adds	r4, #48	; 0x30
   1743a:	4b13      	ldr	r3, [pc, #76]	; (17488 <z_init_static_threads+0x90>)
   1743c:	429c      	cmp	r4, r3
   1743e:	d21c      	bcs.n	1747a <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   17440:	6a60      	ldr	r0, [r4, #36]	; 0x24
   17442:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17446:	d0f7      	beq.n	17438 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
   17448:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   1744a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1744e:	17c1      	asrs	r1, r0, #31
   17450:	03c9      	lsls	r1, r1, #15
   17452:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   17456:	03c0      	lsls	r0, r0, #15
   17458:	f240 33e7 	movw	r3, #999	; 0x3e7
   1745c:	18c0      	adds	r0, r0, r3
   1745e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17462:	f04f 0300 	mov.w	r3, #0
   17466:	f141 0100 	adc.w	r1, r1, #0
   1746a:	f7f8 fe73 	bl	10154 <__aeabi_uldivmod>
   1746e:	4602      	mov	r2, r0
   17470:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   17472:	4628      	mov	r0, r5
   17474:	f7ff ff4e 	bl	17314 <schedule_new_thread>
   17478:	e7de      	b.n	17438 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   1747a:	f000 fbc7 	bl	17c0c <k_sched_unlock>
}
   1747e:	b007      	add	sp, #28
   17480:	bd30      	pop	{r4, r5, pc}
   17482:	bf00      	nop
   17484:	0001af38 	.word	0x0001af38
   17488:	0001af38 	.word	0x0001af38

0001748c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1748c:	b508      	push	{r3, lr}
   1748e:	e001      	b.n	17494 <idle+0x8>
	arch_cpu_idle();
   17490:	f7fa ff30 	bl	122f4 <arch_cpu_idle>
	__asm__ volatile(
   17494:	f04f 0220 	mov.w	r2, #32
   17498:	f3ef 8311 	mrs	r3, BASEPRI
   1749c:	f382 8812 	msr	BASEPRI_MAX, r2
   174a0:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   174a4:	f003 fb1b 	bl	1aade <z_get_next_timeout_expiry>
   174a8:	4b05      	ldr	r3, [pc, #20]	; (174c0 <idle+0x34>)
   174aa:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
   174ac:	4b05      	ldr	r3, [pc, #20]	; (174c4 <idle+0x38>)
   174ae:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   174b0:	2b00      	cmp	r3, #0
   174b2:	d0ed      	beq.n	17490 <idle+0x4>
   174b4:	f7fa fe42 	bl	1213c <pm_system_suspend>
   174b8:	2800      	cmp	r0, #0
   174ba:	d1eb      	bne.n	17494 <idle+0x8>
   174bc:	e7e8      	b.n	17490 <idle+0x4>
   174be:	bf00      	nop
   174c0:	20008cf8 	.word	0x20008cf8
   174c4:	20008d3a 	.word	0x20008d3a

000174c8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   174c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   174cc:	b082      	sub	sp, #8
   174ce:	4604      	mov	r4, r0
   174d0:	461e      	mov	r6, r3
   174d2:	f04f 0320 	mov.w	r3, #32
   174d6:	f3ef 8511 	mrs	r5, BASEPRI
   174da:	f383 8812 	msr	BASEPRI_MAX, r3
   174de:	f3bf 8f6f 	isb	sy
   174e2:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   174e4:	68c1      	ldr	r1, [r0, #12]
   174e6:	b999      	cbnz	r1, 17510 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   174e8:	2900      	cmp	r1, #0
   174ea:	d151      	bne.n	17590 <z_impl_k_mutex_lock+0xc8>
   174ec:	4a36      	ldr	r2, [pc, #216]	; (175c8 <z_impl_k_mutex_lock+0x100>)
   174ee:	6892      	ldr	r2, [r2, #8]
   174f0:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   174f4:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   174f6:	3101      	adds	r1, #1
   174f8:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   174fa:	4a33      	ldr	r2, [pc, #204]	; (175c8 <z_impl_k_mutex_lock+0x100>)
   174fc:	6892      	ldr	r2, [r2, #8]
   174fe:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
   17500:	f383 8811 	msr	BASEPRI, r3
   17504:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   17508:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1750a:	b002      	add	sp, #8
   1750c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17510:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   17512:	6880      	ldr	r0, [r0, #8]
   17514:	4a2c      	ldr	r2, [pc, #176]	; (175c8 <z_impl_k_mutex_lock+0x100>)
   17516:	6892      	ldr	r2, [r2, #8]
   17518:	4290      	cmp	r0, r2
   1751a:	d0e5      	beq.n	174e8 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1751c:	ea56 0107 	orrs.w	r1, r6, r7
   17520:	d038      	beq.n	17594 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
   17522:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   17526:	4641      	mov	r1, r8
   17528:	f992 000e 	ldrsb.w	r0, [r2, #14]
   1752c:	f003 f946 	bl	1a7bc <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   17530:	4580      	cmp	r8, r0
   17532:	dc36      	bgt.n	175a2 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
   17534:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   17538:	9700      	str	r7, [sp, #0]
   1753a:	9601      	str	r6, [sp, #4]
   1753c:	4622      	mov	r2, r4
   1753e:	4629      	mov	r1, r5
   17540:	4822      	ldr	r0, [pc, #136]	; (175cc <z_impl_k_mutex_lock+0x104>)
   17542:	f000 faaf 	bl	17aa4 <z_pend_curr>
	if (got_mutex == 0) {
   17546:	2800      	cmp	r0, #0
   17548:	d0df      	beq.n	1750a <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
   1754a:	f04f 0320 	mov.w	r3, #32
   1754e:	f3ef 8511 	mrs	r5, BASEPRI
   17552:	f383 8812 	msr	BASEPRI_MAX, r3
   17556:	f3bf 8f6f 	isb	sy
   1755a:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
   1755c:	68a3      	ldr	r3, [r4, #8]
   1755e:	b343      	cbz	r3, 175b2 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   17560:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17562:	429c      	cmp	r4, r3
   17564:	d023      	beq.n	175ae <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   17566:	b313      	cbz	r3, 175ae <z_impl_k_mutex_lock+0xe6>
   17568:	6921      	ldr	r1, [r4, #16]
   1756a:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1756e:	f003 f925 	bl	1a7bc <new_prio_for_inheritance>
   17572:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   17574:	4620      	mov	r0, r4
   17576:	f003 f92c 	bl	1a7d2 <adjust_owner_prio>
   1757a:	b9e8      	cbnz	r0, 175b8 <z_impl_k_mutex_lock+0xf0>
   1757c:	f1b8 0f00 	cmp.w	r8, #0
   17580:	d11a      	bne.n	175b8 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
   17582:	f386 8811 	msr	BASEPRI, r6
   17586:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   1758a:	f06f 000a 	mvn.w	r0, #10
   1758e:	e7bc      	b.n	1750a <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
   17590:	6922      	ldr	r2, [r4, #16]
   17592:	e7af      	b.n	174f4 <z_impl_k_mutex_lock+0x2c>
   17594:	f385 8811 	msr	BASEPRI, r5
   17598:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1759c:	f06f 000f 	mvn.w	r0, #15
   175a0:	e7b3      	b.n	1750a <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
   175a2:	4601      	mov	r1, r0
   175a4:	4620      	mov	r0, r4
   175a6:	f003 f914 	bl	1a7d2 <adjust_owner_prio>
   175aa:	4680      	mov	r8, r0
   175ac:	e7c4      	b.n	17538 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   175ae:	6921      	ldr	r1, [r4, #16]
   175b0:	e7e0      	b.n	17574 <z_impl_k_mutex_lock+0xac>
	if (resched) {
   175b2:	f1b8 0f00 	cmp.w	r8, #0
   175b6:	d0e4      	beq.n	17582 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
   175b8:	4629      	mov	r1, r5
   175ba:	4804      	ldr	r0, [pc, #16]	; (175cc <z_impl_k_mutex_lock+0x104>)
   175bc:	f000 f90e 	bl	177dc <z_reschedule>
	return -EAGAIN;
   175c0:	f06f 000a 	mvn.w	r0, #10
   175c4:	e7a1      	b.n	1750a <z_impl_k_mutex_lock+0x42>
   175c6:	bf00      	nop
   175c8:	20008cf8 	.word	0x20008cf8
   175cc:	20008d24 	.word	0x20008d24

000175d0 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   175d0:	6883      	ldr	r3, [r0, #8]
   175d2:	b38b      	cbz	r3, 17638 <z_impl_k_mutex_unlock+0x68>
{
   175d4:	b570      	push	{r4, r5, r6, lr}
   175d6:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   175d8:	4a1a      	ldr	r2, [pc, #104]	; (17644 <z_impl_k_mutex_unlock+0x74>)
   175da:	6892      	ldr	r2, [r2, #8]
   175dc:	4293      	cmp	r3, r2
   175de:	d12e      	bne.n	1763e <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   175e0:	68c3      	ldr	r3, [r0, #12]
   175e2:	2b01      	cmp	r3, #1
   175e4:	d903      	bls.n	175ee <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   175e6:	3b01      	subs	r3, #1
   175e8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   175ea:	2000      	movs	r0, #0
}
   175ec:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   175ee:	f04f 0320 	mov.w	r3, #32
   175f2:	f3ef 8511 	mrs	r5, BASEPRI
   175f6:	f383 8812 	msr	BASEPRI_MAX, r3
   175fa:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   175fe:	6901      	ldr	r1, [r0, #16]
   17600:	f003 f8e7 	bl	1a7d2 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   17604:	4620      	mov	r0, r4
   17606:	f003 fa0f 	bl	1aa28 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1760a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1760c:	b168      	cbz	r0, 1762a <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   1760e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   17612:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   17614:	2400      	movs	r4, #0
   17616:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
   1761a:	f003 f950 	bl	1a8be <z_ready_thread>
		z_reschedule(&lock, key);
   1761e:	4629      	mov	r1, r5
   17620:	4809      	ldr	r0, [pc, #36]	; (17648 <z_impl_k_mutex_unlock+0x78>)
   17622:	f000 f8db 	bl	177dc <z_reschedule>
	return 0;
   17626:	4620      	mov	r0, r4
   17628:	e7e0      	b.n	175ec <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
   1762a:	2000      	movs	r0, #0
   1762c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1762e:	f385 8811 	msr	BASEPRI, r5
   17632:	f3bf 8f6f 	isb	sy
   17636:	e7d9      	b.n	175ec <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
   17638:	f06f 0015 	mvn.w	r0, #21
}
   1763c:	4770      	bx	lr
		return -EPERM;
   1763e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17642:	e7d3      	b.n	175ec <z_impl_k_mutex_unlock+0x1c>
   17644:	20008cf8 	.word	0x20008cf8
   17648:	20008d24 	.word	0x20008d24

0001764c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1764c:	b538      	push	{r3, r4, r5, lr}
   1764e:	4604      	mov	r4, r0
	__asm__ volatile(
   17650:	f04f 0320 	mov.w	r3, #32
   17654:	f3ef 8511 	mrs	r5, BASEPRI
   17658:	f383 8812 	msr	BASEPRI_MAX, r3
   1765c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   17660:	f003 f9e2 	bl	1aa28 <z_unpend_first_thread>

	if (thread != NULL) {
   17664:	b148      	cbz	r0, 1767a <z_impl_k_sem_give+0x2e>
   17666:	2200      	movs	r2, #0
   17668:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1766c:	f003 f927 	bl	1a8be <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   17670:	4629      	mov	r1, r5
   17672:	4807      	ldr	r0, [pc, #28]	; (17690 <z_impl_k_sem_give+0x44>)
   17674:	f000 f8b2 	bl	177dc <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   17678:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1767a:	68a3      	ldr	r3, [r4, #8]
   1767c:	68e2      	ldr	r2, [r4, #12]
   1767e:	4293      	cmp	r3, r2
   17680:	d003      	beq.n	1768a <z_impl_k_sem_give+0x3e>
   17682:	2201      	movs	r2, #1
   17684:	4413      	add	r3, r2
   17686:	60a3      	str	r3, [r4, #8]
}
   17688:	e7f2      	b.n	17670 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1768a:	2200      	movs	r2, #0
   1768c:	e7fa      	b.n	17684 <z_impl_k_sem_give+0x38>
   1768e:	bf00      	nop
   17690:	20008d24 	.word	0x20008d24

00017694 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   17694:	b510      	push	{r4, lr}
   17696:	b082      	sub	sp, #8
   17698:	f04f 0420 	mov.w	r4, #32
   1769c:	f3ef 8111 	mrs	r1, BASEPRI
   176a0:	f384 8812 	msr	BASEPRI_MAX, r4
   176a4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   176a8:	6884      	ldr	r4, [r0, #8]
   176aa:	b144      	cbz	r4, 176be <z_impl_k_sem_take+0x2a>
		sem->count--;
   176ac:	3c01      	subs	r4, #1
   176ae:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   176b0:	f381 8811 	msr	BASEPRI, r1
   176b4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   176b8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   176ba:	b002      	add	sp, #8
   176bc:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   176be:	ea53 0402 	orrs.w	r4, r3, r2
   176c2:	d006      	beq.n	176d2 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   176c4:	9200      	str	r2, [sp, #0]
   176c6:	9301      	str	r3, [sp, #4]
   176c8:	4602      	mov	r2, r0
   176ca:	4805      	ldr	r0, [pc, #20]	; (176e0 <z_impl_k_sem_take+0x4c>)
   176cc:	f000 f9ea 	bl	17aa4 <z_pend_curr>
	return ret;
   176d0:	e7f3      	b.n	176ba <z_impl_k_sem_take+0x26>
   176d2:	f381 8811 	msr	BASEPRI, r1
   176d6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   176da:	f06f 000f 	mvn.w	r0, #15
   176de:	e7ec      	b.n	176ba <z_impl_k_sem_take+0x26>
   176e0:	20008d24 	.word	0x20008d24

000176e4 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   176e4:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
   176e6:	2b7f      	cmp	r3, #127	; 0x7f
   176e8:	d80e      	bhi.n	17708 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
   176ea:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
   176ec:	f013 0f1f 	tst.w	r3, #31
   176f0:	d10c      	bne.n	1770c <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   176f2:	f990 200e 	ldrsb.w	r2, [r0, #14]
   176f6:	4b08      	ldr	r3, [pc, #32]	; (17718 <sliceable+0x34>)
   176f8:	681b      	ldr	r3, [r3, #0]
   176fa:	429a      	cmp	r2, r3
   176fc:	db08      	blt.n	17710 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   176fe:	4b07      	ldr	r3, [pc, #28]	; (1771c <sliceable+0x38>)
   17700:	4298      	cmp	r0, r3
   17702:	d007      	beq.n	17714 <sliceable+0x30>
   17704:	2001      	movs	r0, #1
   17706:	4770      	bx	lr
   17708:	2000      	movs	r0, #0
   1770a:	4770      	bx	lr
   1770c:	2000      	movs	r0, #0
   1770e:	4770      	bx	lr
   17710:	2000      	movs	r0, #0
   17712:	4770      	bx	lr
   17714:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   17716:	4770      	bx	lr
   17718:	20008d28 	.word	0x20008d28
   1771c:	200086c8 	.word	0x200086c8

00017720 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   17720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   17724:	bf08      	it	eq
   17726:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1772a:	d100      	bne.n	1772e <add_thread_timeout+0xe>
   1772c:	4770      	bx	lr
{
   1772e:	b508      	push	{r3, lr}
   17730:	4902      	ldr	r1, [pc, #8]	; (1773c <add_thread_timeout+0x1c>)
   17732:	3018      	adds	r0, #24
   17734:	f000 fc5a 	bl	17fec <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   17738:	bd08      	pop	{r3, pc}
   1773a:	bf00      	nop
   1773c:	0001a8f7 	.word	0x0001a8f7

00017740 <z_reset_time_slice>:
{
   17740:	b510      	push	{r4, lr}
	int ret = slice_ticks;
   17742:	4b07      	ldr	r3, [pc, #28]	; (17760 <z_reset_time_slice+0x20>)
   17744:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
   17746:	b904      	cbnz	r4, 1774a <z_reset_time_slice+0xa>
}
   17748:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   1774a:	f7fd fe07 	bl	1535c <sys_clock_elapsed>
   1774e:	4404      	add	r4, r0
   17750:	4b04      	ldr	r3, [pc, #16]	; (17764 <z_reset_time_slice+0x24>)
   17752:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   17754:	2100      	movs	r1, #0
   17756:	4b02      	ldr	r3, [pc, #8]	; (17760 <z_reset_time_slice+0x20>)
   17758:	6818      	ldr	r0, [r3, #0]
   1775a:	f003 f9d7 	bl	1ab0c <z_set_timeout_expiry>
}
   1775e:	e7f3      	b.n	17748 <z_reset_time_slice+0x8>
   17760:	20008d2c 	.word	0x20008d2c
   17764:	20008cf8 	.word	0x20008cf8

00017768 <k_sched_time_slice_set>:
{
   17768:	b570      	push	{r4, r5, r6, lr}
   1776a:	4604      	mov	r4, r0
   1776c:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   1776e:	2300      	movs	r3, #0
	__asm__ volatile(
   17770:	f04f 0220 	mov.w	r2, #32
   17774:	f3ef 8511 	mrs	r5, BASEPRI
   17778:	f382 8812 	msr	BASEPRI_MAX, r2
   1777c:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
   17780:	e00e      	b.n	177a0 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
   17782:	2802      	cmp	r0, #2
   17784:	bfb8      	it	lt
   17786:	2002      	movlt	r0, #2
   17788:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1778a:	4b11      	ldr	r3, [pc, #68]	; (177d0 <k_sched_time_slice_set+0x68>)
   1778c:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
   1778e:	4b11      	ldr	r3, [pc, #68]	; (177d4 <k_sched_time_slice_set+0x6c>)
   17790:	6898      	ldr	r0, [r3, #8]
   17792:	f7ff ffd5 	bl	17740 <z_reset_time_slice>
	__asm__ volatile(
   17796:	f385 8811 	msr	BASEPRI, r5
   1779a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1779e:	2301      	movs	r3, #1
   177a0:	b9a3      	cbnz	r3, 177cc <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
   177a2:	4b0c      	ldr	r3, [pc, #48]	; (177d4 <k_sched_time_slice_set+0x6c>)
   177a4:	2200      	movs	r2, #0
   177a6:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   177a8:	0c61      	lsrs	r1, r4, #17
   177aa:	03e0      	lsls	r0, r4, #15
   177ac:	f240 33e7 	movw	r3, #999	; 0x3e7
   177b0:	18c0      	adds	r0, r0, r3
   177b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   177b6:	f04f 0300 	mov.w	r3, #0
   177ba:	f141 0100 	adc.w	r1, r1, #0
   177be:	f7f8 fcc9 	bl	10154 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   177c2:	4b05      	ldr	r3, [pc, #20]	; (177d8 <k_sched_time_slice_set+0x70>)
   177c4:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   177c6:	2c00      	cmp	r4, #0
   177c8:	dcdb      	bgt.n	17782 <k_sched_time_slice_set+0x1a>
   177ca:	e7de      	b.n	1778a <k_sched_time_slice_set+0x22>
}
   177cc:	bd70      	pop	{r4, r5, r6, pc}
   177ce:	bf00      	nop
   177d0:	20008d28 	.word	0x20008d28
   177d4:	20008cf8 	.word	0x20008cf8
   177d8:	20008d2c 	.word	0x20008d2c

000177dc <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   177dc:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   177de:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   177e0:	b959      	cbnz	r1, 177fa <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   177e2:	f3ef 8205 	mrs	r2, IPSR
   177e6:	b942      	cbnz	r2, 177fa <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
   177e8:	4a06      	ldr	r2, [pc, #24]	; (17804 <z_reschedule+0x28>)
   177ea:	69d0      	ldr	r0, [r2, #28]
	return new_thread != _current;
   177ec:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
   177ee:	4290      	cmp	r0, r2
   177f0:	d003      	beq.n	177fa <z_reschedule+0x1e>
	ret = arch_swap(key);
   177f2:	4608      	mov	r0, r1
   177f4:	f7fa ff1e 	bl	12634 <arch_swap>
		z_swap(lock, key);
   177f8:	e003      	b.n	17802 <z_reschedule+0x26>
   177fa:	f383 8811 	msr	BASEPRI, r3
   177fe:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   17802:	bd08      	pop	{r3, pc}
   17804:	20008cf8 	.word	0x20008cf8

00017808 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   17808:	2300      	movs	r3, #0
	__asm__ volatile(
   1780a:	f04f 0220 	mov.w	r2, #32
   1780e:	f3ef 8111 	mrs	r1, BASEPRI
   17812:	f382 8812 	msr	BASEPRI_MAX, r2
   17816:	f3bf 8f6f 	isb	sy
   1781a:	e009      	b.n	17830 <k_sched_lock+0x28>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1781c:	4b06      	ldr	r3, [pc, #24]	; (17838 <k_sched_lock+0x30>)
   1781e:	689a      	ldr	r2, [r3, #8]
   17820:	7bd3      	ldrb	r3, [r2, #15]
   17822:	3b01      	subs	r3, #1
   17824:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   17826:	f381 8811 	msr	BASEPRI, r1
   1782a:	f3bf 8f6f 	isb	sy
   1782e:	2301      	movs	r3, #1
   17830:	2b00      	cmp	r3, #0
   17832:	d0f3      	beq.n	1781c <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   17834:	4770      	bx	lr
   17836:	bf00      	nop
   17838:	20008cf8 	.word	0x20008cf8

0001783c <update_cache>:
{
   1783c:	b538      	push	{r3, r4, r5, lr}
   1783e:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   17840:	4810      	ldr	r0, [pc, #64]	; (17884 <update_cache+0x48>)
   17842:	f003 f835 	bl	1a8b0 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   17846:	4605      	mov	r5, r0
   17848:	b170      	cbz	r0, 17868 <update_cache+0x2c>
	if (preempt_ok != 0) {
   1784a:	b984      	cbnz	r4, 1786e <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   1784c:	4b0e      	ldr	r3, [pc, #56]	; (17888 <update_cache+0x4c>)
   1784e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   17850:	7b5a      	ldrb	r2, [r3, #13]
   17852:	f012 0f1f 	tst.w	r2, #31
   17856:	d10a      	bne.n	1786e <update_cache+0x32>
	return node->next != NULL;
   17858:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1785a:	b942      	cbnz	r2, 1786e <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1785c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   1785e:	2a7f      	cmp	r2, #127	; 0x7f
   17860:	d905      	bls.n	1786e <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   17862:	4a09      	ldr	r2, [pc, #36]	; (17888 <update_cache+0x4c>)
   17864:	61d3      	str	r3, [r2, #28]
   17866:	e00b      	b.n	17880 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   17868:	4b07      	ldr	r3, [pc, #28]	; (17888 <update_cache+0x4c>)
   1786a:	68dd      	ldr	r5, [r3, #12]
   1786c:	e7ed      	b.n	1784a <update_cache+0xe>
		if (thread != _current) {
   1786e:	4b06      	ldr	r3, [pc, #24]	; (17888 <update_cache+0x4c>)
   17870:	689b      	ldr	r3, [r3, #8]
   17872:	42ab      	cmp	r3, r5
   17874:	d002      	beq.n	1787c <update_cache+0x40>
			z_reset_time_slice(thread);
   17876:	4628      	mov	r0, r5
   17878:	f7ff ff62 	bl	17740 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1787c:	4b02      	ldr	r3, [pc, #8]	; (17888 <update_cache+0x4c>)
   1787e:	61dd      	str	r5, [r3, #28]
}
   17880:	bd38      	pop	{r3, r4, r5, pc}
   17882:	bf00      	nop
   17884:	20008d18 	.word	0x20008d18
   17888:	20008cf8 	.word	0x20008cf8

0001788c <move_thread_to_end_of_prio_q>:
{
   1788c:	b538      	push	{r3, r4, r5, lr}
   1788e:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   17890:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   17892:	f990 300d 	ldrsb.w	r3, [r0, #13]
   17896:	2b00      	cmp	r3, #0
   17898:	db0a      	blt.n	178b0 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
   1789a:	7b6b      	ldrb	r3, [r5, #13]
   1789c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   178a0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   178a2:	4b1b      	ldr	r3, [pc, #108]	; (17910 <move_thread_to_end_of_prio_q+0x84>)
   178a4:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   178a8:	429c      	cmp	r4, r3
   178aa:	d110      	bne.n	178ce <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   178ac:	2400      	movs	r4, #0
   178ae:	e00e      	b.n	178ce <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   178b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   178b4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   178b6:	4601      	mov	r1, r0
   178b8:	4816      	ldr	r0, [pc, #88]	; (17914 <move_thread_to_end_of_prio_q+0x88>)
   178ba:	f002 ffe3 	bl	1a884 <z_priq_dumb_remove>
}
   178be:	e7ec      	b.n	1789a <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   178c0:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   178c2:	606b      	str	r3, [r5, #4]
	node->next = successor;
   178c4:	602c      	str	r4, [r5, #0]
	prev->next = node;
   178c6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   178c8:	6065      	str	r5, [r4, #4]
}
   178ca:	e017      	b.n	178fc <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   178cc:	2400      	movs	r4, #0
   178ce:	b16c      	cbz	r4, 178ec <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
   178d0:	4621      	mov	r1, r4
   178d2:	4628      	mov	r0, r5
   178d4:	f002 ff9b 	bl	1a80e <z_sched_prio_cmp>
   178d8:	2800      	cmp	r0, #0
   178da:	dcf1      	bgt.n	178c0 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   178dc:	2c00      	cmp	r4, #0
   178de:	d0f6      	beq.n	178ce <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
   178e0:	4b0b      	ldr	r3, [pc, #44]	; (17910 <move_thread_to_end_of_prio_q+0x84>)
   178e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   178e4:	429c      	cmp	r4, r3
   178e6:	d0f1      	beq.n	178cc <move_thread_to_end_of_prio_q+0x40>
   178e8:	6824      	ldr	r4, [r4, #0]
   178ea:	e7f0      	b.n	178ce <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
   178ec:	4b08      	ldr	r3, [pc, #32]	; (17910 <move_thread_to_end_of_prio_q+0x84>)
   178ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   178f0:	f103 0120 	add.w	r1, r3, #32
   178f4:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   178f6:	606a      	str	r2, [r5, #4]
	tail->next = node;
   178f8:	6015      	str	r5, [r2, #0]
	list->tail = node;
   178fa:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   178fc:	4b04      	ldr	r3, [pc, #16]	; (17910 <move_thread_to_end_of_prio_q+0x84>)
   178fe:	6898      	ldr	r0, [r3, #8]
   17900:	42a8      	cmp	r0, r5
   17902:	bf14      	ite	ne
   17904:	2000      	movne	r0, #0
   17906:	2001      	moveq	r0, #1
   17908:	f7ff ff98 	bl	1783c <update_cache>
}
   1790c:	bd38      	pop	{r3, r4, r5, pc}
   1790e:	bf00      	nop
   17910:	20008cf8 	.word	0x20008cf8
   17914:	20008d18 	.word	0x20008d18

00017918 <slice_expired_locked>:
{
   17918:	b538      	push	{r3, r4, r5, lr}
   1791a:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
   1791c:	4b07      	ldr	r3, [pc, #28]	; (1793c <slice_expired_locked+0x24>)
   1791e:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
   17920:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
   17922:	f013 0f1f 	tst.w	r3, #31
   17926:	d004      	beq.n	17932 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
   17928:	4628      	mov	r0, r5
   1792a:	f7ff ff09 	bl	17740 <z_reset_time_slice>
}
   1792e:	4620      	mov	r0, r4
   17930:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
   17932:	4628      	mov	r0, r5
   17934:	f7ff ffaa 	bl	1788c <move_thread_to_end_of_prio_q>
   17938:	e7f6      	b.n	17928 <slice_expired_locked+0x10>
   1793a:	bf00      	nop
   1793c:	20008cf8 	.word	0x20008cf8

00017940 <z_time_slice>:
{
   17940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17942:	4605      	mov	r5, r0
	__asm__ volatile(
   17944:	f04f 0320 	mov.w	r3, #32
   17948:	f3ef 8611 	mrs	r6, BASEPRI
   1794c:	f383 8812 	msr	BASEPRI_MAX, r3
   17950:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   17954:	4b15      	ldr	r3, [pc, #84]	; (179ac <z_time_slice+0x6c>)
   17956:	6898      	ldr	r0, [r3, #8]
   17958:	4b15      	ldr	r3, [pc, #84]	; (179b0 <z_time_slice+0x70>)
   1795a:	681b      	ldr	r3, [r3, #0]
   1795c:	4298      	cmp	r0, r3
   1795e:	d011      	beq.n	17984 <z_time_slice+0x44>
   17960:	4634      	mov	r4, r6
	pending_current = NULL;
   17962:	4b13      	ldr	r3, [pc, #76]	; (179b0 <z_time_slice+0x70>)
   17964:	2200      	movs	r2, #0
   17966:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
   17968:	4b12      	ldr	r3, [pc, #72]	; (179b4 <z_time_slice+0x74>)
   1796a:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
   1796c:	b1b3      	cbz	r3, 1799c <z_time_slice+0x5c>
   1796e:	f7ff feb9 	bl	176e4 <sliceable>
   17972:	b198      	cbz	r0, 1799c <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
   17974:	4b0d      	ldr	r3, [pc, #52]	; (179ac <z_time_slice+0x6c>)
   17976:	691b      	ldr	r3, [r3, #16]
   17978:	42ab      	cmp	r3, r5
   1797a:	dd0a      	ble.n	17992 <z_time_slice+0x52>
			_current_cpu->slice_ticks -= ticks;
   1797c:	1b5b      	subs	r3, r3, r5
   1797e:	4a0b      	ldr	r2, [pc, #44]	; (179ac <z_time_slice+0x6c>)
   17980:	6113      	str	r3, [r2, #16]
   17982:	e00e      	b.n	179a2 <z_time_slice+0x62>
		z_reset_time_slice(_current);
   17984:	f7ff fedc 	bl	17740 <z_reset_time_slice>
	__asm__ volatile(
   17988:	f386 8811 	msr	BASEPRI, r6
   1798c:	f3bf 8f6f 	isb	sy
		return;
   17990:	e00b      	b.n	179aa <z_time_slice+0x6a>
			key = slice_expired_locked(key);
   17992:	4630      	mov	r0, r6
   17994:	f7ff ffc0 	bl	17918 <slice_expired_locked>
   17998:	4604      	mov	r4, r0
   1799a:	e002      	b.n	179a2 <z_time_slice+0x62>
		_current_cpu->slice_ticks = 0;
   1799c:	4b03      	ldr	r3, [pc, #12]	; (179ac <z_time_slice+0x6c>)
   1799e:	2200      	movs	r2, #0
   179a0:	611a      	str	r2, [r3, #16]
   179a2:	f384 8811 	msr	BASEPRI, r4
   179a6:	f3bf 8f6f 	isb	sy
}
   179aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   179ac:	20008cf8 	.word	0x20008cf8
   179b0:	20008d24 	.word	0x20008d24
   179b4:	20008d2c 	.word	0x20008d2c

000179b8 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
   179b8:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   179ba:	f990 300d 	ldrsb.w	r3, [r0, #13]
   179be:	2b00      	cmp	r3, #0
   179c0:	db33      	blt.n	17a2a <ready_thread+0x72>
{
   179c2:	b570      	push	{r4, r5, r6, lr}
   179c4:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   179c6:	f012 0f1f 	tst.w	r2, #31
   179ca:	d101      	bne.n	179d0 <ready_thread+0x18>
	return node->next != NULL;
   179cc:	6986      	ldr	r6, [r0, #24]
   179ce:	b106      	cbz	r6, 179d2 <ready_thread+0x1a>
}
   179d0:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
   179d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   179d6:	7342      	strb	r2, [r0, #13]
	return list->head == list;
   179d8:	4b14      	ldr	r3, [pc, #80]	; (17a2c <ready_thread+0x74>)
   179da:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   179de:	429d      	cmp	r5, r3
   179e0:	d108      	bne.n	179f4 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   179e2:	4635      	mov	r5, r6
   179e4:	e006      	b.n	179f4 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
   179e6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   179e8:	6063      	str	r3, [r4, #4]
	node->next = successor;
   179ea:	6025      	str	r5, [r4, #0]
	prev->next = node;
   179ec:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   179ee:	606c      	str	r4, [r5, #4]
}
   179f0:	e017      	b.n	17a22 <ready_thread+0x6a>
   179f2:	4635      	mov	r5, r6
   179f4:	b16d      	cbz	r5, 17a12 <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   179f6:	4629      	mov	r1, r5
   179f8:	4620      	mov	r0, r4
   179fa:	f002 ff08 	bl	1a80e <z_sched_prio_cmp>
   179fe:	2800      	cmp	r0, #0
   17a00:	dcf1      	bgt.n	179e6 <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17a02:	2d00      	cmp	r5, #0
   17a04:	d0f6      	beq.n	179f4 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
   17a06:	4b09      	ldr	r3, [pc, #36]	; (17a2c <ready_thread+0x74>)
   17a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17a0a:	429d      	cmp	r5, r3
   17a0c:	d0f1      	beq.n	179f2 <ready_thread+0x3a>
   17a0e:	682d      	ldr	r5, [r5, #0]
   17a10:	e7f0      	b.n	179f4 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
   17a12:	4b06      	ldr	r3, [pc, #24]	; (17a2c <ready_thread+0x74>)
   17a14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   17a16:	f103 0120 	add.w	r1, r3, #32
   17a1a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   17a1c:	6062      	str	r2, [r4, #4]
	tail->next = node;
   17a1e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   17a20:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   17a22:	2000      	movs	r0, #0
   17a24:	f7ff ff0a 	bl	1783c <update_cache>
}
   17a28:	e7d2      	b.n	179d0 <ready_thread+0x18>
   17a2a:	4770      	bx	lr
   17a2c:	20008cf8 	.word	0x20008cf8

00017a30 <z_sched_start>:
{
   17a30:	b510      	push	{r4, lr}
	__asm__ volatile(
   17a32:	f04f 0320 	mov.w	r3, #32
   17a36:	f3ef 8411 	mrs	r4, BASEPRI
   17a3a:	f383 8812 	msr	BASEPRI_MAX, r3
   17a3e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   17a42:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   17a44:	f013 0f04 	tst.w	r3, #4
   17a48:	d104      	bne.n	17a54 <z_sched_start+0x24>
	__asm__ volatile(
   17a4a:	f384 8811 	msr	BASEPRI, r4
   17a4e:	f3bf 8f6f 	isb	sy
}
   17a52:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17a54:	f023 0304 	bic.w	r3, r3, #4
   17a58:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   17a5a:	f7ff ffad 	bl	179b8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   17a5e:	4621      	mov	r1, r4
   17a60:	4801      	ldr	r0, [pc, #4]	; (17a68 <z_sched_start+0x38>)
   17a62:	f7ff febb 	bl	177dc <z_reschedule>
   17a66:	e7f4      	b.n	17a52 <z_sched_start+0x22>
   17a68:	20008d30 	.word	0x20008d30

00017a6c <unready_thread>:
{
   17a6c:	b510      	push	{r4, lr}
   17a6e:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   17a70:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   17a72:	f990 300d 	ldrsb.w	r3, [r0, #13]
   17a76:	2b00      	cmp	r3, #0
   17a78:	db08      	blt.n	17a8c <unready_thread+0x20>
	update_cache(thread == _current);
   17a7a:	4b08      	ldr	r3, [pc, #32]	; (17a9c <unready_thread+0x30>)
   17a7c:	6898      	ldr	r0, [r3, #8]
   17a7e:	42a0      	cmp	r0, r4
   17a80:	bf14      	ite	ne
   17a82:	2000      	movne	r0, #0
   17a84:	2001      	moveq	r0, #1
   17a86:	f7ff fed9 	bl	1783c <update_cache>
}
   17a8a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17a8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   17a90:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   17a92:	4601      	mov	r1, r0
   17a94:	4802      	ldr	r0, [pc, #8]	; (17aa0 <unready_thread+0x34>)
   17a96:	f002 fef5 	bl	1a884 <z_priq_dumb_remove>
}
   17a9a:	e7ee      	b.n	17a7a <unready_thread+0xe>
   17a9c:	20008cf8 	.word	0x20008cf8
   17aa0:	20008d18 	.word	0x20008d18

00017aa4 <z_pend_curr>:
{
   17aa4:	b510      	push	{r4, lr}
   17aa6:	460c      	mov	r4, r1
   17aa8:	4611      	mov	r1, r2
	pending_current = _current;
   17aaa:	480a      	ldr	r0, [pc, #40]	; (17ad4 <z_pend_curr+0x30>)
   17aac:	6882      	ldr	r2, [r0, #8]
   17aae:	4b0a      	ldr	r3, [pc, #40]	; (17ad8 <z_pend_curr+0x34>)
   17ab0:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
   17ab2:	f04f 0220 	mov.w	r2, #32
   17ab6:	f3ef 8311 	mrs	r3, BASEPRI
   17aba:	f382 8812 	msr	BASEPRI_MAX, r2
   17abe:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   17ac2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   17ac6:	6880      	ldr	r0, [r0, #8]
   17ac8:	f002 ff84 	bl	1a9d4 <pend_locked>
   17acc:	4620      	mov	r0, r4
   17ace:	f7fa fdb1 	bl	12634 <arch_swap>
}
   17ad2:	bd10      	pop	{r4, pc}
   17ad4:	20008cf8 	.word	0x20008cf8
   17ad8:	20008d24 	.word	0x20008d24

00017adc <z_set_prio>:
{
   17adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17ae0:	4605      	mov	r5, r0
   17ae2:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   17ae4:	2300      	movs	r3, #0
   17ae6:	f04f 0220 	mov.w	r2, #32
   17aea:	f3ef 8611 	mrs	r6, BASEPRI
   17aee:	f382 8812 	msr	BASEPRI_MAX, r2
   17af2:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   17af6:	4618      	mov	r0, r3
   17af8:	e029      	b.n	17b4e <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
   17afa:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   17afc:	606b      	str	r3, [r5, #4]
	node->next = successor;
   17afe:	602c      	str	r4, [r5, #0]
	prev->next = node;
   17b00:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   17b02:	6065      	str	r5, [r4, #4]
}
   17b04:	e017      	b.n	17b36 <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17b06:	4644      	mov	r4, r8
   17b08:	b16c      	cbz	r4, 17b26 <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   17b0a:	4621      	mov	r1, r4
   17b0c:	4628      	mov	r0, r5
   17b0e:	f002 fe7e 	bl	1a80e <z_sched_prio_cmp>
   17b12:	2800      	cmp	r0, #0
   17b14:	dcf1      	bgt.n	17afa <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17b16:	2c00      	cmp	r4, #0
   17b18:	d0f6      	beq.n	17b08 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
   17b1a:	4b1d      	ldr	r3, [pc, #116]	; (17b90 <z_set_prio+0xb4>)
   17b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17b1e:	429c      	cmp	r4, r3
   17b20:	d0f1      	beq.n	17b06 <z_set_prio+0x2a>
   17b22:	6824      	ldr	r4, [r4, #0]
   17b24:	e7f0      	b.n	17b08 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
   17b26:	4b1a      	ldr	r3, [pc, #104]	; (17b90 <z_set_prio+0xb4>)
   17b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   17b2a:	f103 0120 	add.w	r1, r3, #32
   17b2e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   17b30:	606a      	str	r2, [r5, #4]
	tail->next = node;
   17b32:	6015      	str	r5, [r2, #0]
	list->tail = node;
   17b34:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
   17b36:	2001      	movs	r0, #1
   17b38:	f7ff fe80 	bl	1783c <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   17b3c:	2001      	movs	r0, #1
   17b3e:	e001      	b.n	17b44 <z_set_prio+0x68>
			thread->base.prio = prio;
   17b40:	73af      	strb	r7, [r5, #14]
   17b42:	2000      	movs	r0, #0
	__asm__ volatile(
   17b44:	f386 8811 	msr	BASEPRI, r6
   17b48:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   17b4c:	2301      	movs	r3, #1
   17b4e:	b9e3      	cbnz	r3, 17b8a <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
   17b50:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   17b52:	f013 0f1f 	tst.w	r3, #31
   17b56:	d1f3      	bne.n	17b40 <z_set_prio+0x64>
	return node->next != NULL;
   17b58:	f8d5 8018 	ldr.w	r8, [r5, #24]
   17b5c:	f1b8 0f00 	cmp.w	r8, #0
   17b60:	d1ee      	bne.n	17b40 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17b66:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
   17b68:	f8df 9028 	ldr.w	r9, [pc, #40]	; 17b94 <z_set_prio+0xb8>
   17b6c:	4629      	mov	r1, r5
   17b6e:	4648      	mov	r0, r9
   17b70:	f002 fe88 	bl	1a884 <z_priq_dumb_remove>
				thread->base.prio = prio;
   17b74:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   17b76:	7b6b      	ldrb	r3, [r5, #13]
   17b78:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17b7c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   17b7e:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17b82:	454c      	cmp	r4, r9
   17b84:	d1c0      	bne.n	17b08 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17b86:	4644      	mov	r4, r8
   17b88:	e7be      	b.n	17b08 <z_set_prio+0x2c>
}
   17b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17b8e:	bf00      	nop
   17b90:	20008cf8 	.word	0x20008cf8
   17b94:	20008d18 	.word	0x20008d18

00017b98 <z_impl_k_thread_suspend>:
{
   17b98:	b538      	push	{r3, r4, r5, lr}
   17b9a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   17b9c:	3018      	adds	r0, #24
   17b9e:	f002 ff80 	bl	1aaa2 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   17ba2:	2300      	movs	r3, #0
	__asm__ volatile(
   17ba4:	f04f 0220 	mov.w	r2, #32
   17ba8:	f3ef 8511 	mrs	r5, BASEPRI
   17bac:	f382 8812 	msr	BASEPRI_MAX, r2
   17bb0:	f3bf 8f6f 	isb	sy
   17bb4:	e010      	b.n	17bd8 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   17bb6:	7b63      	ldrb	r3, [r4, #13]
   17bb8:	f043 0310 	orr.w	r3, r3, #16
   17bbc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   17bbe:	4b11      	ldr	r3, [pc, #68]	; (17c04 <z_impl_k_thread_suspend+0x6c>)
   17bc0:	6898      	ldr	r0, [r3, #8]
   17bc2:	42a0      	cmp	r0, r4
   17bc4:	bf14      	ite	ne
   17bc6:	2000      	movne	r0, #0
   17bc8:	2001      	moveq	r0, #1
   17bca:	f7ff fe37 	bl	1783c <update_cache>
	__asm__ volatile(
   17bce:	f385 8811 	msr	BASEPRI, r5
   17bd2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   17bd6:	2301      	movs	r3, #1
   17bd8:	b963      	cbnz	r3, 17bf4 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   17bda:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   17bdc:	f994 300d 	ldrsb.w	r3, [r4, #13]
   17be0:	2b00      	cmp	r3, #0
   17be2:	dae8      	bge.n	17bb6 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17be4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   17be8:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   17bea:	4621      	mov	r1, r4
   17bec:	4806      	ldr	r0, [pc, #24]	; (17c08 <z_impl_k_thread_suspend+0x70>)
   17bee:	f002 fe49 	bl	1a884 <z_priq_dumb_remove>
}
   17bf2:	e7e0      	b.n	17bb6 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   17bf4:	4b03      	ldr	r3, [pc, #12]	; (17c04 <z_impl_k_thread_suspend+0x6c>)
   17bf6:	689b      	ldr	r3, [r3, #8]
   17bf8:	42a3      	cmp	r3, r4
   17bfa:	d000      	beq.n	17bfe <z_impl_k_thread_suspend+0x66>
}
   17bfc:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
   17bfe:	f002 fe35 	bl	1a86c <z_reschedule_unlocked>
}
   17c02:	e7fb      	b.n	17bfc <z_impl_k_thread_suspend+0x64>
   17c04:	20008cf8 	.word	0x20008cf8
   17c08:	20008d18 	.word	0x20008d18

00017c0c <k_sched_unlock>:

void k_sched_unlock(void)
{
   17c0c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   17c0e:	2300      	movs	r3, #0
	__asm__ volatile(
   17c10:	f04f 0220 	mov.w	r2, #32
   17c14:	f3ef 8411 	mrs	r4, BASEPRI
   17c18:	f382 8812 	msr	BASEPRI_MAX, r2
   17c1c:	f3bf 8f6f 	isb	sy
   17c20:	e00c      	b.n	17c3c <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   17c22:	4b09      	ldr	r3, [pc, #36]	; (17c48 <k_sched_unlock+0x3c>)
   17c24:	689a      	ldr	r2, [r3, #8]
   17c26:	7bd3      	ldrb	r3, [r2, #15]
   17c28:	3301      	adds	r3, #1
   17c2a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   17c2c:	2000      	movs	r0, #0
   17c2e:	f7ff fe05 	bl	1783c <update_cache>
	__asm__ volatile(
   17c32:	f384 8811 	msr	BASEPRI, r4
   17c36:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   17c3a:	2301      	movs	r3, #1
   17c3c:	2b00      	cmp	r3, #0
   17c3e:	d0f0      	beq.n	17c22 <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
   17c40:	f002 fe14 	bl	1a86c <z_reschedule_unlocked>
}
   17c44:	bd10      	pop	{r4, pc}
   17c46:	bf00      	nop
   17c48:	20008cf8 	.word	0x20008cf8

00017c4c <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   17c4c:	7b43      	ldrb	r3, [r0, #13]
   17c4e:	f013 0f08 	tst.w	r3, #8
   17c52:	d12a      	bne.n	17caa <end_thread+0x5e>
{
   17c54:	b510      	push	{r4, lr}
   17c56:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
   17c58:	f043 0208 	orr.w	r2, r3, #8
   17c5c:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   17c5e:	f023 0220 	bic.w	r2, r3, #32
   17c62:	f042 0208 	orr.w	r2, r2, #8
   17c66:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
   17c68:	f012 0f80 	tst.w	r2, #128	; 0x80
   17c6c:	d113      	bne.n	17c96 <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   17c6e:	68a3      	ldr	r3, [r4, #8]
   17c70:	b113      	cbz	r3, 17c78 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
   17c72:	4620      	mov	r0, r4
   17c74:	f002 fe0e 	bl	1a894 <unpend_thread_no_timeout>
   17c78:	f104 0018 	add.w	r0, r4, #24
   17c7c:	f002 ff11 	bl	1aaa2 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   17c80:	f104 0058 	add.w	r0, r4, #88	; 0x58
   17c84:	f002 fe66 	bl	1a954 <unpend_all>
		update_cache(1);
   17c88:	2001      	movs	r0, #1
   17c8a:	f7ff fdd7 	bl	1783c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   17c8e:	4620      	mov	r0, r4
   17c90:	f7ff fb0e 	bl	172b0 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   17c94:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17c96:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   17c9a:	f043 0308 	orr.w	r3, r3, #8
   17c9e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   17ca0:	4601      	mov	r1, r0
   17ca2:	4802      	ldr	r0, [pc, #8]	; (17cac <end_thread+0x60>)
   17ca4:	f002 fdee 	bl	1a884 <z_priq_dumb_remove>
}
   17ca8:	e7e1      	b.n	17c6e <end_thread+0x22>
   17caa:	4770      	bx	lr
   17cac:	20008d18 	.word	0x20008d18

00017cb0 <z_sched_init>:
{
   17cb0:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   17cb2:	4804      	ldr	r0, [pc, #16]	; (17cc4 <z_sched_init+0x14>)
   17cb4:	f002 feda 	bl	1aa6c <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   17cb8:	2100      	movs	r1, #0
   17cba:	4608      	mov	r0, r1
   17cbc:	f7ff fd54 	bl	17768 <k_sched_time_slice_set>
}
   17cc0:	bd08      	pop	{r3, pc}
   17cc2:	bf00      	nop
   17cc4:	20008d14 	.word	0x20008d14

00017cc8 <z_impl_k_yield>:
{
   17cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   17cca:	f04f 0320 	mov.w	r3, #32
   17cce:	f3ef 8611 	mrs	r6, BASEPRI
   17cd2:	f383 8812 	msr	BASEPRI_MAX, r3
   17cd6:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   17cda:	4c1d      	ldr	r4, [pc, #116]	; (17d50 <z_impl_k_yield+0x88>)
   17cdc:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17cde:	7b4b      	ldrb	r3, [r1, #13]
   17ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17ce4:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   17ce6:	f104 0720 	add.w	r7, r4, #32
   17cea:	4638      	mov	r0, r7
   17cec:	f002 fdca 	bl	1a884 <z_priq_dumb_remove>
	queue_thread(_current);
   17cf0:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   17cf2:	7b6b      	ldrb	r3, [r5, #13]
   17cf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17cf8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   17cfa:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17cfc:	42bc      	cmp	r4, r7
   17cfe:	d108      	bne.n	17d12 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17d00:	2400      	movs	r4, #0
   17d02:	e006      	b.n	17d12 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
   17d04:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   17d06:	606b      	str	r3, [r5, #4]
	node->next = successor;
   17d08:	602c      	str	r4, [r5, #0]
	prev->next = node;
   17d0a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   17d0c:	6065      	str	r5, [r4, #4]
}
   17d0e:	e017      	b.n	17d40 <z_impl_k_yield+0x78>
   17d10:	2400      	movs	r4, #0
   17d12:	b16c      	cbz	r4, 17d30 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
   17d14:	4621      	mov	r1, r4
   17d16:	4628      	mov	r0, r5
   17d18:	f002 fd79 	bl	1a80e <z_sched_prio_cmp>
   17d1c:	2800      	cmp	r0, #0
   17d1e:	dcf1      	bgt.n	17d04 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17d20:	2c00      	cmp	r4, #0
   17d22:	d0f6      	beq.n	17d12 <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
   17d24:	4b0a      	ldr	r3, [pc, #40]	; (17d50 <z_impl_k_yield+0x88>)
   17d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17d28:	429c      	cmp	r4, r3
   17d2a:	d0f1      	beq.n	17d10 <z_impl_k_yield+0x48>
   17d2c:	6824      	ldr	r4, [r4, #0]
   17d2e:	e7f0      	b.n	17d12 <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
   17d30:	4b07      	ldr	r3, [pc, #28]	; (17d50 <z_impl_k_yield+0x88>)
   17d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   17d34:	f103 0120 	add.w	r1, r3, #32
   17d38:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   17d3a:	606a      	str	r2, [r5, #4]
	tail->next = node;
   17d3c:	6015      	str	r5, [r2, #0]
	list->tail = node;
   17d3e:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   17d40:	2001      	movs	r0, #1
   17d42:	f7ff fd7b 	bl	1783c <update_cache>
   17d46:	4630      	mov	r0, r6
   17d48:	f7fa fc74 	bl	12634 <arch_swap>
}
   17d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17d4e:	bf00      	nop
   17d50:	20008cf8 	.word	0x20008cf8

00017d54 <z_tick_sleep>:
{
   17d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   17d58:	ea50 0301 	orrs.w	r3, r0, r1
   17d5c:	d038      	beq.n	17dd0 <z_tick_sleep+0x7c>
   17d5e:	4604      	mov	r4, r0
   17d60:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   17d62:	f06f 0301 	mvn.w	r3, #1
   17d66:	1a1b      	subs	r3, r3, r0
   17d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17d6c:	eb62 0201 	sbc.w	r2, r2, r1
   17d70:	2b01      	cmp	r3, #1
   17d72:	f172 0200 	sbcs.w	r2, r2, #0
   17d76:	db2f      	blt.n	17dd8 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   17d78:	f06f 0501 	mvn.w	r5, #1
   17d7c:	1a2d      	subs	r5, r5, r0
   17d7e:	f04f 0320 	mov.w	r3, #32
   17d82:	f3ef 8811 	mrs	r8, BASEPRI
   17d86:	f383 8812 	msr	BASEPRI_MAX, r3
   17d8a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   17d8e:	4f14      	ldr	r7, [pc, #80]	; (17de0 <z_tick_sleep+0x8c>)
   17d90:	68b8      	ldr	r0, [r7, #8]
   17d92:	4b14      	ldr	r3, [pc, #80]	; (17de4 <z_tick_sleep+0x90>)
   17d94:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   17d96:	f7ff fe69 	bl	17a6c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   17d9a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   17d9c:	4622      	mov	r2, r4
   17d9e:	4633      	mov	r3, r6
   17da0:	4911      	ldr	r1, [pc, #68]	; (17de8 <z_tick_sleep+0x94>)
   17da2:	3018      	adds	r0, #24
   17da4:	f000 f922 	bl	17fec <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   17da8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   17daa:	7b53      	ldrb	r3, [r2, #13]
   17dac:	f043 0310 	orr.w	r3, r3, #16
   17db0:	7353      	strb	r3, [r2, #13]
   17db2:	4640      	mov	r0, r8
   17db4:	f7fa fc3e 	bl	12634 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   17db8:	f002 fed3 	bl	1ab62 <sys_clock_tick_get_32>
   17dbc:	1a28      	subs	r0, r5, r0
   17dbe:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   17dc2:	2801      	cmp	r0, #1
   17dc4:	f173 0300 	sbcs.w	r3, r3, #0
   17dc8:	da00      	bge.n	17dcc <z_tick_sleep+0x78>
	return 0;
   17dca:	2000      	movs	r0, #0
}
   17dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   17dd0:	f7ff ff7a 	bl	17cc8 <z_impl_k_yield>
		return 0;
   17dd4:	2000      	movs	r0, #0
   17dd6:	e7f9      	b.n	17dcc <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   17dd8:	f002 fec3 	bl	1ab62 <sys_clock_tick_get_32>
   17ddc:	1905      	adds	r5, r0, r4
   17dde:	e7ce      	b.n	17d7e <z_tick_sleep+0x2a>
   17de0:	20008cf8 	.word	0x20008cf8
   17de4:	20008d24 	.word	0x20008d24
   17de8:	0001a8f7 	.word	0x0001a8f7

00017dec <z_impl_k_sleep>:
{
   17dec:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   17dee:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   17df2:	bf08      	it	eq
   17df4:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   17df8:	d018      	beq.n	17e2c <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
   17dfa:	f7ff ffab 	bl	17d54 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   17dfe:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
   17e00:	0151      	lsls	r1, r2, #5
   17e02:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   17e06:	0143      	lsls	r3, r0, #5
   17e08:	1a1b      	subs	r3, r3, r0
   17e0a:	eb61 0102 	sbc.w	r1, r1, r2
   17e0e:	0089      	lsls	r1, r1, #2
   17e10:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
   17e14:	009b      	lsls	r3, r3, #2
   17e16:	181b      	adds	r3, r3, r0
   17e18:	eb42 0201 	adc.w	r2, r2, r1
   17e1c:	00d2      	lsls	r2, r2, #3
   17e1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   17e22:	f3c3 3310 	ubfx	r3, r3, #12, #17
   17e26:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
   17e2a:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   17e2c:	4b03      	ldr	r3, [pc, #12]	; (17e3c <z_impl_k_sleep+0x50>)
   17e2e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   17e30:	f7ff feb2 	bl	17b98 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   17e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17e38:	e7f7      	b.n	17e2a <z_impl_k_sleep+0x3e>
   17e3a:	bf00      	nop
   17e3c:	20008cf8 	.word	0x20008cf8

00017e40 <z_impl_k_usleep>:
{
   17e40:	b508      	push	{r3, lr}
	ticks = k_us_to_ticks_ceil64(us);
   17e42:	17c1      	asrs	r1, r0, #31
   17e44:	03c9      	lsls	r1, r1, #15
   17e46:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   17e4a:	03c0      	lsls	r0, r0, #15
   17e4c:	4b15      	ldr	r3, [pc, #84]	; (17ea4 <z_impl_k_usleep+0x64>)
   17e4e:	18c0      	adds	r0, r0, r3
   17e50:	4a15      	ldr	r2, [pc, #84]	; (17ea8 <z_impl_k_usleep+0x68>)
   17e52:	f04f 0300 	mov.w	r3, #0
   17e56:	f141 0100 	adc.w	r1, r1, #0
   17e5a:	f7f8 f97b 	bl	10154 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   17e5e:	17c1      	asrs	r1, r0, #31
   17e60:	f7ff ff78 	bl	17d54 <z_tick_sleep>
	return k_ticks_to_us_floor64(ticks);
   17e64:	ea4f 7ce0 	mov.w	ip, r0, asr #31
   17e68:	ea4f 124c 	mov.w	r2, ip, lsl #5
   17e6c:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   17e70:	0143      	lsls	r3, r0, #5
   17e72:	1a1b      	subs	r3, r3, r0
   17e74:	eb62 020c 	sbc.w	r2, r2, ip
   17e78:	0252      	lsls	r2, r2, #9
   17e7a:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
   17e7e:	025b      	lsls	r3, r3, #9
   17e80:	181b      	adds	r3, r3, r0
   17e82:	eb4c 0202 	adc.w	r2, ip, r2
   17e86:	ea4f 1e82 	mov.w	lr, r2, lsl #6
   17e8a:	ea4e 6e93 	orr.w	lr, lr, r3, lsr #26
   17e8e:	0199      	lsls	r1, r3, #6
   17e90:	1acb      	subs	r3, r1, r3
   17e92:	eb6e 0e02 	sbc.w	lr, lr, r2
   17e96:	181b      	adds	r3, r3, r0
   17e98:	eb4c 000e 	adc.w	r0, ip, lr
   17e9c:	0bdb      	lsrs	r3, r3, #15
}
   17e9e:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   17ea2:	bd08      	pop	{r3, pc}
   17ea4:	000f423f 	.word	0x000f423f
   17ea8:	000f4240 	.word	0x000f4240

00017eac <z_impl_z_current_get>:
}
   17eac:	4b01      	ldr	r3, [pc, #4]	; (17eb4 <z_impl_z_current_get+0x8>)
   17eae:	6898      	ldr	r0, [r3, #8]
   17eb0:	4770      	bx	lr
   17eb2:	bf00      	nop
   17eb4:	20008cf8 	.word	0x20008cf8

00017eb8 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   17eb8:	b570      	push	{r4, r5, r6, lr}
   17eba:	f04f 0320 	mov.w	r3, #32
   17ebe:	f3ef 8511 	mrs	r5, BASEPRI
   17ec2:	f383 8812 	msr	BASEPRI_MAX, r3
   17ec6:	f3bf 8f6f 	isb	sy
   17eca:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   17ecc:	7b03      	ldrb	r3, [r0, #12]
   17ece:	f013 0f01 	tst.w	r3, #1
   17ed2:	d109      	bne.n	17ee8 <z_thread_abort+0x30>
   17ed4:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   17ed6:	7b43      	ldrb	r3, [r0, #13]
   17ed8:	f013 0f08 	tst.w	r3, #8
   17edc:	d00f      	beq.n	17efe <z_thread_abort+0x46>
	__asm__ volatile(
   17ede:	f385 8811 	msr	BASEPRI, r5
   17ee2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
   17ee6:	e009      	b.n	17efc <z_thread_abort+0x44>
   17ee8:	f385 8811 	msr	BASEPRI, r5
   17eec:	f3bf 8f6f 	isb	sy
		k_panic();
   17ef0:	4040      	eors	r0, r0
   17ef2:	f380 8811 	msr	BASEPRI, r0
   17ef6:	f04f 0004 	mov.w	r0, #4
   17efa:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   17efc:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
   17efe:	f7ff fea5 	bl	17c4c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   17f02:	4b08      	ldr	r3, [pc, #32]	; (17f24 <z_thread_abort+0x6c>)
   17f04:	689b      	ldr	r3, [r3, #8]
   17f06:	42a3      	cmp	r3, r4
   17f08:	d004      	beq.n	17f14 <z_thread_abort+0x5c>
   17f0a:	f386 8811 	msr	BASEPRI, r6
   17f0e:	f3bf 8f6f 	isb	sy
   17f12:	e7f3      	b.n	17efc <z_thread_abort+0x44>
   17f14:	f3ef 8305 	mrs	r3, IPSR
   17f18:	2b00      	cmp	r3, #0
   17f1a:	d1f6      	bne.n	17f0a <z_thread_abort+0x52>
   17f1c:	4628      	mov	r0, r5
   17f1e:	f7fa fb89 	bl	12634 <arch_swap>
	return ret;
   17f22:	e7f2      	b.n	17f0a <z_thread_abort+0x52>
   17f24:	20008cf8 	.word	0x20008cf8

00017f28 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   17f28:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   17f2a:	4806      	ldr	r0, [pc, #24]	; (17f44 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   17f2c:	4a06      	ldr	r2, [pc, #24]	; (17f48 <z_data_copy+0x20>)
   17f2e:	1a12      	subs	r2, r2, r0
   17f30:	4906      	ldr	r1, [pc, #24]	; (17f4c <z_data_copy+0x24>)
   17f32:	f002 fbf4 	bl	1a71e <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   17f36:	4a06      	ldr	r2, [pc, #24]	; (17f50 <z_data_copy+0x28>)
   17f38:	4906      	ldr	r1, [pc, #24]	; (17f54 <z_data_copy+0x2c>)
   17f3a:	4807      	ldr	r0, [pc, #28]	; (17f58 <z_data_copy+0x30>)
   17f3c:	f002 fbef 	bl	1a71e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   17f40:	bd08      	pop	{r3, pc}
   17f42:	bf00      	nop
   17f44:	20008000 	.word	0x20008000
   17f48:	200081a0 	.word	0x200081a0
   17f4c:	0001beac 	.word	0x0001beac
   17f50:	00000000 	.word	0x00000000
   17f54:	0001beac 	.word	0x0001beac
   17f58:	20008000 	.word	0x20008000

00017f5c <first>:
	return list->head == list;
   17f5c:	4b03      	ldr	r3, [pc, #12]	; (17f6c <first+0x10>)
   17f5e:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17f60:	4298      	cmp	r0, r3
   17f62:	d000      	beq.n	17f66 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   17f64:	4770      	bx	lr
   17f66:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   17f68:	e7fc      	b.n	17f64 <first+0x8>
   17f6a:	bf00      	nop
   17f6c:	20008128 	.word	0x20008128

00017f70 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17f70:	b130      	cbz	r0, 17f80 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   17f72:	4a04      	ldr	r2, [pc, #16]	; (17f84 <next+0x14>)
   17f74:	6852      	ldr	r2, [r2, #4]
   17f76:	4290      	cmp	r0, r2
   17f78:	d001      	beq.n	17f7e <next+0xe>
   17f7a:	6800      	ldr	r0, [r0, #0]
   17f7c:	4770      	bx	lr
   17f7e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   17f80:	4770      	bx	lr
   17f82:	bf00      	nop
   17f84:	20008128 	.word	0x20008128

00017f88 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   17f88:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   17f8a:	4b04      	ldr	r3, [pc, #16]	; (17f9c <elapsed+0x14>)
   17f8c:	681b      	ldr	r3, [r3, #0]
   17f8e:	b10b      	cbz	r3, 17f94 <elapsed+0xc>
   17f90:	2000      	movs	r0, #0
}
   17f92:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   17f94:	f7fd f9e2 	bl	1535c <sys_clock_elapsed>
   17f98:	e7fb      	b.n	17f92 <elapsed+0xa>
   17f9a:	bf00      	nop
   17f9c:	20008d30 	.word	0x20008d30

00017fa0 <next_timeout>:

static int32_t next_timeout(void)
{
   17fa0:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   17fa2:	f7ff ffdb 	bl	17f5c <first>
   17fa6:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   17fa8:	f7ff ffee 	bl	17f88 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   17fac:	b17c      	cbz	r4, 17fce <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   17fae:	6923      	ldr	r3, [r4, #16]
   17fb0:	6962      	ldr	r2, [r4, #20]
   17fb2:	1a1b      	subs	r3, r3, r0
   17fb4:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   17fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   17fbc:	f172 0100 	sbcs.w	r1, r2, #0
   17fc0:	da08      	bge.n	17fd4 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   17fc2:	2a00      	cmp	r2, #0
   17fc4:	db01      	blt.n	17fca <next_timeout+0x2a>
   17fc6:	4618      	mov	r0, r3
   17fc8:	e006      	b.n	17fd8 <next_timeout+0x38>
   17fca:	2300      	movs	r3, #0
   17fcc:	e7fb      	b.n	17fc6 <next_timeout+0x26>
		ret = MAX_WAIT;
   17fce:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   17fd2:	e001      	b.n	17fd8 <next_timeout+0x38>
   17fd4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   17fd8:	4b03      	ldr	r3, [pc, #12]	; (17fe8 <next_timeout+0x48>)
   17fda:	691b      	ldr	r3, [r3, #16]
   17fdc:	b113      	cbz	r3, 17fe4 <next_timeout+0x44>
   17fde:	4283      	cmp	r3, r0
   17fe0:	da00      	bge.n	17fe4 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
   17fe2:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   17fe4:	bd10      	pop	{r4, pc}
   17fe6:	bf00      	nop
   17fe8:	20008cf8 	.word	0x20008cf8

00017fec <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   17fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   17ff0:	bf08      	it	eq
   17ff2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   17ff6:	d07b      	beq.n	180f0 <z_add_timeout+0x104>
{
   17ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17ffc:	4604      	mov	r4, r0
   17ffe:	4692      	mov	sl, r2
   18000:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   18002:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   18004:	2300      	movs	r3, #0
	__asm__ volatile(
   18006:	f04f 0220 	mov.w	r2, #32
   1800a:	f3ef 8711 	mrs	r7, BASEPRI
   1800e:	f382 8812 	msr	BASEPRI_MAX, r2
   18012:	f3bf 8f6f 	isb	sy
   18016:	e026      	b.n	18066 <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   18018:	f11a 0801 	adds.w	r8, sl, #1
   1801c:	f145 0900 	adc.w	r9, r5, #0
   18020:	f7ff ffb2 	bl	17f88 <elapsed>
   18024:	eb18 0300 	adds.w	r3, r8, r0
   18028:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   1802c:	6123      	str	r3, [r4, #16]
   1802e:	6160      	str	r0, [r4, #20]
   18030:	e03b      	b.n	180aa <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   18032:	1a52      	subs	r2, r2, r1
   18034:	eb66 0303 	sbc.w	r3, r6, r3
   18038:	6102      	str	r2, [r0, #16]
   1803a:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   1803c:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   1803e:	6063      	str	r3, [r4, #4]
	node->next = successor;
   18040:	6020      	str	r0, [r4, #0]
	prev->next = node;
   18042:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   18044:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   18046:	e005      	b.n	18054 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
   18048:	4b2a      	ldr	r3, [pc, #168]	; (180f4 <z_add_timeout+0x108>)
   1804a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1804c:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   1804e:	6062      	str	r2, [r4, #4]
	tail->next = node;
   18050:	6014      	str	r4, [r2, #0]
	list->tail = node;
   18052:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   18054:	f7ff ff82 	bl	17f5c <first>
   18058:	4284      	cmp	r4, r0
   1805a:	d03a      	beq.n	180d2 <z_add_timeout+0xe6>
	__asm__ volatile(
   1805c:	f387 8811 	msr	BASEPRI, r7
   18060:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   18064:	2301      	movs	r3, #1
   18066:	2b00      	cmp	r3, #0
   18068:	d140      	bne.n	180ec <z_add_timeout+0x100>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1806a:	4653      	mov	r3, sl
   1806c:	f06f 0101 	mvn.w	r1, #1
   18070:	ebb1 010a 	subs.w	r1, r1, sl
   18074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18078:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1807c:	2a00      	cmp	r2, #0
   1807e:	dbcb      	blt.n	18018 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   18080:	4a1d      	ldr	r2, [pc, #116]	; (180f8 <z_add_timeout+0x10c>)
   18082:	6811      	ldr	r1, [r2, #0]
   18084:	6852      	ldr	r2, [r2, #4]
   18086:	185b      	adds	r3, r3, r1
   18088:	eb42 0205 	adc.w	r2, r2, r5
   1808c:	f06f 0101 	mvn.w	r1, #1
   18090:	1ac9      	subs	r1, r1, r3
   18092:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
   18096:	4608      	mov	r0, r1
   18098:	461a      	mov	r2, r3
   1809a:	2901      	cmp	r1, #1
   1809c:	f173 0300 	sbcs.w	r3, r3, #0
   180a0:	da01      	bge.n	180a6 <z_add_timeout+0xba>
   180a2:	2001      	movs	r0, #1
   180a4:	2200      	movs	r2, #0
   180a6:	6120      	str	r0, [r4, #16]
   180a8:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   180aa:	f7ff ff57 	bl	17f5c <first>
   180ae:	2800      	cmp	r0, #0
   180b0:	d0ca      	beq.n	18048 <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
   180b2:	6902      	ldr	r2, [r0, #16]
   180b4:	6946      	ldr	r6, [r0, #20]
   180b6:	6921      	ldr	r1, [r4, #16]
   180b8:	6963      	ldr	r3, [r4, #20]
   180ba:	4291      	cmp	r1, r2
   180bc:	eb73 0e06 	sbcs.w	lr, r3, r6
   180c0:	dbb7      	blt.n	18032 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   180c2:	1a89      	subs	r1, r1, r2
   180c4:	eb63 0306 	sbc.w	r3, r3, r6
   180c8:	6121      	str	r1, [r4, #16]
   180ca:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   180cc:	f7ff ff50 	bl	17f70 <next>
   180d0:	e7ed      	b.n	180ae <z_add_timeout+0xc2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   180d2:	f7ff ff65 	bl	17fa0 <next_timeout>

			if (next_time == 0 ||
   180d6:	4603      	mov	r3, r0
   180d8:	b118      	cbz	r0, 180e2 <z_add_timeout+0xf6>
			    _current_cpu->slice_ticks != next_time) {
   180da:	4a08      	ldr	r2, [pc, #32]	; (180fc <z_add_timeout+0x110>)
   180dc:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   180de:	4282      	cmp	r2, r0
   180e0:	d0bc      	beq.n	1805c <z_add_timeout+0x70>
				sys_clock_set_timeout(next_time, false);
   180e2:	2100      	movs	r1, #0
   180e4:	4618      	mov	r0, r3
   180e6:	f7fd f907 	bl	152f8 <sys_clock_set_timeout>
   180ea:	e7b7      	b.n	1805c <z_add_timeout+0x70>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   180ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   180f0:	4770      	bx	lr
   180f2:	bf00      	nop
   180f4:	20008128 	.word	0x20008128
   180f8:	20008838 	.word	0x20008838
   180fc:	20008cf8 	.word	0x20008cf8

00018100 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   18100:	b570      	push	{r4, r5, r6, lr}
   18102:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   18104:	f7ff fc1c 	bl	17940 <z_time_slice>
	__asm__ volatile(
   18108:	f04f 0320 	mov.w	r3, #32
   1810c:	f3ef 8611 	mrs	r6, BASEPRI
   18110:	f383 8812 	msr	BASEPRI_MAX, r3
   18114:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   18118:	4b28      	ldr	r3, [pc, #160]	; (181bc <sys_clock_announce+0xbc>)
   1811a:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1811c:	e021      	b.n	18162 <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1811e:	4a28      	ldr	r2, [pc, #160]	; (181c0 <sys_clock_announce+0xc0>)
   18120:	6813      	ldr	r3, [r2, #0]
   18122:	6851      	ldr	r1, [r2, #4]
   18124:	195b      	adds	r3, r3, r5
   18126:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
   1812a:	6013      	str	r3, [r2, #0]
   1812c:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   1812e:	2200      	movs	r2, #0
   18130:	2300      	movs	r3, #0
   18132:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   18136:	4620      	mov	r0, r4
   18138:	f002 fc9c 	bl	1aa74 <remove_timeout>
	__asm__ volatile(
   1813c:	f386 8811 	msr	BASEPRI, r6
   18140:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   18144:	68a3      	ldr	r3, [r4, #8]
   18146:	4620      	mov	r0, r4
   18148:	4798      	blx	r3
	__asm__ volatile(
   1814a:	f04f 0320 	mov.w	r3, #32
   1814e:	f3ef 8611 	mrs	r6, BASEPRI
   18152:	f383 8812 	msr	BASEPRI_MAX, r3
   18156:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   1815a:	4a18      	ldr	r2, [pc, #96]	; (181bc <sys_clock_announce+0xbc>)
   1815c:	6813      	ldr	r3, [r2, #0]
   1815e:	1b5b      	subs	r3, r3, r5
   18160:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   18162:	f7ff fefb 	bl	17f5c <first>
   18166:	4604      	mov	r4, r0
   18168:	b138      	cbz	r0, 1817a <sys_clock_announce+0x7a>
   1816a:	6905      	ldr	r5, [r0, #16]
   1816c:	6941      	ldr	r1, [r0, #20]
   1816e:	4b13      	ldr	r3, [pc, #76]	; (181bc <sys_clock_announce+0xbc>)
   18170:	681a      	ldr	r2, [r3, #0]
   18172:	17d3      	asrs	r3, r2, #31
   18174:	42aa      	cmp	r2, r5
   18176:	418b      	sbcs	r3, r1
   18178:	dad1      	bge.n	1811e <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
   1817a:	b144      	cbz	r4, 1818e <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   1817c:	6923      	ldr	r3, [r4, #16]
   1817e:	6962      	ldr	r2, [r4, #20]
   18180:	490e      	ldr	r1, [pc, #56]	; (181bc <sys_clock_announce+0xbc>)
   18182:	6809      	ldr	r1, [r1, #0]
   18184:	1a5b      	subs	r3, r3, r1
   18186:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   1818a:	6123      	str	r3, [r4, #16]
   1818c:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   1818e:	4a0c      	ldr	r2, [pc, #48]	; (181c0 <sys_clock_announce+0xc0>)
   18190:	4d0a      	ldr	r5, [pc, #40]	; (181bc <sys_clock_announce+0xbc>)
   18192:	6828      	ldr	r0, [r5, #0]
   18194:	6813      	ldr	r3, [r2, #0]
   18196:	6851      	ldr	r1, [r2, #4]
   18198:	181b      	adds	r3, r3, r0
   1819a:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   1819e:	6013      	str	r3, [r2, #0]
   181a0:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   181a2:	2400      	movs	r4, #0
   181a4:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   181a6:	f7ff fefb 	bl	17fa0 <next_timeout>
   181aa:	4621      	mov	r1, r4
   181ac:	f7fd f8a4 	bl	152f8 <sys_clock_set_timeout>
	__asm__ volatile(
   181b0:	f386 8811 	msr	BASEPRI, r6
   181b4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   181b8:	bd70      	pop	{r4, r5, r6, pc}
   181ba:	bf00      	nop
   181bc:	20008d30 	.word	0x20008d30
   181c0:	20008838 	.word	0x20008838

000181c4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   181c4:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   181c6:	2200      	movs	r2, #0
	__asm__ volatile(
   181c8:	f04f 0320 	mov.w	r3, #32
   181cc:	f3ef 8411 	mrs	r4, BASEPRI
   181d0:	f383 8812 	msr	BASEPRI_MAX, r3
   181d4:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   181d8:	4613      	mov	r3, r2
   181da:	4611      	mov	r1, r2
   181dc:	e00c      	b.n	181f8 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
   181de:	f7ff fed3 	bl	17f88 <elapsed>
   181e2:	4a07      	ldr	r2, [pc, #28]	; (18200 <sys_clock_tick_get+0x3c>)
   181e4:	6813      	ldr	r3, [r2, #0]
   181e6:	6851      	ldr	r1, [r2, #4]
   181e8:	18c3      	adds	r3, r0, r3
   181ea:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
   181ee:	f384 8811 	msr	BASEPRI, r4
   181f2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   181f6:	2201      	movs	r2, #1
   181f8:	2a00      	cmp	r2, #0
   181fa:	d0f0      	beq.n	181de <sys_clock_tick_get+0x1a>
	}
	return t;
}
   181fc:	4618      	mov	r0, r3
   181fe:	bd10      	pop	{r4, pc}
   18200:	20008838 	.word	0x20008838

00018204 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   18204:	b538      	push	{r3, r4, r5, lr}
   18206:	4604      	mov	r4, r0
	__asm__ volatile(
   18208:	f04f 0320 	mov.w	r3, #32
   1820c:	f3ef 8511 	mrs	r5, BASEPRI
   18210:	f383 8812 	msr	BASEPRI_MAX, r3
   18214:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   18218:	6a82      	ldr	r2, [r0, #40]	; 0x28
   1821a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1821c:	ea52 0103 	orrs.w	r1, r2, r3
   18220:	d005      	beq.n	1822e <z_timer_expiration_handler+0x2a>
   18222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   18226:	bf08      	it	eq
   18228:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1822c:	d128      	bne.n	18280 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   1822e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18230:	3301      	adds	r3, #1
   18232:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   18234:	6a23      	ldr	r3, [r4, #32]
   18236:	b173      	cbz	r3, 18256 <z_timer_expiration_handler+0x52>
	__asm__ volatile(
   18238:	f385 8811 	msr	BASEPRI, r5
   1823c:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   18240:	6a23      	ldr	r3, [r4, #32]
   18242:	4620      	mov	r0, r4
   18244:	4798      	blx	r3
	__asm__ volatile(
   18246:	f04f 0320 	mov.w	r3, #32
   1824a:	f3ef 8511 	mrs	r5, BASEPRI
   1824e:	f383 8812 	msr	BASEPRI_MAX, r3
   18252:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   18256:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   1825a:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1825c:	42a3      	cmp	r3, r4
   1825e:	d038      	beq.n	182d2 <z_timer_expiration_handler+0xce>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   18260:	2c00      	cmp	r4, #0
   18262:	d036      	beq.n	182d2 <z_timer_expiration_handler+0xce>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   18264:	4620      	mov	r0, r4
   18266:	f002 fadc 	bl	1a822 <z_unpend_thread_no_timeout>
   1826a:	2300      	movs	r3, #0
   1826c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
   18270:	f385 8811 	msr	BASEPRI, r5
   18274:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   18278:	4620      	mov	r0, r4
   1827a:	f002 fb20 	bl	1a8be <z_ready_thread>
}
   1827e:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_ticks();
   18280:	f002 fc73 	bl	1ab6a <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   18284:	3001      	adds	r0, #1
   18286:	f141 0100 	adc.w	r1, r1, #0
   1828a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1828c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1828e:	18c0      	adds	r0, r0, r3
   18290:	eb41 0102 	adc.w	r1, r1, r2
   18294:	2801      	cmp	r0, #1
   18296:	f171 0100 	sbcs.w	r1, r1, #0
   1829a:	da08      	bge.n	182ae <z_timer_expiration_handler+0xaa>
   1829c:	f06f 0201 	mvn.w	r2, #1
   182a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   182a4:	490d      	ldr	r1, [pc, #52]	; (182dc <z_timer_expiration_handler+0xd8>)
   182a6:	4620      	mov	r0, r4
   182a8:	f7ff fea0 	bl	17fec <z_add_timeout>
   182ac:	e7bf      	b.n	1822e <z_timer_expiration_handler+0x2a>
   182ae:	f002 fc5c 	bl	1ab6a <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   182b2:	3001      	adds	r0, #1
   182b4:	f141 0300 	adc.w	r3, r1, #0
   182b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   182ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   182bc:	1880      	adds	r0, r0, r2
   182be:	eb43 0301 	adc.w	r3, r3, r1
   182c2:	f06f 0201 	mvn.w	r2, #1
   182c6:	1a12      	subs	r2, r2, r0
   182c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   182cc:	eb61 0303 	sbc.w	r3, r1, r3
   182d0:	e7e8      	b.n	182a4 <z_timer_expiration_handler+0xa0>
   182d2:	f385 8811 	msr	BASEPRI, r5
   182d6:	f3bf 8f6f 	isb	sy
		return;
   182da:	e7d0      	b.n	1827e <z_timer_expiration_handler+0x7a>
   182dc:	00018205 	.word	0x00018205

000182e0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   182e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   182e4:	461e      	mov	r6, r3
   182e6:	9f06      	ldr	r7, [sp, #24]
   182e8:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   182ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   182f0:	bf08      	it	eq
   182f2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   182f6:	d02f      	beq.n	18358 <z_impl_k_timer_start+0x78>
   182f8:	4605      	mov	r5, r0
   182fa:	4614      	mov	r4, r2
   182fc:	4613      	mov	r3, r2
   182fe:	4631      	mov	r1, r6
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   18300:	4640      	mov	r0, r8
   18302:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   18306:	bf08      	it	eq
   18308:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   1830c:	d00d      	beq.n	1832a <z_impl_k_timer_start+0x4a>
   1830e:	ea57 0c08 	orrs.w	ip, r7, r8
   18312:	d00a      	beq.n	1832a <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
   18314:	f06f 0c01 	mvn.w	ip, #1
   18318:	ebbc 0c07 	subs.w	ip, ip, r7
   1831c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   18320:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   18324:	f1bc 0f00 	cmp.w	ip, #0
   18328:	db18      	blt.n	1835c <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1832a:	f06f 0201 	mvn.w	r2, #1
   1832e:	1ad2      	subs	r2, r2, r3
   18330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18334:	eb62 0201 	sbc.w	r2, r2, r1
   18338:	2a00      	cmp	r2, #0
   1833a:	db1a      	blt.n	18372 <z_impl_k_timer_start+0x92>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   1833c:	4628      	mov	r0, r5
   1833e:	f002 fbb0 	bl	1aaa2 <z_abort_timeout>
	timer->period = period;
   18342:	62af      	str	r7, [r5, #40]	; 0x28
   18344:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
   18348:	2300      	movs	r3, #0
   1834a:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1834c:	4622      	mov	r2, r4
   1834e:	4633      	mov	r3, r6
   18350:	490e      	ldr	r1, [pc, #56]	; (1838c <z_impl_k_timer_start+0xac>)
   18352:	4628      	mov	r0, r5
   18354:	f7ff fe4a 	bl	17fec <z_add_timeout>
		     duration);
}
   18358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   1835c:	2f02      	cmp	r7, #2
   1835e:	f170 0000 	sbcs.w	r0, r0, #0
   18362:	da02      	bge.n	1836a <z_impl_k_timer_start+0x8a>
   18364:	2702      	movs	r7, #2
   18366:	f04f 0800 	mov.w	r8, #0
   1836a:	3f01      	subs	r7, #1
   1836c:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
   18370:	e7db      	b.n	1832a <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
   18372:	461c      	mov	r4, r3
   18374:	460e      	mov	r6, r1
   18376:	2b01      	cmp	r3, #1
   18378:	f171 0100 	sbcs.w	r1, r1, #0
   1837c:	da01      	bge.n	18382 <z_impl_k_timer_start+0xa2>
   1837e:	2401      	movs	r4, #1
   18380:	2600      	movs	r6, #0
   18382:	3c01      	subs	r4, #1
   18384:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
   18388:	e7d8      	b.n	1833c <z_impl_k_timer_start+0x5c>
   1838a:	bf00      	nop
   1838c:	00018205 	.word	0x00018205

00018390 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
   18390:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   18392:	4802      	ldr	r0, [pc, #8]	; (1839c <boot_banner+0xc>)
   18394:	f000 f8af 	bl	184f6 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
   18398:	bd08      	pop	{r3, pc}
   1839a:	bf00      	nop
   1839c:	0001be7c 	.word	0x0001be7c

000183a0 <cbprintf_via_va_list>:
{
   183a0:	b510      	push	{r4, lr}
   183a2:	460c      	mov	r4, r1
   183a4:	4611      	mov	r1, r2
   183a6:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
   183a8:	9b02      	ldr	r3, [sp, #8]
   183aa:	47a0      	blx	r4
}
   183ac:	bd10      	pop	{r4, pc}

000183ae <is_fmt_spec>:
	return (c >= 64) && (c <= 122);
   183ae:	3840      	subs	r0, #64	; 0x40
   183b0:	b2c0      	uxtb	r0, r0
}
   183b2:	283a      	cmp	r0, #58	; 0x3a
   183b4:	bf8c      	ite	hi
   183b6:	2000      	movhi	r0, #0
   183b8:	2001      	movls	r0, #1
   183ba:	4770      	bx	lr

000183bc <get_package_len>:
{
   183bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   183be:	4606      	mov	r6, r0
	args_size = buf[0] * sizeof(int);
   183c0:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   183c2:	7845      	ldrb	r5, [r0, #1]
	ros_nbr   = buf[2];
   183c4:	7884      	ldrb	r4, [r0, #2]
	buf += ros_nbr;
   183c6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   183ca:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
   183cc:	2700      	movs	r7, #0
   183ce:	e006      	b.n	183de <get_package_len+0x22>
		buf++;
   183d0:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
   183d2:	4620      	mov	r0, r4
   183d4:	f001 f997 	bl	19706 <strlen>
   183d8:	3001      	adds	r0, #1
   183da:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
   183dc:	3701      	adds	r7, #1
   183de:	42af      	cmp	r7, r5
   183e0:	d3f6      	bcc.n	183d0 <get_package_len+0x14>
}
   183e2:	1ba0      	subs	r0, r4, r6
   183e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000183e6 <append_string>:
{
   183e6:	b570      	push	{r4, r5, r6, lr}
   183e8:	4614      	mov	r4, r2
	if (cb == NULL) {
   183ea:	b138      	cbz	r0, 183fc <append_string+0x16>
   183ec:	460d      	mov	r5, r1
   183ee:	4619      	mov	r1, r3
   183f0:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   183f2:	b143      	cbz	r3, 18406 <append_string+0x20>
	return cb(str, strl, ctx);
   183f4:	462a      	mov	r2, r5
   183f6:	4620      	mov	r0, r4
   183f8:	47b0      	blx	r6
}
   183fa:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
   183fc:	4610      	mov	r0, r2
   183fe:	f001 f982 	bl	19706 <strlen>
   18402:	3001      	adds	r0, #1
   18404:	e7f9      	b.n	183fa <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
   18406:	4610      	mov	r0, r2
   18408:	f001 f97d 	bl	19706 <strlen>
   1840c:	b283      	uxth	r3, r0
   1840e:	3301      	adds	r3, #1
   18410:	b299      	uxth	r1, r3
   18412:	e7ef      	b.n	183f4 <append_string+0xe>

00018414 <cbpprintf_external>:
	if (buf == NULL) {
   18414:	b35b      	cbz	r3, 1846e <cbpprintf_external+0x5a>
{
   18416:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1841a:	b082      	sub	sp, #8
   1841c:	4607      	mov	r7, r0
   1841e:	4688      	mov	r8, r1
   18420:	4691      	mov	r9, r2
   18422:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
   18424:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
   18426:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   18428:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
   1842a:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1842c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   18430:	eb04 0443 	add.w	r4, r4, r3, lsl #1
   18434:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   18436:	f04f 0a00 	mov.w	sl, #0
   1843a:	e00a      	b.n	18452 <cbpprintf_external+0x3e>
		s_idx = *(uint8_t *)s++;
   1843c:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   18440:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   18444:	4620      	mov	r0, r4
   18446:	f001 f95e 	bl	19706 <strlen>
   1844a:	3001      	adds	r0, #1
   1844c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   1844e:	f10a 0a01 	add.w	sl, sl, #1
   18452:	45b2      	cmp	sl, r6
   18454:	d3f2      	bcc.n	1843c <cbpprintf_external+0x28>
	buf += sizeof(*hdr);
   18456:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
   1845a:	9300      	str	r3, [sp, #0]
   1845c:	686b      	ldr	r3, [r5, #4]
   1845e:	464a      	mov	r2, r9
   18460:	4641      	mov	r1, r8
   18462:	4638      	mov	r0, r7
   18464:	f7ff ff9c 	bl	183a0 <cbprintf_via_va_list>
}
   18468:	b002      	add	sp, #8
   1846a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   1846e:	f06f 0015 	mvn.w	r0, #21
}
   18472:	4770      	bx	lr

00018474 <is_ptr>:
{
   18474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18478:	4604      	mov	r4, r0
   1847a:	4688      	mov	r8, r1
	int cnt = 0;
   1847c:	2700      	movs	r7, #0
	bool mod = false;
   1847e:	463e      	mov	r6, r7
	while ((c = *fmt++) != '\0') {
   18480:	e007      	b.n	18492 <is_ptr+0x1e>
				if (c == 'p') {
   18482:	2d70      	cmp	r5, #112	; 0x70
   18484:	d018      	beq.n	184b8 <is_ptr+0x44>
				} else if (is_fmt_spec(c)) {
   18486:	4628      	mov	r0, r5
   18488:	f7ff ff91 	bl	183ae <is_fmt_spec>
   1848c:	b9b8      	cbnz	r0, 184be <is_ptr+0x4a>
		if (c == '%') {
   1848e:	2d25      	cmp	r5, #37	; 0x25
   18490:	d00e      	beq.n	184b0 <is_ptr+0x3c>
	while ((c = *fmt++) != '\0') {
   18492:	f814 5b01 	ldrb.w	r5, [r4], #1
   18496:	b175      	cbz	r5, 184b6 <is_ptr+0x42>
		if (mod) {
   18498:	2e00      	cmp	r6, #0
   1849a:	d0f8      	beq.n	1848e <is_ptr+0x1a>
			if (cnt == n) {
   1849c:	4547      	cmp	r7, r8
   1849e:	d0f0      	beq.n	18482 <is_ptr+0xe>
			} else if (is_fmt_spec(c)) {
   184a0:	4628      	mov	r0, r5
   184a2:	f7ff ff84 	bl	183ae <is_fmt_spec>
   184a6:	2800      	cmp	r0, #0
   184a8:	d0f1      	beq.n	1848e <is_ptr+0x1a>
				cnt++;
   184aa:	3701      	adds	r7, #1
				mod = false;
   184ac:	2600      	movs	r6, #0
   184ae:	e7ee      	b.n	1848e <is_ptr+0x1a>
			mod = !mod;
   184b0:	f086 0601 	eor.w	r6, r6, #1
   184b4:	e7ed      	b.n	18492 <is_ptr+0x1e>
	return false;
   184b6:	2600      	movs	r6, #0
}
   184b8:	4630      	mov	r0, r6
   184ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					return false;
   184be:	2600      	movs	r6, #0
   184c0:	e7fa      	b.n	184b8 <is_ptr+0x44>

000184c2 <arch_printk_char_out>:
}
   184c2:	2000      	movs	r0, #0
   184c4:	4770      	bx	lr

000184c6 <str_out>:
{
   184c6:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   184c8:	680c      	ldr	r4, [r1, #0]
   184ca:	b154      	cbz	r4, 184e2 <str_out+0x1c>
   184cc:	688a      	ldr	r2, [r1, #8]
   184ce:	684b      	ldr	r3, [r1, #4]
   184d0:	429a      	cmp	r2, r3
   184d2:	da06      	bge.n	184e2 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   184d4:	3b01      	subs	r3, #1
   184d6:	429a      	cmp	r2, r3
   184d8:	d008      	beq.n	184ec <str_out+0x26>
		ctx->str[ctx->count++] = c;
   184da:	1c53      	adds	r3, r2, #1
   184dc:	608b      	str	r3, [r1, #8]
   184de:	54a0      	strb	r0, [r4, r2]
   184e0:	e002      	b.n	184e8 <str_out+0x22>
		ctx->count++;
   184e2:	688b      	ldr	r3, [r1, #8]
   184e4:	3301      	adds	r3, #1
   184e6:	608b      	str	r3, [r1, #8]
}
   184e8:	bc10      	pop	{r4}
   184ea:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   184ec:	1c53      	adds	r3, r2, #1
   184ee:	608b      	str	r3, [r1, #8]
   184f0:	2300      	movs	r3, #0
   184f2:	54a3      	strb	r3, [r4, r2]
   184f4:	e7f8      	b.n	184e8 <str_out+0x22>

000184f6 <printk>:
{
   184f6:	b40f      	push	{r0, r1, r2, r3}
   184f8:	b500      	push	{lr}
   184fa:	b083      	sub	sp, #12
   184fc:	a904      	add	r1, sp, #16
   184fe:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   18502:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   18504:	f7f8 fb5a 	bl	10bbc <vprintk>
}
   18508:	b003      	add	sp, #12
   1850a:	f85d eb04 	ldr.w	lr, [sp], #4
   1850e:	b004      	add	sp, #16
   18510:	4770      	bx	lr

00018512 <snprintk>:
{
   18512:	b40c      	push	{r2, r3}
   18514:	b500      	push	{lr}
   18516:	b083      	sub	sp, #12
   18518:	ab04      	add	r3, sp, #16
   1851a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1851e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   18520:	f7f8 fb5a 	bl	10bd8 <vsnprintk>
}
   18524:	b003      	add	sp, #12
   18526:	f85d eb04 	ldr.w	lr, [sp], #4
   1852a:	b002      	add	sp, #8
   1852c:	4770      	bx	lr

0001852e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1852e:	b508      	push	{r3, lr}
   18530:	4604      	mov	r4, r0
   18532:	4608      	mov	r0, r1
   18534:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   18536:	461a      	mov	r2, r3
   18538:	47a0      	blx	r4
	return z_impl_z_current_get();
   1853a:	f7ff fcb7 	bl	17eac <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1853e:	f7fb f8e1 	bl	13704 <z_impl_k_thread_abort>

00018542 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   18542:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   18546:	8b03      	ldrh	r3, [r0, #24]
   18548:	f023 0307 	bic.w	r3, r3, #7
   1854c:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1854e:	8303      	strh	r3, [r0, #24]
}
   18550:	4770      	bx	lr

00018552 <notify_monitors>:
{
   18552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18556:	4606      	mov	r6, r0
   18558:	460f      	mov	r7, r1
   1855a:	4690      	mov	r8, r2
	return list->head;
   1855c:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1855e:	b121      	cbz	r1, 1856a <notify_monitors+0x18>
	return node->next;
   18560:	680c      	ldr	r4, [r1, #0]
   18562:	b13c      	cbz	r4, 18574 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   18564:	b931      	cbnz	r1, 18574 <notify_monitors+0x22>
   18566:	460c      	mov	r4, r1
   18568:	e004      	b.n	18574 <notify_monitors+0x22>
   1856a:	460c      	mov	r4, r1
   1856c:	e002      	b.n	18574 <notify_monitors+0x22>
   1856e:	4623      	mov	r3, r4
   18570:	4621      	mov	r1, r4
   18572:	461c      	mov	r4, r3
   18574:	b169      	cbz	r1, 18592 <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
   18576:	684d      	ldr	r5, [r1, #4]
   18578:	4643      	mov	r3, r8
   1857a:	463a      	mov	r2, r7
   1857c:	4630      	mov	r0, r6
   1857e:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   18580:	2c00      	cmp	r4, #0
   18582:	d0f4      	beq.n	1856e <notify_monitors+0x1c>
	return node->next;
   18584:	6823      	ldr	r3, [r4, #0]
   18586:	2b00      	cmp	r3, #0
   18588:	d0f2      	beq.n	18570 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1858a:	2c00      	cmp	r4, #0
   1858c:	d1f0      	bne.n	18570 <notify_monitors+0x1e>
   1858e:	4623      	mov	r3, r4
   18590:	e7ee      	b.n	18570 <notify_monitors+0x1e>
}
   18592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018596 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   18596:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   18598:	f013 0307 	ands.w	r3, r3, #7
   1859c:	d103      	bne.n	185a6 <process_recheck+0x10>
	return list->head;
   1859e:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   185a0:	b10a      	cbz	r2, 185a6 <process_recheck+0x10>
		evt = EVT_START;
   185a2:	2003      	movs	r0, #3
   185a4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   185a6:	2b02      	cmp	r3, #2
   185a8:	d003      	beq.n	185b2 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   185aa:	2b01      	cmp	r3, #1
   185ac:	d006      	beq.n	185bc <process_recheck+0x26>
	int evt = EVT_NOP;
   185ae:	2000      	movs	r0, #0
   185b0:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   185b2:	8b42      	ldrh	r2, [r0, #26]
   185b4:	2a00      	cmp	r2, #0
   185b6:	d1f8      	bne.n	185aa <process_recheck+0x14>
		evt = EVT_STOP;
   185b8:	2004      	movs	r0, #4
   185ba:	4770      	bx	lr
   185bc:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   185be:	b10b      	cbz	r3, 185c4 <process_recheck+0x2e>
		evt = EVT_RESET;
   185c0:	2005      	movs	r0, #5
}
   185c2:	4770      	bx	lr
	int evt = EVT_NOP;
   185c4:	2000      	movs	r0, #0
   185c6:	4770      	bx	lr

000185c8 <process_complete>:
{
   185c8:	b510      	push	{r4, lr}
   185ca:	4604      	mov	r4, r0
   185cc:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   185ce:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   185d0:	2a00      	cmp	r2, #0
   185d2:	db07      	blt.n	185e4 <process_complete+0x1c>
   185d4:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   185d8:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   185da:	2a01      	cmp	r2, #1
   185dc:	d90e      	bls.n	185fc <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   185de:	2b04      	cmp	r3, #4
   185e0:	d036      	beq.n	18650 <process_complete+0x88>
}
   185e2:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   185e4:	e9d0 0100 	ldrd	r0, r1, [r0]
   185e8:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   185ec:	2300      	movs	r3, #0
   185ee:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   185f0:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   185f2:	2101      	movs	r1, #1
   185f4:	4620      	mov	r0, r4
   185f6:	f7ff ffa4 	bl	18542 <set_state>
   185fa:	e7f2      	b.n	185e2 <process_complete+0x1a>
		*clients = mgr->clients;
   185fc:	e9d0 0100 	ldrd	r0, r1, [r0]
   18600:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   18604:	2200      	movs	r2, #0
   18606:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   18608:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   1860a:	2b06      	cmp	r3, #6
   1860c:	d11b      	bne.n	18646 <process_complete+0x7e>
	return list->head;
   1860e:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   18612:	b153      	cbz	r3, 1862a <process_complete+0x62>
				mgr->refs += 1U;
   18614:	8b62      	ldrh	r2, [r4, #26]
   18616:	3201      	adds	r2, #1
   18618:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1861a:	461a      	mov	r2, r3
	return node->next;
   1861c:	681b      	ldr	r3, [r3, #0]
   1861e:	2b00      	cmp	r3, #0
   18620:	d0f7      	beq.n	18612 <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   18622:	2a00      	cmp	r2, #0
   18624:	d1f5      	bne.n	18612 <process_complete+0x4a>
   18626:	4613      	mov	r3, r2
   18628:	e7f3      	b.n	18612 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   1862a:	2102      	movs	r1, #2
   1862c:	4620      	mov	r0, r4
   1862e:	f7ff ff88 	bl	18542 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   18632:	4620      	mov	r0, r4
   18634:	f7ff ffaf 	bl	18596 <process_recheck>
   18638:	2800      	cmp	r0, #0
   1863a:	d0d2      	beq.n	185e2 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1863c:	8b23      	ldrh	r3, [r4, #24]
   1863e:	f043 0320 	orr.w	r3, r3, #32
   18642:	8323      	strh	r3, [r4, #24]
   18644:	e7cd      	b.n	185e2 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   18646:	2100      	movs	r1, #0
   18648:	4620      	mov	r0, r4
   1864a:	f7ff ff7a 	bl	18542 <set_state>
   1864e:	e7f0      	b.n	18632 <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
   18650:	2100      	movs	r1, #0
   18652:	f7ff ff76 	bl	18542 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   18656:	4620      	mov	r0, r4
   18658:	f7ff ff9d 	bl	18596 <process_recheck>
   1865c:	2800      	cmp	r0, #0
   1865e:	d0c0      	beq.n	185e2 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   18660:	8b23      	ldrh	r3, [r4, #24]
   18662:	f043 0320 	orr.w	r3, r3, #32
   18666:	8323      	strh	r3, [r4, #24]
}
   18668:	e7bb      	b.n	185e2 <process_complete+0x1a>

0001866a <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   1866a:	b150      	cbz	r0, 18682 <validate_args+0x18>
{
   1866c:	b510      	push	{r4, lr}
   1866e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   18670:	b151      	cbz	r1, 18688 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
   18672:	1d08      	adds	r0, r1, #4
   18674:	f000 f8c4 	bl	18800 <sys_notify_validate>
	if ((rv == 0)
   18678:	b910      	cbnz	r0, 18680 <validate_args+0x16>
	    && ((cli->notify.flags
   1867a:	68a3      	ldr	r3, [r4, #8]
   1867c:	2b03      	cmp	r3, #3
   1867e:	d806      	bhi.n	1868e <validate_args+0x24>
}
   18680:	bd10      	pop	{r4, pc}
		return -EINVAL;
   18682:	f06f 0015 	mvn.w	r0, #21
}
   18686:	4770      	bx	lr
		return -EINVAL;
   18688:	f06f 0015 	mvn.w	r0, #21
   1868c:	e7f8      	b.n	18680 <validate_args+0x16>
		rv = -EINVAL;
   1868e:	f06f 0015 	mvn.w	r0, #21
   18692:	e7f5      	b.n	18680 <validate_args+0x16>

00018694 <notify_one>:
{
   18694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18698:	4607      	mov	r7, r0
   1869a:	460c      	mov	r4, r1
   1869c:	4616      	mov	r6, r2
   1869e:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   186a0:	4619      	mov	r1, r3
   186a2:	1d20      	adds	r0, r4, #4
   186a4:	f000 f8c3 	bl	1882e <sys_notify_finalize>
	if (cb) {
   186a8:	b128      	cbz	r0, 186b6 <notify_one+0x22>
   186aa:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   186ac:	462b      	mov	r3, r5
   186ae:	4632      	mov	r2, r6
   186b0:	4621      	mov	r1, r4
   186b2:	4638      	mov	r0, r7
   186b4:	47c0      	blx	r8
}
   186b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000186ba <notify_all>:
{
   186ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   186be:	4680      	mov	r8, r0
   186c0:	460c      	mov	r4, r1
   186c2:	4617      	mov	r7, r2
   186c4:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   186c6:	e004      	b.n	186d2 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   186c8:	4633      	mov	r3, r6
   186ca:	463a      	mov	r2, r7
   186cc:	4640      	mov	r0, r8
   186ce:	f7ff ffe1 	bl	18694 <notify_one>
	return list->head;
   186d2:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   186d4:	b131      	cbz	r1, 186e4 <notify_all+0x2a>
	return node->next;
   186d6:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   186d8:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   186da:	6863      	ldr	r3, [r4, #4]
   186dc:	428b      	cmp	r3, r1
   186de:	d1f3      	bne.n	186c8 <notify_all+0xe>
	list->tail = node;
   186e0:	6065      	str	r5, [r4, #4]
}
   186e2:	e7f1      	b.n	186c8 <notify_all+0xe>
}
   186e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000186e8 <transition_complete>:
{
   186e8:	b508      	push	{r3, lr}
	__asm__ volatile(
   186ea:	f04f 0c20 	mov.w	ip, #32
   186ee:	f3ef 8211 	mrs	r2, BASEPRI
   186f2:	f38c 8812 	msr	BASEPRI_MAX, ip
   186f6:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   186fa:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   186fc:	2101      	movs	r1, #1
   186fe:	f7f8 fa83 	bl	10c08 <process_event>
}
   18702:	bd08      	pop	{r3, pc}

00018704 <onoff_manager_init>:
	if ((mgr == NULL)
   18704:	4603      	mov	r3, r0
   18706:	b170      	cbz	r0, 18726 <onoff_manager_init+0x22>
	    || (transitions == NULL)
   18708:	b181      	cbz	r1, 1872c <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   1870a:	680a      	ldr	r2, [r1, #0]
   1870c:	b18a      	cbz	r2, 18732 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   1870e:	684a      	ldr	r2, [r1, #4]
   18710:	b192      	cbz	r2, 18738 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   18712:	2000      	movs	r0, #0
   18714:	6018      	str	r0, [r3, #0]
   18716:	6058      	str	r0, [r3, #4]
   18718:	6098      	str	r0, [r3, #8]
   1871a:	60d8      	str	r0, [r3, #12]
   1871c:	6118      	str	r0, [r3, #16]
   1871e:	6158      	str	r0, [r3, #20]
   18720:	6198      	str	r0, [r3, #24]
   18722:	6119      	str	r1, [r3, #16]
	return 0;
   18724:	4770      	bx	lr
		return -EINVAL;
   18726:	f06f 0015 	mvn.w	r0, #21
   1872a:	4770      	bx	lr
   1872c:	f06f 0015 	mvn.w	r0, #21
   18730:	4770      	bx	lr
   18732:	f06f 0015 	mvn.w	r0, #21
   18736:	4770      	bx	lr
   18738:	f06f 0015 	mvn.w	r0, #21
}
   1873c:	4770      	bx	lr

0001873e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1873e:	b570      	push	{r4, r5, r6, lr}
   18740:	4605      	mov	r5, r0
   18742:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   18744:	f7ff ff91 	bl	1866a <validate_args>

	if (rv < 0) {
   18748:	1e04      	subs	r4, r0, #0
   1874a:	db30      	blt.n	187ae <onoff_request+0x70>
   1874c:	f04f 0320 	mov.w	r3, #32
   18750:	f3ef 8211 	mrs	r2, BASEPRI
   18754:	f383 8812 	msr	BASEPRI_MAX, r3
   18758:	f3bf 8f6f 	isb	sy
   1875c:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1875e:	f8b5 c018 	ldrh.w	ip, [r5, #24]
   18762:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   18766:	8b6b      	ldrh	r3, [r5, #26]
   18768:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1876c:	428b      	cmp	r3, r1
   1876e:	d02c      	beq.n	187ca <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   18770:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
   18772:	f1bc 0f02 	cmp.w	ip, #2
   18776:	d008      	beq.n	1878a <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   18778:	f1bc 0f06 	cmp.w	ip, #6
   1877c:	d819      	bhi.n	187b2 <onoff_request+0x74>
   1877e:	e8df f00c 	tbb	[pc, ip]
   18782:	181e      	.short	0x181e
   18784:	2a1e1818 	.word	0x2a1e1818
   18788:	1e          	.byte	0x1e
   18789:	00          	.byte	0x00
		mgr->refs += 1U;
   1878a:	3301      	adds	r3, #1
   1878c:	836b      	strh	r3, [r5, #26]
		notify = true;
   1878e:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
   18790:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
   18792:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
   18794:	b128      	cbz	r0, 187a2 <onoff_request+0x64>
	parent->next = child;
   18796:	2000      	movs	r0, #0
   18798:	6030      	str	r0, [r6, #0]
	return list->tail;
   1879a:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1879c:	b308      	cbz	r0, 187e2 <onoff_request+0xa4>
	parent->next = child;
   1879e:	6006      	str	r6, [r0, #0]
	list->tail = node;
   187a0:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   187a2:	bb09      	cbnz	r1, 187e8 <onoff_request+0xaa>
	__asm__ volatile(
   187a4:	f38e 8811 	msr	BASEPRI, lr
   187a8:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   187ac:	bb0b      	cbnz	r3, 187f2 <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   187ae:	4620      	mov	r0, r4
   187b0:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   187b2:	f06f 0404 	mvn.w	r4, #4
   187b6:	2300      	movs	r3, #0
   187b8:	4619      	mov	r1, r3
   187ba:	4618      	mov	r0, r3
   187bc:	e7ea      	b.n	18794 <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
   187be:	fabc f18c 	clz	r1, ip
   187c2:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
   187c4:	2300      	movs	r3, #0
		add_client = true;
   187c6:	2001      	movs	r0, #1
   187c8:	e7e4      	b.n	18794 <onoff_request+0x56>
		rv = -EAGAIN;
   187ca:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
   187ce:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
   187d0:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
   187d2:	4618      	mov	r0, r3
   187d4:	e7de      	b.n	18794 <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
   187d6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   187da:	2300      	movs	r3, #0
   187dc:	4619      	mov	r1, r3
   187de:	4618      	mov	r0, r3
   187e0:	e7d8      	b.n	18794 <onoff_request+0x56>
   187e2:	606e      	str	r6, [r5, #4]
	list->head = node;
   187e4:	602e      	str	r6, [r5, #0]
}
   187e6:	e7dc      	b.n	187a2 <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
   187e8:	2102      	movs	r1, #2
   187ea:	4628      	mov	r0, r5
   187ec:	f7f8 fa0c 	bl	10c08 <process_event>
   187f0:	e7dd      	b.n	187ae <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
   187f2:	2300      	movs	r3, #0
   187f4:	4662      	mov	r2, ip
   187f6:	4631      	mov	r1, r6
   187f8:	4628      	mov	r0, r5
   187fa:	f7ff ff4b 	bl	18694 <notify_one>
   187fe:	e7d6      	b.n	187ae <onoff_request+0x70>

00018800 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   18800:	4602      	mov	r2, r0
   18802:	b158      	cbz	r0, 1881c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   18804:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   18806:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1880a:	2b01      	cmp	r3, #1
   1880c:	d003      	beq.n	18816 <sys_notify_validate+0x16>
   1880e:	2b03      	cmp	r3, #3
   18810:	d107      	bne.n	18822 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   18812:	6803      	ldr	r3, [r0, #0]
   18814:	b143      	cbz	r3, 18828 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   18816:	2000      	movs	r0, #0
   18818:	6090      	str	r0, [r2, #8]
   1881a:	4770      	bx	lr
		return -EINVAL;
   1881c:	f06f 0015 	mvn.w	r0, #21
   18820:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
   18822:	f06f 0015 	mvn.w	r0, #21
   18826:	4770      	bx	lr
			rv = -EINVAL;
   18828:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   1882c:	4770      	bx	lr

0001882e <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1882e:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   18830:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   18832:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   18836:	6081      	str	r1, [r0, #8]
	switch (method) {
   18838:	2a03      	cmp	r2, #3
   1883a:	d103      	bne.n	18844 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1883c:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1883e:	2200      	movs	r2, #0
   18840:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   18842:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
   18844:	2000      	movs	r0, #0
   18846:	e7fa      	b.n	1883e <sys_notify_finalize+0x10>

00018848 <extract_decimal>:
{
   18848:	4684      	mov	ip, r0
	const char *sp = *str;
   1884a:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   1884c:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   1884e:	e006      	b.n	1885e <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
   18850:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18854:	3201      	adds	r2, #1
   18856:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   1885a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   1885e:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   18860:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   18864:	2909      	cmp	r1, #9
   18866:	d9f3      	bls.n	18850 <extract_decimal+0x8>
	*str = sp;
   18868:	f8cc 2000 	str.w	r2, [ip]
}
   1886c:	4770      	bx	lr

0001886e <extract_width>:
{
   1886e:	b530      	push	{r4, r5, lr}
   18870:	b083      	sub	sp, #12
   18872:	4604      	mov	r4, r0
   18874:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
   18876:	7803      	ldrb	r3, [r0, #0]
   18878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1887c:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
   1887e:	460d      	mov	r5, r1
   18880:	780b      	ldrb	r3, [r1, #0]
   18882:	2b2a      	cmp	r3, #42	; 0x2a
   18884:	d018      	beq.n	188b8 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
   18886:	a801      	add	r0, sp, #4
   18888:	f7ff ffde 	bl	18848 <extract_decimal>
	if (sp != wp) {
   1888c:	9b01      	ldr	r3, [sp, #4]
   1888e:	429d      	cmp	r5, r3
   18890:	d00f      	beq.n	188b2 <extract_width+0x44>
		conv->width_present = true;
   18892:	7823      	ldrb	r3, [r4, #0]
   18894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18898:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   1889a:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   1889c:	b2db      	uxtb	r3, r3
   1889e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   188a2:	2800      	cmp	r0, #0
   188a4:	db10      	blt.n	188c8 <extract_width+0x5a>
   188a6:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   188a8:	4313      	orrs	r3, r2
   188aa:	7822      	ldrb	r2, [r4, #0]
   188ac:	f363 0241 	bfi	r2, r3, #1, #1
   188b0:	7022      	strb	r2, [r4, #0]
	return sp;
   188b2:	9801      	ldr	r0, [sp, #4]
}
   188b4:	b003      	add	sp, #12
   188b6:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
   188b8:	7843      	ldrb	r3, [r0, #1]
   188ba:	f043 0301 	orr.w	r3, r3, #1
   188be:	7043      	strb	r3, [r0, #1]
		return ++sp;
   188c0:	4608      	mov	r0, r1
   188c2:	3001      	adds	r0, #1
   188c4:	9001      	str	r0, [sp, #4]
   188c6:	e7f5      	b.n	188b4 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
   188c8:	2201      	movs	r2, #1
   188ca:	e7ed      	b.n	188a8 <extract_width+0x3a>

000188cc <extract_prec>:
{
   188cc:	b510      	push	{r4, lr}
   188ce:	b082      	sub	sp, #8
   188d0:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
   188d2:	780b      	ldrb	r3, [r1, #0]
   188d4:	2b2e      	cmp	r3, #46	; 0x2e
   188d6:	bf14      	ite	ne
   188d8:	2300      	movne	r3, #0
   188da:	2301      	moveq	r3, #1
   188dc:	7842      	ldrb	r2, [r0, #1]
   188de:	f363 0241 	bfi	r2, r3, #1, #1
   188e2:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
   188e4:	b1c3      	cbz	r3, 18918 <extract_prec+0x4c>
   188e6:	4604      	mov	r4, r0
	++sp;
   188e8:	9b01      	ldr	r3, [sp, #4]
   188ea:	1c5a      	adds	r2, r3, #1
   188ec:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   188ee:	785b      	ldrb	r3, [r3, #1]
   188f0:	2b2a      	cmp	r3, #42	; 0x2a
   188f2:	d013      	beq.n	1891c <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
   188f4:	a801      	add	r0, sp, #4
   188f6:	f7ff ffa7 	bl	18848 <extract_decimal>
	conv->prec_value = prec;
   188fa:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   188fc:	7823      	ldrb	r3, [r4, #0]
   188fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   18902:	2800      	cmp	r0, #0
   18904:	db12      	blt.n	1892c <extract_prec+0x60>
   18906:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   18908:	4313      	orrs	r3, r2
   1890a:	7822      	ldrb	r2, [r4, #0]
   1890c:	f363 0241 	bfi	r2, r3, #1, #1
   18910:	7022      	strb	r2, [r4, #0]
	return sp;
   18912:	9801      	ldr	r0, [sp, #4]
}
   18914:	b002      	add	sp, #8
   18916:	bd10      	pop	{r4, pc}
		return sp;
   18918:	4608      	mov	r0, r1
   1891a:	e7fb      	b.n	18914 <extract_prec+0x48>
		conv->prec_star = true;
   1891c:	7843      	ldrb	r3, [r0, #1]
   1891e:	f043 0304 	orr.w	r3, r3, #4
   18922:	7043      	strb	r3, [r0, #1]
		return ++sp;
   18924:	4610      	mov	r0, r2
   18926:	3001      	adds	r0, #1
   18928:	9001      	str	r0, [sp, #4]
   1892a:	e7f3      	b.n	18914 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
   1892c:	2201      	movs	r2, #1
   1892e:	e7eb      	b.n	18908 <extract_prec+0x3c>

00018930 <extract_length>:
{
   18930:	4602      	mov	r2, r0
	switch (*sp) {
   18932:	780b      	ldrb	r3, [r1, #0]
   18934:	3b4c      	subs	r3, #76	; 0x4c
   18936:	2b2e      	cmp	r3, #46	; 0x2e
   18938:	d85b      	bhi.n	189f2 <extract_length+0xc2>
   1893a:	e8df f003 	tbb	[pc, r3]
   1893e:	5a4f      	.short	0x5a4f
   18940:	5a5a5a5a 	.word	0x5a5a5a5a
   18944:	5a5a5a5a 	.word	0x5a5a5a5a
   18948:	5a5a5a5a 	.word	0x5a5a5a5a
   1894c:	5a5a5a5a 	.word	0x5a5a5a5a
   18950:	5a5a5a5a 	.word	0x5a5a5a5a
   18954:	5a5a5a5a 	.word	0x5a5a5a5a
   18958:	5a185a5a 	.word	0x5a185a5a
   1895c:	5a295a3a 	.word	0x5a295a3a
   18960:	5a5a5a5a 	.word	0x5a5a5a5a
   18964:	5a485a5a 	.word	0x5a485a5a
   18968:	5a5a5a5a 	.word	0x5a5a5a5a
   1896c:	41          	.byte	0x41
   1896d:	00          	.byte	0x00
		if (*++sp == 'h') {
   1896e:	1c48      	adds	r0, r1, #1
   18970:	784b      	ldrb	r3, [r1, #1]
   18972:	2b68      	cmp	r3, #104	; 0x68
   18974:	d005      	beq.n	18982 <extract_length+0x52>
			conv->length_mod = LENGTH_H;
   18976:	7853      	ldrb	r3, [r2, #1]
   18978:	2102      	movs	r1, #2
   1897a:	f361 03c6 	bfi	r3, r1, #3, #4
   1897e:	7053      	strb	r3, [r2, #1]
   18980:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
   18982:	7853      	ldrb	r3, [r2, #1]
   18984:	2001      	movs	r0, #1
   18986:	f360 03c6 	bfi	r3, r0, #3, #4
   1898a:	7053      	strb	r3, [r2, #1]
			++sp;
   1898c:	1c88      	adds	r0, r1, #2
   1898e:	4770      	bx	lr
		if (*++sp == 'l') {
   18990:	1c48      	adds	r0, r1, #1
   18992:	784b      	ldrb	r3, [r1, #1]
   18994:	2b6c      	cmp	r3, #108	; 0x6c
   18996:	d005      	beq.n	189a4 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
   18998:	7853      	ldrb	r3, [r2, #1]
   1899a:	2103      	movs	r1, #3
   1899c:	f361 03c6 	bfi	r3, r1, #3, #4
   189a0:	7053      	strb	r3, [r2, #1]
   189a2:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
   189a4:	7853      	ldrb	r3, [r2, #1]
   189a6:	2004      	movs	r0, #4
   189a8:	f360 03c6 	bfi	r3, r0, #3, #4
   189ac:	7053      	strb	r3, [r2, #1]
			++sp;
   189ae:	1c88      	adds	r0, r1, #2
   189b0:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
   189b2:	7853      	ldrb	r3, [r2, #1]
   189b4:	2005      	movs	r0, #5
   189b6:	f360 03c6 	bfi	r3, r0, #3, #4
   189ba:	7053      	strb	r3, [r2, #1]
		++sp;
   189bc:	1c48      	adds	r0, r1, #1
		break;
   189be:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
   189c0:	7853      	ldrb	r3, [r2, #1]
   189c2:	2006      	movs	r0, #6
   189c4:	f360 03c6 	bfi	r3, r0, #3, #4
   189c8:	7053      	strb	r3, [r2, #1]
		++sp;
   189ca:	1c48      	adds	r0, r1, #1
		break;
   189cc:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
   189ce:	7853      	ldrb	r3, [r2, #1]
   189d0:	2007      	movs	r0, #7
   189d2:	f360 03c6 	bfi	r3, r0, #3, #4
   189d6:	7053      	strb	r3, [r2, #1]
		++sp;
   189d8:	1c48      	adds	r0, r1, #1
		break;
   189da:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
   189dc:	7853      	ldrb	r3, [r2, #1]
   189de:	2008      	movs	r0, #8
   189e0:	f360 03c6 	bfi	r3, r0, #3, #4
   189e4:	7053      	strb	r3, [r2, #1]
		++sp;
   189e6:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
   189e8:	7813      	ldrb	r3, [r2, #0]
   189ea:	f043 0302 	orr.w	r3, r3, #2
   189ee:	7013      	strb	r3, [r2, #0]
		break;
   189f0:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
   189f2:	7853      	ldrb	r3, [r2, #1]
   189f4:	f36f 03c6 	bfc	r3, #3, #4
   189f8:	7053      	strb	r3, [r2, #1]
		break;
   189fa:	4608      	mov	r0, r1
}
   189fc:	4770      	bx	lr

000189fe <extract_specifier>:
{
   189fe:	b500      	push	{lr}
   18a00:	4602      	mov	r2, r0
	conv->specifier = *sp++;
   18a02:	4608      	mov	r0, r1
   18a04:	f810 3b01 	ldrb.w	r3, [r0], #1
   18a08:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
   18a0a:	2b78      	cmp	r3, #120	; 0x78
   18a0c:	d817      	bhi.n	18a3e <extract_specifier+0x40>
   18a0e:	2b6e      	cmp	r3, #110	; 0x6e
   18a10:	d229      	bcs.n	18a66 <extract_specifier+0x68>
   18a12:	2b69      	cmp	r3, #105	; 0x69
   18a14:	d813      	bhi.n	18a3e <extract_specifier+0x40>
   18a16:	2b58      	cmp	r3, #88	; 0x58
   18a18:	d317      	bcc.n	18a4a <extract_specifier+0x4c>
   18a1a:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
   18a1e:	fa5f fc8c 	uxtb.w	ip, ip
   18a22:	2101      	movs	r1, #1
   18a24:	fa01 f10c 	lsl.w	r1, r1, ip
   18a28:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   18a2c:	d114      	bne.n	18a58 <extract_specifier+0x5a>
   18a2e:	f640 0c01 	movw	ip, #2049	; 0x801
   18a32:	ea11 0f0c 	tst.w	r1, ip
   18a36:	d155      	bne.n	18ae4 <extract_specifier+0xe6>
   18a38:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   18a3c:	d13a      	bne.n	18ab4 <extract_specifier+0xb6>
		conv->invalid = true;
   18a3e:	7813      	ldrb	r3, [r2, #0]
   18a40:	f043 0301 	orr.w	r3, r3, #1
   18a44:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   18a46:	2100      	movs	r1, #0
		break;
   18a48:	e042      	b.n	18ad0 <extract_specifier+0xd2>
	switch (conv->specifier) {
   18a4a:	2b41      	cmp	r3, #65	; 0x41
   18a4c:	d004      	beq.n	18a58 <extract_specifier+0x5a>
   18a4e:	d3f6      	bcc.n	18a3e <extract_specifier+0x40>
   18a50:	3b45      	subs	r3, #69	; 0x45
   18a52:	b2db      	uxtb	r3, r3
   18a54:	2b02      	cmp	r3, #2
   18a56:	d8f2      	bhi.n	18a3e <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
   18a58:	7893      	ldrb	r3, [r2, #2]
   18a5a:	2104      	movs	r1, #4
   18a5c:	f361 0302 	bfi	r3, r1, #0, #3
   18a60:	7093      	strb	r3, [r2, #2]
			unsupported = true;
   18a62:	2101      	movs	r1, #1
			break;
   18a64:	e034      	b.n	18ad0 <extract_specifier+0xd2>
	switch (conv->specifier) {
   18a66:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
   18a6a:	b2c9      	uxtb	r1, r1
   18a6c:	f04f 0c01 	mov.w	ip, #1
   18a70:	fa0c fc01 	lsl.w	ip, ip, r1
   18a74:	f240 4182 	movw	r1, #1154	; 0x482
   18a78:	ea1c 0f01 	tst.w	ip, r1
   18a7c:	bf14      	ite	ne
   18a7e:	f04f 0e01 	movne.w	lr, #1
   18a82:	f04f 0e00 	moveq.w	lr, #0
   18a86:	d12d      	bne.n	18ae4 <extract_specifier+0xe6>
   18a88:	f01c 0f24 	tst.w	ip, #36	; 0x24
   18a8c:	bf14      	ite	ne
   18a8e:	2101      	movne	r1, #1
   18a90:	2100      	moveq	r1, #0
   18a92:	d139      	bne.n	18b08 <extract_specifier+0x10a>
   18a94:	f01c 0c01 	ands.w	ip, ip, #1
   18a98:	d0d1      	beq.n	18a3e <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
   18a9a:	7893      	ldrb	r3, [r2, #2]
   18a9c:	f04f 0e03 	mov.w	lr, #3
   18aa0:	f36e 0302 	bfi	r3, lr, #0, #3
   18aa4:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   18aa6:	7853      	ldrb	r3, [r2, #1]
   18aa8:	f003 0378 	and.w	r3, r3, #120	; 0x78
   18aac:	2b40      	cmp	r3, #64	; 0x40
   18aae:	d10f      	bne.n	18ad0 <extract_specifier+0xd2>
			unsupported = true;
   18ab0:	4661      	mov	r1, ip
   18ab2:	e00d      	b.n	18ad0 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
   18ab4:	7891      	ldrb	r1, [r2, #2]
   18ab6:	f04f 0c01 	mov.w	ip, #1
   18aba:	f36c 0102 	bfi	r1, ip, #0, #3
   18abe:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   18ac0:	7851      	ldrb	r1, [r2, #1]
   18ac2:	f001 0178 	and.w	r1, r1, #120	; 0x78
   18ac6:	2940      	cmp	r1, #64	; 0x40
   18ac8:	d013      	beq.n	18af2 <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
   18aca:	2b63      	cmp	r3, #99	; 0x63
   18acc:	d018      	beq.n	18b00 <extract_specifier+0x102>
	bool unsupported = false;
   18ace:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
   18ad0:	7813      	ldrb	r3, [r2, #0]
   18ad2:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   18ad6:	ea41 010c 	orr.w	r1, r1, ip
   18ada:	f361 0341 	bfi	r3, r1, #1, #1
   18ade:	7013      	strb	r3, [r2, #0]
}
   18ae0:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
   18ae4:	7891      	ldrb	r1, [r2, #2]
   18ae6:	f04f 0c02 	mov.w	ip, #2
   18aea:	f36c 0102 	bfi	r1, ip, #0, #3
   18aee:	7091      	strb	r1, [r2, #2]
   18af0:	e7e6      	b.n	18ac0 <extract_specifier+0xc2>
			conv->invalid = true;
   18af2:	f892 c000 	ldrb.w	ip, [r2]
   18af6:	f04c 0c01 	orr.w	ip, ip, #1
   18afa:	f882 c000 	strb.w	ip, [r2]
   18afe:	e7e4      	b.n	18aca <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
   18b00:	3900      	subs	r1, #0
   18b02:	bf18      	it	ne
   18b04:	2101      	movne	r1, #1
   18b06:	e7e3      	b.n	18ad0 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
   18b08:	7893      	ldrb	r3, [r2, #2]
   18b0a:	f04f 0c03 	mov.w	ip, #3
   18b0e:	f36c 0302 	bfi	r3, ip, #0, #3
   18b12:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
   18b14:	7853      	ldrb	r3, [r2, #1]
   18b16:	f013 0f78 	tst.w	r3, #120	; 0x78
   18b1a:	d1d9      	bne.n	18ad0 <extract_specifier+0xd2>
	bool unsupported = false;
   18b1c:	4671      	mov	r1, lr
   18b1e:	e7d7      	b.n	18ad0 <extract_specifier+0xd2>

00018b20 <extract_conversion>:
{
   18b20:	b510      	push	{r4, lr}
   18b22:	4604      	mov	r4, r0
   18b24:	4608      	mov	r0, r1
	*conv = (struct conversion) {
   18b26:	2300      	movs	r3, #0
   18b28:	6023      	str	r3, [r4, #0]
   18b2a:	6063      	str	r3, [r4, #4]
   18b2c:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
   18b2e:	784b      	ldrb	r3, [r1, #1]
   18b30:	2b25      	cmp	r3, #37	; 0x25
   18b32:	d014      	beq.n	18b5e <extract_conversion+0x3e>
   18b34:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
   18b36:	4620      	mov	r0, r4
   18b38:	f7f8 f91c 	bl	10d74 <extract_flags>
   18b3c:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
   18b3e:	4620      	mov	r0, r4
   18b40:	f7ff fe95 	bl	1886e <extract_width>
   18b44:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
   18b46:	4620      	mov	r0, r4
   18b48:	f7ff fec0 	bl	188cc <extract_prec>
   18b4c:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
   18b4e:	4620      	mov	r0, r4
   18b50:	f7ff feee 	bl	18930 <extract_length>
   18b54:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
   18b56:	4620      	mov	r0, r4
   18b58:	f7ff ff51 	bl	189fe <extract_specifier>
}
   18b5c:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
   18b5e:	3002      	adds	r0, #2
   18b60:	70e3      	strb	r3, [r4, #3]
		return sp;
   18b62:	e7fb      	b.n	18b5c <extract_conversion+0x3c>

00018b64 <conversion_radix>:
	switch (specifier) {
   18b64:	286f      	cmp	r0, #111	; 0x6f
   18b66:	d00c      	beq.n	18b82 <conversion_radix+0x1e>
   18b68:	d905      	bls.n	18b76 <conversion_radix+0x12>
   18b6a:	2870      	cmp	r0, #112	; 0x70
   18b6c:	d00b      	beq.n	18b86 <conversion_radix+0x22>
   18b6e:	2878      	cmp	r0, #120	; 0x78
   18b70:	d10b      	bne.n	18b8a <conversion_radix+0x26>
		return 16;
   18b72:	2010      	movs	r0, #16
   18b74:	4770      	bx	lr
	switch (specifier) {
   18b76:	2858      	cmp	r0, #88	; 0x58
   18b78:	d001      	beq.n	18b7e <conversion_radix+0x1a>
   18b7a:	200a      	movs	r0, #10
   18b7c:	4770      	bx	lr
		return 16;
   18b7e:	2010      	movs	r0, #16
   18b80:	4770      	bx	lr
		return 8;
   18b82:	2008      	movs	r0, #8
   18b84:	4770      	bx	lr
		return 16;
   18b86:	2010      	movs	r0, #16
   18b88:	4770      	bx	lr
	switch (specifier) {
   18b8a:	200a      	movs	r0, #10
}
   18b8c:	4770      	bx	lr

00018b8e <encode_uint>:
{
   18b8e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b92:	4605      	mov	r5, r0
   18b94:	460c      	mov	r4, r1
   18b96:	4693      	mov	fp, r2
   18b98:	4699      	mov	r9, r3
   18b9a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
   18b9c:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   18b9e:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
   18ba2:	f7ff ffdf 	bl	18b64 <conversion_radix>
   18ba6:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
   18ba8:	e015      	b.n	18bd6 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   18baa:	f1ba 0f19 	cmp.w	sl, #25
   18bae:	d820      	bhi.n	18bf2 <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   18bb0:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   18bb2:	3237      	adds	r2, #55	; 0x37
   18bb4:	b2d2      	uxtb	r2, r2
   18bb6:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
   18bba:	4632      	mov	r2, r6
   18bbc:	4643      	mov	r3, r8
   18bbe:	4628      	mov	r0, r5
   18bc0:	4621      	mov	r1, r4
   18bc2:	f7f7 fac7 	bl	10154 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   18bc6:	42b5      	cmp	r5, r6
   18bc8:	f174 0400 	sbcs.w	r4, r4, #0
   18bcc:	d315      	bcc.n	18bfa <encode_uint+0x6c>
   18bce:	454f      	cmp	r7, r9
   18bd0:	d913      	bls.n	18bfa <encode_uint+0x6c>
		value /= radix;
   18bd2:	4605      	mov	r5, r0
   18bd4:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
   18bd6:	f04f 0800 	mov.w	r8, #0
   18bda:	4632      	mov	r2, r6
   18bdc:	4643      	mov	r3, r8
   18bde:	4628      	mov	r0, r5
   18be0:	4621      	mov	r1, r4
   18be2:	f7f7 fab7 	bl	10154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   18be6:	2a09      	cmp	r2, #9
   18be8:	d8df      	bhi.n	18baa <encode_uint+0x1c>
   18bea:	b2d2      	uxtb	r2, r2
   18bec:	3230      	adds	r2, #48	; 0x30
   18bee:	b2d2      	uxtb	r2, r2
   18bf0:	e7e1      	b.n	18bb6 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   18bf2:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   18bf4:	3257      	adds	r2, #87	; 0x57
   18bf6:	b2d2      	uxtb	r2, r2
   18bf8:	e7dd      	b.n	18bb6 <encode_uint+0x28>
	if (conv->flag_hash) {
   18bfa:	f89b 3000 	ldrb.w	r3, [fp]
   18bfe:	f013 0f20 	tst.w	r3, #32
   18c02:	d003      	beq.n	18c0c <encode_uint+0x7e>
		if (radix == 8) {
   18c04:	2e08      	cmp	r6, #8
   18c06:	d004      	beq.n	18c12 <encode_uint+0x84>
		} else if (radix == 16) {
   18c08:	2e10      	cmp	r6, #16
   18c0a:	d009      	beq.n	18c20 <encode_uint+0x92>
}
   18c0c:	4638      	mov	r0, r7
   18c0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   18c12:	f89b 3002 	ldrb.w	r3, [fp, #2]
   18c16:	f043 0308 	orr.w	r3, r3, #8
   18c1a:	f88b 3002 	strb.w	r3, [fp, #2]
   18c1e:	e7f5      	b.n	18c0c <encode_uint+0x7e>
			conv->altform_0c = true;
   18c20:	f89b 3002 	ldrb.w	r3, [fp, #2]
   18c24:	f043 0310 	orr.w	r3, r3, #16
   18c28:	f88b 3002 	strb.w	r3, [fp, #2]
   18c2c:	e7ee      	b.n	18c0c <encode_uint+0x7e>

00018c2e <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
   18c2e:	7843      	ldrb	r3, [r0, #1]
   18c30:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   18c34:	2b07      	cmp	r3, #7
   18c36:	d818      	bhi.n	18c6a <store_count+0x3c>
   18c38:	e8df f003 	tbb	[pc, r3]
   18c3c:	0a080604 	.word	0x0a080604
   18c40:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
   18c44:	600a      	str	r2, [r1, #0]
		break;
   18c46:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
   18c48:	700a      	strb	r2, [r1, #0]
		break;
   18c4a:	4770      	bx	lr
		*(short *)dp = (short)count;
   18c4c:	800a      	strh	r2, [r1, #0]
		break;
   18c4e:	4770      	bx	lr
		*(long *)dp = (long)count;
   18c50:	600a      	str	r2, [r1, #0]
		break;
   18c52:	4770      	bx	lr
		*(long long *)dp = (long long)count;
   18c54:	17d3      	asrs	r3, r2, #31
   18c56:	600a      	str	r2, [r1, #0]
   18c58:	604b      	str	r3, [r1, #4]
		break;
   18c5a:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
   18c5c:	17d3      	asrs	r3, r2, #31
   18c5e:	600a      	str	r2, [r1, #0]
   18c60:	604b      	str	r3, [r1, #4]
		break;
   18c62:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
   18c64:	600a      	str	r2, [r1, #0]
		break;
   18c66:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   18c68:	600a      	str	r2, [r1, #0]
}
   18c6a:	4770      	bx	lr

00018c6c <outs>:
{
   18c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c70:	4607      	mov	r7, r0
   18c72:	460e      	mov	r6, r1
   18c74:	4614      	mov	r4, r2
   18c76:	4698      	mov	r8, r3
	size_t count = 0;
   18c78:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   18c7a:	e006      	b.n	18c8a <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   18c7c:	4631      	mov	r1, r6
   18c7e:	f814 0b01 	ldrb.w	r0, [r4], #1
   18c82:	47b8      	blx	r7
		if (rc < 0) {
   18c84:	2800      	cmp	r0, #0
   18c86:	db09      	blt.n	18c9c <outs+0x30>
		++count;
   18c88:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   18c8a:	4544      	cmp	r4, r8
   18c8c:	d3f6      	bcc.n	18c7c <outs+0x10>
   18c8e:	f1b8 0f00 	cmp.w	r8, #0
   18c92:	d102      	bne.n	18c9a <outs+0x2e>
   18c94:	7823      	ldrb	r3, [r4, #0]
   18c96:	2b00      	cmp	r3, #0
   18c98:	d1f0      	bne.n	18c7c <outs+0x10>
	return (int)count;
   18c9a:	4628      	mov	r0, r5
}
   18c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018ca0 <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   18ca0:	68c3      	ldr	r3, [r0, #12]
   18ca2:	6802      	ldr	r2, [r0, #0]
   18ca4:	4293      	cmp	r3, r2
   18ca6:	d805      	bhi.n	18cb4 <free_space+0x14>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;

		return false;
	} else if (!buffer->rd_idx) {
   18ca8:	b14b      	cbz	r3, 18cbe <free_space+0x1e>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
		return false;
	}

	*res = buffer->size - buffer->tmp_wr_idx;
   18caa:	6a03      	ldr	r3, [r0, #32]
   18cac:	1a9b      	subs	r3, r3, r2
   18cae:	600b      	str	r3, [r1, #0]

	return true;
   18cb0:	2001      	movs	r0, #1
}
   18cb2:	4770      	bx	lr
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   18cb4:	1a9b      	subs	r3, r3, r2
   18cb6:	3b01      	subs	r3, #1
   18cb8:	600b      	str	r3, [r1, #0]
		return false;
   18cba:	2000      	movs	r0, #0
   18cbc:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   18cbe:	6a03      	ldr	r3, [r0, #32]
   18cc0:	1a9b      	subs	r3, r3, r2
   18cc2:	3b01      	subs	r3, #1
   18cc4:	600b      	str	r3, [r1, #0]
		return false;
   18cc6:	2000      	movs	r0, #0
   18cc8:	4770      	bx	lr

00018cca <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   18cca:	b510      	push	{r4, lr}
   18ccc:	b082      	sub	sp, #8
   18cce:	4604      	mov	r4, r0
	uint32_t f;

	if (free_space(buffer, &f)) {
   18cd0:	a901      	add	r1, sp, #4
   18cd2:	f7ff ffe5 	bl	18ca0 <free_space>
   18cd6:	b120      	cbz	r0, 18ce2 <get_usage+0x18>
		f += (buffer->rd_idx - 1);
   18cd8:	68e3      	ldr	r3, [r4, #12]
   18cda:	9a01      	ldr	r2, [sp, #4]
   18cdc:	4413      	add	r3, r2
   18cde:	3b01      	subs	r3, #1
   18ce0:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   18ce2:	6a20      	ldr	r0, [r4, #32]
   18ce4:	9b01      	ldr	r3, [sp, #4]
   18ce6:	1ac0      	subs	r0, r0, r3
}
   18ce8:	3801      	subs	r0, #1
   18cea:	b002      	add	sp, #8
   18cec:	bd10      	pop	{r4, pc}

00018cee <max_utilization_update>:

static inline void max_utilization_update(struct mpsc_pbuf_buffer *buffer)
{
   18cee:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   18cf0:	6903      	ldr	r3, [r0, #16]
   18cf2:	f013 0f04 	tst.w	r3, #4
   18cf6:	d100      	bne.n	18cfa <max_utilization_update+0xc>
		return;
	}

	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
}
   18cf8:	bd38      	pop	{r3, r4, r5, pc}
   18cfa:	4604      	mov	r4, r0
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   18cfc:	6a45      	ldr	r5, [r0, #36]	; 0x24
   18cfe:	f7ff ffe4 	bl	18cca <get_usage>
   18d02:	4285      	cmp	r5, r0
   18d04:	d902      	bls.n	18d0c <max_utilization_update+0x1e>
   18d06:	6a60      	ldr	r0, [r4, #36]	; 0x24
   18d08:	6260      	str	r0, [r4, #36]	; 0x24
   18d0a:	e7f5      	b.n	18cf8 <max_utilization_update+0xa>
   18d0c:	4620      	mov	r0, r4
   18d0e:	f7ff ffdc 	bl	18cca <get_usage>
   18d12:	e7f9      	b.n	18d08 <max_utilization_update+0x1a>

00018d14 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   18d14:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
   18d16:	2300      	movs	r3, #0
   18d18:	f36f 0300 	bfc	r3, #0, #1
   18d1c:	f043 0302 	orr.w	r3, r3, #2
   18d20:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   18d24:	69c2      	ldr	r2, [r0, #28]
   18d26:	6804      	ldr	r4, [r0, #0]
   18d28:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   18d2c:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
   18d2e:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   18d30:	6902      	ldr	r2, [r0, #16]
   18d32:	f012 0201 	ands.w	r2, r2, #1
   18d36:	d104      	bne.n	18d42 <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
   18d38:	6a04      	ldr	r4, [r0, #32]
   18d3a:	42a3      	cmp	r3, r4
   18d3c:	d304      	bcc.n	18d48 <add_skip_item+0x34>
   18d3e:	1b1b      	subs	r3, r3, r4
   18d40:	e002      	b.n	18d48 <add_skip_item+0x34>
		return i & (buffer->size - 1);
   18d42:	6a04      	ldr	r4, [r0, #32]
   18d44:	3c01      	subs	r4, #1
   18d46:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   18d48:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   18d4a:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
   18d4c:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   18d4e:	b922      	cbnz	r2, 18d5a <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
   18d50:	6a03      	ldr	r3, [r0, #32]
   18d52:	4299      	cmp	r1, r3
   18d54:	d304      	bcc.n	18d60 <add_skip_item+0x4c>
   18d56:	1ac9      	subs	r1, r1, r3
   18d58:	e002      	b.n	18d60 <add_skip_item+0x4c>
		return i & (buffer->size - 1);
   18d5a:	6a03      	ldr	r3, [r0, #32]
   18d5c:	3b01      	subs	r3, #1
   18d5e:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   18d60:	6041      	str	r1, [r0, #4]
}
   18d62:	bc10      	pop	{r4}
   18d64:	4770      	bx	lr

00018d66 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   18d66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d6a:	b083      	sub	sp, #12
   18d6c:	4604      	mov	r4, r0
   18d6e:	9101      	str	r1, [sp, #4]
   18d70:	4615      	mov	r5, r2
   18d72:	461e      	mov	r6, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   18d74:	2300      	movs	r3, #0
   18d76:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   18d78:	f8d0 801c 	ldr.w	r8, [r0, #28]
   18d7c:	f8d0 900c 	ldr.w	r9, [r0, #12]
   18d80:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   18d84:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   18d88:	f003 0303 	and.w	r3, r3, #3
   18d8c:	2b02      	cmp	r3, #2
   18d8e:	d012      	beq.n	18db6 <drop_item_locked+0x50>
	return 0;
   18d90:	f04f 0b00 	mov.w	fp, #0
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   18d94:	69a3      	ldr	r3, [r4, #24]
   18d96:	4650      	mov	r0, sl
   18d98:	4798      	blx	r3
   18d9a:	4607      	mov	r7, r0
	if (skip_wlen) {
   18d9c:	f1bb 0f00 	cmp.w	fp, #0
   18da0:	d152      	bne.n	18e48 <drop_item_locked+0xe2>
		allow_drop = true;
	} else if (allow_drop) {
   18da2:	2d00      	cmp	r5, #0
   18da4:	d05d      	beq.n	18e62 <drop_item_locked+0xfc>
		if (item->hdr.busy) {
   18da6:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   18daa:	f013 0f02 	tst.w	r3, #2
   18dae:	d10a      	bne.n	18dc6 <drop_item_locked+0x60>
			} else {
				rd_wlen += buffer->get_wlen(item);
				*user_packet = true;
			}
		} else {
			*user_packet = true;
   18db0:	2301      	movs	r3, #1
   18db2:	7033      	strb	r3, [r6, #0]
   18db4:	e049      	b.n	18e4a <drop_item_locked+0xe4>
		return item->skip.len;
   18db6:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   18dba:	ea5f 0b93 	movs.w	fp, r3, lsr #2
   18dbe:	d0e9      	beq.n	18d94 <drop_item_locked+0x2e>
		return item->skip.len;
   18dc0:	465f      	mov	r7, fp
		allow_drop = true;
   18dc2:	2501      	movs	r5, #1
   18dc4:	e041      	b.n	18e4a <drop_item_locked+0xe4>
			add_skip_item(buffer, free_wlen + 1);
   18dc6:	9901      	ldr	r1, [sp, #4]
   18dc8:	3101      	adds	r1, #1
   18dca:	4620      	mov	r0, r4
   18dcc:	f7ff ffa2 	bl	18d14 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   18dd0:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   18dd2:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   18dd4:	6922      	ldr	r2, [r4, #16]
   18dd6:	f012 0201 	ands.w	r2, r2, #1
   18dda:	d104      	bne.n	18de6 <drop_item_locked+0x80>
	return (i >= buffer->size) ? i - buffer->size : i;
   18ddc:	6a21      	ldr	r1, [r4, #32]
   18dde:	428b      	cmp	r3, r1
   18de0:	d304      	bcc.n	18dec <drop_item_locked+0x86>
   18de2:	1a5b      	subs	r3, r3, r1
   18de4:	e002      	b.n	18dec <drop_item_locked+0x86>
		return i & (buffer->size - 1);
   18de6:	6a21      	ldr	r1, [r4, #32]
   18de8:	3901      	subs	r1, #1
   18dea:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   18dec:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   18dee:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
   18df0:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   18df2:	b922      	cbnz	r2, 18dfe <drop_item_locked+0x98>
	return (i >= buffer->size) ? i - buffer->size : i;
   18df4:	6a21      	ldr	r1, [r4, #32]
   18df6:	428b      	cmp	r3, r1
   18df8:	d304      	bcc.n	18e04 <drop_item_locked+0x9e>
   18dfa:	1a5b      	subs	r3, r3, r1
   18dfc:	e002      	b.n	18e04 <drop_item_locked+0x9e>
		return i & (buffer->size - 1);
   18dfe:	6a21      	ldr	r1, [r4, #32]
   18e00:	3901      	subs	r1, #1
   18e02:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   18e04:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   18e06:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   18e08:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   18e0a:	b922      	cbnz	r2, 18e16 <drop_item_locked+0xb0>
	return (i >= buffer->size) ? i - buffer->size : i;
   18e0c:	6a22      	ldr	r2, [r4, #32]
   18e0e:	4293      	cmp	r3, r2
   18e10:	d304      	bcc.n	18e1c <drop_item_locked+0xb6>
   18e12:	1a9b      	subs	r3, r3, r2
   18e14:	e002      	b.n	18e1c <drop_item_locked+0xb6>
		return i & (buffer->size - 1);
   18e16:	6a22      	ldr	r2, [r4, #32]
   18e18:	3a01      	subs	r2, #1
   18e1a:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   18e1c:	69e1      	ldr	r1, [r4, #28]
   18e1e:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   18e22:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
   18e26:	f002 0203 	and.w	r2, r2, #3
   18e2a:	2a02      	cmp	r2, #2
   18e2c:	d006      	beq.n	18e3c <drop_item_locked+0xd6>
				rd_wlen += buffer->get_wlen(item);
   18e2e:	69a3      	ldr	r3, [r4, #24]
   18e30:	4650      	mov	r0, sl
   18e32:	4798      	blx	r3
   18e34:	4407      	add	r7, r0
				*user_packet = true;
   18e36:	2301      	movs	r3, #1
   18e38:	7033      	strb	r3, [r6, #0]
   18e3a:	e006      	b.n	18e4a <drop_item_locked+0xe4>
		return item->skip.len;
   18e3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
   18e40:	089b      	lsrs	r3, r3, #2
   18e42:	d0f4      	beq.n	18e2e <drop_item_locked+0xc8>
				rd_wlen += skip_wlen;
   18e44:	441f      	add	r7, r3
   18e46:	e000      	b.n	18e4a <drop_item_locked+0xe4>
		allow_drop = true;
   18e48:	2501      	movs	r5, #1
		}
	} else {
		item = NULL;
	}

	if (allow_drop) {
   18e4a:	b195      	cbz	r5, 18e72 <drop_item_locked+0x10c>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   18e4c:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   18e4e:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   18e50:	6922      	ldr	r2, [r4, #16]
   18e52:	f012 0f01 	tst.w	r2, #1
   18e56:	d107      	bne.n	18e68 <drop_item_locked+0x102>
	return (i >= buffer->size) ? i - buffer->size : i;
   18e58:	6a22      	ldr	r2, [r4, #32]
   18e5a:	4293      	cmp	r3, r2
   18e5c:	d307      	bcc.n	18e6e <drop_item_locked+0x108>
   18e5e:	1a9b      	subs	r3, r3, r2
   18e60:	e005      	b.n	18e6e <drop_item_locked+0x108>
		item = NULL;
   18e62:	f04f 0a00 	mov.w	sl, #0
   18e66:	e7f0      	b.n	18e4a <drop_item_locked+0xe4>
		return i & (buffer->size - 1);
   18e68:	6a22      	ldr	r2, [r4, #32]
   18e6a:	3a01      	subs	r2, #1
   18e6c:	4013      	ands	r3, r2
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   18e6e:	60e3      	str	r3, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
   18e70:	60a3      	str	r3, [r4, #8]
	}

	return item;
}
   18e72:	4650      	mov	r0, sl
   18e74:	b003      	add	sp, #12
   18e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018e7a <mpsc_pbuf_init>:
{
   18e7a:	b538      	push	{r3, r4, r5, lr}
   18e7c:	4604      	mov	r4, r0
   18e7e:	460d      	mov	r5, r1
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   18e80:	221c      	movs	r2, #28
   18e82:	2100      	movs	r1, #0
   18e84:	f000 fc81 	bl	1978a <memset>
	buffer->get_wlen = cfg->get_wlen;
   18e88:	68eb      	ldr	r3, [r5, #12]
   18e8a:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   18e8c:	68ab      	ldr	r3, [r5, #8]
   18e8e:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   18e90:	682b      	ldr	r3, [r5, #0]
   18e92:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   18e94:	686b      	ldr	r3, [r5, #4]
   18e96:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   18e98:	2200      	movs	r2, #0
   18e9a:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   18e9c:	692a      	ldr	r2, [r5, #16]
   18e9e:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   18ea0:	b12b      	cbz	r3, 18eae <mpsc_pbuf_init+0x34>
   18ea2:	1e59      	subs	r1, r3, #1
   18ea4:	420b      	tst	r3, r1
   18ea6:	d102      	bne.n	18eae <mpsc_pbuf_init+0x34>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   18ea8:	f042 0201 	orr.w	r2, r2, #1
   18eac:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
   18eae:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
   18eb2:	2201      	movs	r2, #1
   18eb4:	2100      	movs	r1, #0
   18eb6:	f001 fc97 	bl	1a7e8 <z_impl_k_sem_init>
}
   18eba:	bd38      	pop	{r3, r4, r5, pc}

00018ebc <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   18ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ec0:	b085      	sub	sp, #20
   18ec2:	469a      	mov	sl, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   18ec4:	6a03      	ldr	r3, [r0, #32]
   18ec6:	3b01      	subs	r3, #1
   18ec8:	428b      	cmp	r3, r1
   18eca:	d37f      	bcc.n	18fcc <mpsc_pbuf_alloc+0x110>
   18ecc:	4605      	mov	r5, r0
   18ece:	460f      	mov	r7, r1
   18ed0:	4691      	mov	r9, r2
	union mpsc_pbuf_generic *dropped_item = NULL;
   18ed2:	f04f 0800 	mov.w	r8, #0
	union mpsc_pbuf_generic *item = NULL;
   18ed6:	46c3      	mov	fp, r8
   18ed8:	e019      	b.n	18f0e <mpsc_pbuf_alloc+0x52>
		return i & (buffer->size - 1);
   18eda:	6a2a      	ldr	r2, [r5, #32]
   18edc:	3a01      	subs	r2, #1
   18ede:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   18ee0:	602b      	str	r3, [r5, #0]
		cont = false;
   18ee2:	2400      	movs	r4, #0
   18ee4:	f386 8811 	msr	BASEPRI, r6
   18ee8:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   18eec:	b16c      	cbz	r4, 18f0a <mpsc_pbuf_alloc+0x4e>
   18eee:	f1b8 0f00 	cmp.w	r8, #0
   18ef2:	d00a      	beq.n	18f0a <mpsc_pbuf_alloc+0x4e>
   18ef4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   18ef8:	b13b      	cbz	r3, 18f0a <mpsc_pbuf_alloc+0x4e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   18efa:	696b      	ldr	r3, [r5, #20]
   18efc:	2b00      	cmp	r3, #0
   18efe:	d062      	beq.n	18fc6 <mpsc_pbuf_alloc+0x10a>
				buffer->notify_drop(buffer, dropped_item);
   18f00:	4641      	mov	r1, r8
   18f02:	4628      	mov	r0, r5
   18f04:	4798      	blx	r3
			}
			dropped_item = NULL;
   18f06:	f04f 0800 	mov.w	r8, #0
		}
	} while (cont);
   18f0a:	2c00      	cmp	r4, #0
   18f0c:	d060      	beq.n	18fd0 <mpsc_pbuf_alloc+0x114>
	__asm__ volatile(
   18f0e:	f04f 0320 	mov.w	r3, #32
   18f12:	f3ef 8611 	mrs	r6, BASEPRI
   18f16:	f383 8812 	msr	BASEPRI_MAX, r3
   18f1a:	f3bf 8f6f 	isb	sy
   18f1e:	9601      	str	r6, [sp, #4]
		wrap = free_space(buffer, &free_wlen);
   18f20:	a903      	add	r1, sp, #12
   18f22:	4628      	mov	r0, r5
   18f24:	f7ff febc 	bl	18ca0 <free_space>
   18f28:	4604      	mov	r4, r0
		if (free_wlen >= wlen) {
   18f2a:	9903      	ldr	r1, [sp, #12]
   18f2c:	42b9      	cmp	r1, r7
   18f2e:	d319      	bcc.n	18f64 <mpsc_pbuf_alloc+0xa8>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   18f30:	69eb      	ldr	r3, [r5, #28]
   18f32:	682a      	ldr	r2, [r5, #0]
			item =
   18f34:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
   18f38:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   18f3c:	f36f 0100 	bfc	r1, #0, #1
   18f40:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
   18f44:	b2c9      	uxtb	r1, r1
   18f46:	f36f 0141 	bfc	r1, #1, #1
   18f4a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   18f4e:	682b      	ldr	r3, [r5, #0]
	uint32_t i = idx + val;
   18f50:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   18f52:	692a      	ldr	r2, [r5, #16]
   18f54:	f012 0f01 	tst.w	r2, #1
   18f58:	d1bf      	bne.n	18eda <mpsc_pbuf_alloc+0x1e>
	return (i >= buffer->size) ? i - buffer->size : i;
   18f5a:	6a2a      	ldr	r2, [r5, #32]
   18f5c:	4293      	cmp	r3, r2
   18f5e:	d3bf      	bcc.n	18ee0 <mpsc_pbuf_alloc+0x24>
   18f60:	1a9b      	subs	r3, r3, r2
   18f62:	e7bd      	b.n	18ee0 <mpsc_pbuf_alloc+0x24>
		} else if (wrap) {
   18f64:	b9a0      	cbnz	r0, 18f90 <mpsc_pbuf_alloc+0xd4>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   18f66:	ea5a 0309 	orrs.w	r3, sl, r9
   18f6a:	d003      	beq.n	18f74 <mpsc_pbuf_alloc+0xb8>
			   !k_is_in_isr()) {
   18f6c:	f001 fbe7 	bl	1a73e <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   18f70:	4604      	mov	r4, r0
   18f72:	b188      	cbz	r0, 18f98 <mpsc_pbuf_alloc+0xdc>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   18f74:	692a      	ldr	r2, [r5, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   18f76:	f10d 030b 	add.w	r3, sp, #11
   18f7a:	f3c2 0240 	ubfx	r2, r2, #1, #1
   18f7e:	9903      	ldr	r1, [sp, #12]
   18f80:	4628      	mov	r0, r5
   18f82:	f7ff fef0 	bl	18d66 <drop_item_locked>
			cont = dropped_item != NULL;
   18f86:	4680      	mov	r8, r0
   18f88:	1e04      	subs	r4, r0, #0
   18f8a:	bf18      	it	ne
   18f8c:	2401      	movne	r4, #1
   18f8e:	e7a9      	b.n	18ee4 <mpsc_pbuf_alloc+0x28>
			add_skip_item(buffer, free_wlen);
   18f90:	4628      	mov	r0, r5
   18f92:	f7ff febf 	bl	18d14 <add_skip_item>
			cont = true;
   18f96:	e7a5      	b.n	18ee4 <mpsc_pbuf_alloc+0x28>
	__asm__ volatile(
   18f98:	9b01      	ldr	r3, [sp, #4]
   18f9a:	f383 8811 	msr	BASEPRI, r3
   18f9e:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
   18fa2:	f105 0028 	add.w	r0, r5, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
   18fa6:	464a      	mov	r2, r9
   18fa8:	4653      	mov	r3, sl
   18faa:	f7fe fb73 	bl	17694 <z_impl_k_sem_take>
	__asm__ volatile(
   18fae:	f04f 0320 	mov.w	r3, #32
   18fb2:	f3ef 8611 	mrs	r6, BASEPRI
   18fb6:	f383 8812 	msr	BASEPRI_MAX, r3
   18fba:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   18fbe:	2800      	cmp	r0, #0
   18fc0:	d190      	bne.n	18ee4 <mpsc_pbuf_alloc+0x28>
				cont = true;
   18fc2:	2401      	movs	r4, #1
   18fc4:	e78e      	b.n	18ee4 <mpsc_pbuf_alloc+0x28>
			dropped_item = NULL;
   18fc6:	f04f 0800 	mov.w	r8, #0
   18fca:	e79e      	b.n	18f0a <mpsc_pbuf_alloc+0x4e>
		return NULL;
   18fcc:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   18fd0:	4658      	mov	r0, fp
   18fd2:	b005      	add	sp, #20
   18fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018fd8 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   18fd8:	b570      	push	{r4, r5, r6, lr}
   18fda:	4604      	mov	r4, r0
   18fdc:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   18fde:	6983      	ldr	r3, [r0, #24]
   18fe0:	4608      	mov	r0, r1
   18fe2:	4798      	blx	r3
   18fe4:	f04f 0320 	mov.w	r3, #32
   18fe8:	f3ef 8611 	mrs	r6, BASEPRI
   18fec:	f383 8812 	msr	BASEPRI_MAX, r3
   18ff0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   18ff4:	782b      	ldrb	r3, [r5, #0]
   18ff6:	f043 0301 	orr.w	r3, r3, #1
   18ffa:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   18ffc:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   18ffe:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   19000:	6923      	ldr	r3, [r4, #16]
   19002:	f013 0f01 	tst.w	r3, #1
   19006:	d104      	bne.n	19012 <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
   19008:	6a23      	ldr	r3, [r4, #32]
   1900a:	4298      	cmp	r0, r3
   1900c:	d304      	bcc.n	19018 <mpsc_pbuf_commit+0x40>
   1900e:	1ac0      	subs	r0, r0, r3
   19010:	e002      	b.n	19018 <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
   19012:	6a23      	ldr	r3, [r4, #32]
   19014:	3b01      	subs	r3, #1
   19016:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   19018:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   1901a:	4620      	mov	r0, r4
   1901c:	f7ff fe67 	bl	18cee <max_utilization_update>
	__asm__ volatile(
   19020:	f386 8811 	msr	BASEPRI, r6
   19024:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   19028:	bd70      	pop	{r4, r5, r6, pc}

0001902a <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   1902a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1902c:	4604      	mov	r4, r0
   1902e:	e039      	b.n	190a4 <mpsc_pbuf_claim+0x7a>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   19030:	1a9b      	subs	r3, r3, r2
		return false;
   19032:	e045      	b.n	190c0 <mpsc_pbuf_claim+0x96>
		return item->skip.len;
   19034:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   19038:	0880      	lsrs	r0, r0, #2
   1903a:	d157      	bne.n	190ec <mpsc_pbuf_claim+0xc2>
   1903c:	e04d      	b.n	190da <mpsc_pbuf_claim+0xb0>
		return i & (buffer->size - 1);
   1903e:	6a21      	ldr	r1, [r4, #32]
   19040:	3901      	subs	r1, #1
   19042:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
   19044:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
   19046:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   19048:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1904a:	b922      	cbnz	r2, 19056 <mpsc_pbuf_claim+0x2c>
	return (i >= buffer->size) ? i - buffer->size : i;
   1904c:	6a22      	ldr	r2, [r4, #32]
   1904e:	4293      	cmp	r3, r2
   19050:	d304      	bcc.n	1905c <mpsc_pbuf_claim+0x32>
   19052:	1a9b      	subs	r3, r3, r2
   19054:	e002      	b.n	1905c <mpsc_pbuf_claim+0x32>
		return i & (buffer->size - 1);
   19056:	6a22      	ldr	r2, [r4, #32]
   19058:	3a01      	subs	r2, #1
   1905a:	4013      	ands	r3, r2
				buffer->rd_idx =
   1905c:	60e3      	str	r3, [r4, #12]
				cont = true;
   1905e:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
   19060:	e01b      	b.n	1909a <mpsc_pbuf_claim+0x70>
			} else {
				item->hdr.busy = 1;
   19062:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
   19066:	f043 0302 	orr.w	r3, r3, #2
   1906a:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
   1906e:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
   19070:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
   19072:	4630      	mov	r0, r6
   19074:	4798      	blx	r3
	uint32_t i = idx + val;
   19076:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   19078:	6923      	ldr	r3, [r4, #16]
   1907a:	f013 0f01 	tst.w	r3, #1
   1907e:	d104      	bne.n	1908a <mpsc_pbuf_claim+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
   19080:	6a23      	ldr	r3, [r4, #32]
   19082:	4298      	cmp	r0, r3
   19084:	d304      	bcc.n	19090 <mpsc_pbuf_claim+0x66>
   19086:	1ac0      	subs	r0, r0, r3
   19088:	e002      	b.n	19090 <mpsc_pbuf_claim+0x66>
		return i & (buffer->size - 1);
   1908a:	6a23      	ldr	r3, [r4, #32]
   1908c:	3b01      	subs	r3, #1
   1908e:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
   19090:	60a0      	str	r0, [r4, #8]
		cont = false;
   19092:	2300      	movs	r3, #0
   19094:	e001      	b.n	1909a <mpsc_pbuf_claim+0x70>
   19096:	2300      	movs	r3, #0
			item = NULL;
   19098:	461e      	mov	r6, r3
   1909a:	f385 8811 	msr	BASEPRI, r5
   1909e:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   190a2:	b38b      	cbz	r3, 19108 <mpsc_pbuf_claim+0xde>
	__asm__ volatile(
   190a4:	f04f 0320 	mov.w	r3, #32
   190a8:	f3ef 8511 	mrs	r5, BASEPRI
   190ac:	f383 8812 	msr	BASEPRI_MAX, r3
   190b0:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   190b4:	68a2      	ldr	r2, [r4, #8]
   190b6:	6863      	ldr	r3, [r4, #4]
   190b8:	429a      	cmp	r2, r3
   190ba:	d9b9      	bls.n	19030 <mpsc_pbuf_claim+0x6>
	*res = buffer->size - buffer->tmp_rd_idx;
   190bc:	6a23      	ldr	r3, [r4, #32]
   190be:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
   190c0:	69e1      	ldr	r1, [r4, #28]
		item = (union mpsc_pbuf_generic *)
   190c2:	eb01 0682 	add.w	r6, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
   190c6:	2b00      	cmp	r3, #0
   190c8:	d0e5      	beq.n	19096 <mpsc_pbuf_claim+0x6c>
	return !item->hdr.valid && !item->hdr.busy;
   190ca:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
   190ce:	f013 0303 	ands.w	r3, r3, #3
   190d2:	d016      	beq.n	19102 <mpsc_pbuf_claim+0xd8>
	if (item->hdr.busy && !item->hdr.valid) {
   190d4:	2b02      	cmp	r3, #2
   190d6:	d0ad      	beq.n	19034 <mpsc_pbuf_claim+0xa>
	return 0;
   190d8:	2000      	movs	r0, #0
	return item->hdr.valid;
   190da:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
   190de:	f013 0f01 	tst.w	r3, #1
   190e2:	d1be      	bne.n	19062 <mpsc_pbuf_claim+0x38>
					skip ? skip : buffer->get_wlen(item);
   190e4:	b910      	cbnz	r0, 190ec <mpsc_pbuf_claim+0xc2>
   190e6:	69a3      	ldr	r3, [r4, #24]
   190e8:	4630      	mov	r0, r6
   190ea:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   190ec:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
   190ee:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   190f0:	6922      	ldr	r2, [r4, #16]
   190f2:	f012 0201 	ands.w	r2, r2, #1
   190f6:	d1a2      	bne.n	1903e <mpsc_pbuf_claim+0x14>
	return (i >= buffer->size) ? i - buffer->size : i;
   190f8:	6a21      	ldr	r1, [r4, #32]
   190fa:	428b      	cmp	r3, r1
   190fc:	d3a2      	bcc.n	19044 <mpsc_pbuf_claim+0x1a>
   190fe:	1a5b      	subs	r3, r3, r1
   19100:	e7a0      	b.n	19044 <mpsc_pbuf_claim+0x1a>
		cont = false;
   19102:	2300      	movs	r3, #0
			item = NULL;
   19104:	461e      	mov	r6, r3
   19106:	e7c8      	b.n	1909a <mpsc_pbuf_claim+0x70>

	return item;
}
   19108:	4630      	mov	r0, r6
   1910a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001910c <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   1910c:	b538      	push	{r3, r4, r5, lr}
   1910e:	4604      	mov	r4, r0
   19110:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   19112:	6983      	ldr	r3, [r0, #24]
   19114:	4608      	mov	r0, r1
   19116:	4798      	blx	r3
   19118:	f04f 0220 	mov.w	r2, #32
   1911c:	f3ef 8311 	mrs	r3, BASEPRI
   19120:	f382 8812 	msr	BASEPRI_MAX, r2
   19124:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   19128:	782a      	ldrb	r2, [r5, #0]
   1912a:	f36f 0200 	bfc	r2, #0, #1
   1912e:	702a      	strb	r2, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   19130:	6922      	ldr	r2, [r4, #16]
   19132:	f012 0f02 	tst.w	r2, #2
   19136:	d00a      	beq.n	1914e <mpsc_pbuf_free+0x42>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   19138:	69e2      	ldr	r2, [r4, #28]
   1913a:	68e1      	ldr	r1, [r4, #12]
   1913c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   19140:	42aa      	cmp	r2, r5
   19142:	d004      	beq.n	1914e <mpsc_pbuf_free+0x42>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
   19144:	682a      	ldr	r2, [r5, #0]
   19146:	f360 029f 	bfi	r2, r0, #2, #30
   1914a:	602a      	str	r2, [r5, #0]
   1914c:	e012      	b.n	19174 <mpsc_pbuf_free+0x68>
		witem->hdr.busy = 0;
   1914e:	782a      	ldrb	r2, [r5, #0]
   19150:	f36f 0241 	bfc	r2, #1, #1
   19154:	702a      	strb	r2, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   19156:	68e2      	ldr	r2, [r4, #12]
	uint32_t i = idx + val;
   19158:	4402      	add	r2, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1915a:	6921      	ldr	r1, [r4, #16]
   1915c:	f011 0f01 	tst.w	r1, #1
   19160:	d104      	bne.n	1916c <mpsc_pbuf_free+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
   19162:	6a21      	ldr	r1, [r4, #32]
   19164:	428a      	cmp	r2, r1
   19166:	d304      	bcc.n	19172 <mpsc_pbuf_free+0x66>
   19168:	1a52      	subs	r2, r2, r1
   1916a:	e002      	b.n	19172 <mpsc_pbuf_free+0x66>
		return i & (buffer->size - 1);
   1916c:	6a21      	ldr	r1, [r4, #32]
   1916e:	3901      	subs	r1, #1
   19170:	400a      	ands	r2, r1
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   19172:	60e2      	str	r2, [r4, #12]
	__asm__ volatile(
   19174:	f383 8811 	msr	BASEPRI, r3
   19178:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
   1917c:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   19180:	f7fe fa64 	bl	1764c <z_impl_k_sem_give>
}
   19184:	bd38      	pop	{r3, r4, r5, pc}

00019186 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   19186:	6883      	ldr	r3, [r0, #8]
   19188:	6842      	ldr	r2, [r0, #4]
   1918a:	4293      	cmp	r3, r2
   1918c:	d905      	bls.n	1919a <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
   1918e:	6a00      	ldr	r0, [r0, #32]
   19190:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   19192:	3800      	subs	r0, #0
   19194:	bf18      	it	ne
   19196:	2001      	movne	r0, #1
   19198:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   1919a:	1ad0      	subs	r0, r2, r3
		return false;
   1919c:	e7f9      	b.n	19192 <mpsc_pbuf_is_pending+0xc>

0001919e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1919e:	4770      	bx	lr

000191a0 <nordicsemi_nrf53_init>:
	__asm__ volatile(
   191a0:	f04f 0320 	mov.w	r3, #32
   191a4:	f3ef 8111 	mrs	r1, BASEPRI
   191a8:	f383 8812 	msr	BASEPRI_MAX, r3
   191ac:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   191b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   191b4:	2202      	movs	r2, #2
   191b6:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   191ba:	2201      	movs	r2, #1
   191bc:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   191c0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   191c4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   191c8:	f381 8811 	msr	BASEPRI, r1
   191cc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   191d0:	2000      	movs	r0, #0
   191d2:	4770      	bx	lr

000191d4 <arch_busy_wait>:

void arch_busy_wait(uint32_t time_us)
{
   191d4:	b508      	push	{r3, lr}
	nrfx_coredep_delay_us(time_us);
   191d6:	f7f8 f8fb 	bl	113d0 <nrfx_coredep_delay_us>
}
   191da:	bd08      	pop	{r3, pc}

000191dc <nrf_regulators_system_off>:
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   191dc:	2301      	movs	r3, #1
   191de:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   191e2:	f3bf 8f4f 	dsb	sy
        __WFE();
   191e6:	bf20      	wfe
    while (true)
   191e8:	e7fd      	b.n	191e6 <nrf_regulators_system_off+0xa>

000191ea <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   191ea:	2806      	cmp	r0, #6
   191ec:	d000      	beq.n	191f0 <pm_state_set+0x6>
   191ee:	4770      	bx	lr
{
   191f0:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_regulators_system_off(NRF_REGULATORS);
   191f2:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   191f6:	f7ff fff1 	bl	191dc <nrf_regulators_system_off>

000191fa <pm_state_exit_post_ops>:
   191fa:	2300      	movs	r3, #0
   191fc:	f383 8811 	msr	BASEPRI, r3
   19200:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   19204:	4770      	bx	lr

00019206 <mbox_register_callback>:
 * @retval 0 On success, negative value on error.
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
   19206:	b510      	push	{r4, lr}
   19208:	4684      	mov	ip, r0
   1920a:	4613      	mov	r3, r2
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;
   1920c:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
   1920e:	6882      	ldr	r2, [r0, #8]

	if (api->register_callback == NULL) {
   19210:	6854      	ldr	r4, [r2, #4]
   19212:	b124      	cbz	r4, 1921e <mbox_register_callback+0x18>
		return -ENOSYS;
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
   19214:	460a      	mov	r2, r1
   19216:	f8dc 1004 	ldr.w	r1, [ip, #4]
   1921a:	47a0      	blx	r4
}
   1921c:	bd10      	pop	{r4, pc}
		return -ENOSYS;
   1921e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   19222:	e7fb      	b.n	1921c <mbox_register_callback+0x16>

00019224 <z_impl_mbox_set_enabled>:
 * @retval -EINVAL If it isn't an inbound channel.
 */
__syscall int mbox_set_enabled(const struct mbox_channel *channel, bool enable);

static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
   19224:	b510      	push	{r4, lr}
   19226:	4603      	mov	r3, r0
   19228:	460a      	mov	r2, r1
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;
   1922a:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
   1922c:	6881      	ldr	r1, [r0, #8]

	if (api->set_enabled == NULL) {
   1922e:	690c      	ldr	r4, [r1, #16]
   19230:	b114      	cbz	r4, 19238 <z_impl_mbox_set_enabled+0x14>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
   19232:	6859      	ldr	r1, [r3, #4]
   19234:	47a0      	blx	r4
}
   19236:	bd10      	pop	{r4, pc}
		return -ENOSYS;
   19238:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1923c:	e7fb      	b.n	19236 <z_impl_mbox_set_enabled+0x12>

0001923e <rtc_cb>:
{
   1923e:	b510      	push	{r4, lr}
   19240:	9c02      	ldr	r4, [sp, #8]
	ppi_rtc_to_ipc(channels, false);
   19242:	2100      	movs	r1, #0
   19244:	4620      	mov	r0, r4
   19246:	f7f8 f903 	bl	11450 <ppi_rtc_to_ipc>
		free_resources(channels);
   1924a:	4620      	mov	r0, r4
   1924c:	f7f8 f8ee 	bl	1142c <free_resources>
}
   19250:	bd10      	pop	{r4, pc}

00019252 <mbox_callback>:
{
   19252:	b510      	push	{r4, lr}
   19254:	b082      	sub	sp, #8
   19256:	4614      	mov	r4, r2
	channel->dev = dev;
   19258:	9000      	str	r0, [sp, #0]
	channel->id = ch_id;
   1925a:	9101      	str	r1, [sp, #4]
   1925c:	2100      	movs	r1, #0
   1925e:	4668      	mov	r0, sp
   19260:	f7ff ffe0 	bl	19224 <z_impl_mbox_set_enabled>
	remote_callback(user_data);
   19264:	4620      	mov	r0, r4
   19266:	f7f8 f92d 	bl	114c4 <remote_callback>
}
   1926a:	b002      	add	sp, #8
   1926c:	bd10      	pop	{r4, pc}

0001926e <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   1926e:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   19270:	f013 0f04 	tst.w	r3, #4
   19274:	d001      	beq.n	1927a <log_msg_generic_get_wlen+0xc>
	return 0;
   19276:	2000      	movs	r0, #0
}
   19278:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
   1927a:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   1927c:	f3c3 2049 	ubfx	r0, r3, #9, #10
   19280:	f3c3 43cb 	ubfx	r3, r3, #19, #12
   19284:	4418      	add	r0, r3
   19286:	3017      	adds	r0, #23
   19288:	f020 0007 	bic.w	r0, r0, #7
   1928c:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   1928e:	4770      	bx	lr

00019290 <dummy_timestamp>:
}
   19290:	2000      	movs	r0, #0
   19292:	4770      	bx	lr

00019294 <msg_filter_check>:
}
   19294:	2001      	movs	r0, #1
   19296:	4770      	bx	lr

00019298 <default_get_timestamp>:
{
   19298:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1929a:	f001 f89e 	bl	1a3da <sys_clock_cycle_get_32>
}
   1929e:	bd08      	pop	{r3, pc}

000192a0 <k_msleep>:
{
   192a0:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   192a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   192a6:	17c1      	asrs	r1, r0, #31
   192a8:	03c9      	lsls	r1, r1, #15
   192aa:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   192ae:	03c0      	lsls	r0, r0, #15
   192b0:	f240 33e7 	movw	r3, #999	; 0x3e7
   192b4:	18c0      	adds	r0, r0, r3
   192b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   192ba:	f04f 0300 	mov.w	r3, #0
   192be:	f141 0100 	adc.w	r1, r1, #0
   192c2:	f7f6 ff47 	bl	10154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   192c6:	f7fe fd91 	bl	17dec <z_impl_k_sleep>
}
   192ca:	bd08      	pop	{r3, pc}

000192cc <msg_alloc>:
{
   192cc:	b508      	push	{r3, lr}
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   192ce:	2200      	movs	r2, #0
   192d0:	2300      	movs	r3, #0
   192d2:	f7ff fdf3 	bl	18ebc <mpsc_pbuf_alloc>
}
   192d6:	bd08      	pop	{r3, pc}

000192d8 <msg_free>:
{
   192d8:	b508      	push	{r3, lr}
	mpsc_pbuf_free(buffer, &msg->buf);
   192da:	f7ff ff17 	bl	1910c <mpsc_pbuf_free>
}
   192de:	bd08      	pop	{r3, pc}

000192e0 <msg_pending>:
{
   192e0:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(buffer);
   192e2:	f7ff ff50 	bl	19186 <mpsc_pbuf_is_pending>
}
   192e6:	bd08      	pop	{r3, pc}

000192e8 <z_log_notify_drop>:
 */
bool z_log_msg_pending(void);

static inline void z_log_notify_drop(const struct mpsc_pbuf_buffer *buffer,
				     const union mpsc_pbuf_generic *item)
{
   192e8:	b508      	push	{r3, lr}
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   192ea:	2001      	movs	r0, #1
   192ec:	f7f8 faa0 	bl	11830 <z_log_dropped>
}
   192f0:	bd08      	pop	{r3, pc}

000192f2 <z_log_msg_claim>:
{
   192f2:	b508      	push	{r3, lr}
	return z_log_msg_local_claim();
   192f4:	f7f8 fb12 	bl	1191c <z_log_msg_local_claim>
}
   192f8:	bd08      	pop	{r3, pc}

000192fa <msg_commit>:
{
   192fa:	b508      	push	{r3, lr}
	mpsc_pbuf_commit(buffer, &m->buf);
   192fc:	f7ff fe6c 	bl	18fd8 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
   19300:	f7f8 fba6 	bl	11a50 <z_log_msg_post_finalize>
}
   19304:	bd08      	pop	{r3, pc}

00019306 <z_log_get_tag>:
}
   19306:	2000      	movs	r0, #0
   19308:	4770      	bx	lr

0001930a <z_cbprintf_cpy>:
{
   1930a:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   1930c:	6853      	ldr	r3, [r2, #4]
   1930e:	6896      	ldr	r6, [r2, #8]
   19310:	1b9b      	subs	r3, r3, r6
   19312:	428b      	cmp	r3, r1
   19314:	d30c      	bcc.n	19330 <z_cbprintf_cpy+0x26>
   19316:	460c      	mov	r4, r1
   19318:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   1931a:	6813      	ldr	r3, [r2, #0]
   1931c:	460a      	mov	r2, r1
   1931e:	4601      	mov	r1, r0
   19320:	1998      	adds	r0, r3, r6
   19322:	f000 fa03 	bl	1972c <memcpy>
	desc->off += len;
   19326:	68ab      	ldr	r3, [r5, #8]
   19328:	4423      	add	r3, r4
   1932a:	60ab      	str	r3, [r5, #8]
	return len;
   1932c:	4620      	mov	r0, r4
}
   1932e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   19330:	f06f 001b 	mvn.w	r0, #27
   19334:	e7fb      	b.n	1932e <z_cbprintf_cpy+0x24>

00019336 <z_log_msg_finalize>:
	!(IS_ENABLED(CONFIG_LOG_FRONTEND) && \
	 (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY) || log_backend_count_get() == 0))

void z_log_msg_finalize(struct log_msg *msg, const void *source,
			 const struct log_msg_desc desc, const void *data)
{
   19336:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
   19338:	b190      	cbz	r0, 19360 <z_log_msg_finalize+0x2a>
   1933a:	460e      	mov	r6, r1
   1933c:	4614      	mov	r4, r2
   1933e:	4619      	mov	r1, r3
   19340:	4605      	mov	r5, r0
		z_log_dropped(false);

		return;
	}

	if (data) {
   19342:	b13b      	cbz	r3, 19354 <z_log_msg_finalize+0x1e>
		uint8_t *d = msg->data + desc.package_len;
   19344:	3010      	adds	r0, #16
   19346:	f3c2 2349 	ubfx	r3, r2, #9, #10

		memcpy(d, data, desc.data_len);
   1934a:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   1934e:	4418      	add	r0, r3
   19350:	f000 f9ec 	bl	1972c <memcpy>
	}

	msg->hdr.desc = desc;
   19354:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
   19356:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
   19358:	4628      	mov	r0, r5
   1935a:	f7f8 fbb9 	bl	11ad0 <z_log_msg_commit>
}
   1935e:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
   19360:	f7f8 fa66 	bl	11830 <z_log_dropped>
		return;
   19364:	e7fb      	b.n	1935e <z_log_msg_finalize+0x28>

00019366 <z_impl_z_log_msg_static_create>:

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   19366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1936a:	b08a      	sub	sp, #40	; 0x28
   1936c:	4605      	mov	r5, r0
   1936e:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   19370:	460f      	mov	r7, r1
	int inlen = desc.package_len;
   19372:	f3c1 2449 	ubfx	r4, r1, #9, #10
	struct log_msg *msg;

	if (inlen > 0) {
   19376:	b364      	cbz	r4, 193d2 <z_impl_z_log_msg_static_create+0x6c>
   19378:	4690      	mov	r8, r2
	struct z_cbprintf_buf_desc buf_desc = {
   1937a:	2200      	movs	r2, #0
   1937c:	9207      	str	r2, [sp, #28]
   1937e:	9208      	str	r2, [sp, #32]
   19380:	9209      	str	r2, [sp, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   19382:	2304      	movs	r3, #4
   19384:	9302      	str	r3, [sp, #8]
   19386:	ab05      	add	r3, sp, #20
   19388:	9301      	str	r3, [sp, #4]
   1938a:	230a      	movs	r3, #10
   1938c:	9300      	str	r3, [sp, #0]
   1938e:	ab07      	add	r3, sp, #28
   19390:	4621      	mov	r1, r4
   19392:	4640      	mov	r0, r8
   19394:	f7f7 f99a 	bl	106cc <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   19398:	f360 2752 	bfi	r7, r0, #9, #10
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   1939c:	f3c0 0909 	ubfx	r9, r0, #0, #10
   193a0:	f3c7 41cb 	ubfx	r1, r7, #19, #12
   193a4:	4449      	add	r1, r9
   193a6:	3117      	adds	r1, #23
   193a8:	f021 0107 	bic.w	r1, r1, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   193ac:	0888      	lsrs	r0, r1, #2
   193ae:	f7f8 faad 	bl	1190c <z_log_msg_alloc>
		if (msg) {
   193b2:	4682      	mov	sl, r0
   193b4:	b1b8      	cbz	r0, 193e6 <z_impl_z_log_msg_static_create+0x80>
			len = cbprintf_package_copy(package, inlen,
   193b6:	2304      	movs	r3, #4
   193b8:	9302      	str	r3, [sp, #8]
   193ba:	ab05      	add	r3, sp, #20
   193bc:	9301      	str	r3, [sp, #4]
   193be:	230a      	movs	r3, #10
   193c0:	9300      	str	r3, [sp, #0]
   193c2:	464b      	mov	r3, r9
   193c4:	f100 0210 	add.w	r2, r0, #16
   193c8:	4621      	mov	r1, r4
   193ca:	4640      	mov	r0, r8
   193cc:	f7f8 fbf6 	bl	11bbc <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
   193d0:	e009      	b.n	193e6 <z_impl_z_log_msg_static_create+0x80>
   193d2:	f3c1 41cb 	ubfx	r1, r1, #19, #12
   193d6:	440c      	add	r4, r1
   193d8:	3417      	adds	r4, #23
   193da:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   193de:	08a0      	lsrs	r0, r4, #2
   193e0:	f7f8 fa94 	bl	1190c <z_log_msg_alloc>
   193e4:	4682      	mov	sl, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   193e6:	4633      	mov	r3, r6
   193e8:	463a      	mov	r2, r7
   193ea:	4629      	mov	r1, r5
   193ec:	4650      	mov	r0, sl
   193ee:	f7ff ffa2 	bl	19336 <z_log_msg_finalize>
}
   193f2:	b00a      	add	sp, #40	; 0x28
   193f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000193f8 <buffer_write>:
{
   193f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   193fa:	4607      	mov	r7, r0
   193fc:	460d      	mov	r5, r1
   193fe:	4614      	mov	r4, r2
   19400:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   19402:	4632      	mov	r2, r6
   19404:	4621      	mov	r1, r4
   19406:	4628      	mov	r0, r5
   19408:	47b8      	blx	r7
		buf += processed;
   1940a:	4405      	add	r5, r0
	} while (len != 0);
   1940c:	1a24      	subs	r4, r4, r0
   1940e:	d1f8      	bne.n	19402 <buffer_write+0xa>
}
   19410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019412 <cbvprintf>:
{
   19412:	b510      	push	{r4, lr}
   19414:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   19416:	2400      	movs	r4, #0
   19418:	9400      	str	r4, [sp, #0]
   1941a:	f7f7 fd0d 	bl	10e38 <z_cbvprintf_impl>
}
   1941e:	b002      	add	sp, #8
   19420:	bd10      	pop	{r4, pc}

00019422 <color_prefix>:
{
   19422:	b508      	push	{r3, lr}
   19424:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   19426:	2201      	movs	r2, #1
   19428:	f7f8 fc3a 	bl	11ca0 <color_print>
}
   1942c:	bd08      	pop	{r3, pc}

0001942e <color_postfix>:
{
   1942e:	b508      	push	{r3, lr}
   19430:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   19432:	2200      	movs	r2, #0
   19434:	f7f8 fc34 	bl	11ca0 <color_print>
}
   19438:	bd08      	pop	{r3, pc}

0001943a <postfix_print>:
{
   1943a:	b538      	push	{r3, r4, r5, lr}
   1943c:	4605      	mov	r5, r0
   1943e:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   19440:	f001 0101 	and.w	r1, r1, #1
   19444:	f7ff fff3 	bl	1942e <color_postfix>
	newline_print(output, flags);
   19448:	4621      	mov	r1, r4
   1944a:	4628      	mov	r0, r5
   1944c:	f7f8 fcae 	bl	11dac <newline_print>
}
   19450:	bd38      	pop	{r3, r4, r5, pc}

00019452 <log_msg_hexdump>:
{
   19452:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19456:	b083      	sub	sp, #12
   19458:	4680      	mov	r8, r0
   1945a:	460e      	mov	r6, r1
   1945c:	4615      	mov	r5, r2
   1945e:	461f      	mov	r7, r3
   19460:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   19464:	462c      	mov	r4, r5
   19466:	2d10      	cmp	r5, #16
   19468:	bf28      	it	cs
   1946a:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
   1946c:	f8cd 9000 	str.w	r9, [sp]
   19470:	463b      	mov	r3, r7
   19472:	4622      	mov	r2, r4
   19474:	4631      	mov	r1, r6
   19476:	4640      	mov	r0, r8
   19478:	f7f8 fcac 	bl	11dd4 <hexdump_line_print>
		data += length;
   1947c:	4426      	add	r6, r4
	} while (len);
   1947e:	1b2d      	subs	r5, r5, r4
   19480:	d1f0      	bne.n	19464 <log_msg_hexdump+0x12>
}
   19482:	b003      	add	sp, #12
   19484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00019488 <log_output_flush>:
{
   19488:	b510      	push	{r4, lr}
   1948a:	4604      	mov	r4, r0
		     output->control_block->offset,
   1948c:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1948e:	6853      	ldr	r3, [r2, #4]
   19490:	6812      	ldr	r2, [r2, #0]
   19492:	6881      	ldr	r1, [r0, #8]
   19494:	6800      	ldr	r0, [r0, #0]
   19496:	f7ff ffaf 	bl	193f8 <buffer_write>
	output->control_block->offset = 0;
   1949a:	6863      	ldr	r3, [r4, #4]
   1949c:	2200      	movs	r2, #0
   1949e:	601a      	str	r2, [r3, #0]
}
   194a0:	bd10      	pop	{r4, pc}

000194a2 <out_func>:
{
   194a2:	b538      	push	{r3, r4, r5, lr}
   194a4:	4605      	mov	r5, r0
   194a6:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   194a8:	684b      	ldr	r3, [r1, #4]
   194aa:	681a      	ldr	r2, [r3, #0]
   194ac:	68cb      	ldr	r3, [r1, #12]
   194ae:	429a      	cmp	r2, r3
   194b0:	d00b      	beq.n	194ca <out_func+0x28>
	idx = atomic_inc(&out_ctx->control_block->offset);
   194b2:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   194b4:	e8d3 2fef 	ldaex	r2, [r3]
   194b8:	1c51      	adds	r1, r2, #1
   194ba:	e8c3 1fe0 	stlex	r0, r1, [r3]
   194be:	2800      	cmp	r0, #0
   194c0:	d1f8      	bne.n	194b4 <out_func+0x12>
	out_ctx->buf[idx] = (uint8_t)c;
   194c2:	68a3      	ldr	r3, [r4, #8]
   194c4:	549d      	strb	r5, [r3, r2]
}
   194c6:	2000      	movs	r0, #0
   194c8:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   194ca:	4608      	mov	r0, r1
   194cc:	f7ff ffdc 	bl	19488 <log_output_flush>
   194d0:	e7ef      	b.n	194b2 <out_func+0x10>

000194d2 <cr_out_func>:
{
   194d2:	b538      	push	{r3, r4, r5, lr}
   194d4:	4604      	mov	r4, r0
   194d6:	460d      	mov	r5, r1
	if (c == '\n') {
   194d8:	280a      	cmp	r0, #10
   194da:	d005      	beq.n	194e8 <cr_out_func+0x16>
	out_func(c, ctx);
   194dc:	4629      	mov	r1, r5
   194de:	4620      	mov	r0, r4
   194e0:	f7ff ffdf 	bl	194a2 <out_func>
}
   194e4:	2000      	movs	r0, #0
   194e6:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
   194e8:	200d      	movs	r0, #13
   194ea:	f7ff ffda 	bl	194a2 <out_func>
   194ee:	e7f5      	b.n	194dc <cr_out_func+0xa>

000194f0 <log_backend_uart_init>:
}
   194f0:	4770      	bx	lr

000194f2 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
   194f2:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   194f4:	f001 021f 	and.w	r2, r1, #31
   194f8:	2301      	movs	r3, #1
   194fa:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   194fc:	0949      	lsrs	r1, r1, #5
   194fe:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   19502:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19504:	e8d0 2fef 	ldaex	r2, [r0]
   19508:	ea02 0c01 	and.w	ip, r2, r1
   1950c:	e8c0 cfee 	stlex	lr, ip, [r0]
   19510:	f1be 0f00 	cmp.w	lr, #0
   19514:	d1f6      	bne.n	19504 <atomic_test_and_clear_bit+0x12>

	return (old & mask) != 0;
   19516:	4213      	tst	r3, r2
}
   19518:	bf14      	ite	ne
   1951a:	2001      	movne	r0, #1
   1951c:	2000      	moveq	r0, #0
   1951e:	f85d fb04 	ldr.w	pc, [sp], #4

00019522 <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   19522:	f001 021f 	and.w	r2, r1, #31
   19526:	2301      	movs	r3, #1
   19528:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1952a:	0949      	lsrs	r1, r1, #5
   1952c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19530:	e8d0 2fef 	ldaex	r2, [r0]
   19534:	431a      	orrs	r2, r3
   19536:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1953a:	2900      	cmp	r1, #0
   1953c:	d1f8      	bne.n	19530 <atomic_set_bit+0xe>
}
   1953e:	4770      	bx	lr

00019540 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   19540:	2000      	movs	r0, #0
   19542:	4770      	bx	lr

00019544 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   19544:	b538      	push	{r3, r4, r5, lr}
   19546:	4604      	mov	r4, r0

	if (esf != NULL) {
   19548:	460d      	mov	r5, r1
   1954a:	b111      	cbz	r1, 19552 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   1954c:	4608      	mov	r0, r1
   1954e:	f7f8 fee9 	bl	12324 <esf_dump>
	}
	z_fatal_error(reason, esf);
   19552:	4629      	mov	r1, r5
   19554:	4620      	mov	r0, r4
   19556:	f7fd fc71 	bl	16e3c <z_fatal_error>
}
   1955a:	bd38      	pop	{r3, r4, r5, pc}

0001955c <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1955c:	b508      	push	{r3, lr}
   1955e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   19560:	6800      	ldr	r0, [r0, #0]
   19562:	f7ff ffef 	bl	19544 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   19566:	bd08      	pop	{r3, pc}

00019568 <arch_irq_enable>:
{
   19568:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   1956a:	b240      	sxtb	r0, r0
   1956c:	f7f9 f800 	bl	12570 <__NVIC_EnableIRQ>
}
   19570:	bd08      	pop	{r3, pc}

00019572 <arch_irq_disable>:
{
   19572:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
   19574:	b240      	sxtb	r0, r0
   19576:	f7f9 f809 	bl	1258c <__NVIC_DisableIRQ>
}
   1957a:	bd08      	pop	{r3, pc}

0001957c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   1957c:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1957e:	3101      	adds	r1, #1
   19580:	b240      	sxtb	r0, r0
   19582:	f7f9 f815 	bl	125b0 <__NVIC_SetPriority>
}
   19586:	bd08      	pop	{r3, pc}

00019588 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
   19588:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1958a:	2100      	movs	r1, #0
   1958c:	2001      	movs	r0, #1
   1958e:	f7ff ffd9 	bl	19544 <z_arm_fatal_error>
}
   19592:	bd08      	pop	{r3, pc}

00019594 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   19594:	b508      	push	{r3, lr}
	handler();
   19596:	f7f9 f82d 	bl	125f4 <z_SysNmiOnReset>
	z_arm_int_exit();
   1959a:	f7f9 f905 	bl	127a8 <z_arm_exc_exit>
}
   1959e:	bd08      	pop	{r3, pc}

000195a0 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
   195a0:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   195a4:	f383 880b 	msr	PSPLIM, r3
}
   195a8:	4770      	bx	lr

000195aa <memory_fault_recoverable>:
}
   195aa:	2000      	movs	r0, #0
   195ac:	4770      	bx	lr

000195ae <fault_handle>:
{
   195ae:	b508      	push	{r3, lr}
	*recoverable = false;
   195b0:	2300      	movs	r3, #0
   195b2:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   195b4:	1ecb      	subs	r3, r1, #3
   195b6:	2b09      	cmp	r3, #9
   195b8:	d81a      	bhi.n	195f0 <fault_handle+0x42>
   195ba:	e8df f003 	tbb	[pc, r3]
   195be:	0905      	.short	0x0905
   195c0:	1919110d 	.word	0x1919110d
   195c4:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   195c8:	4611      	mov	r1, r2
   195ca:	f7f9 fdf1 	bl	131b0 <hard_fault>
}
   195ce:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   195d0:	2100      	movs	r1, #0
   195d2:	f7f9 f96b 	bl	128ac <mem_manage_fault>
		break;
   195d6:	e7fa      	b.n	195ce <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   195d8:	2100      	movs	r1, #0
   195da:	f7f9 fadf 	bl	12b9c <bus_fault>
		break;
   195de:	e7f6      	b.n	195ce <fault_handle+0x20>
		reason = usage_fault(esf);
   195e0:	f7f9 fc70 	bl	12ec4 <usage_fault>
		break;
   195e4:	e7f3      	b.n	195ce <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   195e6:	4611      	mov	r1, r2
   195e8:	f7f9 ff00 	bl	133ec <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   195ec:	2000      	movs	r0, #0
		break;
   195ee:	e7ee      	b.n	195ce <fault_handle+0x20>
		reserved_exception(esf, fault);
   195f0:	f7f9 ff2c 	bl	1344c <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   195f4:	2000      	movs	r0, #0
	return reason;
   195f6:	e7ea      	b.n	195ce <fault_handle+0x20>

000195f8 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   195f8:	4770      	bx	lr

000195fa <z_arm_restore_fp_context>:
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   195fa:	4770      	bx	lr

000195fc <sys_arch_reboot>:
{
   195fc:	b508      	push	{r3, lr}
	NVIC_SystemReset();
   195fe:	f7fa f831 	bl	13664 <__NVIC_SystemReset>

00019602 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   19602:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   19606:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   1960a:	d001      	beq.n	19610 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
   1960c:	b2c0      	uxtb	r0, r0
   1960e:	4770      	bx	lr
	}

	return -EINVAL;
   19610:	f06f 0015 	mvn.w	r0, #21
}
   19614:	4770      	bx	lr

00019616 <region_init>:
{
   19616:	b508      	push	{r3, lr}
		(region_conf->base & MPU_RBAR_BASE_Msk)
   19618:	680b      	ldr	r3, [r1, #0]
   1961a:	f023 0c1f 	bic.w	ip, r3, #31
		| (region_conf->attr.rbar &
   1961e:	7a0b      	ldrb	r3, [r1, #8]
   19620:	f003 0e1f 	and.w	lr, r3, #31
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   19624:	68ca      	ldr	r2, [r1, #12]
   19626:	f022 021f 	bic.w	r2, r2, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1962a:	095b      	lsrs	r3, r3, #5
   1962c:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
	mpu_set_region(
   19630:	f042 0201 	orr.w	r2, r2, #1
   19634:	ea4c 010e 	orr.w	r1, ip, lr
   19638:	f7fa f8a8 	bl	1378c <mpu_set_region>
}
   1963c:	bd08      	pop	{r3, pc}

0001963e <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   1963e:	6843      	ldr	r3, [r0, #4]
		&&
   19640:	2b1f      	cmp	r3, #31
   19642:	d908      	bls.n	19656 <mpu_partition_is_valid+0x18>
		&&
   19644:	f013 0f1f 	tst.w	r3, #31
   19648:	d107      	bne.n	1965a <mpu_partition_is_valid+0x1c>
		((part->start &
   1964a:	6803      	ldr	r3, [r0, #0]
		&&
   1964c:	f013 0f1f 	tst.w	r3, #31
   19650:	d005      	beq.n	1965e <mpu_partition_is_valid+0x20>
   19652:	2000      	movs	r0, #0
   19654:	4770      	bx	lr
   19656:	2000      	movs	r0, #0
   19658:	4770      	bx	lr
   1965a:	2000      	movs	r0, #0
   1965c:	4770      	bx	lr
   1965e:	2001      	movs	r0, #1
}
   19660:	4770      	bx	lr

00019662 <get_region_index>:
{
   19662:	b570      	push	{r4, r5, r6, lr}
   19664:	4604      	mov	r4, r0
   19666:	460e      	mov	r6, r1
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   19668:	f7ff ffcb 	bl	19602 <arm_cmse_mpu_region_get>
   1966c:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1966e:	4434      	add	r4, r6
   19670:	1e60      	subs	r0, r4, #1
   19672:	f7ff ffc6 	bl	19602 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   19676:	4285      	cmp	r5, r0
   19678:	d101      	bne.n	1967e <get_region_index+0x1c>
}
   1967a:	4628      	mov	r0, r5
   1967c:	bd70      	pop	{r4, r5, r6, pc}
	return -EINVAL;
   1967e:	f06f 0515 	mvn.w	r5, #21
   19682:	e7fa      	b.n	1967a <get_region_index+0x18>

00019684 <mpu_configure_region>:
{
   19684:	b510      	push	{r4, lr}
   19686:	b084      	sub	sp, #16
	region_conf.base = new_region->start;
   19688:	680b      	ldr	r3, [r1, #0]
   1968a:	9300      	str	r3, [sp, #0]
		&new_region->attr, new_region->start, new_region->size);
   1968c:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   1968e:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   19692:	f89d 2008 	ldrb.w	r2, [sp, #8]
   19696:	f36c 0204 	bfi	r2, ip, #0, #5
   1969a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->mair_idx = attr->mair_idx;
   1969e:	8949      	ldrh	r1, [r1, #10]
   196a0:	b2d2      	uxtb	r2, r2
   196a2:	f361 1247 	bfi	r2, r1, #5, #3
   196a6:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   196aa:	f023 031f 	bic.w	r3, r3, #31
   196ae:	4423      	add	r3, r4
   196b0:	3b01      	subs	r3, #1
   196b2:	f023 031f 	bic.w	r3, r3, #31
   196b6:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   196b8:	4669      	mov	r1, sp
   196ba:	f7fa f8c1 	bl	13840 <region_allocate_and_init>
}
   196be:	b004      	add	sp, #16
   196c0:	bd10      	pop	{r4, pc}

000196c2 <arm_core_mpu_configure_static_mpu_regions>:
{
   196c2:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   196c4:	f7fa fa52 	bl	13b6c <mpu_configure_static_mpu_regions>
}
   196c8:	bd08      	pop	{r3, pc}

000196ca <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   196ca:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   196cc:	f7fa f888 	bl	137e0 <mpu_mark_areas_for_dynamic_regions>
}
   196d0:	bd08      	pop	{r3, pc}

000196d2 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   196d2:	4603      	mov	r3, r0
   196d4:	b1a2      	cbz	r2, 19700 <strncpy+0x2e>
{
   196d6:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   196d8:	780c      	ldrb	r4, [r1, #0]
   196da:	b12c      	cbz	r4, 196e8 <strncpy+0x16>
		*d = *s;
   196dc:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   196e0:	3101      	adds	r1, #1
		d++;
		n--;
   196e2:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   196e4:	2a00      	cmp	r2, #0
   196e6:	d1f7      	bne.n	196d8 <strncpy+0x6>
	}

	while (n > 0) {
   196e8:	b122      	cbz	r2, 196f4 <strncpy+0x22>
		*d = '\0';
   196ea:	2100      	movs	r1, #0
   196ec:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   196f0:	3a01      	subs	r2, #1
   196f2:	e7f9      	b.n	196e8 <strncpy+0x16>
	}

	return dest;
}
   196f4:	bc10      	pop	{r4}
   196f6:	4770      	bx	lr
		*d = '\0';
   196f8:	2100      	movs	r1, #0
   196fa:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   196fe:	3a01      	subs	r2, #1
	while (n > 0) {
   19700:	2a00      	cmp	r2, #0
   19702:	d1f9      	bne.n	196f8 <strncpy+0x26>
   19704:	4770      	bx	lr

00019706 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   19706:	4603      	mov	r3, r0
	size_t n = 0;
   19708:	2000      	movs	r0, #0

	while (*s != '\0') {
   1970a:	e001      	b.n	19710 <strlen+0xa>
		s++;
   1970c:	3301      	adds	r3, #1
		n++;
   1970e:	3001      	adds	r0, #1
	while (*s != '\0') {
   19710:	781a      	ldrb	r2, [r3, #0]
   19712:	2a00      	cmp	r2, #0
   19714:	d1fa      	bne.n	1970c <strlen+0x6>
	}

	return n;
}
   19716:	4770      	bx	lr

00019718 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   19718:	4603      	mov	r3, r0
	size_t n = 0;
   1971a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1971c:	e001      	b.n	19722 <strnlen+0xa>
		s++;
   1971e:	3301      	adds	r3, #1
		n++;
   19720:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
   19722:	781a      	ldrb	r2, [r3, #0]
   19724:	b10a      	cbz	r2, 1972a <strnlen+0x12>
   19726:	4288      	cmp	r0, r1
   19728:	d3f9      	bcc.n	1971e <strnlen+0x6>
	}

	return n;
}
   1972a:	4770      	bx	lr

0001972c <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1972c:	ea80 0301 	eor.w	r3, r0, r1
   19730:	f013 0f03 	tst.w	r3, #3
   19734:	d001      	beq.n	1973a <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
   19736:	4603      	mov	r3, r0
   19738:	e023      	b.n	19782 <memcpy+0x56>
   1973a:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   1973c:	f013 0f03 	tst.w	r3, #3
   19740:	d00f      	beq.n	19762 <memcpy+0x36>
			if (n == 0) {
   19742:	b30a      	cbz	r2, 19788 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   19744:	f811 cb01 	ldrb.w	ip, [r1], #1
   19748:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
   1974c:	3a01      	subs	r2, #1
   1974e:	e7f5      	b.n	1973c <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   19750:	f811 cb01 	ldrb.w	ip, [r1], #1
   19754:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   19758:	3a01      	subs	r2, #1
	while (n > 0) {
   1975a:	2a00      	cmp	r2, #0
   1975c:	d1f8      	bne.n	19750 <memcpy+0x24>
	}

	return d;
}
   1975e:	bc10      	pop	{r4}
   19760:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
   19762:	2a03      	cmp	r2, #3
   19764:	d90d      	bls.n	19782 <memcpy+0x56>
{
   19766:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
   19768:	f851 4b04 	ldr.w	r4, [r1], #4
   1976c:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   19770:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   19772:	2a03      	cmp	r2, #3
   19774:	d8f8      	bhi.n	19768 <memcpy+0x3c>
   19776:	e7f0      	b.n	1975a <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   19778:	f811 cb01 	ldrb.w	ip, [r1], #1
   1977c:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   19780:	3a01      	subs	r2, #1
	while (n > 0) {
   19782:	2a00      	cmp	r2, #0
   19784:	d1f8      	bne.n	19778 <memcpy+0x4c>
   19786:	4770      	bx	lr
}
   19788:	4770      	bx	lr

0001978a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1978a:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1978e:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   19790:	e002      	b.n	19798 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
   19792:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   19796:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   19798:	f013 0f03 	tst.w	r3, #3
   1979c:	d002      	beq.n	197a4 <memset+0x1a>
		if (n == 0) {
   1979e:	2a00      	cmp	r2, #0
   197a0:	d1f7      	bne.n	19792 <memset+0x8>
   197a2:	e00f      	b.n	197c4 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   197a4:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   197a6:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   197aa:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   197ae:	2a03      	cmp	r2, #3
   197b0:	d906      	bls.n	197c0 <memset+0x36>
		*(d_word++) = c_word;
   197b2:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   197b6:	3a04      	subs	r2, #4
   197b8:	e7f9      	b.n	197ae <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   197ba:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   197be:	3a01      	subs	r2, #1
	while (n > 0) {
   197c0:	2a00      	cmp	r2, #0
   197c2:	d1fa      	bne.n	197ba <memset+0x30>
	}

	return buf;
}
   197c4:	4770      	bx	lr

000197c6 <_stdout_hook_default>:
}
   197c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   197ca:	4770      	bx	lr

000197cc <nrf_clock_is_running>:
    switch (domain)
   197cc:	2903      	cmp	r1, #3
   197ce:	d82f      	bhi.n	19830 <nrf_clock_is_running+0x64>
   197d0:	e8df f001 	tbb	[pc, r1]
   197d4:	291c0f02 	.word	0x291c0f02
            if (p_clk_src != NULL)
   197d8:	b122      	cbz	r2, 197e4 <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   197da:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   197de:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   197e2:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   197e4:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   197e8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   197ec:	d122      	bne.n	19834 <nrf_clock_is_running+0x68>
    return false;
   197ee:	2000      	movs	r0, #0
   197f0:	4770      	bx	lr
            if (p_clk_src != NULL)
   197f2:	b122      	cbz	r2, 197fe <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   197f4:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   197f8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   197fc:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   197fe:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   19802:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   19806:	d117      	bne.n	19838 <nrf_clock_is_running+0x6c>
    return false;
   19808:	2000      	movs	r0, #0
   1980a:	4770      	bx	lr
            if (p_clk_src != NULL)
   1980c:	b122      	cbz	r2, 19818 <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   1980e:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
   19812:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   19816:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   19818:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
   1981c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   19820:	d10c      	bne.n	1983c <nrf_clock_is_running+0x70>
    return false;
   19822:	2000      	movs	r0, #0
   19824:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   19826:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
   1982a:	f3c0 4000 	ubfx	r0, r0, #16, #1
   1982e:	4770      	bx	lr
    switch (domain)
   19830:	2000      	movs	r0, #0
   19832:	4770      	bx	lr
                return true;
   19834:	2001      	movs	r0, #1
   19836:	4770      	bx	lr
                return true;
   19838:	2001      	movs	r0, #1
   1983a:	4770      	bx	lr
                return true;
   1983c:	2001      	movs	r0, #1
}
   1983e:	4770      	bx	lr

00019840 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   19840:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   19842:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   19846:	0089      	lsls	r1, r1, #2
   19848:	3170      	adds	r1, #112	; 0x70
}
   1984a:	4408      	add	r0, r1
   1984c:	4770      	bx	lr

0001984e <get_sub_config>:
	const struct nrf_clock_control_config *config =
   1984e:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   19850:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   19854:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   19858:	4770      	bx	lr

0001985a <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   1985a:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   1985c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   19860:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   19864:	4770      	bx	lr

00019866 <get_status>:
{
   19866:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   19868:	b2c9      	uxtb	r1, r1
   1986a:	f7ff ffe9 	bl	19840 <get_sub_data>
   1986e:	6880      	ldr	r0, [r0, #8]
}
   19870:	f000 0007 	and.w	r0, r0, #7
   19874:	bd08      	pop	{r3, pc}

00019876 <set_off_state>:
	__asm__ volatile(
   19876:	f04f 0320 	mov.w	r3, #32
   1987a:	f3ef 8211 	mrs	r2, BASEPRI
   1987e:	f383 8812 	msr	BASEPRI_MAX, r3
   19882:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   19886:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   19888:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1988c:	d001      	beq.n	19892 <set_off_state+0x1c>
   1988e:	428b      	cmp	r3, r1
   19890:	d107      	bne.n	198a2 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   19892:	2301      	movs	r3, #1
   19894:	6003      	str	r3, [r0, #0]
	int err = 0;
   19896:	2000      	movs	r0, #0
	__asm__ volatile(
   19898:	f382 8811 	msr	BASEPRI, r2
   1989c:	f3bf 8f6f 	isb	sy
}
   198a0:	4770      	bx	lr
		err = -EPERM;
   198a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   198a6:	e7f7      	b.n	19898 <set_off_state+0x22>

000198a8 <set_starting_state>:
	__asm__ volatile(
   198a8:	f04f 0320 	mov.w	r3, #32
   198ac:	f3ef 8211 	mrs	r2, BASEPRI
   198b0:	f383 8812 	msr	BASEPRI_MAX, r3
   198b4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   198b8:	6803      	ldr	r3, [r0, #0]
   198ba:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   198be:	f003 0307 	and.w	r3, r3, #7
   198c2:	2b01      	cmp	r3, #1
   198c4:	d008      	beq.n	198d8 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   198c6:	458c      	cmp	ip, r1
   198c8:	d009      	beq.n	198de <set_starting_state+0x36>
		err = -EPERM;
   198ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
   198ce:	f382 8811 	msr	BASEPRI, r2
   198d2:	f3bf 8f6f 	isb	sy
}
   198d6:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   198d8:	6001      	str	r1, [r0, #0]
	int err = 0;
   198da:	2000      	movs	r0, #0
   198dc:	e7f7      	b.n	198ce <set_starting_state+0x26>
		err = -EALREADY;
   198de:	f06f 0077 	mvn.w	r0, #119	; 0x77
   198e2:	e7f4      	b.n	198ce <set_starting_state+0x26>

000198e4 <set_on_state>:
	__asm__ volatile(
   198e4:	f04f 0320 	mov.w	r3, #32
   198e8:	f3ef 8211 	mrs	r2, BASEPRI
   198ec:	f383 8812 	msr	BASEPRI_MAX, r3
   198f0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   198f4:	6803      	ldr	r3, [r0, #0]
   198f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   198fa:	f043 0302 	orr.w	r3, r3, #2
   198fe:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   19900:	f382 8811 	msr	BASEPRI, r2
   19904:	f3bf 8f6f 	isb	sy
}
   19908:	4770      	bx	lr

0001990a <clkstarted_handle>:
{
   1990a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1990c:	4606      	mov	r6, r0
   1990e:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   19910:	f7ff ff96 	bl	19840 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   19914:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   19916:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   19918:	2300      	movs	r3, #0
   1991a:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   1991e:	f7ff ffe1 	bl	198e4 <set_on_state>
	if (callback) {
   19922:	b11d      	cbz	r5, 1992c <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   19924:	463a      	mov	r2, r7
   19926:	4621      	mov	r1, r4
   19928:	4630      	mov	r0, r6
   1992a:	47a8      	blx	r5
}
   1992c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001992e <stop>:
{
   1992e:	b570      	push	{r4, r5, r6, lr}
   19930:	4606      	mov	r6, r0
   19932:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   19934:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   19936:	4621      	mov	r1, r4
   19938:	f7ff ff82 	bl	19840 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   1993c:	4629      	mov	r1, r5
   1993e:	3008      	adds	r0, #8
   19940:	f7ff ff99 	bl	19876 <set_off_state>
	if (err < 0) {
   19944:	2800      	cmp	r0, #0
   19946:	db06      	blt.n	19956 <stop+0x28>
	get_sub_config(dev, type)->stop();
   19948:	4621      	mov	r1, r4
   1994a:	4630      	mov	r0, r6
   1994c:	f7ff ff7f 	bl	1984e <get_sub_config>
   19950:	6843      	ldr	r3, [r0, #4]
   19952:	4798      	blx	r3
	return 0;
   19954:	2000      	movs	r0, #0
}
   19956:	bd70      	pop	{r4, r5, r6, pc}

00019958 <api_stop>:
{
   19958:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   1995a:	2280      	movs	r2, #128	; 0x80
   1995c:	f7ff ffe7 	bl	1992e <stop>
}
   19960:	bd08      	pop	{r3, pc}

00019962 <async_start>:
{
   19962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19966:	4606      	mov	r6, r0
   19968:	4690      	mov	r8, r2
   1996a:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1996c:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1996e:	4629      	mov	r1, r5
   19970:	f7ff ff66 	bl	19840 <get_sub_data>
   19974:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   19976:	9906      	ldr	r1, [sp, #24]
   19978:	3008      	adds	r0, #8
   1997a:	f7ff ff95 	bl	198a8 <set_starting_state>
	if (err < 0) {
   1997e:	2800      	cmp	r0, #0
   19980:	db09      	blt.n	19996 <async_start+0x34>
	subdata->cb = cb;
   19982:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   19986:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   19988:	4629      	mov	r1, r5
   1998a:	4630      	mov	r0, r6
   1998c:	f7ff ff5f 	bl	1984e <get_sub_config>
   19990:	6803      	ldr	r3, [r0, #0]
   19992:	4798      	blx	r3
	return 0;
   19994:	2000      	movs	r0, #0
}
   19996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001999a <api_start>:
{
   1999a:	b510      	push	{r4, lr}
   1999c:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1999e:	2480      	movs	r4, #128	; 0x80
   199a0:	9400      	str	r4, [sp, #0]
   199a2:	f7ff ffde 	bl	19962 <async_start>
}
   199a6:	b002      	add	sp, #8
   199a8:	bd10      	pop	{r4, pc}

000199aa <onoff_started_callback>:
{
   199aa:	b510      	push	{r4, lr}
   199ac:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   199ae:	b2c9      	uxtb	r1, r1
   199b0:	f7ff ff53 	bl	1985a <get_onoff_manager>
	notify(mgr, 0);
   199b4:	2100      	movs	r1, #0
   199b6:	47a0      	blx	r4
}
   199b8:	bd10      	pop	{r4, pc}

000199ba <hfclk_start>:
{
   199ba:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   199bc:	2001      	movs	r0, #1
   199be:	f7fc f9a1 	bl	15d04 <nrfx_clock_start>
}
   199c2:	bd08      	pop	{r3, pc}

000199c4 <hfclkaudio_start>:
{
   199c4:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   199c6:	2003      	movs	r0, #3
   199c8:	f7fc f99c 	bl	15d04 <nrfx_clock_start>
}
   199cc:	bd08      	pop	{r3, pc}

000199ce <hfclk192m_start>:
{
   199ce:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   199d0:	2002      	movs	r0, #2
   199d2:	f7fc f997 	bl	15d04 <nrfx_clock_start>
}
   199d6:	bd08      	pop	{r3, pc}

000199d8 <lfclk_start>:
{
   199d8:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   199da:	2000      	movs	r0, #0
   199dc:	f7fc f992 	bl	15d04 <nrfx_clock_start>
}
   199e0:	bd08      	pop	{r3, pc}

000199e2 <hfclk_stop>:
{
   199e2:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   199e4:	2001      	movs	r0, #1
   199e6:	f000 fd91 	bl	1a50c <nrfx_clock_stop>
}
   199ea:	bd08      	pop	{r3, pc}

000199ec <hfclkaudio_stop>:
{
   199ec:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   199ee:	2003      	movs	r0, #3
   199f0:	f000 fd8c 	bl	1a50c <nrfx_clock_stop>
}
   199f4:	bd08      	pop	{r3, pc}

000199f6 <hfclk192m_stop>:
{
   199f6:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   199f8:	2002      	movs	r0, #2
   199fa:	f000 fd87 	bl	1a50c <nrfx_clock_stop>
}
   199fe:	bd08      	pop	{r3, pc}

00019a00 <lfclk_stop>:
{
   19a00:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   19a02:	2000      	movs	r0, #0
   19a04:	f000 fd82 	bl	1a50c <nrfx_clock_stop>
}
   19a08:	bd08      	pop	{r3, pc}

00019a0a <k_msleep>:
{
   19a0a:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   19a0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   19a10:	17c1      	asrs	r1, r0, #31
   19a12:	03c9      	lsls	r1, r1, #15
   19a14:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   19a18:	03c0      	lsls	r0, r0, #15
   19a1a:	f240 33e7 	movw	r3, #999	; 0x3e7
   19a1e:	18c0      	adds	r0, r0, r3
   19a20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19a24:	f04f 0300 	mov.w	r3, #0
   19a28:	f141 0100 	adc.w	r1, r1, #0
   19a2c:	f7f6 fb92 	bl	10154 <__aeabi_uldivmod>
   19a30:	f7fe f9dc 	bl	17dec <z_impl_k_sleep>
}
   19a34:	bd08      	pop	{r3, pc}

00019a36 <blocking_start_callback>:
{
   19a36:	b508      	push	{r3, lr}
   19a38:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   19a3a:	f7fd fe07 	bl	1764c <z_impl_k_sem_give>
}
   19a3e:	bd08      	pop	{r3, pc}

00019a40 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   19a40:	460b      	mov	r3, r1
   19a42:	b139      	cbz	r1, 19a54 <sys_slist_remove+0x14>
	return node->next;
   19a44:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   19a46:	6019      	str	r1, [r3, #0]
	return list->tail;
   19a48:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   19a4a:	428a      	cmp	r2, r1
   19a4c:	d009      	beq.n	19a62 <sys_slist_remove+0x22>
	parent->next = child;
   19a4e:	2300      	movs	r3, #0
   19a50:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   19a52:	4770      	bx	lr
	return node->next;
   19a54:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   19a56:	6003      	str	r3, [r0, #0]
	return list->tail;
   19a58:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   19a5a:	428a      	cmp	r2, r1
   19a5c:	d1f7      	bne.n	19a4e <sys_slist_remove+0xe>
	list->tail = node;
   19a5e:	6043      	str	r3, [r0, #4]
}
   19a60:	e7f5      	b.n	19a4e <sys_slist_remove+0xe>
	list->tail = node;
   19a62:	6043      	str	r3, [r0, #4]
}
   19a64:	e7f3      	b.n	19a4e <sys_slist_remove+0xe>

00019a66 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19a66:	b508      	push	{r3, lr}
   19a68:	460a      	mov	r2, r1
	return list->head;
   19a6a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19a6c:	2100      	movs	r1, #0
   19a6e:	e001      	b.n	19a74 <sys_slist_find_and_remove+0xe>
   19a70:	4619      	mov	r1, r3
   19a72:	681b      	ldr	r3, [r3, #0]
   19a74:	b12b      	cbz	r3, 19a82 <sys_slist_find_and_remove+0x1c>
   19a76:	4293      	cmp	r3, r2
   19a78:	d1fa      	bne.n	19a70 <sys_slist_find_and_remove+0xa>
   19a7a:	f7ff ffe1 	bl	19a40 <sys_slist_remove>
   19a7e:	2001      	movs	r0, #1
   19a80:	e000      	b.n	19a84 <sys_slist_find_and_remove+0x1e>
   19a82:	2000      	movs	r0, #0
   19a84:	bd08      	pop	{r3, pc}

00019a86 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   19a86:	b570      	push	{r4, r5, r6, lr}
   19a88:	4604      	mov	r4, r0
   19a8a:	460d      	mov	r5, r1
   19a8c:	4616      	mov	r6, r2
	return list->head;
   19a8e:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   19a90:	b133      	cbz	r3, 19aa0 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   19a92:	f7ff ffe8 	bl	19a66 <sys_slist_find_and_remove>
   19a96:	b970      	cbnz	r0, 19ab6 <gpio_manage_callback+0x30>
			if (!set) {
   19a98:	b91e      	cbnz	r6, 19aa2 <gpio_manage_callback+0x1c>
				return -EINVAL;
   19a9a:	f06f 0015 	mvn.w	r0, #21
   19a9e:	e006      	b.n	19aae <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
   19aa0:	b132      	cbz	r2, 19ab0 <gpio_manage_callback+0x2a>
   19aa2:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   19aa4:	602b      	str	r3, [r5, #0]
	list->head = node;
   19aa6:	6025      	str	r5, [r4, #0]
	return list->tail;
   19aa8:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   19aaa:	b143      	cbz	r3, 19abe <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   19aac:	2000      	movs	r0, #0
}
   19aae:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   19ab0:	f06f 0015 	mvn.w	r0, #21
   19ab4:	e7fb      	b.n	19aae <gpio_manage_callback+0x28>
	if (set) {
   19ab6:	2e00      	cmp	r6, #0
   19ab8:	d1f3      	bne.n	19aa2 <gpio_manage_callback+0x1c>
	return 0;
   19aba:	2000      	movs	r0, #0
   19abc:	e7f7      	b.n	19aae <gpio_manage_callback+0x28>
	list->tail = node;
   19abe:	6065      	str	r5, [r4, #4]
   19ac0:	2000      	movs	r0, #0
}
   19ac2:	e7f4      	b.n	19aae <gpio_manage_callback+0x28>

00019ac4 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   19ac4:	b570      	push	{r4, r5, r6, lr}
   19ac6:	460e      	mov	r6, r1
   19ac8:	4615      	mov	r5, r2
	return list->head;
   19aca:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   19acc:	b121      	cbz	r1, 19ad8 <gpio_fire_callbacks+0x14>
	return node->next;
   19ace:	680c      	ldr	r4, [r1, #0]
   19ad0:	b13c      	cbz	r4, 19ae2 <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19ad2:	b931      	cbnz	r1, 19ae2 <gpio_fire_callbacks+0x1e>
   19ad4:	460c      	mov	r4, r1
   19ad6:	e004      	b.n	19ae2 <gpio_fire_callbacks+0x1e>
   19ad8:	460c      	mov	r4, r1
   19ada:	e002      	b.n	19ae2 <gpio_fire_callbacks+0x1e>
   19adc:	4623      	mov	r3, r4
   19ade:	4621      	mov	r1, r4
   19ae0:	461c      	mov	r4, r3
   19ae2:	b171      	cbz	r1, 19b02 <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
   19ae4:	688a      	ldr	r2, [r1, #8]
   19ae6:	402a      	ands	r2, r5
   19ae8:	d002      	beq.n	19af0 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   19aea:	684b      	ldr	r3, [r1, #4]
   19aec:	4630      	mov	r0, r6
   19aee:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   19af0:	2c00      	cmp	r4, #0
   19af2:	d0f3      	beq.n	19adc <gpio_fire_callbacks+0x18>
	return node->next;
   19af4:	6823      	ldr	r3, [r4, #0]
   19af6:	2b00      	cmp	r3, #0
   19af8:	d0f1      	beq.n	19ade <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19afa:	2c00      	cmp	r4, #0
   19afc:	d1ef      	bne.n	19ade <gpio_fire_callbacks+0x1a>
   19afe:	4623      	mov	r3, r4
   19b00:	e7ed      	b.n	19ade <gpio_fire_callbacks+0x1a>
		}
	}
}
   19b02:	bd70      	pop	{r4, r5, r6, pc}

00019b04 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   19b04:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   19b08:	0580      	lsls	r0, r0, #22
   19b0a:	0d80      	lsrs	r0, r0, #22
   19b0c:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   19b10:	d033      	beq.n	19b7a <get_drive+0x76>
   19b12:	d816      	bhi.n	19b42 <get_drive+0x3e>
   19b14:	2806      	cmp	r0, #6
   19b16:	d02c      	beq.n	19b72 <get_drive+0x6e>
   19b18:	d906      	bls.n	19b28 <get_drive+0x24>
   19b1a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   19b1e:	d10d      	bne.n	19b3c <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   19b20:	2301      	movs	r3, #1
   19b22:	700b      	strb	r3, [r1, #0]
	return 0;
   19b24:	2000      	movs	r0, #0
		break;
   19b26:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   19b28:	b300      	cbz	r0, 19b6c <get_drive+0x68>
   19b2a:	2802      	cmp	r0, #2
   19b2c:	d103      	bne.n	19b36 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   19b2e:	2304      	movs	r3, #4
   19b30:	700b      	strb	r3, [r1, #0]
	return 0;
   19b32:	2000      	movs	r0, #0
		break;
   19b34:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   19b36:	f06f 0015 	mvn.w	r0, #21
   19b3a:	4770      	bx	lr
   19b3c:	f06f 0015 	mvn.w	r0, #21
   19b40:	4770      	bx	lr
   19b42:	f240 2302 	movw	r3, #514	; 0x202
   19b46:	4298      	cmp	r0, r3
   19b48:	d01b      	beq.n	19b82 <get_drive+0x7e>
   19b4a:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   19b4e:	d103      	bne.n	19b58 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   19b50:	2303      	movs	r3, #3
   19b52:	700b      	strb	r3, [r1, #0]
	return 0;
   19b54:	2000      	movs	r0, #0
		break;
   19b56:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   19b58:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   19b5c:	d103      	bne.n	19b66 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   19b5e:	2302      	movs	r3, #2
   19b60:	700b      	strb	r3, [r1, #0]
	return 0;
   19b62:	2000      	movs	r0, #0
		break;
   19b64:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   19b66:	f06f 0015 	mvn.w	r0, #21
   19b6a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   19b6c:	2000      	movs	r0, #0
   19b6e:	7008      	strb	r0, [r1, #0]
		break;
   19b70:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   19b72:	2306      	movs	r3, #6
   19b74:	700b      	strb	r3, [r1, #0]
	return 0;
   19b76:	2000      	movs	r0, #0
		break;
   19b78:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   19b7a:	2307      	movs	r3, #7
   19b7c:	700b      	strb	r3, [r1, #0]
	return 0;
   19b7e:	2000      	movs	r0, #0
		break;
   19b80:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   19b82:	2305      	movs	r3, #5
   19b84:	700b      	strb	r3, [r1, #0]
	return 0;
   19b86:	2000      	movs	r0, #0
}
   19b88:	4770      	bx	lr

00019b8a <get_pull>:
	if (flags & GPIO_PULL_UP) {
   19b8a:	f010 0f10 	tst.w	r0, #16
   19b8e:	d104      	bne.n	19b9a <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   19b90:	f010 0f20 	tst.w	r0, #32
   19b94:	d103      	bne.n	19b9e <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   19b96:	2000      	movs	r0, #0
   19b98:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   19b9a:	2003      	movs	r0, #3
   19b9c:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   19b9e:	2001      	movs	r0, #1
}
   19ba0:	4770      	bx	lr

00019ba2 <gpio_nrfx_port_get_raw>:
	return port->config;
   19ba2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19ba4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   19ba6:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   19ba8:	600b      	str	r3, [r1, #0]
}
   19baa:	2000      	movs	r0, #0
   19bac:	4770      	bx	lr

00019bae <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   19bae:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19bb0:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   19bb2:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   19bb6:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   19bba:	6098      	str	r0, [r3, #8]
    p_reg->OUTCLR = clr_mask;
   19bbc:	60d9      	str	r1, [r3, #12]
}
   19bbe:	2000      	movs	r0, #0
   19bc0:	4770      	bx	lr

00019bc2 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   19bc2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19bc4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   19bc6:	6099      	str	r1, [r3, #8]
}
   19bc8:	2000      	movs	r0, #0
   19bca:	4770      	bx	lr

00019bcc <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   19bcc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19bce:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   19bd0:	60d9      	str	r1, [r3, #12]
}
   19bd2:	2000      	movs	r0, #0
   19bd4:	4770      	bx	lr

00019bd6 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   19bd6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19bd8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   19bda:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   19bdc:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   19be0:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   19be2:	6090      	str	r0, [r2, #8]
    p_reg->OUTCLR = clr_mask;
   19be4:	60d3      	str	r3, [r2, #12]
}
   19be6:	2000      	movs	r0, #0
   19be8:	4770      	bx	lr

00019bea <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   19bea:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   19bee:	d007      	beq.n	19c00 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   19bf0:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   19bf4:	d00d      	beq.n	19c12 <get_trigger+0x28>
   19bf6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   19bfa:	d008      	beq.n	19c0e <get_trigger+0x24>
   19bfc:	2001      	movs	r0, #1
}
   19bfe:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   19c00:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   19c04:	d001      	beq.n	19c0a <get_trigger+0x20>
   19c06:	2005      	movs	r0, #5
   19c08:	4770      	bx	lr
   19c0a:	2004      	movs	r0, #4
   19c0c:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   19c0e:	2002      	movs	r0, #2
   19c10:	4770      	bx	lr
   19c12:	2003      	movs	r0, #3
   19c14:	4770      	bx	lr

00019c16 <gpio_nrfx_manage_callback>:
{
   19c16:	b508      	push	{r3, lr}
	return port->data;
   19c18:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   19c1a:	3004      	adds	r0, #4
   19c1c:	f7ff ff33 	bl	19a86 <gpio_manage_callback>
}
   19c20:	bd08      	pop	{r3, pc}

00019c22 <nrfx_gpio_handler>:
{
   19c22:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
   19c24:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   19c28:	0940      	lsrs	r0, r0, #5
   19c2a:	f7fa f99d 	bl	13f68 <get_dev>
	if (port == NULL) {
   19c2e:	b130      	cbz	r0, 19c3e <nrfx_gpio_handler+0x1c>
   19c30:	4601      	mov	r1, r0
	return port->data;
   19c32:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   19c34:	2201      	movs	r2, #1
   19c36:	40a2      	lsls	r2, r4
   19c38:	3004      	adds	r0, #4
   19c3a:	f7ff ff43 	bl	19ac4 <gpio_fire_callbacks>
}
   19c3e:	bd10      	pop	{r4, pc}

00019c40 <spi_write_dt>:
 *
 * @return a value from spi_write().
 */
static inline int spi_write_dt(const struct spi_dt_spec *spec,
			       const struct spi_buf_set *tx_bufs)
{
   19c40:	b510      	push	{r4, lr}
   19c42:	460a      	mov	r2, r1
	return spi_write(spec->bus, &spec->config, tx_bufs);
   19c44:	4601      	mov	r1, r0
   19c46:	f851 0b04 	ldr.w	r0, [r1], #4
	const struct spi_driver_api *api =
   19c4a:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   19c4c:	681c      	ldr	r4, [r3, #0]
   19c4e:	2300      	movs	r3, #0
   19c50:	47a0      	blx	r4
}
   19c52:	bd10      	pop	{r4, pc}

00019c54 <dev_cfg>:
}
   19c54:	6840      	ldr	r0, [r0, #4]
   19c56:	4770      	bx	lr

00019c58 <spi_is_ready>:
{
   19c58:	b510      	push	{r4, lr}
   19c5a:	4604      	mov	r4, r0
	if (!device_is_ready(spec->bus)) {
   19c5c:	6800      	ldr	r0, [r0, #0]
   19c5e:	f000 fd4a 	bl	1a6f6 <z_device_is_ready>
   19c62:	b120      	cbz	r0, 19c6e <spi_is_ready+0x16>
	if (spec->config.cs &&
   19c64:	68e3      	ldr	r3, [r4, #12]
   19c66:	b113      	cbz	r3, 19c6e <spi_is_ready+0x16>
	    !device_is_ready(spec->config.cs->gpio.port)) {
   19c68:	6818      	ldr	r0, [r3, #0]
   19c6a:	f000 fd44 	bl	1a6f6 <z_device_is_ready>
}
   19c6e:	bd10      	pop	{r4, pc}

00019c70 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
   19c70:	b538      	push	{r3, r4, r5, lr}
   19c72:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   19c74:	6885      	ldr	r5, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   19c76:	6904      	ldr	r4, [r0, #16]

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   19c78:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   19c7c:	d007      	beq.n	19c8e <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   19c7e:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   19c82:	d004      	beq.n	19c8e <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   19c84:	f012 0f01 	tst.w	r2, #1
   19c88:	d001      	beq.n	19c8e <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   19c8a:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   19c8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   19c92:	f013 0f01 	tst.w	r3, #1
   19c96:	d00a      	beq.n	19cae <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   19c98:	6823      	ldr	r3, [r4, #0]
   19c9a:	f04f 0c01 	mov.w	ip, #1
   19c9e:	fa0c fc01 	lsl.w	ip, ip, r1
   19ca2:	ea43 030c 	orr.w	r3, r3, ip
   19ca6:	6023      	str	r3, [r4, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
   19ca8:	682b      	ldr	r3, [r5, #0]
   19caa:	4798      	blx	r3
}
   19cac:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   19cae:	6823      	ldr	r3, [r4, #0]
   19cb0:	f04f 0c01 	mov.w	ip, #1
   19cb4:	fa0c fc01 	lsl.w	ip, ip, r1
   19cb8:	ea23 030c 	bic.w	r3, r3, ip
   19cbc:	6023      	str	r3, [r4, #0]
   19cbe:	e7f3      	b.n	19ca8 <z_impl_gpio_pin_configure+0x38>

00019cc0 <gpio_pin_configure_dt>:
 * @param extra_flags additional flags
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
   19cc0:	b508      	push	{r3, lr}
   19cc2:	4603      	mov	r3, r0
   19cc4:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   19cc6:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   19cc8:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   19cca:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   19ccc:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   19cd0:	f7ff ffce 	bl	19c70 <z_impl_gpio_pin_configure>
}
   19cd4:	bd08      	pop	{r3, pc}

00019cd6 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   19cd6:	b508      	push	{r3, lr}
	int ret;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (value != 0)	{
   19cd8:	b132      	cbz	r2, 19ce8 <gpio_pin_set_raw+0x12>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   19cda:	2301      	movs	r3, #1
   19cdc:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   19ce0:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   19ce2:	68db      	ldr	r3, [r3, #12]
   19ce4:	4798      	blx	r3
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   19ce6:	bd08      	pop	{r3, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   19ce8:	2301      	movs	r3, #1
   19cea:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   19cee:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   19cf0:	691b      	ldr	r3, [r3, #16]
   19cf2:	4798      	blx	r3
	return ret;
   19cf4:	e7f7      	b.n	19ce6 <gpio_pin_set_raw+0x10>

00019cf6 <gpio_pin_set>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
   19cf6:	b510      	push	{r4, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
   19cf8:	6903      	ldr	r3, [r0, #16]
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   19cfa:	681c      	ldr	r4, [r3, #0]
   19cfc:	2301      	movs	r3, #1
   19cfe:	408b      	lsls	r3, r1
   19d00:	421c      	tst	r4, r3
   19d02:	d002      	beq.n	19d0a <gpio_pin_set+0x14>
		value = (value != 0) ? 0 : 1;
   19d04:	fab2 f282 	clz	r2, r2
   19d08:	0952      	lsrs	r2, r2, #5
	}

	return gpio_pin_set_raw(port, pin, value);
   19d0a:	f7ff ffe4 	bl	19cd6 <gpio_pin_set_raw>
}
   19d0e:	bd10      	pop	{r4, pc}

00019d10 <spi_context_get_next_buf>:
{
   19d10:	b430      	push	{r4, r5}
	while (*count) {
   19d12:	e004      	b.n	19d1e <spi_context_get_next_buf+0xe>
		++(*current);
   19d14:	3408      	adds	r4, #8
   19d16:	6004      	str	r4, [r0, #0]
		--(*count);
   19d18:	680c      	ldr	r4, [r1, #0]
   19d1a:	3c01      	subs	r4, #1
   19d1c:	600c      	str	r4, [r1, #0]
	while (*count) {
   19d1e:	680c      	ldr	r4, [r1, #0]
   19d20:	b14c      	cbz	r4, 19d36 <spi_context_get_next_buf+0x26>
		if (((*current)->len / dfs) != 0) {
   19d22:	6804      	ldr	r4, [r0, #0]
   19d24:	6865      	ldr	r5, [r4, #4]
   19d26:	429d      	cmp	r5, r3
   19d28:	d3f4      	bcc.n	19d14 <spi_context_get_next_buf+0x4>
			*buf_len = (*current)->len / dfs;
   19d2a:	fbb5 f5f3 	udiv	r5, r5, r3
   19d2e:	6015      	str	r5, [r2, #0]
			return (*current)->buf;
   19d30:	6803      	ldr	r3, [r0, #0]
   19d32:	6818      	ldr	r0, [r3, #0]
   19d34:	e001      	b.n	19d3a <spi_context_get_next_buf+0x2a>
	*buf_len = 0;
   19d36:	2000      	movs	r0, #0
   19d38:	6010      	str	r0, [r2, #0]
}
   19d3a:	bc30      	pop	{r4, r5}
   19d3c:	4770      	bx	lr

00019d3e <spi_context_buffers_setup>:
{
   19d3e:	b570      	push	{r4, r5, r6, lr}
   19d40:	4604      	mov	r4, r0
   19d42:	4615      	mov	r5, r2
   19d44:	461e      	mov	r6, r3
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   19d46:	460a      	mov	r2, r1
   19d48:	b309      	cbz	r1, 19d8e <spi_context_buffers_setup+0x50>
   19d4a:	680b      	ldr	r3, [r1, #0]
   19d4c:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   19d4e:	b303      	cbz	r3, 19d92 <spi_context_buffers_setup+0x54>
   19d50:	6853      	ldr	r3, [r2, #4]
   19d52:	63a3      	str	r3, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   19d54:	4633      	mov	r3, r6
   19d56:	f104 0248 	add.w	r2, r4, #72	; 0x48
   19d5a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   19d5e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   19d62:	f7ff ffd5 	bl	19d10 <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
   19d66:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   19d68:	b1ad      	cbz	r5, 19d96 <spi_context_buffers_setup+0x58>
   19d6a:	682b      	ldr	r3, [r5, #0]
   19d6c:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   19d6e:	b1a3      	cbz	r3, 19d9a <spi_context_buffers_setup+0x5c>
   19d70:	686b      	ldr	r3, [r5, #4]
   19d72:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   19d74:	4633      	mov	r3, r6
   19d76:	f104 0250 	add.w	r2, r4, #80	; 0x50
   19d7a:	f104 0140 	add.w	r1, r4, #64	; 0x40
   19d7e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   19d82:	f7ff ffc5 	bl	19d10 <spi_context_get_next_buf>
	ctx->rx_buf = (uint8_t *)
   19d86:	64e0      	str	r0, [r4, #76]	; 0x4c
	ctx->sync_status = 0;
   19d88:	2300      	movs	r3, #0
   19d8a:	6323      	str	r3, [r4, #48]	; 0x30
}
   19d8c:	bd70      	pop	{r4, r5, r6, pc}
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   19d8e:	460b      	mov	r3, r1
   19d90:	e7dc      	b.n	19d4c <spi_context_buffers_setup+0xe>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   19d92:	2300      	movs	r3, #0
   19d94:	e7dd      	b.n	19d52 <spi_context_buffers_setup+0x14>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   19d96:	462b      	mov	r3, r5
   19d98:	e7e8      	b.n	19d6c <spi_context_buffers_setup+0x2e>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   19d9a:	2300      	movs	r3, #0
   19d9c:	e7e9      	b.n	19d72 <spi_context_buffers_setup+0x34>

00019d9e <_spi_context_cs_control>:
{
   19d9e:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   19da0:	6803      	ldr	r3, [r0, #0]
   19da2:	b1a3      	cbz	r3, 19dce <_spi_context_cs_control+0x30>
   19da4:	4604      	mov	r4, r0
   19da6:	689d      	ldr	r5, [r3, #8]
   19da8:	b18d      	cbz	r5, 19dce <_spi_context_cs_control+0x30>
   19daa:	6828      	ldr	r0, [r5, #0]
   19dac:	b178      	cbz	r0, 19dce <_spi_context_cs_control+0x30>
		if (on) {
   19dae:	b979      	cbnz	r1, 19dd0 <_spi_context_cs_control+0x32>
			if (!force_off &&
   19db0:	b91a      	cbnz	r2, 19dba <_spi_context_cs_control+0x1c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
   19db2:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
   19db4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   19db8:	d109      	bne.n	19dce <_spi_context_cs_control+0x30>
			k_busy_wait(ctx->config->cs->delay);
   19dba:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_busy_wait(usec_to_wait);
   19dbc:	f000 fed9 	bl	1ab72 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   19dc0:	6823      	ldr	r3, [r4, #0]
   19dc2:	689b      	ldr	r3, [r3, #8]
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   19dc4:	2200      	movs	r2, #0
   19dc6:	7919      	ldrb	r1, [r3, #4]
   19dc8:	6818      	ldr	r0, [r3, #0]
   19dca:	f7ff ff94 	bl	19cf6 <gpio_pin_set>
}
   19dce:	bd38      	pop	{r3, r4, r5, pc}
   19dd0:	2201      	movs	r2, #1
   19dd2:	7929      	ldrb	r1, [r5, #4]
   19dd4:	f7ff ff8f 	bl	19cf6 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   19dd8:	6823      	ldr	r3, [r4, #0]
   19dda:	689b      	ldr	r3, [r3, #8]
   19ddc:	6898      	ldr	r0, [r3, #8]
   19dde:	f000 fec8 	bl	1ab72 <z_impl_k_busy_wait>
}
   19de2:	e7f4      	b.n	19dce <_spi_context_cs_control+0x30>

00019de4 <spi_context_unlock_unconditionally>:
{
   19de4:	b510      	push	{r4, lr}
   19de6:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   19de8:	2201      	movs	r2, #1
   19dea:	2100      	movs	r1, #0
   19dec:	f7ff ffd7 	bl	19d9e <_spi_context_cs_control>
	return sem->count;
   19df0:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
   19df2:	b103      	cbz	r3, 19df6 <spi_context_unlock_unconditionally+0x12>
}
   19df4:	bd10      	pop	{r4, pc}
		ctx->owner = NULL;
   19df6:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   19df8:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   19dfc:	f7fd fc26 	bl	1764c <z_impl_k_sem_give>
}
   19e00:	e7f8      	b.n	19df4 <spi_context_unlock_unconditionally+0x10>

00019e02 <spi_nrfx_release>:
}
#endif /* CONFIG_SPI_ASYNC */

static int spi_nrfx_release(const struct device *dev,
			    const struct spi_config *spi_cfg)
{
   19e02:	b508      	push	{r3, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   19e04:	6900      	ldr	r0, [r0, #16]
	return !!(ctx->config == config);
   19e06:	6803      	ldr	r3, [r0, #0]

	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   19e08:	428b      	cmp	r3, r1
   19e0a:	d106      	bne.n	19e1a <spi_nrfx_release+0x18>
		return -EINVAL;
	}

	if (dev_data->busy) {
   19e0c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
   19e10:	b933      	cbnz	r3, 19e20 <spi_nrfx_release+0x1e>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   19e12:	f7ff ffe7 	bl	19de4 <spi_context_unlock_unconditionally>

	return 0;
   19e16:	2000      	movs	r0, #0
}
   19e18:	bd08      	pop	{r3, pc}
		return -EINVAL;
   19e1a:	f06f 0015 	mvn.w	r0, #21
   19e1e:	e7fb      	b.n	19e18 <spi_nrfx_release+0x16>
		return -EBUSY;
   19e20:	f06f 000f 	mvn.w	r0, #15
   19e24:	e7f8      	b.n	19e18 <spi_nrfx_release+0x16>

00019e26 <spi_context_release>:
{
   19e26:	b508      	push	{r3, lr}
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   19e28:	6803      	ldr	r3, [r0, #0]
   19e2a:	889b      	ldrh	r3, [r3, #4]
   19e2c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   19e30:	d000      	beq.n	19e34 <spi_context_release+0xe>
}
   19e32:	bd08      	pop	{r3, pc}
		ctx->owner = NULL;
   19e34:	2300      	movs	r3, #0
   19e36:	6043      	str	r3, [r0, #4]
		k_sem_give(&ctx->lock);
   19e38:	3010      	adds	r0, #16
   19e3a:	f7fd fc07 	bl	1764c <z_impl_k_sem_give>
}
   19e3e:	e7f8      	b.n	19e32 <spi_context_release+0xc>

00019e40 <spi_context_lock>:
{
   19e40:	b538      	push	{r3, r4, r5, lr}
   19e42:	4604      	mov	r4, r0
   19e44:	9d04      	ldr	r5, [sp, #16]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   19e46:	88ab      	ldrh	r3, [r5, #4]
   19e48:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   19e4c:	d004      	beq.n	19e58 <spi_context_lock+0x18>
   19e4e:	6983      	ldr	r3, [r0, #24]
   19e50:	b913      	cbnz	r3, 19e58 <spi_context_lock+0x18>
		(ctx->owner == spi_cfg)) {
   19e52:	6843      	ldr	r3, [r0, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
   19e54:	42ab      	cmp	r3, r5
   19e56:	d008      	beq.n	19e6a <spi_context_lock+0x2a>
	k_sem_take(&ctx->lock, K_FOREVER);
   19e58:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
   19e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19e64:	f7fd fc16 	bl	17694 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   19e68:	6065      	str	r5, [r4, #4]
}
   19e6a:	bd38      	pop	{r3, r4, r5, pc}

00019e6c <transceive>:
{
   19e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e70:	b082      	sub	sp, #8
   19e72:	4604      	mov	r4, r0
   19e74:	460d      	mov	r5, r1
   19e76:	4690      	mov	r8, r2
   19e78:	461f      	mov	r7, r3
	struct spi_nrfx_data *dev_data = dev->data;
   19e7a:	6906      	ldr	r6, [r0, #16]
	spi_context_lock(&dev_data->ctx, asynchronous, cb, userdata, spi_cfg);
   19e7c:	9100      	str	r1, [sp, #0]
   19e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19e80:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19e82:	f89d 1020 	ldrb.w	r1, [sp, #32]
   19e86:	4630      	mov	r0, r6
   19e88:	f7ff ffda 	bl	19e40 <spi_context_lock>
	error = configure(dev, spi_cfg);
   19e8c:	4629      	mov	r1, r5
   19e8e:	4620      	mov	r0, r4
   19e90:	f7fa fb3c 	bl	1450c <configure>
	if (error == 0) {
   19e94:	4605      	mov	r5, r0
   19e96:	b138      	cbz	r0, 19ea8 <transceive+0x3c>
	spi_context_release(&dev_data->ctx, error);
   19e98:	4629      	mov	r1, r5
   19e9a:	4630      	mov	r0, r6
   19e9c:	f7ff ffc3 	bl	19e26 <spi_context_release>
}
   19ea0:	4628      	mov	r0, r5
   19ea2:	b002      	add	sp, #8
   19ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dev_data->busy = true;
   19ea8:	2501      	movs	r5, #1
   19eaa:	f886 505c 	strb.w	r5, [r6, #92]	; 0x5c
		spi_context_buffers_setup(&dev_data->ctx, tx_bufs, rx_bufs, 1);
   19eae:	462b      	mov	r3, r5
   19eb0:	463a      	mov	r2, r7
   19eb2:	4641      	mov	r1, r8
   19eb4:	4630      	mov	r0, r6
   19eb6:	f7ff ff42 	bl	19d3e <spi_context_buffers_setup>
	_spi_context_cs_control(ctx, on, false);
   19eba:	2200      	movs	r2, #0
   19ebc:	4629      	mov	r1, r5
   19ebe:	4630      	mov	r0, r6
   19ec0:	f7ff ff6d 	bl	19d9e <_spi_context_cs_control>
		transfer_next_chunk(dev);
   19ec4:	4620      	mov	r0, r4
   19ec6:	f7fa fd3d 	bl	14944 <transfer_next_chunk>
		error = spi_context_wait_for_completion(&dev_data->ctx);
   19eca:	4630      	mov	r0, r6
   19ecc:	f7fa fce4 	bl	14898 <spi_context_wait_for_completion>
   19ed0:	4605      	mov	r5, r0
   19ed2:	e7e1      	b.n	19e98 <transceive+0x2c>

00019ed4 <spi_nrfx_transceive>:
{
   19ed4:	b510      	push	{r4, lr}
   19ed6:	b084      	sub	sp, #16
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
   19ed8:	2400      	movs	r4, #0
   19eda:	9402      	str	r4, [sp, #8]
   19edc:	9401      	str	r4, [sp, #4]
   19ede:	9400      	str	r4, [sp, #0]
   19ee0:	f7ff ffc4 	bl	19e6c <transceive>
}
   19ee4:	b004      	add	sp, #16
   19ee6:	bd10      	pop	{r4, pc}

00019ee8 <irq_connect4>:
#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(4);
   19ee8:	b508      	push	{r3, lr}
   19eea:	2200      	movs	r2, #0
   19eec:	2101      	movs	r1, #1
   19eee:	200a      	movs	r0, #10
   19ef0:	f7ff fb44 	bl	1957c <z_arm_irq_priority_set>
   19ef4:	bd08      	pop	{r3, pc}

00019ef6 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   19ef6:	b510      	push	{r4, lr}
   19ef8:	b082      	sub	sp, #8
   19efa:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   19efc:	aa01      	add	r2, sp, #4
   19efe:	f000 fa70 	bl	1a3e2 <pinctrl_lookup_state>
	if (ret < 0) {
   19f02:	2800      	cmp	r0, #0
   19f04:	db05      	blt.n	19f12 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   19f06:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   19f08:	6822      	ldr	r2, [r4, #0]
   19f0a:	7919      	ldrb	r1, [r3, #4]
   19f0c:	6818      	ldr	r0, [r3, #0]
   19f0e:	f7fb fa73 	bl	153f8 <pinctrl_configure_pins>
}
   19f12:	b002      	add	sp, #8
   19f14:	bd10      	pop	{r4, pc}

00019f16 <spi_nrfx_init>:
{
   19f16:	b538      	push	{r3, r4, r5, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   19f18:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   19f1a:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   19f1c:	2100      	movs	r1, #0
   19f1e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   19f20:	f7ff ffe9 	bl	19ef6 <pinctrl_apply_state>
	if (err < 0) {
   19f24:	2800      	cmp	r0, #0
   19f26:	db0a      	blt.n	19f3e <spi_nrfx_init+0x28>
	dev_config->irq_connect();
   19f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19f2a:	4798      	blx	r3
	err = spi_context_cs_configure_all(&dev_data->ctx);
   19f2c:	4628      	mov	r0, r5
   19f2e:	f7fa fdfb 	bl	14b28 <spi_context_cs_configure_all>
	if (err < 0) {
   19f32:	2800      	cmp	r0, #0
   19f34:	db03      	blt.n	19f3e <spi_nrfx_init+0x28>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   19f36:	4628      	mov	r0, r5
   19f38:	f7ff ff54 	bl	19de4 <spi_context_unlock_unconditionally>
	return 0;
   19f3c:	2000      	movs	r0, #0
}
   19f3e:	bd38      	pop	{r3, r4, r5, pc}

00019f40 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   19f40:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   19f42:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   19f44:	f04f 0120 	mov.w	r1, #32
   19f48:	f3ef 8311 	mrs	r3, BASEPRI
   19f4c:	f381 8812 	msr	BASEPRI_MAX, r1
   19f50:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19f54:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   19f58:	b131      	cbz	r1, 19f68 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19f5a:	2100      	movs	r1, #0
   19f5c:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
   19f60:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19f64:	2101      	movs	r1, #1
   19f66:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
   19f68:	f383 8811 	msr	BASEPRI, r3
   19f6c:	f3bf 8f6f 	isb	sy
}
   19f70:	4770      	bx	lr

00019f72 <uarte_nrfx_isr_int>:
{
   19f72:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   19f74:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
   19f76:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
   19f78:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   19f7c:	f413 7f80 	tst.w	r3, #256	; 0x100
   19f80:	d002      	beq.n	19f88 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19f82:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   19f86:	b9d3      	cbnz	r3, 19fbe <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   19f88:	686b      	ldr	r3, [r5, #4]
   19f8a:	f013 0f10 	tst.w	r3, #16
   19f8e:	d015      	beq.n	19fbc <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
   19f90:	f04f 0220 	mov.w	r2, #32
   19f94:	f3ef 8311 	mrs	r3, BASEPRI
   19f98:	f382 8812 	msr	BASEPRI_MAX, r2
   19f9c:	f3bf 8f6f 	isb	sy
   19fa0:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   19fa4:	b112      	cbz	r2, 19fac <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   19fa6:	2200      	movs	r2, #0
   19fa8:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   19fac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   19fb0:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
   19fb4:	f383 8811 	msr	BASEPRI, r3
   19fb8:	f3bf 8f6f 	isb	sy
}
   19fbc:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   19fbe:	f7ff ffbf 	bl	19f40 <endtx_isr>
   19fc2:	e7e1      	b.n	19f88 <uarte_nrfx_isr_int+0x16>

00019fc4 <uarte_nrfx_configure>:
{
   19fc4:	b570      	push	{r4, r5, r6, lr}
   19fc6:	b082      	sub	sp, #8
   19fc8:	4605      	mov	r5, r0
   19fca:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
   19fcc:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
   19fce:	794b      	ldrb	r3, [r1, #5]
   19fd0:	2b01      	cmp	r3, #1
   19fd2:	d006      	beq.n	19fe2 <uarte_nrfx_configure+0x1e>
   19fd4:	2b03      	cmp	r3, #3
   19fd6:	d011      	beq.n	19ffc <uarte_nrfx_configure+0x38>
   19fd8:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
   19fdc:	4610      	mov	r0, r2
   19fde:	b002      	add	sp, #8
   19fe0:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   19fe2:	2300      	movs	r3, #0
   19fe4:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   19fe8:	79a3      	ldrb	r3, [r4, #6]
   19fea:	2b03      	cmp	r3, #3
   19fec:	d146      	bne.n	1a07c <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
   19fee:	79e3      	ldrb	r3, [r4, #7]
   19ff0:	b143      	cbz	r3, 1a004 <uarte_nrfx_configure+0x40>
   19ff2:	2b01      	cmp	r3, #1
   19ff4:	d015      	beq.n	1a022 <uarte_nrfx_configure+0x5e>
   19ff6:	f06f 0285 	mvn.w	r2, #133	; 0x85
   19ffa:	e7ef      	b.n	19fdc <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   19ffc:	2310      	movs	r3, #16
   19ffe:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   1a002:	e7f1      	b.n	19fe8 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   1a004:	2300      	movs	r3, #0
   1a006:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   1a00a:	2300      	movs	r3, #0
   1a00c:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
   1a010:	7923      	ldrb	r3, [r4, #4]
   1a012:	2b01      	cmp	r3, #1
   1a014:	d02a      	beq.n	1a06c <uarte_nrfx_configure+0xa8>
   1a016:	2b02      	cmp	r3, #2
   1a018:	d024      	beq.n	1a064 <uarte_nrfx_configure+0xa0>
   1a01a:	b133      	cbz	r3, 1a02a <uarte_nrfx_configure+0x66>
   1a01c:	f06f 0285 	mvn.w	r2, #133	; 0x85
   1a020:	e7dc      	b.n	19fdc <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   1a022:	2301      	movs	r3, #1
   1a024:	f88d 3000 	strb.w	r3, [sp]
		break;
   1a028:	e7ef      	b.n	1a00a <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   1a02a:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1a02e:	6821      	ldr	r1, [r4, #0]
   1a030:	4628      	mov	r0, r5
   1a032:	f7fa fdf9 	bl	14c28 <baudrate_set>
   1a036:	4602      	mov	r2, r0
   1a038:	bb18      	cbnz	r0, 1a082 <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
   1a03a:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
   1a03c:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1a03e:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
   1a042:	f89d 0002 	ldrb.w	r0, [sp, #2]
   1a046:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
   1a048:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1a04c:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
   1a04e:	f89d 0000 	ldrb.w	r0, [sp]
   1a052:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1a054:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
   1a058:	3604      	adds	r6, #4
   1a05a:	e894 0003 	ldmia.w	r4, {r0, r1}
   1a05e:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
   1a062:	e7bb      	b.n	19fdc <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1a064:	230e      	movs	r3, #14
   1a066:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
   1a06a:	e7e0      	b.n	1a02e <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1a06c:	230e      	movs	r3, #14
   1a06e:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1a072:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a076:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
   1a07a:	e7d8      	b.n	1a02e <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
   1a07c:	f06f 0285 	mvn.w	r2, #133	; 0x85
   1a080:	e7ac      	b.n	19fdc <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
   1a082:	f06f 0285 	mvn.w	r2, #133	; 0x85
   1a086:	e7a9      	b.n	19fdc <uarte_nrfx_configure+0x18>

0001a088 <uarte_nrfx_config_get>:
{
   1a088:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   1a08a:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   1a08c:	3304      	adds	r3, #4
   1a08e:	e893 0003 	ldmia.w	r3, {r0, r1}
   1a092:	e882 0003 	stmia.w	r2, {r0, r1}
}
   1a096:	2000      	movs	r0, #0
   1a098:	4770      	bx	lr

0001a09a <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   1a09a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1a09c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1a09e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1a0a2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1a0a6:	4770      	bx	lr

0001a0a8 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   1a0a8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1a0aa:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1a0ac:	685b      	ldr	r3, [r3, #4]
   1a0ae:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a0b2:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1a0b6:	b929      	cbnz	r1, 1a0c4 <is_tx_ready+0x1c>
   1a0b8:	b933      	cbnz	r3, 1a0c8 <is_tx_ready+0x20>
   1a0ba:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   1a0be:	b92b      	cbnz	r3, 1a0cc <is_tx_ready+0x24>
   1a0c0:	2000      	movs	r0, #0
   1a0c2:	4770      	bx	lr
   1a0c4:	2001      	movs	r0, #1
   1a0c6:	4770      	bx	lr
   1a0c8:	2000      	movs	r0, #0
   1a0ca:	4770      	bx	lr
   1a0cc:	2001      	movs	r0, #1
}
   1a0ce:	4770      	bx	lr

0001a0d0 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   1a0d0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1a0d2:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1a0d4:	2208      	movs	r2, #8
   1a0d6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1a0da:	4770      	bx	lr

0001a0dc <tx_start>:
{
   1a0dc:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1a0de:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1a0e0:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a0e2:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a0e6:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a0ea:	2200      	movs	r2, #0
   1a0ec:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   1a0f0:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   1a0f4:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   1a0f8:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1a0fc:	685b      	ldr	r3, [r3, #4]
   1a0fe:	f013 0f10 	tst.w	r3, #16
   1a102:	d102      	bne.n	1a10a <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a104:	2301      	movs	r3, #1
   1a106:	60a3      	str	r3, [r4, #8]
}
   1a108:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   1a10a:	2101      	movs	r1, #1
   1a10c:	f7ff ffe0 	bl	1a0d0 <uarte_enable>
    p_reg->INTENSET = mask;
   1a110:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1a114:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1a118:	e7f4      	b.n	1a104 <tx_start+0x28>

0001a11a <uarte_nrfx_poll_in>:
{
   1a11a:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   1a11c:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   1a11e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1a120:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a122:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1a126:	b15a      	cbz	r2, 1a140 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
   1a128:	6962      	ldr	r2, [r4, #20]
   1a12a:	7812      	ldrb	r2, [r2, #0]
   1a12c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a12e:	2000      	movs	r0, #0
   1a130:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1a134:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a138:	2201      	movs	r2, #1
   1a13a:	601a      	str	r2, [r3, #0]
}
   1a13c:	bc10      	pop	{r4}
   1a13e:	4770      	bx	lr
		return -1;
   1a140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a144:	e7fa      	b.n	1a13c <uarte_nrfx_poll_in+0x22>

0001a146 <k_msleep>:
{
   1a146:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   1a148:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1a14c:	17c1      	asrs	r1, r0, #31
   1a14e:	03c9      	lsls	r1, r1, #15
   1a150:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   1a154:	03c0      	lsls	r0, r0, #15
   1a156:	f240 33e7 	movw	r3, #999	; 0x3e7
   1a15a:	18c0      	adds	r0, r0, r3
   1a15c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a160:	f04f 0300 	mov.w	r3, #0
   1a164:	f141 0100 	adc.w	r1, r1, #0
   1a168:	f7f5 fff4 	bl	10154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1a16c:	f7fd fe3e 	bl	17dec <z_impl_k_sleep>
}
   1a170:	bd08      	pop	{r3, pc}

0001a172 <wait_tx_ready>:
{
   1a172:	b570      	push	{r4, r5, r6, lr}
   1a174:	4606      	mov	r6, r0
   1a176:	e013      	b.n	1a1a0 <wait_tx_ready+0x2e>
		if (res) {
   1a178:	b17d      	cbz	r5, 1a19a <wait_tx_ready+0x28>
	__asm__ volatile(
   1a17a:	f04f 0320 	mov.w	r3, #32
   1a17e:	f3ef 8411 	mrs	r4, BASEPRI
   1a182:	f383 8812 	msr	BASEPRI_MAX, r3
   1a186:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1a18a:	4630      	mov	r0, r6
   1a18c:	f7ff ff8c 	bl	1a0a8 <is_tx_ready>
   1a190:	b998      	cbnz	r0, 1a1ba <wait_tx_ready+0x48>
	__asm__ volatile(
   1a192:	f384 8811 	msr	BASEPRI, r4
   1a196:	f3bf 8f6f 	isb	sy
			k_msleep(1);
   1a19a:	2001      	movs	r0, #1
   1a19c:	f7ff ffd3 	bl	1a146 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1a1a0:	2464      	movs	r4, #100	; 0x64
   1a1a2:	4630      	mov	r0, r6
   1a1a4:	f7ff ff80 	bl	1a0a8 <is_tx_ready>
   1a1a8:	4605      	mov	r5, r0
   1a1aa:	2800      	cmp	r0, #0
   1a1ac:	d1e4      	bne.n	1a178 <wait_tx_ready+0x6>
   1a1ae:	2001      	movs	r0, #1
   1a1b0:	f000 f94d 	bl	1a44e <nrfx_busy_wait>
   1a1b4:	3c01      	subs	r4, #1
   1a1b6:	d1f4      	bne.n	1a1a2 <wait_tx_ready+0x30>
   1a1b8:	e7de      	b.n	1a178 <wait_tx_ready+0x6>
}
   1a1ba:	4620      	mov	r0, r4
   1a1bc:	bd70      	pop	{r4, r5, r6, pc}

0001a1be <pinctrl_apply_state>:
{
   1a1be:	b510      	push	{r4, lr}
   1a1c0:	b082      	sub	sp, #8
   1a1c2:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   1a1c4:	aa01      	add	r2, sp, #4
   1a1c6:	f000 f90c 	bl	1a3e2 <pinctrl_lookup_state>
	if (ret < 0) {
   1a1ca:	2800      	cmp	r0, #0
   1a1cc:	db05      	blt.n	1a1da <pinctrl_apply_state+0x1c>
	return pinctrl_apply_state_direct(config, state);
   1a1ce:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1a1d0:	6822      	ldr	r2, [r4, #0]
   1a1d2:	7919      	ldrb	r1, [r3, #4]
   1a1d4:	6818      	ldr	r0, [r3, #0]
   1a1d6:	f7fb f90f 	bl	153f8 <pinctrl_configure_pins>
}
   1a1da:	b002      	add	sp, #8
   1a1dc:	bd10      	pop	{r4, pc}

0001a1de <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   1a1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a1e2:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   1a1e4:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   1a1e6:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1a1e8:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1a1ec:	2100      	movs	r1, #0
   1a1ee:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1a1f2:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1a1f6:	68f8      	ldr	r0, [r7, #12]
   1a1f8:	f7ff ffe1 	bl	1a1be <pinctrl_apply_state>
	if (err < 0) {
   1a1fc:	1e05      	subs	r5, r0, #0
   1a1fe:	db35      	blt.n	1a26c <uarte_instance_init+0x8e>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1a200:	f108 0104 	add.w	r1, r8, #4
   1a204:	4620      	mov	r0, r4
   1a206:	f7ff fedd 	bl	19fc4 <uarte_nrfx_configure>
	if (err) {
   1a20a:	4605      	mov	r5, r0
   1a20c:	bb70      	cbnz	r0, 1a26c <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1a20e:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1a210:	f013 0f02 	tst.w	r3, #2
   1a214:	d12d      	bne.n	1a272 <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1a216:	2308      	movs	r3, #8
   1a218:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   1a21c:	7a3b      	ldrb	r3, [r7, #8]
   1a21e:	b95b      	cbnz	r3, 1a238 <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a220:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   1a224:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   1a228:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1a22c:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1a230:	2301      	movs	r3, #1
   1a232:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a236:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1a238:	687b      	ldr	r3, [r7, #4]
   1a23a:	f013 0f02 	tst.w	r3, #2
   1a23e:	d103      	bne.n	1a248 <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
   1a240:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a244:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1a248:	687b      	ldr	r3, [r7, #4]
   1a24a:	f013 0f10 	tst.w	r3, #16
   1a24e:	d003      	beq.n	1a258 <uarte_instance_init+0x7a>
   1a250:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1a254:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   1a258:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a25c:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a260:	2300      	movs	r3, #0
   1a262:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a266:	2301      	movs	r3, #1
   1a268:	60b3      	str	r3, [r6, #8]
   1a26a:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1a26c:	4628      	mov	r0, r5
   1a26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   1a272:	4641      	mov	r1, r8
   1a274:	4630      	mov	r0, r6
   1a276:	f7fa fdad 	bl	14dd4 <endtx_stoptx_ppi_init>
		if (err < 0) {
   1a27a:	2800      	cmp	r0, #0
   1a27c:	dacb      	bge.n	1a216 <uarte_instance_init+0x38>
			return err;
   1a27e:	4605      	mov	r5, r0
   1a280:	e7f4      	b.n	1a26c <uarte_instance_init+0x8e>

0001a282 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1a282:	b510      	push	{r4, lr}
   1a284:	4604      	mov	r4, r0
   1a286:	2200      	movs	r2, #0
   1a288:	2101      	movs	r1, #1
   1a28a:	2008      	movs	r0, #8
   1a28c:	f7ff f976 	bl	1957c <z_arm_irq_priority_set>
   1a290:	2008      	movs	r0, #8
   1a292:	f7ff f969 	bl	19568 <arch_irq_enable>
   1a296:	2100      	movs	r1, #0
   1a298:	4620      	mov	r0, r4
   1a29a:	f7ff ffa0 	bl	1a1de <uarte_instance_init>
   1a29e:	bd10      	pop	{r4, pc}

0001a2a0 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   1a2a0:	b508      	push	{r3, lr}
   1a2a2:	4608      	mov	r0, r1
	int err = EINVAL;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status = PSA_ERROR_GENERIC_ERROR;

	status = psa_generate_random(buffer, length);
   1a2a4:	4611      	mov	r1, r2
   1a2a6:	f7fb fc15 	bl	15ad4 <psa_generate_random>
	if (status == PSA_SUCCESS) {
   1a2aa:	b900      	cbnz	r0, 1a2ae <entropy_cc3xx_rng_get_entropy+0xe>
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   1a2ac:	bd08      	pop	{r3, pc}
	int err = EINVAL;
   1a2ae:	2016      	movs	r0, #22
	return err;
   1a2b0:	e7fc      	b.n	1a2ac <entropy_cc3xx_rng_get_entropy+0xc>

0001a2b2 <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   1a2b2:	b508      	push	{r3, lr}
	(void)dev;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status;

	status = psa_crypto_init();
   1a2b4:	f000 f8c2 	bl	1a43c <psa_crypto_init>
	if (status != PSA_SUCCESS) {
   1a2b8:	b900      	cbnz	r0, 1a2bc <entropy_cc3xx_rng_init+0xa>
		return -EINVAL;
	}
#endif

	return 0;
}
   1a2ba:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1a2bc:	f06f 0015 	mvn.w	r0, #21
   1a2c0:	e7fb      	b.n	1a2ba <entropy_cc3xx_rng_init+0x8>

0001a2c2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1a2c2:	4770      	bx	lr

0001a2c4 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   1a2c4:	1a40      	subs	r0, r0, r1
}
   1a2c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a2ca:	4770      	bx	lr

0001a2cc <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1a2cc:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1a2d0:	009b      	lsls	r3, r3, #2
   1a2d2:	b29b      	uxth	r3, r3
   1a2d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a2d8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1a2dc:	2200      	movs	r2, #0
   1a2de:	601a      	str	r2, [r3, #0]
   1a2e0:	681b      	ldr	r3, [r3, #0]
}
   1a2e2:	4770      	bx	lr

0001a2e4 <absolute_time_to_cc>:
}
   1a2e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a2e8:	4770      	bx	lr

0001a2ea <full_int_lock>:
	__asm__ volatile(
   1a2ea:	f04f 0320 	mov.w	r3, #32
   1a2ee:	f3ef 8011 	mrs	r0, BASEPRI
   1a2f2:	f383 8812 	msr	BASEPRI_MAX, r3
   1a2f6:	f3bf 8f6f 	isb	sy
}
   1a2fa:	4770      	bx	lr

0001a2fc <full_int_unlock>:
	__asm__ volatile(
   1a2fc:	f380 8811 	msr	BASEPRI, r0
   1a300:	f3bf 8f6f 	isb	sy
}
   1a304:	4770      	bx	lr

0001a306 <set_absolute_alarm>:
{
   1a306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a308:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1a30a:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   1a30e:	f7fa fdb7 	bl	14e80 <get_comparator>
   1a312:	4607      	mov	r7, r0
   1a314:	e019      	b.n	1a34a <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   1a316:	2013      	movs	r0, #19
   1a318:	f000 fc2b 	bl	1ab72 <z_impl_k_busy_wait>
}
   1a31c:	e022      	b.n	1a364 <set_absolute_alarm+0x5e>
		event_clear(chan);
   1a31e:	4630      	mov	r0, r6
   1a320:	f7ff ffd4 	bl	1a2cc <event_clear>
		event_enable(chan);
   1a324:	4630      	mov	r0, r6
   1a326:	f7fa fdb3 	bl	14e90 <event_enable>
		set_comparator(chan, cc_val);
   1a32a:	4629      	mov	r1, r5
   1a32c:	4630      	mov	r0, r6
   1a32e:	f7fa fd9d 	bl	14e6c <set_comparator>
		now2 = counter();
   1a332:	f7fa fdc1 	bl	14eb8 <counter>
	} while ((now2 != now) &&
   1a336:	4284      	cmp	r4, r0
   1a338:	d01e      	beq.n	1a378 <set_absolute_alarm+0x72>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1a33a:	1c81      	adds	r1, r0, #2
   1a33c:	4628      	mov	r0, r5
   1a33e:	f7ff ffc1 	bl	1a2c4 <counter_sub>
	} while ((now2 != now) &&
   1a342:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1a346:	d917      	bls.n	1a378 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   1a348:	462f      	mov	r7, r5
		now = counter();
   1a34a:	f7fa fdb5 	bl	14eb8 <counter>
   1a34e:	4604      	mov	r4, r0
		set_comparator(chan, now);
   1a350:	4601      	mov	r1, r0
   1a352:	4630      	mov	r0, r6
   1a354:	f7fa fd8a 	bl	14e6c <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   1a358:	4621      	mov	r1, r4
   1a35a:	4638      	mov	r0, r7
   1a35c:	f7ff ffb2 	bl	1a2c4 <counter_sub>
   1a360:	2801      	cmp	r0, #1
   1a362:	d0d8      	beq.n	1a316 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1a364:	1ca7      	adds	r7, r4, #2
   1a366:	4639      	mov	r1, r7
   1a368:	4628      	mov	r0, r5
   1a36a:	f7ff ffab 	bl	1a2c4 <counter_sub>
   1a36e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1a372:	d9d4      	bls.n	1a31e <set_absolute_alarm+0x18>
			cc_val = now + 2;
   1a374:	463d      	mov	r5, r7
   1a376:	e7d2      	b.n	1a31e <set_absolute_alarm+0x18>
}
   1a378:	4628      	mov	r0, r5
   1a37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a37c <z_nrf_rtc_timer_capture_task_address_get>:
	if (chan == 0) {
   1a37c:	b138      	cbz	r0, 1a38e <z_nrf_rtc_timer_capture_task_address_get+0x12>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
   1a37e:	3010      	adds	r0, #16
   1a380:	0080      	lsls	r0, r0, #2
   1a382:	b2c0      	uxtb	r0, r0
    return (uint32_t)p_reg + task;
   1a384:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1a388:	f500 30a8 	add.w	r0, r0, #86016	; 0x15000
	return nrf_rtc_task_address_get(RTC, task);
   1a38c:	4770      	bx	lr
		return 0;
   1a38e:	2000      	movs	r0, #0
}
   1a390:	4770      	bx	lr

0001a392 <compare_set>:
{
   1a392:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a394:	b083      	sub	sp, #12
   1a396:	4604      	mov	r4, r0
   1a398:	4617      	mov	r7, r2
   1a39a:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   1a39c:	f7fa fd92 	bl	14ec4 <compare_int_lock>
   1a3a0:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   1a3a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a3a4:	9301      	str	r3, [sp, #4]
   1a3a6:	9b08      	ldr	r3, [sp, #32]
   1a3a8:	9300      	str	r3, [sp, #0]
   1a3aa:	463a      	mov	r2, r7
   1a3ac:	462b      	mov	r3, r5
   1a3ae:	4620      	mov	r0, r4
   1a3b0:	f7fa fe74 	bl	1509c <compare_set_nolocks>
   1a3b4:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   1a3b6:	4631      	mov	r1, r6
   1a3b8:	4620      	mov	r0, r4
   1a3ba:	f7fa fddb 	bl	14f74 <compare_int_unlock>
}
   1a3be:	4628      	mov	r0, r5
   1a3c0:	b003      	add	sp, #12
   1a3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a3c4 <z_nrf_rtc_timer_set>:
{
   1a3c4:	b500      	push	{lr}
   1a3c6:	b083      	sub	sp, #12
	return compare_set(chan, target_time, handler, user_data);
   1a3c8:	9905      	ldr	r1, [sp, #20]
   1a3ca:	9101      	str	r1, [sp, #4]
   1a3cc:	9904      	ldr	r1, [sp, #16]
   1a3ce:	9100      	str	r1, [sp, #0]
   1a3d0:	f7ff ffdf 	bl	1a392 <compare_set>
}
   1a3d4:	b003      	add	sp, #12
   1a3d6:	f85d fb04 	ldr.w	pc, [sp], #4

0001a3da <sys_clock_cycle_get_32>:
{
   1a3da:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1a3dc:	f7fa fe3e 	bl	1505c <z_nrf_rtc_timer_read>
}
   1a3e0:	bd08      	pop	{r3, pc}

0001a3e2 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1a3e2:	b410      	push	{r4}
	*state = &config->states[0];
   1a3e4:	6843      	ldr	r3, [r0, #4]
   1a3e6:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1a3e8:	e001      	b.n	1a3ee <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   1a3ea:	3408      	adds	r4, #8
   1a3ec:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1a3ee:	6814      	ldr	r4, [r2, #0]
   1a3f0:	7a03      	ldrb	r3, [r0, #8]
   1a3f2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   1a3f6:	3b01      	subs	r3, #1
   1a3f8:	f8d0 c004 	ldr.w	ip, [r0, #4]
   1a3fc:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   1a400:	429c      	cmp	r4, r3
   1a402:	d804      	bhi.n	1a40e <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
   1a404:	7963      	ldrb	r3, [r4, #5]
   1a406:	428b      	cmp	r3, r1
   1a408:	d1ef      	bne.n	1a3ea <pinctrl_lookup_state+0x8>
			return 0;
   1a40a:	2000      	movs	r0, #0
   1a40c:	e001      	b.n	1a412 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
   1a40e:	f06f 0001 	mvn.w	r0, #1
}
   1a412:	bc10      	pop	{r4}
   1a414:	4770      	bx	lr

0001a416 <mbox_nrf_register_callback>:
	struct mbox_nrf_data *data = dev->data;
   1a416:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   1a418:	290f      	cmp	r1, #15
   1a41a:	d806      	bhi.n	1a42a <mbox_nrf_register_callback+0x14>
	data->cb[channel] = cb;
   1a41c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   1a420:	3110      	adds	r1, #16
   1a422:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	return 0;
   1a426:	2000      	movs	r0, #0
   1a428:	4770      	bx	lr
		return -EINVAL;
   1a42a:	f06f 0015 	mvn.w	r0, #21
}
   1a42e:	4770      	bx	lr

0001a430 <mbox_nrf_mtu_get>:
}
   1a430:	2000      	movs	r0, #0
   1a432:	4770      	bx	lr

0001a434 <mbox_nrf_max_channels_get>:
}
   1a434:	2010      	movs	r0, #16
   1a436:	4770      	bx	lr

0001a438 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   1a438:	2000      	movs	r0, #0
   1a43a:	4770      	bx	lr

0001a43c <psa_crypto_init>:
}
   1a43c:	2000      	movs	r0, #0
   1a43e:	4770      	bx	lr

0001a440 <SystemInit>:

void SystemInit(void)
{
   1a440:	b508      	push	{r3, lr}
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   1a442:	f7fb fb91 	bl	15b68 <SystemCoreClockUpdate>
}
   1a446:	bd08      	pop	{r3, pc}

0001a448 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   1a448:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   1a44a:	4780      	blx	r0
}
   1a44c:	bd08      	pop	{r3, pc}

0001a44e <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   1a44e:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1a450:	f000 fb8f 	bl	1ab72 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   1a454:	bd08      	pop	{r3, pc}

0001a456 <nrf_clock_is_running>:
    switch (domain)
   1a456:	2903      	cmp	r1, #3
   1a458:	d82f      	bhi.n	1a4ba <nrf_clock_is_running+0x64>
   1a45a:	e8df f001 	tbb	[pc, r1]
   1a45e:	0f02      	.short	0x0f02
   1a460:	291c      	.short	0x291c
            if (p_clk_src != NULL)
   1a462:	b122      	cbz	r2, 1a46e <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1a464:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   1a468:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1a46c:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1a46e:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   1a472:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1a476:	d122      	bne.n	1a4be <nrf_clock_is_running+0x68>
    return false;
   1a478:	2000      	movs	r0, #0
   1a47a:	4770      	bx	lr
            if (p_clk_src != NULL)
   1a47c:	b122      	cbz	r2, 1a488 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1a47e:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   1a482:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1a486:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1a488:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   1a48c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1a490:	d117      	bne.n	1a4c2 <nrf_clock_is_running+0x6c>
    return false;
   1a492:	2000      	movs	r0, #0
   1a494:	4770      	bx	lr
            if (p_clk_src != NULL)
   1a496:	b122      	cbz	r2, 1a4a2 <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   1a498:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
   1a49c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1a4a0:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   1a4a2:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
   1a4a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1a4aa:	d10c      	bne.n	1a4c6 <nrf_clock_is_running+0x70>
    return false;
   1a4ac:	2000      	movs	r0, #0
   1a4ae:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1a4b0:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
   1a4b4:	f3c0 4000 	ubfx	r0, r0, #16, #1
   1a4b8:	4770      	bx	lr
    switch (domain)
   1a4ba:	2000      	movs	r0, #0
   1a4bc:	4770      	bx	lr
                return true;
   1a4be:	2001      	movs	r0, #1
   1a4c0:	4770      	bx	lr
                return true;
   1a4c2:	2001      	movs	r0, #1
   1a4c4:	4770      	bx	lr
                return true;
   1a4c6:	2001      	movs	r0, #1
}
   1a4c8:	4770      	bx	lr

0001a4ca <clock_initial_lfclksrc_get>:
}
   1a4ca:	2001      	movs	r0, #1
   1a4cc:	4770      	bx	lr

0001a4ce <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
   1a4ce:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1a4d0:	2005      	movs	r0, #5
   1a4d2:	f7f8 f881 	bl	125d8 <arch_irq_is_enabled>
   1a4d6:	b100      	cbz	r0, 1a4da <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
   1a4d8:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1a4da:	2005      	movs	r0, #5
   1a4dc:	f7ff f844 	bl	19568 <arch_irq_enable>
}
   1a4e0:	e7fa      	b.n	1a4d8 <nrfx_power_clock_irq_init+0xa>

0001a4e2 <clock_lfclksrc_tweak>:
{
   1a4e2:	b538      	push	{r3, r4, r5, lr}
   1a4e4:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
   1a4e6:	7803      	ldrb	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1a4e8:	2b02      	cmp	r3, #2
   1a4ea:	d006      	beq.n	1a4fa <clock_lfclksrc_tweak+0x18>
   1a4ec:	2b01      	cmp	r3, #1
   1a4ee:	d000      	beq.n	1a4f2 <clock_lfclksrc_tweak+0x10>
   1a4f0:	2300      	movs	r3, #0
    if (!is_correct_clk)
   1a4f2:	461d      	mov	r5, r3
   1a4f4:	b11b      	cbz	r3, 1a4fe <clock_lfclksrc_tweak+0x1c>
}
   1a4f6:	4628      	mov	r0, r5
   1a4f8:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1a4fa:	2301      	movs	r3, #1
   1a4fc:	e7f9      	b.n	1a4f2 <clock_lfclksrc_tweak+0x10>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1a4fe:	2000      	movs	r0, #0
   1a500:	f7fb fb84 	bl	15c0c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1a504:	f7ff ffe1 	bl	1a4ca <clock_initial_lfclksrc_get>
   1a508:	7020      	strb	r0, [r4, #0]
   1a50a:	e7f4      	b.n	1a4f6 <clock_lfclksrc_tweak+0x14>

0001a50c <nrfx_clock_stop>:
{
   1a50c:	b508      	push	{r3, lr}
    clock_stop(domain);
   1a50e:	f7fb fb7d 	bl	15c0c <clock_stop>
}
   1a512:	bd08      	pop	{r3, pc}

0001a514 <nrf_gpiote_event_configure>:
{
   1a514:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1a516:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   1a51a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1a51e:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
   1a522:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   1a526:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a52a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1a52e:	0212      	lsls	r2, r2, #8
   1a530:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   1a534:	041b      	lsls	r3, r3, #16
   1a536:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a53a:	431a      	orrs	r2, r3
   1a53c:	4314      	orrs	r4, r2
   1a53e:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   1a542:	bc10      	pop	{r4}
   1a544:	4770      	bx	lr

0001a546 <nrf_gpiote_task_configure>:
{
   1a546:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1a548:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   1a54c:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1a550:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
   1a554:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
   1a558:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a55c:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1a560:	0212      	lsls	r2, r2, #8
   1a562:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1a566:	041b      	lsls	r3, r3, #16
   1a568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a56c:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1a56e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1a572:	051b      	lsls	r3, r3, #20
   1a574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1a578:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a57a:	4314      	orrs	r4, r2
   1a57c:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   1a580:	bc10      	pop	{r4}
   1a582:	4770      	bx	lr

0001a584 <nrf_gpio_cfg_sense_set>:
{
   1a584:	b500      	push	{lr}
   1a586:	b085      	sub	sp, #20
   1a588:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1a58c:	f10d 030f 	add.w	r3, sp, #15
   1a590:	9301      	str	r3, [sp, #4]
   1a592:	2100      	movs	r1, #0
   1a594:	9100      	str	r1, [sp, #0]
   1a596:	460b      	mov	r3, r1
   1a598:	460a      	mov	r2, r1
   1a59a:	f7fb fc97 	bl	15ecc <nrf_gpio_reconfigure>
}
   1a59e:	b005      	add	sp, #20
   1a5a0:	f85d fb04 	ldr.w	pc, [sp], #4

0001a5a4 <pin_is_task_output>:
{
   1a5a4:	b510      	push	{r4, lr}
   1a5a6:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1a5a8:	f7fb fd42 	bl	16030 <pin_is_output>
   1a5ac:	b128      	cbz	r0, 1a5ba <pin_is_task_output+0x16>
   1a5ae:	4620      	mov	r0, r4
   1a5b0:	f7fb fd28 	bl	16004 <pin_in_use_by_te>
   1a5b4:	b118      	cbz	r0, 1a5be <pin_is_task_output+0x1a>
   1a5b6:	2001      	movs	r0, #1
   1a5b8:	e000      	b.n	1a5bc <pin_is_task_output+0x18>
   1a5ba:	2000      	movs	r0, #0
}
   1a5bc:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1a5be:	2000      	movs	r0, #0
   1a5c0:	e7fc      	b.n	1a5bc <pin_is_task_output+0x18>

0001a5c2 <pin_is_input>:
{
   1a5c2:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   1a5c4:	f7fb fd34 	bl	16030 <pin_is_output>
   1a5c8:	f080 0001 	eor.w	r0, r0, #1
}
   1a5cc:	b2c0      	uxtb	r0, r0
   1a5ce:	bd08      	pop	{r3, pc}

0001a5d0 <gpiote_polarity_to_trigger>:
}
   1a5d0:	4770      	bx	lr

0001a5d2 <gpiote_trigger_to_polarity>:
}
   1a5d2:	4770      	bx	lr

0001a5d4 <is_level>:
}
   1a5d4:	2803      	cmp	r0, #3
   1a5d6:	bf94      	ite	ls
   1a5d8:	2000      	movls	r0, #0
   1a5da:	2001      	movhi	r0, #1
   1a5dc:	4770      	bx	lr

0001a5de <latch_pending_read_and_check>:
{
   1a5de:	b510      	push	{r4, lr}
   1a5e0:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   1a5e2:	4602      	mov	r2, r0
   1a5e4:	2102      	movs	r1, #2
   1a5e6:	2000      	movs	r0, #0
   1a5e8:	f7fb fce2 	bl	15fb0 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1a5ec:	2300      	movs	r3, #0
   1a5ee:	2b01      	cmp	r3, #1
   1a5f0:	d804      	bhi.n	1a5fc <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
   1a5f2:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1a5f6:	b91a      	cbnz	r2, 1a600 <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1a5f8:	3301      	adds	r3, #1
   1a5fa:	e7f8      	b.n	1a5ee <latch_pending_read_and_check+0x10>
    return false;
   1a5fc:	2000      	movs	r0, #0
}
   1a5fe:	bd10      	pop	{r4, pc}
            return true;
   1a600:	2001      	movs	r0, #1
   1a602:	e7fc      	b.n	1a5fe <latch_pending_read_and_check+0x20>

0001a604 <nrf_spim_configure>:
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   1a604:	3a00      	subs	r2, #0
   1a606:	bf18      	it	ne
   1a608:	2201      	movne	r2, #1
    switch (spi_mode)
   1a60a:	2902      	cmp	r1, #2
   1a60c:	d009      	beq.n	1a622 <nrf_spim_configure+0x1e>
   1a60e:	2903      	cmp	r1, #3
   1a610:	d00a      	beq.n	1a628 <nrf_spim_configure+0x24>
   1a612:	2901      	cmp	r1, #1
   1a614:	d002      	beq.n	1a61c <nrf_spim_configure+0x18>
    p_reg->CONFIG = config;
   1a616:	f8c0 2554 	str.w	r2, [r0, #1364]	; 0x554
}
   1a61a:	4770      	bx	lr
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1a61c:	f042 0202 	orr.w	r2, r2, #2
        break;
   1a620:	e7f9      	b.n	1a616 <nrf_spim_configure+0x12>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1a622:	f042 0204 	orr.w	r2, r2, #4
        break;
   1a626:	e7f6      	b.n	1a616 <nrf_spim_configure+0x12>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1a628:	f042 0206 	orr.w	r2, r2, #6
        break;
   1a62c:	e7f3      	b.n	1a616 <nrf_spim_configure+0x12>

0001a62e <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   1a62e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1a632:	d003      	beq.n	1a63c <spim_pin_uninit+0xe>
{
   1a634:	b508      	push	{r3, lr}
    nrf_gpio_cfg_default(pin);
   1a636:	f7fc f94b 	bl	168d0 <nrf_gpio_cfg_default>
}
   1a63a:	bd08      	pop	{r3, pc}
   1a63c:	4770      	bx	lr

0001a63e <set_ss_pin_state>:
{
   1a63e:	b508      	push	{r3, lr}
    if (p_cb->use_hw_ss)
   1a640:	7f83      	ldrb	r3, [r0, #30]
   1a642:	f013 0f04 	tst.w	r3, #4
   1a646:	d109      	bne.n	1a65c <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1a648:	7fc0      	ldrb	r0, [r0, #31]
   1a64a:	28ff      	cmp	r0, #255	; 0xff
   1a64c:	d006      	beq.n	1a65c <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   1a64e:	f013 0f02 	tst.w	r3, #2
   1a652:	d101      	bne.n	1a658 <set_ss_pin_state+0x1a>
                           p_cb->ss_active_high ? active : !active);
   1a654:	f081 0101 	eor.w	r1, r1, #1
        nrf_gpio_pin_write(p_cb->ss_pin,
   1a658:	f7fc f950 	bl	168fc <nrf_gpio_pin_write>
}
   1a65c:	bd08      	pop	{r3, pc}

0001a65e <finish_transfer>:
{
   1a65e:	b510      	push	{r4, lr}
   1a660:	4604      	mov	r4, r0
    set_ss_pin_state(p_cb, false);
   1a662:	2100      	movs	r1, #0
   1a664:	f7ff ffeb 	bl	1a63e <set_ss_pin_state>
    p_cb->transfer_in_progress = false;
   1a668:	2300      	movs	r3, #0
   1a66a:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   1a66c:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1a66e:	4620      	mov	r0, r4
   1a670:	f850 3b08 	ldr.w	r3, [r0], #8
   1a674:	6861      	ldr	r1, [r4, #4]
   1a676:	4798      	blx	r3
}
   1a678:	bd10      	pop	{r4, pc}

0001a67a <spim_int_enable>:
    if (!enable)
   1a67a:	b919      	cbnz	r1, 1a684 <spim_int_enable+0xa>
    p_reg->INTENCLR = mask;
   1a67c:	2340      	movs	r3, #64	; 0x40
   1a67e:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1a682:	4770      	bx	lr
    p_reg->INTENSET = mask;
   1a684:	2340      	movs	r3, #64	; 0x40
   1a686:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
}
   1a68a:	4770      	bx	lr

0001a68c <spim_list_enable_handle>:
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   1a68c:	f011 0f01 	tst.w	r1, #1
   1a690:	d009      	beq.n	1a6a6 <spim_list_enable_handle+0x1a>
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   1a692:	2301      	movs	r3, #1
   1a694:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   1a698:	f011 0f02 	tst.w	r1, #2
   1a69c:	d007      	beq.n	1a6ae <spim_list_enable_handle+0x22>
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   1a69e:	2301      	movs	r3, #1
   1a6a0:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   1a6a4:	4770      	bx	lr
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   1a6a6:	2300      	movs	r3, #0
   1a6a8:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
}
   1a6ac:	e7f4      	b.n	1a698 <spim_list_enable_handle+0xc>

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   1a6ae:	2300      	movs	r3, #0
   1a6b0:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   1a6b4:	4770      	bx	lr

0001a6b6 <irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a6b6:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1a6ba:	b902      	cbnz	r2, 1a6be <irq_handler+0x8>
   1a6bc:	4770      	bx	lr
{
   1a6be:	b508      	push	{r3, lr}
   1a6c0:	4603      	mov	r3, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a6c2:	2200      	movs	r2, #0
   1a6c4:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   1a6c8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
        finish_transfer(p_cb);
   1a6cc:	4608      	mov	r0, r1
   1a6ce:	f7ff ffc6 	bl	1a65e <finish_transfer>
}
   1a6d2:	bd08      	pop	{r3, pc}

0001a6d4 <spim_abort>:
{
   1a6d4:	b570      	push	{r4, r5, r6, lr}
   1a6d6:	4605      	mov	r5, r0
   1a6d8:	460e      	mov	r6, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a6da:	2301      	movs	r3, #1
   1a6dc:	6143      	str	r3, [r0, #20]
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   1a6de:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a6e0:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   1a6e4:	b923      	cbnz	r3, 1a6f0 <spim_abort+0x1c>
   1a6e6:	2001      	movs	r0, #1
   1a6e8:	f7ff feb1 	bl	1a44e <nrfx_busy_wait>
   1a6ec:	3c01      	subs	r4, #1
   1a6ee:	d1f7      	bne.n	1a6e0 <spim_abort+0xc>
    p_cb->transfer_in_progress = false;
   1a6f0:	2300      	movs	r3, #0
   1a6f2:	7773      	strb	r3, [r6, #29]
}
   1a6f4:	bd70      	pop	{r4, r5, r6, pc}

0001a6f6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1a6f6:	b160      	cbz	r0, 1a712 <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1a6f8:	68c3      	ldr	r3, [r0, #12]
   1a6fa:	785a      	ldrb	r2, [r3, #1]
   1a6fc:	f012 0f01 	tst.w	r2, #1
   1a700:	d003      	beq.n	1a70a <z_device_is_ready+0x14>
   1a702:	781b      	ldrb	r3, [r3, #0]
   1a704:	b11b      	cbz	r3, 1a70e <z_device_is_ready+0x18>
   1a706:	2000      	movs	r0, #0
   1a708:	4770      	bx	lr
   1a70a:	2000      	movs	r0, #0
   1a70c:	4770      	bx	lr
   1a70e:	2001      	movs	r0, #1
   1a710:	4770      	bx	lr
		return false;
   1a712:	2000      	movs	r0, #0
}
   1a714:	4770      	bx	lr

0001a716 <z_early_memset>:
{
   1a716:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
   1a718:	f7ff f837 	bl	1978a <memset>
}
   1a71c:	bd08      	pop	{r3, pc}

0001a71e <z_early_memcpy>:
{
   1a71e:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
   1a720:	f7ff f804 	bl	1972c <memcpy>
}
   1a724:	bd08      	pop	{r3, pc}

0001a726 <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1a726:	3207      	adds	r2, #7
   1a728:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   1a72c:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
   1a730:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   1a734:	2300      	movs	r3, #0
   1a736:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
   1a73a:	1888      	adds	r0, r1, r2
   1a73c:	4770      	bx	lr

0001a73e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1a73e:	f3ef 8005 	mrs	r0, IPSR
}
   1a742:	3800      	subs	r0, #0
   1a744:	bf18      	it	ne
   1a746:	2001      	movne	r0, #1
   1a748:	4770      	bx	lr

0001a74a <k_thread_name_get>:
}
   1a74a:	3074      	adds	r0, #116	; 0x74
   1a74c:	4770      	bx	lr

0001a74e <z_impl_k_thread_start>:
{
   1a74e:	b508      	push	{r3, lr}
	z_sched_start(thread);
   1a750:	f7fd f96e 	bl	17a30 <z_sched_start>
}
   1a754:	bd08      	pop	{r3, pc}

0001a756 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   1a756:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   1a758:	2400      	movs	r4, #0
   1a75a:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   1a75c:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1a75e:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   1a760:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   1a762:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   1a764:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   1a766:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   1a768:	bc10      	pop	{r4}
   1a76a:	4770      	bx	lr

0001a76c <z_impl_k_thread_create>:
{
   1a76c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a76e:	b087      	sub	sp, #28
   1a770:	4604      	mov	r4, r0
   1a772:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1a774:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a776:	2700      	movs	r7, #0
   1a778:	9705      	str	r7, [sp, #20]
   1a77a:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1a77c:	9704      	str	r7, [sp, #16]
   1a77e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1a780:	9703      	str	r7, [sp, #12]
   1a782:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1a784:	9702      	str	r7, [sp, #8]
   1a786:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1a788:	9701      	str	r7, [sp, #4]
   1a78a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1a78c:	9700      	str	r7, [sp, #0]
   1a78e:	f7fc fdcf 	bl	17330 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1a792:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1a796:	bf08      	it	eq
   1a798:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1a79c:	d102      	bne.n	1a7a4 <z_impl_k_thread_create+0x38>
}
   1a79e:	4620      	mov	r0, r4
   1a7a0:	b007      	add	sp, #28
   1a7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   1a7a4:	4632      	mov	r2, r6
   1a7a6:	462b      	mov	r3, r5
   1a7a8:	4620      	mov	r0, r4
   1a7aa:	f7fc fdb3 	bl	17314 <schedule_new_thread>
   1a7ae:	e7f6      	b.n	1a79e <z_impl_k_thread_create+0x32>

0001a7b0 <z_pm_save_idle_exit>:
{
   1a7b0:	b508      	push	{r3, lr}
	pm_system_resume();
   1a7b2:	f7f7 fc9f 	bl	120f4 <pm_system_resume>
	sys_clock_idle_exit();
   1a7b6:	f7ff fd84 	bl	1a2c2 <sys_clock_idle_exit>
}
   1a7ba:	bd08      	pop	{r3, pc}

0001a7bc <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   1a7bc:	4288      	cmp	r0, r1
   1a7be:	da00      	bge.n	1a7c2 <new_prio_for_inheritance+0x6>
   1a7c0:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1a7c2:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   1a7c6:	db01      	blt.n	1a7cc <new_prio_for_inheritance+0x10>
   1a7c8:	4608      	mov	r0, r1
   1a7ca:	4770      	bx	lr
   1a7cc:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   1a7d0:	4770      	bx	lr

0001a7d2 <adjust_owner_prio>:
{
   1a7d2:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   1a7d4:	6880      	ldr	r0, [r0, #8]
   1a7d6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1a7da:	428b      	cmp	r3, r1
   1a7dc:	d101      	bne.n	1a7e2 <adjust_owner_prio+0x10>
	return false;
   1a7de:	2000      	movs	r0, #0
}
   1a7e0:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   1a7e2:	f7fd f97b 	bl	17adc <z_set_prio>
   1a7e6:	e7fb      	b.n	1a7e0 <adjust_owner_prio+0xe>

0001a7e8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1a7e8:	b13a      	cbz	r2, 1a7fa <z_impl_k_sem_init+0x12>
   1a7ea:	428a      	cmp	r2, r1
   1a7ec:	d308      	bcc.n	1a800 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
   1a7ee:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   1a7f0:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   1a7f2:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   1a7f4:	6040      	str	r0, [r0, #4]
	return 0;
   1a7f6:	2000      	movs	r0, #0
   1a7f8:	4770      	bx	lr
		return -EINVAL;
   1a7fa:	f06f 0015 	mvn.w	r0, #21
   1a7fe:	4770      	bx	lr
   1a800:	f06f 0015 	mvn.w	r0, #21
}
   1a804:	4770      	bx	lr

0001a806 <thread_active_elsewhere>:
}
   1a806:	2000      	movs	r0, #0
   1a808:	4770      	bx	lr

0001a80a <pended_on_thread>:
}
   1a80a:	6880      	ldr	r0, [r0, #8]
   1a80c:	4770      	bx	lr

0001a80e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1a80e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1a812:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1a816:	4283      	cmp	r3, r0
   1a818:	d001      	beq.n	1a81e <z_sched_prio_cmp+0x10>
		return b2 - b1;
   1a81a:	1ac0      	subs	r0, r0, r3
   1a81c:	4770      	bx	lr
	return 0;
   1a81e:	2000      	movs	r0, #0
}
   1a820:	4770      	bx	lr

0001a822 <z_unpend_thread_no_timeout>:
{
   1a822:	b538      	push	{r3, r4, r5, lr}
   1a824:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   1a826:	2300      	movs	r3, #0
	__asm__ volatile(
   1a828:	f04f 0220 	mov.w	r2, #32
   1a82c:	f3ef 8411 	mrs	r4, BASEPRI
   1a830:	f382 8812 	msr	BASEPRI_MAX, r2
   1a834:	f3bf 8f6f 	isb	sy
   1a838:	e007      	b.n	1a84a <z_unpend_thread_no_timeout+0x28>
		unpend_thread_no_timeout(thread);
   1a83a:	4628      	mov	r0, r5
   1a83c:	f000 f82a 	bl	1a894 <unpend_thread_no_timeout>
	__asm__ volatile(
   1a840:	f384 8811 	msr	BASEPRI, r4
   1a844:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1a848:	2301      	movs	r3, #1
   1a84a:	2b00      	cmp	r3, #0
   1a84c:	d0f5      	beq.n	1a83a <z_unpend_thread_no_timeout+0x18>
}
   1a84e:	bd38      	pop	{r3, r4, r5, pc}

0001a850 <z_reschedule_irqlock>:
{
   1a850:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1a852:	4603      	mov	r3, r0
   1a854:	b928      	cbnz	r0, 1a862 <z_reschedule_irqlock+0x12>
   1a856:	f3ef 8205 	mrs	r2, IPSR
   1a85a:	b912      	cbnz	r2, 1a862 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   1a85c:	f7f7 feea 	bl	12634 <arch_swap>
	return ret;
   1a860:	e003      	b.n	1a86a <z_reschedule_irqlock+0x1a>
   1a862:	f383 8811 	msr	BASEPRI, r3
   1a866:	f3bf 8f6f 	isb	sy
}
   1a86a:	bd08      	pop	{r3, pc}

0001a86c <z_reschedule_unlocked>:
{
   1a86c:	b508      	push	{r3, lr}
	__asm__ volatile(
   1a86e:	f04f 0320 	mov.w	r3, #32
   1a872:	f3ef 8011 	mrs	r0, BASEPRI
   1a876:	f383 8812 	msr	BASEPRI_MAX, r3
   1a87a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1a87e:	f7ff ffe7 	bl	1a850 <z_reschedule_irqlock>
}
   1a882:	bd08      	pop	{r3, pc}

0001a884 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1a884:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   1a886:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
   1a888:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1a88a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a88c:	2300      	movs	r3, #0
   1a88e:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   1a890:	604b      	str	r3, [r1, #4]
}
   1a892:	4770      	bx	lr

0001a894 <unpend_thread_no_timeout>:
{
   1a894:	b510      	push	{r4, lr}
   1a896:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1a898:	f7ff ffb7 	bl	1a80a <pended_on_thread>
   1a89c:	4621      	mov	r1, r4
   1a89e:	f7ff fff1 	bl	1a884 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1a8a2:	7b63      	ldrb	r3, [r4, #13]
   1a8a4:	f023 0302 	bic.w	r3, r3, #2
   1a8a8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1a8aa:	2300      	movs	r3, #0
   1a8ac:	60a3      	str	r3, [r4, #8]
}
   1a8ae:	bd10      	pop	{r4, pc}

0001a8b0 <z_priq_dumb_best>:
{
   1a8b0:	4603      	mov	r3, r0
	return list->head == list;
   1a8b2:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a8b4:	4283      	cmp	r3, r0
   1a8b6:	d000      	beq.n	1a8ba <z_priq_dumb_best+0xa>
}
   1a8b8:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1a8ba:	2000      	movs	r0, #0
	return thread;
   1a8bc:	e7fc      	b.n	1a8b8 <z_priq_dumb_best+0x8>

0001a8be <z_ready_thread>:
{
   1a8be:	b538      	push	{r3, r4, r5, lr}
   1a8c0:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   1a8c2:	2300      	movs	r3, #0
   1a8c4:	f04f 0220 	mov.w	r2, #32
   1a8c8:	f3ef 8511 	mrs	r5, BASEPRI
   1a8cc:	f382 8812 	msr	BASEPRI_MAX, r2
   1a8d0:	f3bf 8f6f 	isb	sy
   1a8d4:	e004      	b.n	1a8e0 <z_ready_thread+0x22>
	__asm__ volatile(
   1a8d6:	f385 8811 	msr	BASEPRI, r5
   1a8da:	f3bf 8f6f 	isb	sy
   1a8de:	2301      	movs	r3, #1
   1a8e0:	b943      	cbnz	r3, 1a8f4 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   1a8e2:	4620      	mov	r0, r4
   1a8e4:	f7ff ff8f 	bl	1a806 <thread_active_elsewhere>
   1a8e8:	2800      	cmp	r0, #0
   1a8ea:	d1f4      	bne.n	1a8d6 <z_ready_thread+0x18>
			ready_thread(thread);
   1a8ec:	4620      	mov	r0, r4
   1a8ee:	f7fd f863 	bl	179b8 <ready_thread>
   1a8f2:	e7f0      	b.n	1a8d6 <z_ready_thread+0x18>
}
   1a8f4:	bd38      	pop	{r3, r4, r5, pc}

0001a8f6 <z_thread_timeout>:
{
   1a8f6:	b570      	push	{r4, r5, r6, lr}
   1a8f8:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   1a8fa:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
   1a8fe:	2300      	movs	r3, #0
	__asm__ volatile(
   1a900:	f04f 0220 	mov.w	r2, #32
   1a904:	f3ef 8511 	mrs	r5, BASEPRI
   1a908:	f382 8812 	msr	BASEPRI_MAX, r2
   1a90c:	f3bf 8f6f 	isb	sy
   1a910:	e011      	b.n	1a936 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a912:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1a916:	f023 0204 	bic.w	r2, r3, #4
   1a91a:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1a91e:	f023 0314 	bic.w	r3, r3, #20
   1a922:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   1a926:	4630      	mov	r0, r6
   1a928:	f7fd f846 	bl	179b8 <ready_thread>
	__asm__ volatile(
   1a92c:	f385 8811 	msr	BASEPRI, r5
   1a930:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1a934:	2301      	movs	r3, #1
   1a936:	b963      	cbnz	r3, 1a952 <z_thread_timeout+0x5c>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   1a938:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   1a93c:	f013 0f28 	tst.w	r3, #40	; 0x28
   1a940:	d1f4      	bne.n	1a92c <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
   1a942:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1a946:	2b00      	cmp	r3, #0
   1a948:	d0e3      	beq.n	1a912 <z_thread_timeout+0x1c>
				unpend_thread_no_timeout(thread);
   1a94a:	4630      	mov	r0, r6
   1a94c:	f7ff ffa2 	bl	1a894 <unpend_thread_no_timeout>
   1a950:	e7df      	b.n	1a912 <z_thread_timeout+0x1c>
}
   1a952:	bd70      	pop	{r4, r5, r6, pc}

0001a954 <unpend_all>:
{
   1a954:	b538      	push	{r3, r4, r5, lr}
   1a956:	4605      	mov	r5, r0
	return list->head == list;
   1a958:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a95a:	42a5      	cmp	r5, r4
   1a95c:	d00e      	beq.n	1a97c <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1a95e:	b16c      	cbz	r4, 1a97c <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
   1a960:	4620      	mov	r0, r4
   1a962:	f7ff ff97 	bl	1a894 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1a966:	f104 0018 	add.w	r0, r4, #24
   1a96a:	f000 f89a 	bl	1aaa2 <z_abort_timeout>
   1a96e:	2300      	movs	r3, #0
   1a970:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		ready_thread(thread);
   1a974:	4620      	mov	r0, r4
   1a976:	f7fd f81f 	bl	179b8 <ready_thread>
   1a97a:	e7ed      	b.n	1a958 <unpend_all+0x4>
}
   1a97c:	bd38      	pop	{r3, r4, r5, pc}

0001a97e <add_to_waitq_locked>:
{
   1a97e:	b570      	push	{r4, r5, r6, lr}
   1a980:	4605      	mov	r5, r0
   1a982:	460e      	mov	r6, r1
	unready_thread(thread);
   1a984:	f7fd f872 	bl	17a6c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1a988:	7b6b      	ldrb	r3, [r5, #13]
   1a98a:	f043 0302 	orr.w	r3, r3, #2
   1a98e:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   1a990:	b1fe      	cbz	r6, 1a9d2 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
   1a992:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   1a994:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a996:	42a6      	cmp	r6, r4
   1a998:	d108      	bne.n	1a9ac <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a99a:	2400      	movs	r4, #0
   1a99c:	e006      	b.n	1a9ac <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
   1a99e:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1a9a0:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1a9a2:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1a9a4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1a9a6:	6065      	str	r5, [r4, #4]
}
   1a9a8:	e013      	b.n	1a9d2 <add_to_waitq_locked+0x54>
   1a9aa:	2400      	movs	r4, #0
   1a9ac:	b164      	cbz	r4, 1a9c8 <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1a9ae:	4621      	mov	r1, r4
   1a9b0:	4628      	mov	r0, r5
   1a9b2:	f7ff ff2c 	bl	1a80e <z_sched_prio_cmp>
   1a9b6:	2800      	cmp	r0, #0
   1a9b8:	dcf1      	bgt.n	1a99e <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1a9ba:	2c00      	cmp	r4, #0
   1a9bc:	d0f6      	beq.n	1a9ac <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
   1a9be:	6873      	ldr	r3, [r6, #4]
   1a9c0:	429c      	cmp	r4, r3
   1a9c2:	d0f2      	beq.n	1a9aa <add_to_waitq_locked+0x2c>
   1a9c4:	6824      	ldr	r4, [r4, #0]
   1a9c6:	e7f1      	b.n	1a9ac <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
   1a9c8:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   1a9ca:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   1a9cc:	606b      	str	r3, [r5, #4]
	tail->next = node;
   1a9ce:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1a9d0:	6075      	str	r5, [r6, #4]
}
   1a9d2:	bd70      	pop	{r4, r5, r6, pc}

0001a9d4 <pend_locked>:
{
   1a9d4:	b570      	push	{r4, r5, r6, lr}
   1a9d6:	4604      	mov	r4, r0
   1a9d8:	4616      	mov	r6, r2
   1a9da:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
   1a9dc:	f7ff ffcf 	bl	1a97e <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   1a9e0:	4632      	mov	r2, r6
   1a9e2:	462b      	mov	r3, r5
   1a9e4:	4620      	mov	r0, r4
   1a9e6:	f7fc fe9b 	bl	17720 <add_thread_timeout>
}
   1a9ea:	bd70      	pop	{r4, r5, r6, pc}

0001a9ec <z_unpend1_no_timeout>:
{
   1a9ec:	b570      	push	{r4, r5, r6, lr}
   1a9ee:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   1a9f0:	2300      	movs	r3, #0
	__asm__ volatile(
   1a9f2:	f04f 0220 	mov.w	r2, #32
   1a9f6:	f3ef 8511 	mrs	r5, BASEPRI
   1a9fa:	f382 8812 	msr	BASEPRI_MAX, r2
   1a9fe:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   1aa02:	461c      	mov	r4, r3
   1aa04:	e004      	b.n	1aa10 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
   1aa06:	f385 8811 	msr	BASEPRI, r5
   1aa0a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1aa0e:	2301      	movs	r3, #1
   1aa10:	b943      	cbnz	r3, 1aa24 <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
   1aa12:	4630      	mov	r0, r6
   1aa14:	f7ff ff4c 	bl	1a8b0 <z_priq_dumb_best>
		if (thread != NULL) {
   1aa18:	4604      	mov	r4, r0
   1aa1a:	2800      	cmp	r0, #0
   1aa1c:	d0f3      	beq.n	1aa06 <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   1aa1e:	f7ff ff39 	bl	1a894 <unpend_thread_no_timeout>
   1aa22:	e7f0      	b.n	1aa06 <z_unpend1_no_timeout+0x1a>
}
   1aa24:	4620      	mov	r0, r4
   1aa26:	bd70      	pop	{r4, r5, r6, pc}

0001aa28 <z_unpend_first_thread>:
{
   1aa28:	b570      	push	{r4, r5, r6, lr}
   1aa2a:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   1aa2c:	2300      	movs	r3, #0
	__asm__ volatile(
   1aa2e:	f04f 0220 	mov.w	r2, #32
   1aa32:	f3ef 8511 	mrs	r5, BASEPRI
   1aa36:	f382 8812 	msr	BASEPRI_MAX, r2
   1aa3a:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   1aa3e:	461c      	mov	r4, r3
   1aa40:	e004      	b.n	1aa4c <z_unpend_first_thread+0x24>
	__asm__ volatile(
   1aa42:	f385 8811 	msr	BASEPRI, r5
   1aa46:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1aa4a:	2301      	movs	r3, #1
   1aa4c:	b963      	cbnz	r3, 1aa68 <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
   1aa4e:	4630      	mov	r0, r6
   1aa50:	f7ff ff2e 	bl	1a8b0 <z_priq_dumb_best>
		if (thread != NULL) {
   1aa54:	4604      	mov	r4, r0
   1aa56:	2800      	cmp	r0, #0
   1aa58:	d0f3      	beq.n	1aa42 <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
   1aa5a:	f7ff ff1b 	bl	1a894 <unpend_thread_no_timeout>
   1aa5e:	f104 0018 	add.w	r0, r4, #24
   1aa62:	f000 f81e 	bl	1aaa2 <z_abort_timeout>
   1aa66:	e7ec      	b.n	1aa42 <z_unpend_first_thread+0x1a>
}
   1aa68:	4620      	mov	r0, r4
   1aa6a:	bd70      	pop	{r4, r5, r6, pc}

0001aa6c <init_ready_q>:
	sys_dlist_init(&rq->runq);
   1aa6c:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   1aa6e:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   1aa70:	6083      	str	r3, [r0, #8]
}
   1aa72:	4770      	bx	lr

0001aa74 <remove_timeout>:
{
   1aa74:	b510      	push	{r4, lr}
   1aa76:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   1aa78:	f7fd fa7a 	bl	17f70 <next>
   1aa7c:	b148      	cbz	r0, 1aa92 <remove_timeout+0x1e>
   1aa7e:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   1aa80:	6903      	ldr	r3, [r0, #16]
   1aa82:	6941      	ldr	r1, [r0, #20]
   1aa84:	6920      	ldr	r0, [r4, #16]
   1aa86:	181b      	adds	r3, r3, r0
   1aa88:	6960      	ldr	r0, [r4, #20]
   1aa8a:	eb41 0100 	adc.w	r1, r1, r0
   1aa8e:	6113      	str	r3, [r2, #16]
   1aa90:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   1aa92:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   1aa94:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   1aa96:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1aa98:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1aa9a:	2300      	movs	r3, #0
   1aa9c:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   1aa9e:	6063      	str	r3, [r4, #4]
}
   1aaa0:	bd10      	pop	{r4, pc}

0001aaa2 <z_abort_timeout>:
{
   1aaa2:	b570      	push	{r4, r5, r6, lr}
   1aaa4:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   1aaa6:	2300      	movs	r3, #0
	__asm__ volatile(
   1aaa8:	f04f 0220 	mov.w	r2, #32
   1aaac:	f3ef 8611 	mrs	r6, BASEPRI
   1aab0:	f382 8812 	msr	BASEPRI_MAX, r2
   1aab4:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   1aab8:	f06f 0015 	mvn.w	r0, #21
   1aabc:	e004      	b.n	1aac8 <z_abort_timeout+0x26>
	__asm__ volatile(
   1aabe:	f386 8811 	msr	BASEPRI, r6
   1aac2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1aac6:	2301      	movs	r3, #1
   1aac8:	461d      	mov	r5, r3
   1aaca:	b93b      	cbnz	r3, 1aadc <z_abort_timeout+0x3a>
	return node->next != NULL;
   1aacc:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   1aace:	2b00      	cmp	r3, #0
   1aad0:	d0f5      	beq.n	1aabe <z_abort_timeout+0x1c>
			remove_timeout(to);
   1aad2:	4620      	mov	r0, r4
   1aad4:	f7ff ffce 	bl	1aa74 <remove_timeout>
			ret = 0;
   1aad8:	4628      	mov	r0, r5
   1aada:	e7f0      	b.n	1aabe <z_abort_timeout+0x1c>
}
   1aadc:	bd70      	pop	{r4, r5, r6, pc}

0001aade <z_get_next_timeout_expiry>:
{
   1aade:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   1aae0:	2300      	movs	r3, #0
	__asm__ volatile(
   1aae2:	f04f 0220 	mov.w	r2, #32
   1aae6:	f3ef 8411 	mrs	r4, BASEPRI
   1aaea:	f382 8812 	msr	BASEPRI_MAX, r2
   1aaee:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   1aaf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aaf6:	e006      	b.n	1ab06 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   1aaf8:	f7fd fa52 	bl	17fa0 <next_timeout>
	__asm__ volatile(
   1aafc:	f384 8811 	msr	BASEPRI, r4
   1ab00:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1ab04:	2301      	movs	r3, #1
   1ab06:	2b00      	cmp	r3, #0
   1ab08:	d0f6      	beq.n	1aaf8 <z_get_next_timeout_expiry+0x1a>
}
   1ab0a:	bd10      	pop	{r4, pc}

0001ab0c <z_set_timeout_expiry>:
{
   1ab0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ab0e:	4606      	mov	r6, r0
   1ab10:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   1ab12:	2300      	movs	r3, #0
	__asm__ volatile(
   1ab14:	f04f 0220 	mov.w	r2, #32
   1ab18:	f3ef 8511 	mrs	r5, BASEPRI
   1ab1c:	f382 8812 	msr	BASEPRI_MAX, r2
   1ab20:	f3bf 8f6f 	isb	sy
   1ab24:	e00a      	b.n	1ab3c <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   1ab26:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   1ab28:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1ab2c:	2801      	cmp	r0, #1
   1ab2e:	dd00      	ble.n	1ab32 <z_set_timeout_expiry+0x26>
   1ab30:	b97c      	cbnz	r4, 1ab52 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   1ab32:	f385 8811 	msr	BASEPRI, r5
   1ab36:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1ab3a:	2301      	movs	r3, #1
   1ab3c:	461c      	mov	r4, r3
   1ab3e:	b97b      	cbnz	r3, 1ab60 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   1ab40:	f7fd fa2e 	bl	17fa0 <next_timeout>
			      || (ticks <= next_to);
   1ab44:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1ab48:	d0ed      	beq.n	1ab26 <z_set_timeout_expiry+0x1a>
   1ab4a:	42b0      	cmp	r0, r6
   1ab4c:	dbec      	blt.n	1ab28 <z_set_timeout_expiry+0x1c>
   1ab4e:	2401      	movs	r4, #1
   1ab50:	e7ea      	b.n	1ab28 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1ab52:	4639      	mov	r1, r7
   1ab54:	42b0      	cmp	r0, r6
   1ab56:	bfa8      	it	ge
   1ab58:	4630      	movge	r0, r6
   1ab5a:	f7fa fbcd 	bl	152f8 <sys_clock_set_timeout>
   1ab5e:	e7e8      	b.n	1ab32 <z_set_timeout_expiry+0x26>
}
   1ab60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ab62 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1ab62:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1ab64:	f7fd fb2e 	bl	181c4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1ab68:	bd08      	pop	{r3, pc}

0001ab6a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   1ab6a:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   1ab6c:	f7fd fb2a 	bl	181c4 <sys_clock_tick_get>
}
   1ab70:	bd08      	pop	{r3, pc}

0001ab72 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1ab72:	b900      	cbnz	r0, 1ab76 <z_impl_k_busy_wait+0x4>
   1ab74:	4770      	bx	lr
{
   1ab76:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1ab78:	f7fe fb2c 	bl	191d4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1ab7c:	bd08      	pop	{r3, pc}

0001ab7e <z_reschedule_unlocked>:
{
   1ab7e:	b508      	push	{r3, lr}
	__asm__ volatile(
   1ab80:	f04f 0320 	mov.w	r3, #32
   1ab84:	f3ef 8011 	mrs	r0, BASEPRI
   1ab88:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab8c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1ab90:	f7ff fe5e 	bl	1a850 <z_reschedule_irqlock>
}
   1ab94:	bd08      	pop	{r3, pc}

0001ab96 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   1ab96:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   1ab98:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   1ab9a:	2300      	movs	r3, #0
   1ab9c:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
   1ab9e:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   1aba2:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   1aba4:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   1aba6:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1aba8:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   1abaa:	6343      	str	r3, [r0, #52]	; 0x34
}
   1abac:	4770      	bx	lr

0001abae <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1abae:	b510      	push	{r4, lr}
   1abb0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   1abb2:	f7ff ff76 	bl	1aaa2 <z_abort_timeout>

	if (inactive) {
   1abb6:	b960      	cbnz	r0, 1abd2 <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
   1abb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1abba:	b10b      	cbz	r3, 1abc0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1abbc:	4620      	mov	r0, r4
   1abbe:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1abc0:	f104 0018 	add.w	r0, r4, #24
   1abc4:	f7ff ff12 	bl	1a9ec <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1abc8:	b118      	cbz	r0, 1abd2 <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
   1abca:	f7ff fe78 	bl	1a8be <z_ready_thread>
			z_reschedule_unlocked();
   1abce:	f7ff ffd6 	bl	1ab7e <z_reschedule_unlocked>
		}
	}
}
   1abd2:	bd10      	pop	{r4, pc}

0001abd4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1abd4:	4770      	bx	lr
	...
